;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/dataexchange/api
  (:use)
  (:nicknames #:aws/dataexchange)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/dataexchange/api)
(common-lisp:progn
 (common-lisp:defclass dataexchange-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "dataexchange" :protocol
                        :rest-json))
 (common-lisp:export 'dataexchange-request))
(common-lisp:progn
 (common-lisp:define-condition dataexchange-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'dataexchange-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceLimitExceededException" . service-limit-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (dataexchange-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((export-revision-to-s3 :initarg :export-revision-to-s3
                         :type
                         (common-lisp:or
                          auto-export-revision-to-s3request-details
                          common-lisp:null)
                         :accessor %action-export-revision-to-s3 :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defun make-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key export-revision-to-s3)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-revision-to-s3))
      (common-lisp:list
       (common-lisp:cons "ExportRevisionToS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:deftype api-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass api-gateway-api-asset common-lisp:nil
                       ((stage :initarg :stage :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %api-gateway-api-asset-stage :initform
                         common-lisp:nil)
                        (protocol-type :initarg :protocol-type :type
                         (common-lisp:or protocol-type common-lisp:null)
                         :accessor %api-gateway-api-asset-protocol-type
                         :initform common-lisp:nil)
                        (api-specification-download-url-expires-at :initarg
                         :api-specification-download-url-expires-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %api-gateway-api-asset-api-specification-download-url-expires-at
                         :initform common-lisp:nil)
                        (api-specification-download-url :initarg
                         :api-specification-download-url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %api-gateway-api-asset-api-specification-download-url
                         :initform common-lisp:nil)
                        (api-name :initarg :api-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %api-gateway-api-asset-api-name :initform
                         common-lisp:nil)
                        (api-key :initarg :api-key :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %api-gateway-api-asset-api-key :initform
                         common-lisp:nil)
                        (api-id :initarg :api-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %api-gateway-api-asset-api-id :initform
                         common-lisp:nil)
                        (api-endpoint :initarg :api-endpoint :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %api-gateway-api-asset-api-endpoint :initform
                         common-lisp:nil)
                        (api-description :initarg :api-description :type
                         (common-lisp:or api-description common-lisp:null)
                         :accessor %api-gateway-api-asset-api-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'api-gateway-api-asset 'make-api-gateway-api-asset))
 (common-lisp:defun make-api-gateway-api-asset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stage protocol-type
                     api-specification-download-url-expires-at
                     api-specification-download-url api-name api-key api-id
                     api-endpoint api-description)
   (common-lisp:apply #'common-lisp:make-instance 'api-gateway-api-asset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          api-gateway-api-asset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          api-gateway-api-asset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-description))
      (common-lisp:list
       (common-lisp:cons "ApiDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-endpoint))
      (common-lisp:list
       (common-lisp:cons "ApiEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "ApiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "ApiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-name))
      (common-lisp:list
       (common-lisp:cons "ApiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-specification-download-url))
      (common-lisp:list
       (common-lisp:cons "ApiSpecificationDownloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-specification-download-url-expires-at))
      (common-lisp:list
       (common-lisp:cons "ApiSpecificationDownloadUrlExpiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-type))
      (common-lisp:list
       (common-lisp:cons "ProtocolType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "Stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          api-gateway-api-asset))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-destination-entry common-lisp:nil
                       ((key :initarg :key :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %asset-destination-entry-key :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %asset-destination-entry-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (asset-id :initarg :asset-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %asset-destination-entry-asset-id :initform
                         (common-lisp:error ":asset-id is required"))))
 (common-lisp:export
  (common-lisp:list 'asset-destination-entry 'make-asset-destination-entry))
 (common-lisp:defun make-asset-destination-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key bucket asset-id)
   (common-lisp:apply #'common-lisp:make-instance 'asset-destination-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-destination-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-destination-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "AssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-destination-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-details common-lisp:nil
                       ((lake-formation-data-permission-asset :initarg
                         :lake-formation-data-permission-asset :type
                         (common-lisp:or lake-formation-data-permission-asset
                                         common-lisp:null)
                         :accessor
                         %asset-details-lake-formation-data-permission-asset
                         :initform common-lisp:nil)
                        (s3data-access-asset :initarg :s3data-access-asset
                         :type
                         (common-lisp:or s3data-access-asset common-lisp:null)
                         :accessor %asset-details-s3data-access-asset :initform
                         common-lisp:nil)
                        (api-gateway-api-asset :initarg :api-gateway-api-asset
                         :type
                         (common-lisp:or api-gateway-api-asset
                                         common-lisp:null)
                         :accessor %asset-details-api-gateway-api-asset
                         :initform common-lisp:nil)
                        (redshift-data-share-asset :initarg
                         :redshift-data-share-asset :type
                         (common-lisp:or redshift-data-share-asset
                                         common-lisp:null)
                         :accessor %asset-details-redshift-data-share-asset
                         :initform common-lisp:nil)
                        (s3snapshot-asset :initarg :s3snapshot-asset :type
                         (common-lisp:or s3snapshot-asset common-lisp:null)
                         :accessor %asset-details-s3snapshot-asset :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'asset-details 'make-asset-details))
 (common-lisp:defun make-asset-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lake-formation-data-permission-asset
                     s3data-access-asset api-gateway-api-asset
                     redshift-data-share-asset s3snapshot-asset)
   (common-lisp:apply #'common-lisp:make-instance 'asset-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3snapshot-asset))
      (common-lisp:list
       (common-lisp:cons "S3SnapshotAsset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-data-share-asset))
      (common-lisp:list
       (common-lisp:cons "RedshiftDataShareAsset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-gateway-api-asset))
      (common-lisp:list
       (common-lisp:cons "ApiGatewayApiAsset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-access-asset))
      (common-lisp:list
       (common-lisp:cons "S3DataAccessAsset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-data-permission-asset))
      (common-lisp:list
       (common-lisp:cons "LakeFormationDataPermissionAsset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-entry common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %asset-entry-updated-at :initform
                         (common-lisp:error ":updated-at is required"))
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %asset-entry-source-id :initform common-lisp:nil)
                        (revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %asset-entry-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %asset-entry-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %asset-entry-id :initform
                         (common-lisp:error ":id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %asset-entry-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %asset-entry-created-at :initform
                         (common-lisp:error ":created-at is required"))
                        (asset-type :initarg :asset-type :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         %asset-entry-asset-type :initform
                         (common-lisp:error ":asset-type is required"))
                        (asset-details :initarg :asset-details :type
                         (common-lisp:or asset-details common-lisp:null)
                         :accessor %asset-entry-asset-details :initform
                         (common-lisp:error ":asset-details is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %asset-entry-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'asset-entry 'make-asset-entry))
 (common-lisp:defun make-asset-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at source-id revision-id name id
                     data-set-id created-at asset-type asset-details arn)
   (common-lisp:apply #'common-lisp:make-instance 'asset-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-details))
      (common-lisp:list
       (common-lisp:cons "AssetDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "AssetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-entry))
   common-lisp:nil))
(common-lisp:deftype asset-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-source-entry common-lisp:nil
                       ((key :initarg :key :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %asset-source-entry-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %asset-source-entry-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'asset-source-entry 'make-asset-source-entry))
 (common-lisp:defun make-asset-source-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'asset-source-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-source-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-source-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-source-entry))
   common-lisp:nil))
(common-lisp:deftype asset-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-export-revision-destination-entry common-lisp:nil
                       ((key-pattern :initarg :key-pattern :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %auto-export-revision-destination-entry-key-pattern
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %auto-export-revision-destination-entry-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'auto-export-revision-destination-entry
                    'make-auto-export-revision-destination-entry))
 (common-lisp:defun make-auto-export-revision-destination-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-pattern bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-export-revision-destination-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-export-revision-destination-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-export-revision-destination-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pattern))
      (common-lisp:list
       (common-lisp:cons "KeyPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-export-revision-destination-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-export-revision-to-s3request-details
                       common-lisp:nil
                       ((revision-destination :initarg :revision-destination
                         :type
                         (common-lisp:or auto-export-revision-destination-entry
                                         common-lisp:null)
                         :accessor
                         %auto-export-revision-to-s3request-details-revision-destination
                         :initform
                         (common-lisp:error
                          ":revision-destination is required"))
                        (encryption :initarg :encryption :type
                         (common-lisp:or export-server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %auto-export-revision-to-s3request-details-encryption
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-export-revision-to-s3request-details
                    'make-auto-export-revision-to-s3request-details))
 (common-lisp:defun make-auto-export-revision-to-s3request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-destination encryption)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-export-revision-to-s3request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-export-revision-to-s3request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-export-revision-to-s3request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revision-destination))
      (common-lisp:list
       (common-lisp:cons "RevisionDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-export-revision-to-s3request-details))
   common-lisp:nil))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cancel-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defun make-cancel-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (dataexchange-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-data-set-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %create-data-set-request-tags :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-data-set-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-data-set-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (asset-type :initarg :asset-type :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         %create-data-set-request-asset-type :initform
                         (common-lisp:error ":asset-type is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-set-request 'make-create-data-set-request))
 (common-lisp:defun make-create-data-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name description asset-type)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "AssetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-set-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-data-set-response-updated-at :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %create-data-set-response-tags :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-data-set-response-source-id :initform
                         common-lisp:nil)
                        (origin-details :initarg :origin-details :type
                         (common-lisp:or origin-details common-lisp:null)
                         :accessor %create-data-set-response-origin-details
                         :initform common-lisp:nil)
                        (origin :initarg :origin :type
                         (common-lisp:or origin common-lisp:null) :accessor
                         %create-data-set-response-origin :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-data-set-response-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-data-set-response-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-data-set-response-description
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-data-set-response-created-at :initform
                         common-lisp:nil)
                        (asset-type :initarg :asset-type :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         %create-data-set-response-asset-type :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-data-set-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-data-set-response 'make-create-data-set-response))
 (common-lisp:defun make-create-data-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at tags source-id origin-details
                     origin name id description created-at asset-type arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "AssetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-details))
      (common-lisp:list
       (common-lisp:cons "OriginDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-action-request common-lisp:nil
                       ((event :initarg :event :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %create-event-action-request-event :initform
                         (common-lisp:error ":event is required"))
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %create-event-action-request-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export
  (common-lisp:list 'create-event-action-request
                    'make-create-event-action-request))
 (common-lisp:defun make-create-event-action-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event action)
   (common-lisp:apply #'common-lisp:make-instance 'create-event-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-action-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-event-action-response-updated-at :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-event-action-response-id :initform
                         common-lisp:nil)
                        (event :initarg :event :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %create-event-action-response-event :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-event-action-response-created-at :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-event-action-response-arn :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %create-event-action-response-action :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-event-action-response
                    'make-create-event-action-response))
 (common-lisp:defun make-create-event-action-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at id event created-at arn
                     action)
   (common-lisp:apply #'common-lisp:make-instance 'create-event-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-request common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %create-job-request-type :initform
                         (common-lisp:error ":type is required"))
                        (details :initarg :details :type
                         (common-lisp:or request-details common-lisp:null)
                         :accessor %create-job-request-details :initform
                         (common-lisp:error ":details is required"))))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defun make-create-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type details)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-job-response-updated-at :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %create-job-response-type :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %create-job-response-state :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-job-response-id :initform common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or list-of-job-error common-lisp:null)
                         :accessor %create-job-response-errors :initform
                         common-lisp:nil)
                        (details :initarg :details :type
                         (common-lisp:or response-details common-lisp:null)
                         :accessor %create-job-response-details :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-job-response-created-at :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-job-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defun make-create-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at type state id errors details
                     created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-revision-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %create-revision-request-tags :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-revision-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or |__stringMin0Max16384|
                                         common-lisp:null)
                         :accessor %create-revision-request-comment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-revision-request 'make-create-revision-request))
 (common-lisp:defun make-create-revision-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags data-set-id comment)
   (common-lisp:apply #'common-lisp:make-instance 'create-revision-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-revision-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-revision-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-revision-response common-lisp:nil
                       ((revoked-at :initarg :revoked-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-revision-response-revoked-at :initform
                         common-lisp:nil)
                        (revoked :initarg :revoked :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %create-revision-response-revoked :initform
                         common-lisp:nil)
                        (revocation-comment :initarg :revocation-comment :type
                         (common-lisp:or |__stringMin10Max512|
                                         common-lisp:null)
                         :accessor %create-revision-response-revocation-comment
                         :initform common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-revision-response-updated-at :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %create-revision-response-tags :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-revision-response-source-id :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-revision-response-id :initform
                         common-lisp:nil)
                        (finalized :initarg :finalized :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %create-revision-response-finalized
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-revision-response-data-set-id :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-revision-response-created-at :initform
                         common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or |__stringMin0Max16384|
                                         common-lisp:null)
                         :accessor %create-revision-response-comment :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-revision-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-revision-response 'make-create-revision-response))
 (common-lisp:defun make-create-revision-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoked-at revoked revocation-comment
                     updated-at tags source-id id finalized data-set-id
                     created-at comment arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-revision-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-revision-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-revision-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finalized))
      (common-lisp:list
       (common-lisp:cons "Finalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-comment))
      (common-lisp:list
       (common-lisp:cons "RevocationComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked))
      (common-lisp:list
       (common-lisp:cons "Revoked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "RevokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-revision-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-s3data-access-from-s3bucket-request-details
                       common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-s3data-access-from-s3bucket-request-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-s3data-access-from-s3bucket-request-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-source :initarg :asset-source :type
                         (common-lisp:or s3data-access-asset-source-entry
                                         common-lisp:null)
                         :accessor
                         %create-s3data-access-from-s3bucket-request-details-asset-source
                         :initform
                         (common-lisp:error ":asset-source is required"))))
 (common-lisp:export
  (common-lisp:list 'create-s3data-access-from-s3bucket-request-details
                    'make-create-s3data-access-from-s3bucket-request-details))
 (common-lisp:defun make-create-s3data-access-from-s3bucket-request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id asset-source)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-s3data-access-from-s3bucket-request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-s3data-access-from-s3bucket-request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-s3data-access-from-s3bucket-request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-source))
      (common-lisp:list
       (common-lisp:cons "AssetSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-s3data-access-from-s3bucket-request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-s3data-access-from-s3bucket-response-details
                       common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-s3data-access-from-s3bucket-response-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-s3data-access-from-s3bucket-response-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-source :initarg :asset-source :type
                         (common-lisp:or s3data-access-asset-source-entry
                                         common-lisp:null)
                         :accessor
                         %create-s3data-access-from-s3bucket-response-details-asset-source
                         :initform
                         (common-lisp:error ":asset-source is required"))))
 (common-lisp:export
  (common-lisp:list 'create-s3data-access-from-s3bucket-response-details
                    'make-create-s3data-access-from-s3bucket-response-details))
 (common-lisp:defun make-create-s3data-access-from-s3bucket-response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id asset-source)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-s3data-access-from-s3bucket-response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-s3data-access-from-s3bucket-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-s3data-access-from-s3bucket-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-source))
      (common-lisp:list
       (common-lisp:cons "AssetSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-s3data-access-from-s3bucket-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-set-entry common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-set-entry-updated-at :initform
                         (common-lisp:error ":updated-at is required"))
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %data-set-entry-source-id :initform common-lisp:nil)
                        (origin-details :initarg :origin-details :type
                         (common-lisp:or origin-details common-lisp:null)
                         :accessor %data-set-entry-origin-details :initform
                         common-lisp:nil)
                        (origin :initarg :origin :type
                         (common-lisp:or origin common-lisp:null) :accessor
                         %data-set-entry-origin :initform
                         (common-lisp:error ":origin is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %data-set-entry-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %data-set-entry-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %data-set-entry-description :initform
                         (common-lisp:error ":description is required"))
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-set-entry-created-at :initform
                         (common-lisp:error ":created-at is required"))
                        (asset-type :initarg :asset-type :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         %data-set-entry-asset-type :initform
                         (common-lisp:error ":asset-type is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %data-set-entry-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'data-set-entry 'make-data-set-entry))
 (common-lisp:defun make-data-set-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at source-id origin-details
                     origin name id description created-at asset-type arn)
   (common-lisp:apply #'common-lisp:make-instance 'data-set-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "AssetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-details))
      (common-lisp:list
       (common-lisp:cons "OriginDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass database-lftag-policy common-lisp:nil
                       ((expression :initarg :expression :type
                         (common-lisp:or list-of-lftags common-lisp:null)
                         :accessor %database-lftag-policy-expression :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'database-lftag-policy 'make-database-lftag-policy))
 (common-lisp:defun make-database-lftag-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression)
   (common-lisp:apply #'common-lisp:make-instance 'database-lftag-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          database-lftag-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          database-lftag-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          database-lftag-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass database-lftag-policy-and-permissions common-lisp:nil
                       ((permissions :initarg :permissions :type
                         (common-lisp:or
                          list-of-database-lftag-policy-permissions
                          common-lisp:null)
                         :accessor
                         %database-lftag-policy-and-permissions-permissions
                         :initform
                         (common-lisp:error ":permissions is required"))
                        (expression :initarg :expression :type
                         (common-lisp:or list-of-lftags common-lisp:null)
                         :accessor
                         %database-lftag-policy-and-permissions-expression
                         :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'database-lftag-policy-and-permissions
                    'make-database-lftag-policy-and-permissions))
 (common-lisp:defun make-database-lftag-policy-and-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions expression)
   (common-lisp:apply #'common-lisp:make-instance
                      'database-lftag-policy-and-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          database-lftag-policy-and-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          database-lftag-policy-and-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          database-lftag-policy-and-permissions))
   common-lisp:nil))
(common-lisp:deftype database-lftag-policy-permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-asset-request common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-asset-request-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-asset-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-id :initarg :asset-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-asset-request-asset-id :initform
                         (common-lisp:error ":asset-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-asset-request 'make-delete-asset-request))
 (common-lisp:defun make-delete-asset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id asset-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-asset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-set-request common-lisp:nil
                       ((data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-data-set-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-data-set-request 'make-delete-data-set-request))
 (common-lisp:defun make-delete-data-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-action-request common-lisp:nil
                       ((event-action-id :initarg :event-action-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-event-action-request-event-action-id :initform
                         (common-lisp:error ":event-action-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-event-action-request
                    'make-delete-event-action-request))
 (common-lisp:defun make-delete-event-action-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-action-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-event-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-revision-request common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-revision-request-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-revision-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-revision-request 'make-delete-revision-request))
 (common-lisp:defun make-delete-revision-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-revision-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-revision-request))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass details common-lisp:nil
                       ((import-assets-from-s3job-error-details :initarg
                         :import-assets-from-s3job-error-details :type
                         (common-lisp:or list-of-asset-source-entry
                                         common-lisp:null)
                         :accessor
                         %details-import-assets-from-s3job-error-details
                         :initform common-lisp:nil)
                        (import-asset-from-signed-url-job-error-details
                         :initarg
                         :import-asset-from-signed-url-job-error-details :type
                         (common-lisp:or
                          import-asset-from-signed-url-job-error-details
                          common-lisp:null)
                         :accessor
                         %details-import-asset-from-signed-url-job-error-details
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'details 'make-details))
 (common-lisp:defun make-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key import-assets-from-s3job-error-details
                     import-asset-from-signed-url-job-error-details)
   (common-lisp:apply #'common-lisp:make-instance 'details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-asset-from-signed-url-job-error-details))
      (common-lisp:list
       (common-lisp:cons "ImportAssetFromSignedUrlJobErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-assets-from-s3job-error-details))
      (common-lisp:list
       (common-lisp:cons "ImportAssetsFromS3JobErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((revision-published :initarg :revision-published :type
                         (common-lisp:or revision-published common-lisp:null)
                         :accessor %event-revision-published :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defun make-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-published)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-published))
      (common-lisp:list
       (common-lisp:cons "RevisionPublished"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-action-entry common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %event-action-entry-updated-at :initform
                         (common-lisp:error ":updated-at is required"))
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %event-action-entry-id :initform
                         (common-lisp:error ":id is required"))
                        (event :initarg :event :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %event-action-entry-event :initform
                         (common-lisp:error ":event is required"))
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %event-action-entry-created-at :initform
                         (common-lisp:error ":created-at is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %event-action-entry-arn :initform
                         (common-lisp:error ":arn is required"))
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %event-action-entry-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export
  (common-lisp:list 'event-action-entry 'make-event-action-entry))
 (common-lisp:defun make-event-action-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at id event created-at arn
                     action)
   (common-lisp:apply #'common-lisp:make-instance 'event-action-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-action-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-action-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-action-entry))
   common-lisp:nil))
(common-lisp:deftype exception-cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-asset-to-signed-url-request-details
                       common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-asset-to-signed-url-request-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-asset-to-signed-url-request-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-id :initarg :asset-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-asset-to-signed-url-request-details-asset-id
                         :initform
                         (common-lisp:error ":asset-id is required"))))
 (common-lisp:export
  (common-lisp:list 'export-asset-to-signed-url-request-details
                    'make-export-asset-to-signed-url-request-details))
 (common-lisp:defun make-export-asset-to-signed-url-request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id asset-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-asset-to-signed-url-request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-asset-to-signed-url-request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-asset-to-signed-url-request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "AssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-asset-to-signed-url-request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-asset-to-signed-url-response-details
                       common-lisp:nil
                       ((signed-url-expires-at :initarg :signed-url-expires-at
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %export-asset-to-signed-url-response-details-signed-url-expires-at
                         :initform common-lisp:nil)
                        (signed-url :initarg :signed-url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %export-asset-to-signed-url-response-details-signed-url
                         :initform common-lisp:nil)
                        (revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-asset-to-signed-url-response-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-asset-to-signed-url-response-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-id :initarg :asset-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-asset-to-signed-url-response-details-asset-id
                         :initform
                         (common-lisp:error ":asset-id is required"))))
 (common-lisp:export
  (common-lisp:list 'export-asset-to-signed-url-response-details
                    'make-export-asset-to-signed-url-response-details))
 (common-lisp:defun make-export-asset-to-signed-url-response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signed-url-expires-at signed-url
                     revision-id data-set-id asset-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-asset-to-signed-url-response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-asset-to-signed-url-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-asset-to-signed-url-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "AssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed-url))
      (common-lisp:list
       (common-lisp:cons "SignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signed-url-expires-at))
      (common-lisp:list
       (common-lisp:cons "SignedUrlExpiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-asset-to-signed-url-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-assets-to-s3request-details common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-assets-to-s3request-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (encryption :initarg :encryption :type
                         (common-lisp:or export-server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %export-assets-to-s3request-details-encryption
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-assets-to-s3request-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-destinations :initarg :asset-destinations :type
                         (common-lisp:or list-of-asset-destination-entry
                                         common-lisp:null)
                         :accessor
                         %export-assets-to-s3request-details-asset-destinations
                         :initform
                         (common-lisp:error
                          ":asset-destinations is required"))))
 (common-lisp:export
  (common-lisp:list 'export-assets-to-s3request-details
                    'make-export-assets-to-s3request-details))
 (common-lisp:defun make-export-assets-to-s3request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id encryption data-set-id
                     asset-destinations)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-assets-to-s3request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-assets-to-s3request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-assets-to-s3request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-destinations))
      (common-lisp:list
       (common-lisp:cons "AssetDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-assets-to-s3request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-assets-to-s3response-details common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-assets-to-s3response-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (encryption :initarg :encryption :type
                         (common-lisp:or export-server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %export-assets-to-s3response-details-encryption
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-assets-to-s3response-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-destinations :initarg :asset-destinations :type
                         (common-lisp:or list-of-asset-destination-entry
                                         common-lisp:null)
                         :accessor
                         %export-assets-to-s3response-details-asset-destinations
                         :initform
                         (common-lisp:error
                          ":asset-destinations is required"))))
 (common-lisp:export
  (common-lisp:list 'export-assets-to-s3response-details
                    'make-export-assets-to-s3response-details))
 (common-lisp:defun make-export-assets-to-s3response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id encryption data-set-id
                     asset-destinations)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-assets-to-s3response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-assets-to-s3response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-assets-to-s3response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-destinations))
      (common-lisp:list
       (common-lisp:cons "AssetDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-assets-to-s3response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-revisions-to-s3request-details common-lisp:nil
                       ((revision-destinations :initarg :revision-destinations
                         :type
                         (common-lisp:or list-of-revision-destination-entry
                                         common-lisp:null)
                         :accessor
                         %export-revisions-to-s3request-details-revision-destinations
                         :initform
                         (common-lisp:error
                          ":revision-destinations is required"))
                        (encryption :initarg :encryption :type
                         (common-lisp:or export-server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %export-revisions-to-s3request-details-encryption
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-revisions-to-s3request-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'export-revisions-to-s3request-details
                    'make-export-revisions-to-s3request-details))
 (common-lisp:defun make-export-revisions-to-s3request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-destinations encryption
                     data-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-revisions-to-s3request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-revisions-to-s3request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-revisions-to-s3request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revision-destinations))
      (common-lisp:list
       (common-lisp:cons "RevisionDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-revisions-to-s3request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-revisions-to-s3response-details common-lisp:nil
                       ((event-action-arn :initarg :event-action-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %export-revisions-to-s3response-details-event-action-arn
                         :initform common-lisp:nil)
                        (revision-destinations :initarg :revision-destinations
                         :type
                         (common-lisp:or list-of-revision-destination-entry
                                         common-lisp:null)
                         :accessor
                         %export-revisions-to-s3response-details-revision-destinations
                         :initform
                         (common-lisp:error
                          ":revision-destinations is required"))
                        (encryption :initarg :encryption :type
                         (common-lisp:or export-server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %export-revisions-to-s3response-details-encryption
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-revisions-to-s3response-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'export-revisions-to-s3response-details
                    'make-export-revisions-to-s3response-details))
 (common-lisp:defun make-export-revisions-to-s3response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-action-arn revision-destinations
                     encryption data-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-revisions-to-s3response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-revisions-to-s3response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-revisions-to-s3response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revision-destinations))
      (common-lisp:list
       (common-lisp:cons "RevisionDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-action-arn))
      (common-lisp:list
       (common-lisp:cons "EventActionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-revisions-to-s3response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-server-side-encryption common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or server-side-encryption-types
                                         common-lisp:null)
                         :accessor %export-server-side-encryption-type
                         :initform (common-lisp:error ":type is required"))
                        (kms-key-arn :initarg :kms-key-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %export-server-side-encryption-kms-key-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-server-side-encryption
                    'make-export-server-side-encryption))
 (common-lisp:defun make-export-server-side-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type kms-key-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-server-side-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-server-side-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-server-side-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-server-side-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-request common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-asset-request-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-asset-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-id :initarg :asset-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-asset-request-asset-id :initform
                         (common-lisp:error ":asset-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-asset-request 'make-get-asset-request))
 (common-lisp:defun make-get-asset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id asset-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-asset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-asset-response-updated-at :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-asset-response-source-id :initform
                         common-lisp:nil)
                        (revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-asset-response-revision-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %get-asset-response-name :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-asset-response-id :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-asset-response-data-set-id :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-asset-response-created-at :initform
                         common-lisp:nil)
                        (asset-type :initarg :asset-type :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         %get-asset-response-asset-type :initform
                         common-lisp:nil)
                        (asset-details :initarg :asset-details :type
                         (common-lisp:or asset-details common-lisp:null)
                         :accessor %get-asset-response-asset-details :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-asset-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-asset-response 'make-get-asset-response))
 (common-lisp:defun make-get-asset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at source-id revision-id name id
                     data-set-id created-at asset-type asset-details arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-asset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-details))
      (common-lisp:list
       (common-lisp:cons "AssetDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "AssetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-set-request common-lisp:nil
                       ((data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-data-set-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-data-set-request 'make-get-data-set-request))
 (common-lisp:defun make-get-data-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-set-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-data-set-response-updated-at :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %get-data-set-response-tags :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-data-set-response-source-id :initform
                         common-lisp:nil)
                        (origin-details :initarg :origin-details :type
                         (common-lisp:or origin-details common-lisp:null)
                         :accessor %get-data-set-response-origin-details
                         :initform common-lisp:nil)
                        (origin :initarg :origin :type
                         (common-lisp:or origin common-lisp:null) :accessor
                         %get-data-set-response-origin :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %get-data-set-response-name :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-data-set-response-id :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-data-set-response-description :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-data-set-response-created-at :initform
                         common-lisp:nil)
                        (asset-type :initarg :asset-type :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         %get-data-set-response-asset-type :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-data-set-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-data-set-response 'make-get-data-set-response))
 (common-lisp:defun make-get-data-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at tags source-id origin-details
                     origin name id description created-at asset-type arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "AssetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-details))
      (common-lisp:list
       (common-lisp:cons "OriginDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-action-request common-lisp:nil
                       ((event-action-id :initarg :event-action-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-event-action-request-event-action-id :initform
                         (common-lisp:error ":event-action-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-event-action-request 'make-get-event-action-request))
 (common-lisp:defun make-get-event-action-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-action-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-action-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-event-action-response-updated-at :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-event-action-response-id :initform
                         common-lisp:nil)
                        (event :initarg :event :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %get-event-action-response-event :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-event-action-response-created-at :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-event-action-response-arn :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %get-event-action-response-action :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-event-action-response
                    'make-get-event-action-response))
 (common-lisp:defun make-get-event-action-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at id event created-at arn
                     action)
   (common-lisp:apply #'common-lisp:make-instance 'get-event-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defun make-get-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-job-response-updated-at :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %get-job-response-type :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %get-job-response-state :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-job-response-id :initform common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or list-of-job-error common-lisp:null)
                         :accessor %get-job-response-errors :initform
                         common-lisp:nil)
                        (details :initarg :details :type
                         (common-lisp:or response-details common-lisp:null)
                         :accessor %get-job-response-details :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-job-response-created-at :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-job-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-job-response 'make-get-job-response))
 (common-lisp:defun make-get-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at type state id errors details
                     created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-revision-request common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-revision-request-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-revision-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-revision-request 'make-get-revision-request))
 (common-lisp:defun make-get-revision-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-revision-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-revision-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-revision-response common-lisp:nil
                       ((revoked-at :initarg :revoked-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-revision-response-revoked-at :initform
                         common-lisp:nil)
                        (revoked :initarg :revoked :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %get-revision-response-revoked :initform
                         common-lisp:nil)
                        (revocation-comment :initarg :revocation-comment :type
                         (common-lisp:or |__stringMin10Max512|
                                         common-lisp:null)
                         :accessor %get-revision-response-revocation-comment
                         :initform common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-revision-response-updated-at :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %get-revision-response-tags :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-revision-response-source-id :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-revision-response-id :initform common-lisp:nil)
                        (finalized :initarg :finalized :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %get-revision-response-finalized :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-revision-response-data-set-id :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-revision-response-created-at :initform
                         common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or |__stringMin0Max16384|
                                         common-lisp:null)
                         :accessor %get-revision-response-comment :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-revision-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-revision-response 'make-get-revision-response))
 (common-lisp:defun make-get-revision-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoked-at revoked revocation-comment
                     updated-at tags source-id id finalized data-set-id
                     created-at comment arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-revision-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-revision-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-revision-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finalized))
      (common-lisp:list
       (common-lisp:cons "Finalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-comment))
      (common-lisp:list
       (common-lisp:cons "RevocationComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked))
      (common-lisp:list
       (common-lisp:cons "Revoked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "RevokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-revision-response))
   common-lisp:nil))
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-asset-from-api-gateway-api-request-details
                       common-lisp:nil
                       ((stage :initarg :stage :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-request-details-stage
                         :initform (common-lisp:error ":stage is required"))
                        (revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-request-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (protocol-type :initarg :protocol-type :type
                         (common-lisp:or protocol-type common-lisp:null)
                         :accessor
                         %import-asset-from-api-gateway-api-request-details-protocol-type
                         :initform
                         (common-lisp:error ":protocol-type is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-request-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (api-specification-md5hash :initarg
                         :api-specification-md5hash :type
                         (common-lisp:or
                          |__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093|
                          common-lisp:null)
                         :accessor
                         %import-asset-from-api-gateway-api-request-details-api-specification-md5hash
                         :initform
                         (common-lisp:error
                          ":api-specification-md5hash is required"))
                        (api-name :initarg :api-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-request-details-api-name
                         :initform (common-lisp:error ":api-name is required"))
                        (api-key :initarg :api-key :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-request-details-api-key
                         :initform common-lisp:nil)
                        (api-id :initarg :api-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-request-details-api-id
                         :initform (common-lisp:error ":api-id is required"))
                        (api-description :initarg :api-description :type
                         (common-lisp:or api-description common-lisp:null)
                         :accessor
                         %import-asset-from-api-gateway-api-request-details-api-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-asset-from-api-gateway-api-request-details
                    'make-import-asset-from-api-gateway-api-request-details))
 (common-lisp:defun make-import-asset-from-api-gateway-api-request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stage revision-id protocol-type
                     data-set-id api-specification-md5hash api-name api-key
                     api-id api-description)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-asset-from-api-gateway-api-request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-api-gateway-api-request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-api-gateway-api-request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-description))
      (common-lisp:list
       (common-lisp:cons "ApiDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "ApiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "ApiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-name))
      (common-lisp:list
       (common-lisp:cons "ApiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-specification-md5hash))
      (common-lisp:list
       (common-lisp:cons "ApiSpecificationMd5Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-type))
      (common-lisp:list
       (common-lisp:cons "ProtocolType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "Stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-api-gateway-api-request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-asset-from-api-gateway-api-response-details
                       common-lisp:nil
                       ((stage :initarg :stage :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-response-details-stage
                         :initform (common-lisp:error ":stage is required"))
                        (revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-response-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (protocol-type :initarg :protocol-type :type
                         (common-lisp:or protocol-type common-lisp:null)
                         :accessor
                         %import-asset-from-api-gateway-api-response-details-protocol-type
                         :initform
                         (common-lisp:error ":protocol-type is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-response-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (api-specification-upload-url-expires-at :initarg
                         :api-specification-upload-url-expires-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-response-details-api-specification-upload-url-expires-at
                         :initform
                         (common-lisp:error
                          ":api-specification-upload-url-expires-at is required"))
                        (api-specification-upload-url :initarg
                         :api-specification-upload-url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-response-details-api-specification-upload-url
                         :initform
                         (common-lisp:error
                          ":api-specification-upload-url is required"))
                        (api-specification-md5hash :initarg
                         :api-specification-md5hash :type
                         (common-lisp:or
                          |__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093|
                          common-lisp:null)
                         :accessor
                         %import-asset-from-api-gateway-api-response-details-api-specification-md5hash
                         :initform
                         (common-lisp:error
                          ":api-specification-md5hash is required"))
                        (api-name :initarg :api-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-response-details-api-name
                         :initform (common-lisp:error ":api-name is required"))
                        (api-key :initarg :api-key :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-response-details-api-key
                         :initform common-lisp:nil)
                        (api-id :initarg :api-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-api-gateway-api-response-details-api-id
                         :initform (common-lisp:error ":api-id is required"))
                        (api-description :initarg :api-description :type
                         (common-lisp:or api-description common-lisp:null)
                         :accessor
                         %import-asset-from-api-gateway-api-response-details-api-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-asset-from-api-gateway-api-response-details
                    'make-import-asset-from-api-gateway-api-response-details))
 (common-lisp:defun make-import-asset-from-api-gateway-api-response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stage revision-id protocol-type
                     data-set-id api-specification-upload-url-expires-at
                     api-specification-upload-url api-specification-md5hash
                     api-name api-key api-id api-description)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-asset-from-api-gateway-api-response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-api-gateway-api-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-api-gateway-api-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-description))
      (common-lisp:list
       (common-lisp:cons "ApiDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "ApiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "ApiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-name))
      (common-lisp:list
       (common-lisp:cons "ApiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-specification-md5hash))
      (common-lisp:list
       (common-lisp:cons "ApiSpecificationMd5Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-specification-upload-url))
      (common-lisp:list
       (common-lisp:cons "ApiSpecificationUploadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-specification-upload-url-expires-at))
      (common-lisp:list
       (common-lisp:cons "ApiSpecificationUploadUrlExpiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-type))
      (common-lisp:list
       (common-lisp:cons "ProtocolType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "Stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-api-gateway-api-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-asset-from-signed-url-job-error-details
                       common-lisp:nil
                       ((asset-name :initarg :asset-name :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %import-asset-from-signed-url-job-error-details-asset-name
                         :initform
                         (common-lisp:error ":asset-name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-asset-from-signed-url-job-error-details
                    'make-import-asset-from-signed-url-job-error-details))
 (common-lisp:defun make-import-asset-from-signed-url-job-error-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key asset-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-asset-from-signed-url-job-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-signed-url-job-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-signed-url-job-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "AssetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-signed-url-job-error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-asset-from-signed-url-request-details
                       common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-asset-from-signed-url-request-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (md5hash :initarg :md5hash :type
                         (common-lisp:or
                          |__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093|
                          common-lisp:null)
                         :accessor
                         %import-asset-from-signed-url-request-details-md5hash
                         :initform (common-lisp:error ":md5hash is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-asset-from-signed-url-request-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-name :initarg :asset-name :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %import-asset-from-signed-url-request-details-asset-name
                         :initform
                         (common-lisp:error ":asset-name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-asset-from-signed-url-request-details
                    'make-import-asset-from-signed-url-request-details))
 (common-lisp:defun make-import-asset-from-signed-url-request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id md5hash data-set-id
                     asset-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-asset-from-signed-url-request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-signed-url-request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-signed-url-request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "AssetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'md5hash))
      (common-lisp:list
       (common-lisp:cons "Md5Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-signed-url-request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-asset-from-signed-url-response-details
                       common-lisp:nil
                       ((signed-url-expires-at :initarg :signed-url-expires-at
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %import-asset-from-signed-url-response-details-signed-url-expires-at
                         :initform common-lisp:nil)
                        (signed-url :initarg :signed-url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-asset-from-signed-url-response-details-signed-url
                         :initform common-lisp:nil)
                        (revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-asset-from-signed-url-response-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (md5hash :initarg :md5hash :type
                         (common-lisp:or
                          |__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093|
                          common-lisp:null)
                         :accessor
                         %import-asset-from-signed-url-response-details-md5hash
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-asset-from-signed-url-response-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-name :initarg :asset-name :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %import-asset-from-signed-url-response-details-asset-name
                         :initform
                         (common-lisp:error ":asset-name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-asset-from-signed-url-response-details
                    'make-import-asset-from-signed-url-response-details))
 (common-lisp:defun make-import-asset-from-signed-url-response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signed-url-expires-at signed-url
                     revision-id md5hash data-set-id asset-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-asset-from-signed-url-response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-signed-url-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-signed-url-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "AssetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'md5hash))
      (common-lisp:list
       (common-lisp:cons "Md5Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed-url))
      (common-lisp:list
       (common-lisp:cons "SignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signed-url-expires-at))
      (common-lisp:list
       (common-lisp:cons "SignedUrlExpiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-asset-from-signed-url-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  import-assets-from-lake-formation-tag-policy-request-details common-lisp:nil
  ((revision-id :initarg :revision-id :type
    (common-lisp:or id common-lisp:null) :accessor
    %import-assets-from-lake-formation-tag-policy-request-details-revision-id
    :initform (common-lisp:error ":revision-id is required"))
   (data-set-id :initarg :data-set-id :type
    (common-lisp:or id common-lisp:null) :accessor
    %import-assets-from-lake-formation-tag-policy-request-details-data-set-id
    :initform (common-lisp:error ":data-set-id is required"))
   (role-arn :initarg :role-arn :type
    (common-lisp:or role-arn common-lisp:null) :accessor
    %import-assets-from-lake-formation-tag-policy-request-details-role-arn
    :initform (common-lisp:error ":role-arn is required"))
   (table :initarg :table :type
    (common-lisp:or table-lftag-policy-and-permissions common-lisp:null)
    :accessor
    %import-assets-from-lake-formation-tag-policy-request-details-table
    :initform common-lisp:nil)
   (database :initarg :database :type
    (common-lisp:or database-lftag-policy-and-permissions common-lisp:null)
    :accessor
    %import-assets-from-lake-formation-tag-policy-request-details-database
    :initform common-lisp:nil)
   (catalog-id :initarg :catalog-id :type
    (common-lisp:or aws-account-id common-lisp:null) :accessor
    %import-assets-from-lake-formation-tag-policy-request-details-catalog-id
    :initform (common-lisp:error ":catalog-id is required"))))
 (common-lisp:export
  (common-lisp:list
   'import-assets-from-lake-formation-tag-policy-request-details
   'make-import-assets-from-lake-formation-tag-policy-request-details))
 (common-lisp:defun make-import-assets-from-lake-formation-tag-policy-request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id role-arn table
                     database catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-assets-from-lake-formation-tag-policy-request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-lake-formation-tag-policy-request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-lake-formation-tag-policy-request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-lake-formation-tag-policy-request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  import-assets-from-lake-formation-tag-policy-response-details common-lisp:nil
  ((revision-id :initarg :revision-id :type
    (common-lisp:or id common-lisp:null) :accessor
    %import-assets-from-lake-formation-tag-policy-response-details-revision-id
    :initform (common-lisp:error ":revision-id is required"))
   (data-set-id :initarg :data-set-id :type
    (common-lisp:or id common-lisp:null) :accessor
    %import-assets-from-lake-formation-tag-policy-response-details-data-set-id
    :initform (common-lisp:error ":data-set-id is required"))
   (role-arn :initarg :role-arn :type
    (common-lisp:or role-arn common-lisp:null) :accessor
    %import-assets-from-lake-formation-tag-policy-response-details-role-arn
    :initform (common-lisp:error ":role-arn is required"))
   (table :initarg :table :type
    (common-lisp:or table-lftag-policy-and-permissions common-lisp:null)
    :accessor
    %import-assets-from-lake-formation-tag-policy-response-details-table
    :initform common-lisp:nil)
   (database :initarg :database :type
    (common-lisp:or database-lftag-policy-and-permissions common-lisp:null)
    :accessor
    %import-assets-from-lake-formation-tag-policy-response-details-database
    :initform common-lisp:nil)
   (catalog-id :initarg :catalog-id :type
    (common-lisp:or aws-account-id common-lisp:null) :accessor
    %import-assets-from-lake-formation-tag-policy-response-details-catalog-id
    :initform (common-lisp:error ":catalog-id is required"))))
 (common-lisp:export
  (common-lisp:list
   'import-assets-from-lake-formation-tag-policy-response-details
   'make-import-assets-from-lake-formation-tag-policy-response-details))
 (common-lisp:defun make-import-assets-from-lake-formation-tag-policy-response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id role-arn table
                     database catalog-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-assets-from-lake-formation-tag-policy-response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-lake-formation-tag-policy-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-lake-formation-tag-policy-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-lake-formation-tag-policy-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-assets-from-redshift-data-shares-request-details
                       common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-assets-from-redshift-data-shares-request-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-assets-from-redshift-data-shares-request-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-sources :initarg :asset-sources :type
                         (common-lisp:or
                          list-of-redshift-data-share-asset-source-entry
                          common-lisp:null)
                         :accessor
                         %import-assets-from-redshift-data-shares-request-details-asset-sources
                         :initform
                         (common-lisp:error ":asset-sources is required"))))
 (common-lisp:export
  (common-lisp:list 'import-assets-from-redshift-data-shares-request-details
                    'make-import-assets-from-redshift-data-shares-request-details))
 (common-lisp:defun make-import-assets-from-redshift-data-shares-request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id asset-sources)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-assets-from-redshift-data-shares-request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-redshift-data-shares-request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-redshift-data-shares-request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-sources))
      (common-lisp:list
       (common-lisp:cons "AssetSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-redshift-data-shares-request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-assets-from-redshift-data-shares-response-details
                       common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-assets-from-redshift-data-shares-response-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-assets-from-redshift-data-shares-response-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-sources :initarg :asset-sources :type
                         (common-lisp:or
                          list-of-redshift-data-share-asset-source-entry
                          common-lisp:null)
                         :accessor
                         %import-assets-from-redshift-data-shares-response-details-asset-sources
                         :initform
                         (common-lisp:error ":asset-sources is required"))))
 (common-lisp:export
  (common-lisp:list 'import-assets-from-redshift-data-shares-response-details
                    'make-import-assets-from-redshift-data-shares-response-details))
 (common-lisp:defun make-import-assets-from-redshift-data-shares-response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id asset-sources)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-assets-from-redshift-data-shares-response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-redshift-data-shares-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-redshift-data-shares-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-sources))
      (common-lisp:list
       (common-lisp:cons "AssetSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-redshift-data-shares-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-assets-from-s3request-details common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-assets-from-s3request-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-assets-from-s3request-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-sources :initarg :asset-sources :type
                         (common-lisp:or list-of-asset-source-entry
                                         common-lisp:null)
                         :accessor
                         %import-assets-from-s3request-details-asset-sources
                         :initform
                         (common-lisp:error ":asset-sources is required"))))
 (common-lisp:export
  (common-lisp:list 'import-assets-from-s3request-details
                    'make-import-assets-from-s3request-details))
 (common-lisp:defun make-import-assets-from-s3request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id asset-sources)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-assets-from-s3request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-s3request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-s3request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-sources))
      (common-lisp:list
       (common-lisp:cons "AssetSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-s3request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-assets-from-s3response-details common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-assets-from-s3response-details-revision-id
                         :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-assets-from-s3response-details-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-sources :initarg :asset-sources :type
                         (common-lisp:or list-of-asset-source-entry
                                         common-lisp:null)
                         :accessor
                         %import-assets-from-s3response-details-asset-sources
                         :initform
                         (common-lisp:error ":asset-sources is required"))))
 (common-lisp:export
  (common-lisp:list 'import-assets-from-s3response-details
                    'make-import-assets-from-s3response-details))
 (common-lisp:defun make-import-assets-from-s3response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id data-set-id asset-sources)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-assets-from-s3response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-s3response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-s3response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-sources))
      (common-lisp:list
       (common-lisp:cons "AssetSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-assets-from-s3response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (dataexchange-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass job-entry common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %job-entry-updated-at :initform
                         (common-lisp:error ":updated-at is required"))
                        (type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %job-entry-type :initform
                         (common-lisp:error ":type is required"))
                        (state :initarg :state :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %job-entry-state :initform
                         (common-lisp:error ":state is required"))
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %job-entry-id :initform
                         (common-lisp:error ":id is required"))
                        (errors :initarg :errors :type
                         (common-lisp:or list-of-job-error common-lisp:null)
                         :accessor %job-entry-errors :initform common-lisp:nil)
                        (details :initarg :details :type
                         (common-lisp:or response-details common-lisp:null)
                         :accessor %job-entry-details :initform
                         (common-lisp:error ":details is required"))
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %job-entry-created-at :initform
                         (common-lisp:error ":created-at is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %job-entry-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'job-entry 'make-job-entry))
 (common-lisp:defun make-job-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at type state id errors details
                     created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'job-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-error common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or job-error-resource-types
                                         common-lisp:null)
                         :accessor %job-error-resource-type :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-error-resource-id :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-error-message :initform
                         (common-lisp:error ":message is required"))
                        (limit-value :initarg :limit-value :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %job-error-limit-value :initform common-lisp:nil)
                        (limit-name :initarg :limit-name :type
                         (common-lisp:or job-error-limit-name common-lisp:null)
                         :accessor %job-error-limit-name :initform
                         common-lisp:nil)
                        (details :initarg :details :type
                         (common-lisp:or details common-lisp:null) :accessor
                         %job-error-details :initform common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or code common-lisp:null) :accessor
                         %job-error-code :initform
                         (common-lisp:error ":code is required"))))
 (common-lisp:export (common-lisp:list 'job-error 'make-job-error))
 (common-lisp:defun make-job-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-id message
                     limit-value limit-name details code)
   (common-lisp:apply #'common-lisp:make-instance 'job-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-name))
      (common-lisp:list
       (common-lisp:cons "LimitName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-value))
      (common-lisp:list
       (common-lisp:cons "LimitValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-error))
   common-lisp:nil))
(common-lisp:deftype job-error-limit-name () 'common-lisp:string)
(common-lisp:deftype job-error-resource-types () 'common-lisp:string)
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kms-key-to-grant common-lisp:nil
                       ((kms-key-arn :initarg :kms-key-arn :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %kms-key-to-grant-kms-key-arn :initform
                         (common-lisp:error ":kms-key-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'kms-key-to-grant 'make-kms-key-to-grant))
 (common-lisp:defun make-kms-key-to-grant
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-arn)
   (common-lisp:apply #'common-lisp:make-instance 'kms-key-to-grant
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kms-key-to-grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kms-key-to-grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kms-key-to-grant))
   common-lisp:nil))
(common-lisp:deftype lfpermission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lfresource-details common-lisp:nil
                       ((table :initarg :table :type
                         (common-lisp:or table-lftag-policy common-lisp:null)
                         :accessor %lfresource-details-table :initform
                         common-lisp:nil)
                        (database :initarg :database :type
                         (common-lisp:or database-lftag-policy
                                         common-lisp:null)
                         :accessor %lfresource-details-database :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lfresource-details 'make-lfresource-details))
 (common-lisp:defun make-lfresource-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table database)
   (common-lisp:apply #'common-lisp:make-instance 'lfresource-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lfresource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lfresource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lfresource-details))
   common-lisp:nil))
(common-lisp:deftype lfresource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lftag common-lisp:nil
                       ((tag-values :initarg :tag-values :type
                         (common-lisp:or list-of-lftag-values common-lisp:null)
                         :accessor %lftag-tag-values :initform
                         (common-lisp:error ":tag-values is required"))
                        (tag-key :initarg :tag-key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %lftag-tag-key :initform
                         (common-lisp:error ":tag-key is required"))))
 (common-lisp:export (common-lisp:list 'lftag 'make-lftag))
 (common-lisp:defun make-lftag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-values tag-key)
   (common-lisp:apply #'common-lisp:make-instance 'lftag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lftag-policy-details common-lisp:nil
                       ((resource-details :initarg :resource-details :type
                         (common-lisp:or lfresource-details common-lisp:null)
                         :accessor %lftag-policy-details-resource-details
                         :initform
                         (common-lisp:error ":resource-details is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or lfresource-type common-lisp:null)
                         :accessor %lftag-policy-details-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (catalog-id :initarg :catalog-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %lftag-policy-details-catalog-id :initform
                         (common-lisp:error ":catalog-id is required"))))
 (common-lisp:export
  (common-lisp:list 'lftag-policy-details 'make-lftag-policy-details))
 (common-lisp:defun make-lftag-policy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-details resource-type
                     catalog-id)
   (common-lisp:apply #'common-lisp:make-instance 'lftag-policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lftag-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lftag-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lftag-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lake-formation-data-permission-asset common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %lake-formation-data-permission-asset-role-arn
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or list-of-lfpermissions
                                         common-lisp:null)
                         :accessor
                         %lake-formation-data-permission-asset-permissions
                         :initform
                         (common-lisp:error ":permissions is required"))
                        (lake-formation-data-permission-type :initarg
                         :lake-formation-data-permission-type :type
                         (common-lisp:or lake-formation-data-permission-type
                                         common-lisp:null)
                         :accessor
                         %lake-formation-data-permission-asset-lake-formation-data-permission-type
                         :initform
                         (common-lisp:error
                          ":lake-formation-data-permission-type is required"))
                        (lake-formation-data-permission-details :initarg
                         :lake-formation-data-permission-details :type
                         (common-lisp:or lake-formation-data-permission-details
                                         common-lisp:null)
                         :accessor
                         %lake-formation-data-permission-asset-lake-formation-data-permission-details
                         :initform
                         (common-lisp:error
                          ":lake-formation-data-permission-details is required"))))
 (common-lisp:export
  (common-lisp:list 'lake-formation-data-permission-asset
                    'make-lake-formation-data-permission-asset))
 (common-lisp:defun make-lake-formation-data-permission-asset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn permissions
                     lake-formation-data-permission-type
                     lake-formation-data-permission-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'lake-formation-data-permission-asset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-data-permission-asset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-data-permission-asset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-data-permission-details))
      (common-lisp:list
       (common-lisp:cons "LakeFormationDataPermissionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-data-permission-type))
      (common-lisp:list
       (common-lisp:cons "LakeFormationDataPermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-data-permission-asset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lake-formation-data-permission-details common-lisp:nil
                       ((lftag-policy :initarg :lftag-policy :type
                         (common-lisp:or lftag-policy-details common-lisp:null)
                         :accessor
                         %lake-formation-data-permission-details-lftag-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lake-formation-data-permission-details
                    'make-lake-formation-data-permission-details))
 (common-lisp:defun make-lake-formation-data-permission-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lftag-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'lake-formation-data-permission-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-data-permission-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-data-permission-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lftag-policy))
      (common-lisp:list
       (common-lisp:cons "LFTagPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-data-permission-details))
   common-lisp:nil))
(common-lisp:deftype lake-formation-data-permission-type () 'common-lisp:string)
(common-lisp:deftype limit-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-data-set-revisions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-data-set-revisions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-data-set-revisions-request-max-results
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-data-set-revisions-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-data-set-revisions-request
                    'make-list-data-set-revisions-request))
 (common-lisp:defun make-list-data-set-revisions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results data-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-set-revisions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-revisions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-revisions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-revisions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-set-revisions-response common-lisp:nil
                       ((revisions :initarg :revisions :type
                         (common-lisp:or list-of-revision-entry
                                         common-lisp:null)
                         :accessor %list-data-set-revisions-response-revisions
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-data-set-revisions-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-set-revisions-response
                    'make-list-data-set-revisions-response))
 (common-lisp:defun make-list-data-set-revisions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revisions next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-set-revisions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-revisions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-revisions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revisions))
      (common-lisp:list
       (common-lisp:cons "Revisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-set-revisions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sets-request common-lisp:nil
                       ((origin :initarg :origin :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-data-sets-request-origin :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-data-sets-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-data-sets-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-sets-request 'make-list-data-sets-request))
 (common-lisp:defun make-list-data-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-data-sets-response-next-token :initform
                         common-lisp:nil)
                        (data-sets :initarg :data-sets :type
                         (common-lisp:or list-of-data-set-entry
                                         common-lisp:null)
                         :accessor %list-data-sets-response-data-sets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-sets-response 'make-list-data-sets-response))
 (common-lisp:defun make-list-data-sets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token data-sets)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sets))
      (common-lisp:list
       (common-lisp:cons "DataSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-actions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-event-actions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-event-actions-request-max-results
                         :initform common-lisp:nil)
                        (event-source-id :initarg :event-source-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-event-actions-request-event-source-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-actions-request
                    'make-list-event-actions-request))
 (common-lisp:defun make-list-event-actions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results event-source-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-actions-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-event-actions-response-next-token :initform
                         common-lisp:nil)
                        (event-actions :initarg :event-actions :type
                         (common-lisp:or list-of-event-action-entry
                                         common-lisp:null)
                         :accessor %list-event-actions-response-event-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-actions-response
                    'make-list-event-actions-response))
 (common-lisp:defun make-list-event-actions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token event-actions)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-actions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-actions))
      (common-lisp:list
       (common-lisp:cons "EventActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-request common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-jobs-request-revision-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-jobs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-jobs-request-max-results :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-jobs-request-data-set-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defun make-list-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id next-token max-results
                     data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-jobs-response-next-token :initform
                         common-lisp:nil)
                        (jobs :initarg :jobs :type
                         (common-lisp:or list-of-job-entry common-lisp:null)
                         :accessor %list-jobs-response-jobs :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-response 'make-list-jobs-response))
 (common-lisp:defun make-list-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-asset-destination-entry ()
   '(trivial-types:proper-list asset-destination-entry))
 (common-lisp:defun |make-list-of-asset-destination-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-destination-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-asset-entry ()
   '(trivial-types:proper-list asset-entry))
 (common-lisp:defun |make-list-of-asset-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-asset-source-entry ()
   '(trivial-types:proper-list asset-source-entry))
 (common-lisp:defun |make-list-of-asset-source-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-source-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-data-set-entry ()
   '(trivial-types:proper-list data-set-entry))
 (common-lisp:defun |make-list-of-data-set-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-database-lftag-policy-permissions ()
   '(trivial-types:proper-list database-lftag-policy-permission))
 (common-lisp:defun |make-list-of-database-lftag-policy-permissions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            database-lftag-policy-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-event-action-entry ()
   '(trivial-types:proper-list event-action-entry))
 (common-lisp:defun |make-list-of-event-action-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-action-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-job-entry ()
   '(trivial-types:proper-list job-entry))
 (common-lisp:defun |make-list-of-job-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-job-error ()
   '(trivial-types:proper-list job-error))
 (common-lisp:defun |make-list-of-job-error|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-kms-keys-to-grant ()
   '(trivial-types:proper-list kms-key-to-grant))
 (common-lisp:defun |make-list-of-kms-keys-to-grant|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kms-key-to-grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-lfpermissions ()
   '(trivial-types:proper-list lfpermission))
 (common-lisp:defun |make-list-of-lfpermissions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lfpermission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-lftag-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-list-of-lftag-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-lftags () '(trivial-types:proper-list lftag))
 (common-lisp:defun |make-list-of-lftags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lftag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-redshift-data-share-asset-source-entry ()
   '(trivial-types:proper-list redshift-data-share-asset-source-entry))
 (common-lisp:defun |make-list-of-redshift-data-share-asset-source-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            redshift-data-share-asset-source-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-revision-destination-entry ()
   '(trivial-types:proper-list revision-destination-entry))
 (common-lisp:defun |make-list-of-revision-destination-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            revision-destination-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-revision-entry ()
   '(trivial-types:proper-list revision-entry))
 (common-lisp:defun |make-list-of-revision-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list revision-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-table-tag-policy-lfpermissions ()
   '(trivial-types:proper-list table-tag-policy-lfpermission))
 (common-lisp:defun |make-list-of-table-tag-policy-lfpermissions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            table-tag-policy-lfpermission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-string ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-list-of-string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-revision-assets-request common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-revision-assets-request-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-revision-assets-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-revision-assets-request-max-results
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-revision-assets-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-revision-assets-request
                    'make-list-revision-assets-request))
 (common-lisp:defun make-list-revision-assets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id next-token max-results
                     data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-revision-assets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-revision-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-revision-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-revision-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-revision-assets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-revision-assets-response-next-token :initform
                         common-lisp:nil)
                        (assets :initarg :assets :type
                         (common-lisp:or list-of-asset-entry common-lisp:null)
                         :accessor %list-revision-assets-response-assets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-revision-assets-response
                    'make-list-revision-assets-response))
 (common-lisp:defun make-list-revision-assets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token assets)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-revision-assets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-revision-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-revision-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "Assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-revision-assets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %list-tags-for-resource-response-tags
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype map-of-string () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-string| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype origin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass origin-details common-lisp:nil
                       ((product-id :initarg :product-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %origin-details-product-id :initform
                         (common-lisp:error ":product-id is required"))))
 (common-lisp:export (common-lisp:list 'origin-details 'make-origin-details))
 (common-lisp:defun make-origin-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-id)
   (common-lisp:apply #'common-lisp:make-instance 'origin-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin-details))
   common-lisp:nil))
(common-lisp:deftype protocol-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-data-share-asset common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %redshift-data-share-asset-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'redshift-data-share-asset
                    'make-redshift-data-share-asset))
 (common-lisp:defun make-redshift-data-share-asset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-data-share-asset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-share-asset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-share-asset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-share-asset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-data-share-asset-source-entry common-lisp:nil
                       ((data-share-arn :initarg :data-share-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %redshift-data-share-asset-source-entry-data-share-arn
                         :initform
                         (common-lisp:error ":data-share-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'redshift-data-share-asset-source-entry
                    'make-redshift-data-share-asset-source-entry))
 (common-lisp:defun make-redshift-data-share-asset-source-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-share-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'redshift-data-share-asset-source-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-share-asset-source-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-share-asset-source-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-share-arn))
      (common-lisp:list
       (common-lisp:cons "DataShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-share-asset-source-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass request-details common-lisp:nil
                       ((import-assets-from-lake-formation-tag-policy :initarg
                         :import-assets-from-lake-formation-tag-policy :type
                         (common-lisp:or
                          import-assets-from-lake-formation-tag-policy-request-details
                          common-lisp:null)
                         :accessor
                         %request-details-import-assets-from-lake-formation-tag-policy
                         :initform common-lisp:nil)
                        (create-s3data-access-from-s3bucket :initarg
                         :create-s3data-access-from-s3bucket :type
                         (common-lisp:or
                          create-s3data-access-from-s3bucket-request-details
                          common-lisp:null)
                         :accessor
                         %request-details-create-s3data-access-from-s3bucket
                         :initform common-lisp:nil)
                        (import-asset-from-api-gateway-api :initarg
                         :import-asset-from-api-gateway-api :type
                         (common-lisp:or
                          import-asset-from-api-gateway-api-request-details
                          common-lisp:null)
                         :accessor
                         %request-details-import-asset-from-api-gateway-api
                         :initform common-lisp:nil)
                        (import-assets-from-redshift-data-shares :initarg
                         :import-assets-from-redshift-data-shares :type
                         (common-lisp:or
                          import-assets-from-redshift-data-shares-request-details
                          common-lisp:null)
                         :accessor
                         %request-details-import-assets-from-redshift-data-shares
                         :initform common-lisp:nil)
                        (import-assets-from-s3 :initarg :import-assets-from-s3
                         :type
                         (common-lisp:or import-assets-from-s3request-details
                                         common-lisp:null)
                         :accessor %request-details-import-assets-from-s3
                         :initform common-lisp:nil)
                        (import-asset-from-signed-url :initarg
                         :import-asset-from-signed-url :type
                         (common-lisp:or
                          import-asset-from-signed-url-request-details
                          common-lisp:null)
                         :accessor
                         %request-details-import-asset-from-signed-url
                         :initform common-lisp:nil)
                        (export-revisions-to-s3 :initarg
                         :export-revisions-to-s3 :type
                         (common-lisp:or export-revisions-to-s3request-details
                                         common-lisp:null)
                         :accessor %request-details-export-revisions-to-s3
                         :initform common-lisp:nil)
                        (export-assets-to-s3 :initarg :export-assets-to-s3
                         :type
                         (common-lisp:or export-assets-to-s3request-details
                                         common-lisp:null)
                         :accessor %request-details-export-assets-to-s3
                         :initform common-lisp:nil)
                        (export-asset-to-signed-url :initarg
                         :export-asset-to-signed-url :type
                         (common-lisp:or
                          export-asset-to-signed-url-request-details
                          common-lisp:null)
                         :accessor %request-details-export-asset-to-signed-url
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'request-details 'make-request-details))
 (common-lisp:defun make-request-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     import-assets-from-lake-formation-tag-policy
                     create-s3data-access-from-s3bucket
                     import-asset-from-api-gateway-api
                     import-assets-from-redshift-data-shares
                     import-assets-from-s3 import-asset-from-signed-url
                     export-revisions-to-s3 export-assets-to-s3
                     export-asset-to-signed-url)
   (common-lisp:apply #'common-lisp:make-instance 'request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-asset-to-signed-url))
      (common-lisp:list
       (common-lisp:cons "ExportAssetToSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-assets-to-s3))
      (common-lisp:list
       (common-lisp:cons "ExportAssetsToS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-revisions-to-s3))
      (common-lisp:list
       (common-lisp:cons "ExportRevisionsToS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-asset-from-signed-url))
      (common-lisp:list
       (common-lisp:cons "ImportAssetFromSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-assets-from-s3))
      (common-lisp:list
       (common-lisp:cons "ImportAssetsFromS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-assets-from-redshift-data-shares))
      (common-lisp:list
       (common-lisp:cons "ImportAssetsFromRedshiftDataShares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-asset-from-api-gateway-api))
      (common-lisp:list
       (common-lisp:cons "ImportAssetFromApiGatewayApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-s3data-access-from-s3bucket))
      (common-lisp:list
       (common-lisp:cons "CreateS3DataAccessFromS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-assets-from-lake-formation-tag-policy))
      (common-lisp:list
       (common-lisp:cons "ImportAssetsFromLakeFormationTagPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (dataexchange-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass response-details common-lisp:nil
                       ((import-assets-from-lake-formation-tag-policy :initarg
                         :import-assets-from-lake-formation-tag-policy :type
                         (common-lisp:or
                          import-assets-from-lake-formation-tag-policy-response-details
                          common-lisp:null)
                         :accessor
                         %response-details-import-assets-from-lake-formation-tag-policy
                         :initform common-lisp:nil)
                        (create-s3data-access-from-s3bucket :initarg
                         :create-s3data-access-from-s3bucket :type
                         (common-lisp:or
                          create-s3data-access-from-s3bucket-response-details
                          common-lisp:null)
                         :accessor
                         %response-details-create-s3data-access-from-s3bucket
                         :initform common-lisp:nil)
                        (import-asset-from-api-gateway-api :initarg
                         :import-asset-from-api-gateway-api :type
                         (common-lisp:or
                          import-asset-from-api-gateway-api-response-details
                          common-lisp:null)
                         :accessor
                         %response-details-import-asset-from-api-gateway-api
                         :initform common-lisp:nil)
                        (import-assets-from-redshift-data-shares :initarg
                         :import-assets-from-redshift-data-shares :type
                         (common-lisp:or
                          import-assets-from-redshift-data-shares-response-details
                          common-lisp:null)
                         :accessor
                         %response-details-import-assets-from-redshift-data-shares
                         :initform common-lisp:nil)
                        (import-assets-from-s3 :initarg :import-assets-from-s3
                         :type
                         (common-lisp:or import-assets-from-s3response-details
                                         common-lisp:null)
                         :accessor %response-details-import-assets-from-s3
                         :initform common-lisp:nil)
                        (import-asset-from-signed-url :initarg
                         :import-asset-from-signed-url :type
                         (common-lisp:or
                          import-asset-from-signed-url-response-details
                          common-lisp:null)
                         :accessor
                         %response-details-import-asset-from-signed-url
                         :initform common-lisp:nil)
                        (export-revisions-to-s3 :initarg
                         :export-revisions-to-s3 :type
                         (common-lisp:or export-revisions-to-s3response-details
                                         common-lisp:null)
                         :accessor %response-details-export-revisions-to-s3
                         :initform common-lisp:nil)
                        (export-assets-to-s3 :initarg :export-assets-to-s3
                         :type
                         (common-lisp:or export-assets-to-s3response-details
                                         common-lisp:null)
                         :accessor %response-details-export-assets-to-s3
                         :initform common-lisp:nil)
                        (export-asset-to-signed-url :initarg
                         :export-asset-to-signed-url :type
                         (common-lisp:or
                          export-asset-to-signed-url-response-details
                          common-lisp:null)
                         :accessor %response-details-export-asset-to-signed-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'response-details 'make-response-details))
 (common-lisp:defun make-response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     import-assets-from-lake-formation-tag-policy
                     create-s3data-access-from-s3bucket
                     import-asset-from-api-gateway-api
                     import-assets-from-redshift-data-shares
                     import-assets-from-s3 import-asset-from-signed-url
                     export-revisions-to-s3 export-assets-to-s3
                     export-asset-to-signed-url)
   (common-lisp:apply #'common-lisp:make-instance 'response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-asset-to-signed-url))
      (common-lisp:list
       (common-lisp:cons "ExportAssetToSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-assets-to-s3))
      (common-lisp:list
       (common-lisp:cons "ExportAssetsToS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-revisions-to-s3))
      (common-lisp:list
       (common-lisp:cons "ExportRevisionsToS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-asset-from-signed-url))
      (common-lisp:list
       (common-lisp:cons "ImportAssetFromSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-assets-from-s3))
      (common-lisp:list
       (common-lisp:cons "ImportAssetsFromS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-assets-from-redshift-data-shares))
      (common-lisp:list
       (common-lisp:cons "ImportAssetsFromRedshiftDataShares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-asset-from-api-gateway-api))
      (common-lisp:list
       (common-lisp:cons "ImportAssetFromApiGatewayApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-s3data-access-from-s3bucket))
      (common-lisp:list
       (common-lisp:cons "CreateS3DataAccessFromS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-assets-from-lake-formation-tag-policy))
      (common-lisp:list
       (common-lisp:cons "ImportAssetsFromLakeFormationTagPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revision-destination-entry common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %revision-destination-entry-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (key-pattern :initarg :key-pattern :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %revision-destination-entry-key-pattern :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %revision-destination-entry-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'revision-destination-entry
                    'make-revision-destination-entry))
 (common-lisp:defun make-revision-destination-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id key-pattern bucket)
   (common-lisp:apply #'common-lisp:make-instance 'revision-destination-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revision-destination-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revision-destination-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pattern))
      (common-lisp:list
       (common-lisp:cons "KeyPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revision-destination-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revision-entry common-lisp:nil
                       ((revoked-at :initarg :revoked-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %revision-entry-revoked-at :initform common-lisp:nil)
                        (revoked :initarg :revoked :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %revision-entry-revoked :initform
                         common-lisp:nil)
                        (revocation-comment :initarg :revocation-comment :type
                         (common-lisp:or |__stringMin10Max512|
                                         common-lisp:null)
                         :accessor %revision-entry-revocation-comment :initform
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %revision-entry-updated-at :initform
                         (common-lisp:error ":updated-at is required"))
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %revision-entry-source-id :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %revision-entry-id :initform
                         (common-lisp:error ":id is required"))
                        (finalized :initarg :finalized :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %revision-entry-finalized :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %revision-entry-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %revision-entry-created-at :initform
                         (common-lisp:error ":created-at is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or |__stringMin0Max16384|
                                         common-lisp:null)
                         :accessor %revision-entry-comment :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %revision-entry-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'revision-entry 'make-revision-entry))
 (common-lisp:defun make-revision-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoked-at revoked revocation-comment
                     updated-at source-id id finalized data-set-id created-at
                     comment arn)
   (common-lisp:apply #'common-lisp:make-instance 'revision-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finalized))
      (common-lisp:list
       (common-lisp:cons "Finalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-comment))
      (common-lisp:list
       (common-lisp:cons "RevocationComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked))
      (common-lisp:list
       (common-lisp:cons "Revoked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "RevokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revision-published common-lisp:nil
                       ((data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %revision-published-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'revision-published 'make-revision-published))
 (common-lisp:defun make-revision-published
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'revision-published
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision-published))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision-published))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision-published))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-revision-request common-lisp:nil
                       ((revocation-comment :initarg :revocation-comment :type
                         (common-lisp:or |__stringMin10Max512|
                                         common-lisp:null)
                         :accessor %revoke-revision-request-revocation-comment
                         :initform
                         (common-lisp:error ":revocation-comment is required"))
                        (revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %revoke-revision-request-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %revoke-revision-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'revoke-revision-request 'make-revoke-revision-request))
 (common-lisp:defun make-revoke-revision-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revocation-comment revision-id
                     data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-revision-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-revision-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-comment))
      (common-lisp:list
       (common-lisp:cons "RevocationComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-revision-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-revision-response common-lisp:nil
                       ((revoked-at :initarg :revoked-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %revoke-revision-response-revoked-at :initform
                         common-lisp:nil)
                        (revoked :initarg :revoked :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %revoke-revision-response-revoked :initform
                         common-lisp:nil)
                        (revocation-comment :initarg :revocation-comment :type
                         (common-lisp:or |__stringMin10Max512|
                                         common-lisp:null)
                         :accessor %revoke-revision-response-revocation-comment
                         :initform common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %revoke-revision-response-updated-at :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %revoke-revision-response-source-id :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %revoke-revision-response-id :initform
                         common-lisp:nil)
                        (finalized :initarg :finalized :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %revoke-revision-response-finalized
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %revoke-revision-response-data-set-id :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %revoke-revision-response-created-at :initform
                         common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or |__stringMin0Max16384|
                                         common-lisp:null)
                         :accessor %revoke-revision-response-comment :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %revoke-revision-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'revoke-revision-response 'make-revoke-revision-response))
 (common-lisp:defun make-revoke-revision-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoked-at revoked revocation-comment
                     updated-at source-id id finalized data-set-id created-at
                     comment arn)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-revision-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-revision-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-revision-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finalized))
      (common-lisp:list
       (common-lisp:cons "Finalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-comment))
      (common-lisp:list
       (common-lisp:cons "RevocationComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked))
      (common-lisp:list
       (common-lisp:cons "Revoked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "RevokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-revision-response))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3data-access-asset common-lisp:nil
                       ((kms-keys-to-grant :initarg :kms-keys-to-grant :type
                         (common-lisp:or list-of-kms-keys-to-grant
                                         common-lisp:null)
                         :accessor %s3data-access-asset-kms-keys-to-grant
                         :initform common-lisp:nil)
                        (s3access-point-arn :initarg :s3access-point-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3data-access-asset-s3access-point-arn :initform
                         common-lisp:nil)
                        (s3access-point-alias :initarg :s3access-point-alias
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %s3data-access-asset-s3access-point-alias
                         :initform common-lisp:nil)
                        (keys :initarg :keys :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %s3data-access-asset-keys :initform
                         common-lisp:nil)
                        (key-prefixes :initarg :key-prefixes :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %s3data-access-asset-key-prefixes :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3data-access-asset-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 's3data-access-asset 'make-s3data-access-asset))
 (common-lisp:defun make-s3data-access-asset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-keys-to-grant s3access-point-arn
                     s3access-point-alias keys key-prefixes bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3data-access-asset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3data-access-asset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3data-access-asset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefixes))
      (common-lisp:list
       (common-lisp:cons "KeyPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3access-point-alias))
      (common-lisp:list
       (common-lisp:cons "S3AccessPointAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3access-point-arn))
      (common-lisp:list
       (common-lisp:cons "S3AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-keys-to-grant))
      (common-lisp:list
       (common-lisp:cons "KmsKeysToGrant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3data-access-asset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3data-access-asset-source-entry common-lisp:nil
                       ((kms-keys-to-grant :initarg :kms-keys-to-grant :type
                         (common-lisp:or list-of-kms-keys-to-grant
                                         common-lisp:null)
                         :accessor
                         %s3data-access-asset-source-entry-kms-keys-to-grant
                         :initform common-lisp:nil)
                        (keys :initarg :keys :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %s3data-access-asset-source-entry-keys
                         :initform common-lisp:nil)
                        (key-prefixes :initarg :key-prefixes :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         %s3data-access-asset-source-entry-key-prefixes
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3data-access-asset-source-entry-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 's3data-access-asset-source-entry
                    'make-s3data-access-asset-source-entry))
 (common-lisp:defun make-s3data-access-asset-source-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-keys-to-grant keys key-prefixes
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      's3data-access-asset-source-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3data-access-asset-source-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3data-access-asset-source-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefixes))
      (common-lisp:list
       (common-lisp:cons "KeyPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-keys-to-grant))
      (common-lisp:list
       (common-lisp:cons "KmsKeysToGrant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3data-access-asset-source-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3snapshot-asset common-lisp:nil
                       ((size :initarg :size :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %s3snapshot-asset-size :initform
                         (common-lisp:error ":size is required"))))
 (common-lisp:export
  (common-lisp:list 's3snapshot-asset 'make-s3snapshot-asset))
 (common-lisp:defun make-s3snapshot-asset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size)
   (common-lisp:apply #'common-lisp:make-instance 's3snapshot-asset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3snapshot-asset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3snapshot-asset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3snapshot-asset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-api-asset-request common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %send-api-asset-request-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (path :initarg :path :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %send-api-asset-request-path :initform
                         common-lisp:nil)
                        (method :initarg :method :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %send-api-asset-request-method :initform
                         common-lisp:nil)
                        (request-headers :initarg :request-headers :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %send-api-asset-request-request-headers
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %send-api-asset-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-id :initarg :asset-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %send-api-asset-request-asset-id :initform
                         (common-lisp:error ":asset-id is required"))
                        (query-string-parameters :initarg
                         :query-string-parameters :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor
                         %send-api-asset-request-query-string-parameters
                         :initform common-lisp:nil)
                        (body :initarg :body :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %send-api-asset-request-body :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-api-asset-request 'make-send-api-asset-request))
 (common-lisp:defun make-send-api-asset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id path method request-headers
                     data-set-id asset-id query-string-parameters body)
   (common-lisp:apply #'common-lisp:make-instance 'send-api-asset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-api-asset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:cons "x-amzn-dataexchange-asset-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:cons "x-amzn-dataexchange-data-set-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:cons "x-amzn-dataexchange-http-method"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:cons "x-amzn-dataexchange-path"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:cons "x-amzn-dataexchange-revision-id"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input
                                'request-headers)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'request-headers) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                                aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A"
                                                           "x-amzn-dataexchange-header-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-api-asset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-api-asset-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'body))))
(common-lisp:progn
 (common-lisp:defclass send-api-asset-response common-lisp:nil
                       ((response-headers :initarg :response-headers :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %send-api-asset-response-response-headers
                         :initform common-lisp:nil)
                        (body :initarg :body :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %send-api-asset-response-body :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-api-asset-response 'make-send-api-asset-response))
 (common-lisp:defun make-send-api-asset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-headers body)
   (common-lisp:apply #'common-lisp:make-instance 'send-api-asset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-api-asset-response))
   (common-lisp:append
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input
                                'response-headers)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'response-headers) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                                 aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" ""
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-api-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-api-asset-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'body))))
(common-lisp:deftype server-side-encryption-types () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-limit-exceeded-exception
     (dataexchange-error)
     ((limit-name :initarg :limit-name :initform common-lisp:nil :reader
       service-limit-exceeded-exception-limit-name)
      (limit-value :initarg :limit-value :initform common-lisp:nil :reader
       service-limit-exceeded-exception-limit-value)
      (message :initarg :message :initform common-lisp:nil :reader
       service-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-limit-exceeded-exception
                    'service-limit-exceeded-exception-limit-name
                    'service-limit-exceeded-exception-limit-value
                    'service-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass start-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-job-request 'make-start-job-request))
 (common-lisp:defun make-start-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-job-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-job-response 'make-start-job-response))
 (common-lisp:defun make-start-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'start-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-job-response))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-lftag-policy common-lisp:nil
                       ((expression :initarg :expression :type
                         (common-lisp:or list-of-lftags common-lisp:null)
                         :accessor %table-lftag-policy-expression :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'table-lftag-policy 'make-table-lftag-policy))
 (common-lisp:defun make-table-lftag-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression)
   (common-lisp:apply #'common-lisp:make-instance 'table-lftag-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-lftag-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-lftag-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-lftag-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-lftag-policy-and-permissions common-lisp:nil
                       ((permissions :initarg :permissions :type
                         (common-lisp:or list-of-table-tag-policy-lfpermissions
                                         common-lisp:null)
                         :accessor
                         %table-lftag-policy-and-permissions-permissions
                         :initform
                         (common-lisp:error ":permissions is required"))
                        (expression :initarg :expression :type
                         (common-lisp:or list-of-lftags common-lisp:null)
                         :accessor
                         %table-lftag-policy-and-permissions-expression
                         :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'table-lftag-policy-and-permissions
                    'make-table-lftag-policy-and-permissions))
 (common-lisp:defun make-table-lftag-policy-and-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions expression)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-lftag-policy-and-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-lftag-policy-and-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-lftag-policy-and-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-lftag-policy-and-permissions))
   common-lisp:nil))
(common-lisp:deftype table-tag-policy-lfpermission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or map-of-string common-lisp:null)
                         :accessor %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (dataexchange-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-asset-request common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-asset-request-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %update-asset-request-name :initform
                         (common-lisp:error ":name is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-asset-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (asset-id :initarg :asset-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-asset-request-asset-id :initform
                         (common-lisp:error ":asset-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-asset-request 'make-update-asset-request))
 (common-lisp:defun make-update-asset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id name data-set-id asset-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-asset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-asset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-asset-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-asset-response-updated-at :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-asset-response-source-id :initform
                         common-lisp:nil)
                        (revision-id :initarg :revision-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-asset-response-revision-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %update-asset-response-name :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-asset-response-id :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-asset-response-data-set-id :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-asset-response-created-at :initform
                         common-lisp:nil)
                        (asset-type :initarg :asset-type :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         %update-asset-response-asset-type :initform
                         common-lisp:nil)
                        (asset-details :initarg :asset-details :type
                         (common-lisp:or asset-details common-lisp:null)
                         :accessor %update-asset-response-asset-details
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-asset-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-asset-response 'make-update-asset-response))
 (common-lisp:defun make-update-asset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at source-id revision-id name id
                     data-set-id created-at asset-type asset-details arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-asset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-details))
      (common-lisp:list
       (common-lisp:cons "AssetDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "AssetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-set-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-data-set-request-name :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-data-set-request-description
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-data-set-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-set-request 'make-update-data-set-request))
 (common-lisp:defun make-update-data-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name description data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-set-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-data-set-response-updated-at :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-data-set-response-source-id :initform
                         common-lisp:nil)
                        (origin-details :initarg :origin-details :type
                         (common-lisp:or origin-details common-lisp:null)
                         :accessor %update-data-set-response-origin-details
                         :initform common-lisp:nil)
                        (origin :initarg :origin :type
                         (common-lisp:or origin common-lisp:null) :accessor
                         %update-data-set-response-origin :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-data-set-response-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-data-set-response-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-data-set-response-description
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-data-set-response-created-at :initform
                         common-lisp:nil)
                        (asset-type :initarg :asset-type :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         %update-data-set-response-asset-type :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-data-set-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-data-set-response 'make-update-data-set-response))
 (common-lisp:defun make-update-data-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at source-id origin-details
                     origin name id description created-at asset-type arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "AssetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-details))
      (common-lisp:list
       (common-lisp:cons "OriginDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-action-request common-lisp:nil
                       ((event-action-id :initarg :event-action-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-event-action-request-event-action-id :initform
                         (common-lisp:error ":event-action-id is required"))
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %update-event-action-request-action :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-event-action-request
                    'make-update-event-action-request))
 (common-lisp:defun make-update-event-action-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-action-id action)
   (common-lisp:apply #'common-lisp:make-instance 'update-event-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-action-response common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-event-action-response-updated-at :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-event-action-response-id :initform
                         common-lisp:nil)
                        (event :initarg :event :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %update-event-action-response-event :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-event-action-response-created-at :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-event-action-response-arn :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %update-event-action-response-action :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-event-action-response
                    'make-update-event-action-response))
 (common-lisp:defun make-update-event-action-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at id event created-at arn
                     action)
   (common-lisp:apply #'common-lisp:make-instance 'update-event-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-revision-request common-lisp:nil
                       ((revision-id :initarg :revision-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-revision-request-revision-id :initform
                         (common-lisp:error ":revision-id is required"))
                        (finalized :initarg :finalized :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %update-revision-request-finalized :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-revision-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or |__stringMin0Max16384|
                                         common-lisp:null)
                         :accessor %update-revision-request-comment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-revision-request 'make-update-revision-request))
 (common-lisp:defun make-update-revision-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id finalized data-set-id
                     comment)
   (common-lisp:apply #'common-lisp:make-instance 'update-revision-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-revision-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finalized))
      (common-lisp:list
       (common-lisp:cons "Finalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-revision-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-revision-response common-lisp:nil
                       ((revoked-at :initarg :revoked-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-revision-response-revoked-at :initform
                         common-lisp:nil)
                        (revoked :initarg :revoked :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %update-revision-response-revoked :initform
                         common-lisp:nil)
                        (revocation-comment :initarg :revocation-comment :type
                         (common-lisp:or |__stringMin10Max512|
                                         common-lisp:null)
                         :accessor %update-revision-response-revocation-comment
                         :initform common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-revision-response-updated-at :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-revision-response-source-id :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-revision-response-id :initform
                         common-lisp:nil)
                        (finalized :initarg :finalized :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %update-revision-response-finalized
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-revision-response-data-set-id :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-revision-response-created-at :initform
                         common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or |__stringMin0Max16384|
                                         common-lisp:null)
                         :accessor %update-revision-response-comment :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-revision-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-revision-response 'make-update-revision-response))
 (common-lisp:defun make-update-revision-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoked-at revoked revocation-comment
                     updated-at source-id id finalized data-set-id created-at
                     comment arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-revision-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-revision-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-revision-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finalized))
      (common-lisp:list
       (common-lisp:cons "Finalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-comment))
      (common-lisp:list
       (common-lisp:cons "RevocationComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked))
      (common-lisp:list
       (common-lisp:cons "Revoked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "RevokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-revision-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (dataexchange-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (exception-cause :initarg :exception-cause :initform common-lisp:nil
       :reader validation-exception-exception-cause)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-exception-cause)))
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0| () 'common-lisp:double-float)
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMin0Max16384| () 'common-lisp:string)
(common-lisp:deftype |__stringMin10Max512| () 'common-lisp:string)
(common-lisp:deftype |__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093| ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelJob"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun create-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-type description name tags)
   (common-lisp:declare
    (common-lisp:ignorable asset-type description name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/data-sets"
                                                        "CreateDataSet"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-set))
(common-lisp:progn
 (common-lisp:defun create-event-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action event)
   (common-lisp:declare (common-lisp:ignorable action event))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-event-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/event-actions"
                                                        "CreateEventAction"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-event-action))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key details type)
   (common-lisp:declare (common-lisp:ignorable details type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/jobs" "CreateJob"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key comment data-set-id tags)
   (common-lisp:declare (common-lisp:ignorable comment data-set-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-revision-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "CreateRevision"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-revision))
(common-lisp:progn
 (common-lisp:defun delete-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id data-set-id revision-id)
   (common-lisp:declare
    (common-lisp:ignorable asset-id data-set-id revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions/~A/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "DeleteAsset"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-asset))
(common-lisp:progn
 (common-lisp:defun delete-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id)
   (common-lisp:declare (common-lisp:ignorable data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "DeleteDataSet"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-set))
(common-lisp:progn
 (common-lisp:defun delete-event-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-action-id)
   (common-lisp:declare (common-lisp:ignorable event-action-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/event-actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'event-action-id))))
                                                        "DeleteEventAction"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-action))
(common-lisp:progn
 (common-lisp:defun delete-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id revision-id)
   (common-lisp:declare (common-lisp:ignorable data-set-id revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-revision-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision-id))))
                                                        "DeleteRevision"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-revision))
(common-lisp:progn
 (common-lisp:defun get-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id data-set-id revision-id)
   (common-lisp:declare
    (common-lisp:ignorable asset-id data-set-id revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions/~A/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "GetAsset"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-asset))
(common-lisp:progn
 (common-lisp:defun get-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id)
   (common-lisp:declare (common-lisp:ignorable data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "GetDataSet"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-set))
(common-lisp:progn
 (common-lisp:defun get-event-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-action-id)
   (common-lisp:declare (common-lisp:ignorable event-action-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/event-actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'event-action-id))))
                                                        "GetEventAction"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-action))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetJob" "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id revision-id)
   (common-lisp:declare (common-lisp:ignorable data-set-id revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-revision-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision-id))))
                                                        "GetRevision"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-revision))
(common-lisp:progn
 (common-lisp:defun list-data-set-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-set-revisions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "ListDataSetRevisions"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-set-revisions))
(common-lisp:progn
 (common-lisp:defun list-data-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token origin)
   (common-lisp:declare (common-lisp:ignorable max-results next-token origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/data-sets"
                                                        "ListDataSets"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sets))
(common-lisp:progn
 (common-lisp:defun list-event-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-source-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable event-source-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/event-actions"
                                                        "ListEventActions"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-actions))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id max-results next-token
                     revision-id)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id max-results next-token revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/jobs" "ListJobs"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-revision-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id max-results next-token
                     revision-id)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id max-results next-token revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-revision-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions/~A/assets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision-id))))
                                                        "ListRevisionAssets"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-revision-assets))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun revoke-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id revision-id
                     revocation-comment)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id revision-id revocation-comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-revision-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions/~A/revoke"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision-id))))
                                                        "RevokeRevision"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'revoke-revision))
(common-lisp:progn
 (common-lisp:defun send-api-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key body query-string-parameters asset-id
                     data-set-id request-headers method path revision-id)
   (common-lisp:declare
    (common-lisp:ignorable body query-string-parameters asset-id data-set-id
     request-headers method path revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-api-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json "/v1"
                                                        "SendApiAsset"
                                                        "2017-07-25"))
      "string" common-lisp:nil *error-map*)))
 (common-lisp:export 'send-api-asset))
(common-lisp:progn
 (common-lisp:defun start-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "StartJob"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id data-set-id name revision-id)
   (common-lisp:declare
    (common-lisp:ignorable asset-id data-set-id name revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions/~A/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "UpdateAsset"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-asset))
(common-lisp:progn
 (common-lisp:defun update-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id description name)
   (common-lisp:declare (common-lisp:ignorable data-set-id description name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "UpdateDataSet"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-set))
(common-lisp:progn
 (common-lisp:defun update-event-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action event-action-id)
   (common-lisp:declare (common-lisp:ignorable action event-action-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-event-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/event-actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'event-action-id))))
                                                        "UpdateEventAction"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-action))
(common-lisp:progn
 (common-lisp:defun update-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key comment data-set-id finalized
                     revision-id)
   (common-lisp:declare
    (common-lisp:ignorable comment data-set-id finalized revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-revision-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dataexchange-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/data-sets/~A/revisions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision-id))))
                                                        "UpdateRevision"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-revision))
