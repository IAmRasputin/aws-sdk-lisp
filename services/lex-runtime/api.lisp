;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lex-runtime/api
  (:use)
  (:nicknames #:aws/lex-runtime)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lex-runtime/api)
(common-lisp:progn
 (common-lisp:defclass lex-runtime-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "lex-runtime" :protocol
                        :rest-json))
 (common-lisp:export 'lex-runtime-request))
(common-lisp:progn
 (common-lisp:define-condition lex-runtime-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lex-runtime-error))
(common-lisp:defvar *error-map*
  '(("BadGatewayException" . bad-gateway-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("DependencyFailedException" . dependency-failed-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("LoopDetectedException" . loop-detected-exception)
    ("NotAcceptableException" . not-acceptable-exception)
    ("NotFoundException" . not-found-exception)
    ("RequestTimeoutException" . request-timeout-exception)
    ("UnsupportedMediaTypeException" . unsupported-media-type-exception)))
(common-lisp:deftype accept () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass active-context common-lisp:nil
                       ((parameters :initarg :|parameters| :type
                         (common-lisp:or active-context-parameters-map
                                         common-lisp:null)
                         :accessor %active-context-parameters :initform
                         (common-lisp:error ":parameters is required"))
                        (time-to-live :initarg :|timeToLive| :type
                         (common-lisp:or active-context-time-to-live
                                         common-lisp:null)
                         :accessor %active-context-time-to-live :initform
                         (common-lisp:error ":timetolive is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or active-context-name common-lisp:null)
                         :accessor %active-context-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'active-context 'make-active-context))
 (common-lisp:defun make-active-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters time-to-live name)
   (common-lisp:apply #'common-lisp:make-instance 'active-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input active-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input active-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "timeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input active-context))
   common-lisp:nil))
(common-lisp:deftype active-context-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype active-context-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-active-context-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass active-context-time-to-live common-lisp:nil
                       ((turns-to-live :initarg :|turnsToLive| :type
                         (common-lisp:or active-context-turns-to-live
                                         common-lisp:null)
                         :accessor %active-context-time-to-live-turns-to-live
                         :initform common-lisp:nil)
                        (time-to-live-in-seconds :initarg
                         :|timeToLiveInSeconds| :type
                         (common-lisp:or active-context-time-to-live-in-seconds
                                         common-lisp:null)
                         :accessor
                         %active-context-time-to-live-time-to-live-in-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'active-context-time-to-live
                    'make-active-context-time-to-live))
 (common-lisp:defun make-active-context-time-to-live
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key turns-to-live time-to-live-in-seconds)
   (common-lisp:apply #'common-lisp:make-instance 'active-context-time-to-live
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-context-time-to-live))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-context-time-to-live))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-to-live-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeToLiveInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'turns-to-live))
      (common-lisp:list
       (common-lisp:cons "turnsToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-context-time-to-live))
   common-lisp:nil))
(common-lisp:deftype active-context-time-to-live-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype active-context-turns-to-live () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype active-contexts-list ()
   '(trivial-types:proper-list active-context))
 (common-lisp:defun |make-active-contexts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list active-context))
   aws-sdk/generator/shape::members))
(common-lisp:deftype active-contexts-string () 'common-lisp:string)
(common-lisp:deftype attributes-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-gateway-exception
     (lex-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-gateway-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-gateway-exception 'bad-gateway-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (lex-runtime-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype blob-stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype bot-alias () 'common-lisp:string)
(common-lisp:deftype bot-name () 'common-lisp:string)
(common-lisp:deftype bot-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass button common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or button-value-string-with-length
                                         common-lisp:null)
                         :accessor %button-value :initform
                         (common-lisp:error ":value is required"))
                        (text :initarg :|text| :type
                         (common-lisp:or button-text-string-with-length
                                         common-lisp:null)
                         :accessor %button-text :initform
                         (common-lisp:error ":text is required"))))
 (common-lisp:export (common-lisp:list 'button 'make-button))
 (common-lisp:defun make-button
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value text)
   (common-lisp:apply #'common-lisp:make-instance 'button
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input button))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input button))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input button))
   common-lisp:nil))
(common-lisp:deftype button-text-string-with-length () 'common-lisp:string)
(common-lisp:deftype button-value-string-with-length () 'common-lisp:string)
(common-lisp:deftype confirmation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (lex-runtime-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-session-request common-lisp:nil
                       ((user-id :initarg :|userId| :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %delete-session-request-user-id :initform
                         (common-lisp:error ":userid is required"))
                        (bot-alias :initarg :|botAlias| :type
                         (common-lisp:or bot-alias common-lisp:null) :accessor
                         %delete-session-request-bot-alias :initform
                         (common-lisp:error ":botalias is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %delete-session-request-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-session-request 'make-delete-session-request))
 (common-lisp:defun make-delete-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-id bot-alias bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-session-response common-lisp:nil
                       ((session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-session-response-session-id :initform
                         common-lisp:nil)
                        (user-id :initarg :|userId| :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %delete-session-response-user-id :initform
                         common-lisp:nil)
                        (bot-alias :initarg :|botAlias| :type
                         (common-lisp:or bot-alias common-lisp:null) :accessor
                         %delete-session-response-bot-alias :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %delete-session-response-bot-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-session-response 'make-delete-session-response))
 (common-lisp:defun make-delete-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id user-id bot-alias bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias))
      (common-lisp:list
       (common-lisp:cons "botAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-failed-exception
     (lex-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       dependency-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'dependency-failed-exception
                    'dependency-failed-exception-message)))
(common-lisp:progn
 (common-lisp:defclass dialog-action common-lisp:nil
                       ((message-format :initarg :|messageFormat| :type
                         (common-lisp:or message-format-type common-lisp:null)
                         :accessor %dialog-action-message-format :initform
                         common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %dialog-action-message :initform common-lisp:nil)
                        (fulfillment-state :initarg :|fulfillmentState| :type
                         (common-lisp:or fulfillment-state common-lisp:null)
                         :accessor %dialog-action-fulfillment-state :initform
                         common-lisp:nil)
                        (slot-to-elicit :initarg :|slotToElicit| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dialog-action-slot-to-elicit :initform
                         common-lisp:nil)
                        (slots :initarg :|slots| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %dialog-action-slots :initform common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %dialog-action-intent-name :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or dialog-action-type common-lisp:null)
                         :accessor %dialog-action-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'dialog-action 'make-dialog-action))
 (common-lisp:defun make-dialog-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-format message fulfillment-state
                     slot-to-elicit slots intent-name type)
   (common-lisp:apply #'common-lisp:make-instance 'dialog-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dialog-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dialog-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-to-elicit))
      (common-lisp:list
       (common-lisp:cons "slotToElicit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fulfillment-state))
      (common-lisp:list
       (common-lisp:cons "fulfillmentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-format))
      (common-lisp:list
       (common-lisp:cons "messageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dialog-action))
   common-lisp:nil))
(common-lisp:deftype dialog-action-type () 'common-lisp:string)
(common-lisp:deftype dialog-state () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype fulfillment-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass generic-attachment common-lisp:nil
                       ((buttons :initarg :|buttons| :type
                         (common-lisp:or |listOfButtons| common-lisp:null)
                         :accessor %generic-attachment-buttons :initform
                         common-lisp:nil)
                        (image-url :initarg :|imageUrl| :type
                         (common-lisp:or string-url-with-length
                                         common-lisp:null)
                         :accessor %generic-attachment-image-url :initform
                         common-lisp:nil)
                        (attachment-link-url :initarg :|attachmentLinkUrl|
                         :type
                         (common-lisp:or string-url-with-length
                                         common-lisp:null)
                         :accessor %generic-attachment-attachment-link-url
                         :initform common-lisp:nil)
                        (sub-title :initarg :|subTitle| :type
                         (common-lisp:or string-with-length common-lisp:null)
                         :accessor %generic-attachment-sub-title :initform
                         common-lisp:nil)
                        (title :initarg :|title| :type
                         (common-lisp:or string-with-length common-lisp:null)
                         :accessor %generic-attachment-title :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'generic-attachment 'make-generic-attachment))
 (common-lisp:defun make-generic-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key buttons image-url attachment-link-url
                     sub-title title)
   (common-lisp:apply #'common-lisp:make-instance 'generic-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generic-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generic-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-title))
      (common-lisp:list
       (common-lisp:cons "subTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-link-url))
      (common-lisp:list
       (common-lisp:cons "attachmentLinkUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "imageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buttons))
      (common-lisp:list
       (common-lisp:cons "buttons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generic-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-request common-lisp:nil
                       ((checkpoint-label-filter :initarg
                         :|checkpointLabelFilter| :type
                         (common-lisp:or intent-summary-checkpoint-label
                                         common-lisp:null)
                         :accessor %get-session-request-checkpoint-label-filter
                         :initform common-lisp:nil)
                        (user-id :initarg :|userId| :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %get-session-request-user-id :initform
                         (common-lisp:error ":userid is required"))
                        (bot-alias :initarg :|botAlias| :type
                         (common-lisp:or bot-alias common-lisp:null) :accessor
                         %get-session-request-bot-alias :initform
                         (common-lisp:error ":botalias is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-session-request-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-session-request 'make-get-session-request))
 (common-lisp:defun make-get-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checkpoint-label-filter user-id bot-alias
                     bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-response common-lisp:nil
                       ((active-contexts :initarg :|activeContexts| :type
                         (common-lisp:or active-contexts-list common-lisp:null)
                         :accessor %get-session-response-active-contexts
                         :initform common-lisp:nil)
                        (dialog-action :initarg :|dialogAction| :type
                         (common-lisp:or dialog-action common-lisp:null)
                         :accessor %get-session-response-dialog-action
                         :initform common-lisp:nil)
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-session-response-session-id :initform
                         common-lisp:nil)
                        (session-attributes :initarg :|sessionAttributes| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %get-session-response-session-attributes :initform
                         common-lisp:nil)
                        (recent-intent-summary-view :initarg
                         :|recentIntentSummaryView| :type
                         (common-lisp:or intent-summary-list common-lisp:null)
                         :accessor
                         %get-session-response-recent-intent-summary-view
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-session-response 'make-get-session-response))
 (common-lisp:defun make-get-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active-contexts dialog-action session-id
                     session-attributes recent-intent-summary-view)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recent-intent-summary-view))
      (common-lisp:list
       (common-lisp:cons "recentIntentSummaryView"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:list
       (common-lisp:cons "sessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-action))
      (common-lisp:list
       (common-lisp:cons "dialogAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:list
       (common-lisp:cons "activeContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-response))
   common-lisp:nil))
(common-lisp:deftype http-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass intent-confidence common-lisp:nil
                       ((score :initarg :|score| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %intent-confidence-score :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'intent-confidence 'make-intent-confidence))
 (common-lisp:defun make-intent-confidence
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key score)
   (common-lisp:apply #'common-lisp:make-instance 'intent-confidence
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-confidence))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-confidence))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-confidence))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intent-list ()
   '(trivial-types:proper-list predicted-intent))
 (common-lisp:defun |make-intent-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list predicted-intent))
   aws-sdk/generator/shape::members))
(common-lisp:deftype intent-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass intent-summary common-lisp:nil
                       ((slot-to-elicit :initarg :|slotToElicit| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %intent-summary-slot-to-elicit :initform
                         common-lisp:nil)
                        (fulfillment-state :initarg :|fulfillmentState| :type
                         (common-lisp:or fulfillment-state common-lisp:null)
                         :accessor %intent-summary-fulfillment-state :initform
                         common-lisp:nil)
                        (dialog-action-type :initarg :|dialogActionType| :type
                         (common-lisp:or dialog-action-type common-lisp:null)
                         :accessor %intent-summary-dialog-action-type :initform
                         (common-lisp:error ":dialogactiontype is required"))
                        (confirmation-status :initarg :|confirmationStatus|
                         :type
                         (common-lisp:or confirmation-status common-lisp:null)
                         :accessor %intent-summary-confirmation-status
                         :initform common-lisp:nil)
                        (slots :initarg :|slots| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %intent-summary-slots :initform common-lisp:nil)
                        (checkpoint-label :initarg :|checkpointLabel| :type
                         (common-lisp:or intent-summary-checkpoint-label
                                         common-lisp:null)
                         :accessor %intent-summary-checkpoint-label :initform
                         common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %intent-summary-intent-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'intent-summary 'make-intent-summary))
 (common-lisp:defun make-intent-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-to-elicit fulfillment-state
                     dialog-action-type confirmation-status slots
                     checkpoint-label intent-name)
   (common-lisp:apply #'common-lisp:make-instance 'intent-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-label))
      (common-lisp:list
       (common-lisp:cons "checkpointLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-status))
      (common-lisp:list
       (common-lisp:cons "confirmationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-action-type))
      (common-lisp:list
       (common-lisp:cons "dialogActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fulfillment-state))
      (common-lisp:list
       (common-lisp:cons "fulfillmentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-to-elicit))
      (common-lisp:list
       (common-lisp:cons "slotToElicit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-summary))
   common-lisp:nil))
(common-lisp:deftype intent-summary-checkpoint-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype intent-summary-list ()
   '(trivial-types:proper-list intent-summary))
 (common-lisp:defun |make-intent-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list intent-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (lex-runtime-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (lex-runtime-error)
     ((retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader limit-exceeded-exception-retry-after-seconds)
      (message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-retry-after-seconds
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition loop-detected-exception
     (lex-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       loop-detected-exception-message)))
 (common-lisp:export
  (common-lisp:list 'loop-detected-exception 'loop-detected-exception-message)))
(common-lisp:deftype message-format-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-acceptable-exception
     (lex-runtime-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-acceptable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-acceptable-exception
                    'not-acceptable-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (lex-runtime-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass post-content-request common-lisp:nil
                       ((active-contexts :initarg :|activeContexts| :type
                         (common-lisp:or active-contexts-string
                                         common-lisp:null)
                         :accessor %post-content-request-active-contexts
                         :initform common-lisp:nil)
                        (input-stream :initarg :|inputStream| :type
                         (common-lisp:or blob-stream common-lisp:null)
                         :accessor %post-content-request-input-stream :initform
                         (common-lisp:error ":inputstream is required"))
                        (accept :initarg :|accept| :type
                         (common-lisp:or accept common-lisp:null) :accessor
                         %post-content-request-accept :initform
                         common-lisp:nil)
                        (content-type :initarg :|contentType| :type
                         (common-lisp:or http-content-type common-lisp:null)
                         :accessor %post-content-request-content-type :initform
                         (common-lisp:error ":contenttype is required"))
                        (request-attributes :initarg :|requestAttributes| :type
                         (common-lisp:or attributes-string common-lisp:null)
                         :accessor %post-content-request-request-attributes
                         :initform common-lisp:nil)
                        (session-attributes :initarg :|sessionAttributes| :type
                         (common-lisp:or attributes-string common-lisp:null)
                         :accessor %post-content-request-session-attributes
                         :initform common-lisp:nil)
                        (user-id :initarg :|userId| :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %post-content-request-user-id :initform
                         (common-lisp:error ":userid is required"))
                        (bot-alias :initarg :|botAlias| :type
                         (common-lisp:or bot-alias common-lisp:null) :accessor
                         %post-content-request-bot-alias :initform
                         (common-lisp:error ":botalias is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %post-content-request-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'post-content-request 'make-post-content-request))
 (common-lisp:defun make-post-content-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active-contexts input-stream accept
                     content-type request-attributes session-attributes user-id
                     bot-alias bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'post-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input post-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:cons "x-amz-lex-session-attributes"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:cons "x-amz-lex-request-attributes"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:cons "x-amz-lex-active-contexts"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input post-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-stream))
      (common-lisp:list
       (common-lisp:cons "inputStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input post-content-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'input-stream))))
(common-lisp:progn
 (common-lisp:defclass post-content-response common-lisp:nil
                       ((active-contexts :initarg :|activeContexts| :type
                         (common-lisp:or active-contexts-string
                                         common-lisp:null)
                         :accessor %post-content-response-active-contexts
                         :initform common-lisp:nil)
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %post-content-response-session-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %post-content-response-bot-version :initform
                         common-lisp:nil)
                        (audio-stream :initarg :|audioStream| :type
                         (common-lisp:or blob-stream common-lisp:null)
                         :accessor %post-content-response-audio-stream
                         :initform common-lisp:nil)
                        (encoded-input-transcript :initarg
                         :|encodedInputTranscript| :type
                         (common-lisp:or sensitive-string-unbounded
                                         common-lisp:null)
                         :accessor
                         %post-content-response-encoded-input-transcript
                         :initform common-lisp:nil)
                        (input-transcript :initarg :|inputTranscript| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %post-content-response-input-transcript :initform
                         common-lisp:nil)
                        (slot-to-elicit :initarg :|slotToElicit| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %post-content-response-slot-to-elicit :initform
                         common-lisp:nil)
                        (dialog-state :initarg :|dialogState| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor %post-content-response-dialog-state
                         :initform common-lisp:nil)
                        (message-format :initarg :|messageFormat| :type
                         (common-lisp:or message-format-type common-lisp:null)
                         :accessor %post-content-response-message-format
                         :initform common-lisp:nil)
                        (encoded-message :initarg :|encodedMessage| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %post-content-response-encoded-message
                         :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %post-content-response-message :initform
                         common-lisp:nil)
                        (sentiment-response :initarg :|sentimentResponse| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %post-content-response-sentiment-response :initform
                         common-lisp:nil)
                        (session-attributes :initarg :|sessionAttributes| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %post-content-response-session-attributes :initform
                         common-lisp:nil)
                        (slots :initarg :|slots| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %post-content-response-slots :initform
                         common-lisp:nil)
                        (alternative-intents :initarg :|alternativeIntents|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %post-content-response-alternative-intents
                         :initform common-lisp:nil)
                        (nlu-intent-confidence :initarg :|nluIntentConfidence|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %post-content-response-nlu-intent-confidence
                         :initform common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %post-content-response-intent-name :initform
                         common-lisp:nil)
                        (content-type :initarg :|contentType| :type
                         (common-lisp:or http-content-type common-lisp:null)
                         :accessor %post-content-response-content-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'post-content-response 'make-post-content-response))
 (common-lisp:defun make-post-content-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active-contexts session-id bot-version
                     audio-stream encoded-input-transcript input-transcript
                     slot-to-elicit dialog-state message-format encoded-message
                     message sentiment-response session-attributes slots
                     alternative-intents nlu-intent-confidence intent-name
                     content-type)
   (common-lisp:apply #'common-lisp:make-instance 'post-content-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:cons "x-amz-lex-intent-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence))
      (common-lisp:cons "x-amz-lex-nlu-intent-confidence"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternative-intents))
      (common-lisp:cons "x-amz-lex-alternative-intents"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:cons "x-amz-lex-slots" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:cons "x-amz-lex-session-attributes"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment-response))
      (common-lisp:cons "x-amz-lex-sentiment" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:cons "x-amz-lex-message" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoded-message))
      (common-lisp:cons "x-amz-lex-encoded-message"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-format))
      (common-lisp:cons "x-amz-lex-message-format"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-state))
      (common-lisp:cons "x-amz-lex-dialog-state"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-to-elicit))
      (common-lisp:cons "x-amz-lex-slot-to-elicit"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-transcript))
      (common-lisp:cons "x-amz-lex-input-transcript"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encoded-input-transcript))
      (common-lisp:cons "x-amz-lex-encoded-input-transcript"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:cons "x-amz-lex-bot-version"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amz-lex-session-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:cons "x-amz-lex-active-contexts"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "audioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-content-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream))))
(common-lisp:progn
 (common-lisp:defclass post-text-request common-lisp:nil
                       ((active-contexts :initarg :|activeContexts| :type
                         (common-lisp:or active-contexts-list common-lisp:null)
                         :accessor %post-text-request-active-contexts :initform
                         common-lisp:nil)
                        (input-text :initarg :|inputText| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %post-text-request-input-text :initform
                         (common-lisp:error ":inputtext is required"))
                        (request-attributes :initarg :|requestAttributes| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %post-text-request-request-attributes :initform
                         common-lisp:nil)
                        (session-attributes :initarg :|sessionAttributes| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %post-text-request-session-attributes :initform
                         common-lisp:nil)
                        (user-id :initarg :|userId| :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %post-text-request-user-id :initform
                         (common-lisp:error ":userid is required"))
                        (bot-alias :initarg :|botAlias| :type
                         (common-lisp:or bot-alias common-lisp:null) :accessor
                         %post-text-request-bot-alias :initform
                         (common-lisp:error ":botalias is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %post-text-request-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'post-text-request 'make-post-text-request))
 (common-lisp:defun make-post-text-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active-contexts input-text
                     request-attributes session-attributes user-id bot-alias
                     bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'post-text-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input post-text-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input post-text-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:list
       (common-lisp:cons "sessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:list
       (common-lisp:cons "requestAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-text))
      (common-lisp:list
       (common-lisp:cons "inputText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:list
       (common-lisp:cons "activeContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input post-text-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass post-text-response common-lisp:nil
                       ((active-contexts :initarg :|activeContexts| :type
                         (common-lisp:or active-contexts-list common-lisp:null)
                         :accessor %post-text-response-active-contexts
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %post-text-response-bot-version :initform
                         common-lisp:nil)
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %post-text-response-session-id :initform
                         common-lisp:nil)
                        (response-card :initarg :|responseCard| :type
                         (common-lisp:or response-card common-lisp:null)
                         :accessor %post-text-response-response-card :initform
                         common-lisp:nil)
                        (slot-to-elicit :initarg :|slotToElicit| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %post-text-response-slot-to-elicit :initform
                         common-lisp:nil)
                        (dialog-state :initarg :|dialogState| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor %post-text-response-dialog-state :initform
                         common-lisp:nil)
                        (message-format :initarg :|messageFormat| :type
                         (common-lisp:or message-format-type common-lisp:null)
                         :accessor %post-text-response-message-format :initform
                         common-lisp:nil)
                        (sentiment-response :initarg :|sentimentResponse| :type
                         (common-lisp:or sentiment-response common-lisp:null)
                         :accessor %post-text-response-sentiment-response
                         :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %post-text-response-message :initform common-lisp:nil)
                        (session-attributes :initarg :|sessionAttributes| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %post-text-response-session-attributes :initform
                         common-lisp:nil)
                        (slots :initarg :|slots| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %post-text-response-slots :initform common-lisp:nil)
                        (alternative-intents :initarg :|alternativeIntents|
                         :type (common-lisp:or intent-list common-lisp:null)
                         :accessor %post-text-response-alternative-intents
                         :initform common-lisp:nil)
                        (nlu-intent-confidence :initarg :|nluIntentConfidence|
                         :type
                         (common-lisp:or intent-confidence common-lisp:null)
                         :accessor %post-text-response-nlu-intent-confidence
                         :initform common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %post-text-response-intent-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'post-text-response 'make-post-text-response))
 (common-lisp:defun make-post-text-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active-contexts bot-version session-id
                     response-card slot-to-elicit dialog-state message-format
                     sentiment-response message session-attributes slots
                     alternative-intents nlu-intent-confidence intent-name)
   (common-lisp:apply #'common-lisp:make-instance 'post-text-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input post-text-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input post-text-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternative-intents))
      (common-lisp:list
       (common-lisp:cons "alternativeIntents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:list
       (common-lisp:cons "sessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment-response))
      (common-lisp:list
       (common-lisp:cons "sentimentResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-format))
      (common-lisp:list
       (common-lisp:cons "messageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-state))
      (common-lisp:list
       (common-lisp:cons "dialogState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-to-elicit))
      (common-lisp:list
       (common-lisp:cons "slotToElicit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-card))
      (common-lisp:list
       (common-lisp:cons "responseCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:list
       (common-lisp:cons "activeContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input post-text-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predicted-intent common-lisp:nil
                       ((slots :initarg :|slots| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %predicted-intent-slots :initform common-lisp:nil)
                        (nlu-intent-confidence :initarg :|nluIntentConfidence|
                         :type
                         (common-lisp:or intent-confidence common-lisp:null)
                         :accessor %predicted-intent-nlu-intent-confidence
                         :initform common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %predicted-intent-intent-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'predicted-intent 'make-predicted-intent))
 (common-lisp:defun make-predicted-intent
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slots nlu-intent-confidence intent-name)
   (common-lisp:apply #'common-lisp:make-instance 'predicted-intent
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predicted-intent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predicted-intent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predicted-intent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-session-request common-lisp:nil
                       ((active-contexts :initarg :|activeContexts| :type
                         (common-lisp:or active-contexts-list common-lisp:null)
                         :accessor %put-session-request-active-contexts
                         :initform common-lisp:nil)
                        (accept :initarg :|accept| :type
                         (common-lisp:or accept common-lisp:null) :accessor
                         %put-session-request-accept :initform common-lisp:nil)
                        (recent-intent-summary-view :initarg
                         :|recentIntentSummaryView| :type
                         (common-lisp:or intent-summary-list common-lisp:null)
                         :accessor
                         %put-session-request-recent-intent-summary-view
                         :initform common-lisp:nil)
                        (dialog-action :initarg :|dialogAction| :type
                         (common-lisp:or dialog-action common-lisp:null)
                         :accessor %put-session-request-dialog-action :initform
                         common-lisp:nil)
                        (session-attributes :initarg :|sessionAttributes| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %put-session-request-session-attributes :initform
                         common-lisp:nil)
                        (user-id :initarg :|userId| :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %put-session-request-user-id :initform
                         (common-lisp:error ":userid is required"))
                        (bot-alias :initarg :|botAlias| :type
                         (common-lisp:or bot-alias common-lisp:null) :accessor
                         %put-session-request-bot-alias :initform
                         (common-lisp:error ":botalias is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %put-session-request-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'put-session-request 'make-put-session-request))
 (common-lisp:defun make-put-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active-contexts accept
                     recent-intent-summary-view dialog-action
                     session-attributes user-id bot-alias bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'put-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:list
       (common-lisp:cons "sessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-action))
      (common-lisp:list
       (common-lisp:cons "dialogAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recent-intent-summary-view))
      (common-lisp:list
       (common-lisp:cons "recentIntentSummaryView"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:list
       (common-lisp:cons "activeContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-session-response common-lisp:nil
                       ((active-contexts :initarg :|activeContexts| :type
                         (common-lisp:or active-contexts-string
                                         common-lisp:null)
                         :accessor %put-session-response-active-contexts
                         :initform common-lisp:nil)
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-session-response-session-id :initform
                         common-lisp:nil)
                        (audio-stream :initarg :|audioStream| :type
                         (common-lisp:or blob-stream common-lisp:null)
                         :accessor %put-session-response-audio-stream :initform
                         common-lisp:nil)
                        (slot-to-elicit :initarg :|slotToElicit| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-session-response-slot-to-elicit :initform
                         common-lisp:nil)
                        (dialog-state :initarg :|dialogState| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor %put-session-response-dialog-state :initform
                         common-lisp:nil)
                        (message-format :initarg :|messageFormat| :type
                         (common-lisp:or message-format-type common-lisp:null)
                         :accessor %put-session-response-message-format
                         :initform common-lisp:nil)
                        (encoded-message :initarg :|encodedMessage| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %put-session-response-encoded-message
                         :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %put-session-response-message :initform
                         common-lisp:nil)
                        (session-attributes :initarg :|sessionAttributes| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-session-response-session-attributes :initform
                         common-lisp:nil)
                        (slots :initarg :|slots| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-session-response-slots :initform common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %put-session-response-intent-name :initform
                         common-lisp:nil)
                        (content-type :initarg :|contentType| :type
                         (common-lisp:or http-content-type common-lisp:null)
                         :accessor %put-session-response-content-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-session-response 'make-put-session-response))
 (common-lisp:defun make-put-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active-contexts session-id audio-stream
                     slot-to-elicit dialog-state message-format encoded-message
                     message session-attributes slots intent-name content-type)
   (common-lisp:apply #'common-lisp:make-instance 'put-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:cons "x-amz-lex-intent-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:cons "x-amz-lex-slots" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:cons "x-amz-lex-session-attributes"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:cons "x-amz-lex-message" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoded-message))
      (common-lisp:cons "x-amz-lex-encoded-message"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-format))
      (common-lisp:cons "x-amz-lex-message-format"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-state))
      (common-lisp:cons "x-amz-lex-dialog-state"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-to-elicit))
      (common-lisp:cons "x-amz-lex-slot-to-elicit"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amz-lex-session-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:cons "x-amz-lex-active-contexts"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "audioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-session-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream))))
(common-lisp:progn
 (common-lisp:define-condition request-timeout-exception
     (lex-runtime-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       request-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-timeout-exception
                    'request-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass response-card common-lisp:nil
                       ((generic-attachments :initarg :|genericAttachments|
                         :type
                         (common-lisp:or |genericAttachmentList|
                                         common-lisp:null)
                         :accessor %response-card-generic-attachments :initform
                         common-lisp:nil)
                        (content-type :initarg :|contentType| :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %response-card-content-type :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %response-card-version :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'response-card 'make-response-card))
 (common-lisp:defun make-response-card
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key generic-attachments content-type version)
   (common-lisp:apply #'common-lisp:make-instance 'response-card
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input response-card))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input response-card))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generic-attachments))
      (common-lisp:list
       (common-lisp:cons "genericAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input response-card))
   common-lisp:nil))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:deftype sensitive-string-unbounded () 'common-lisp:string)
(common-lisp:deftype sentiment-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sentiment-response common-lisp:nil
                       ((sentiment-score :initarg :|sentimentScore| :type
                         (common-lisp:or sentiment-score common-lisp:null)
                         :accessor %sentiment-response-sentiment-score
                         :initform common-lisp:nil)
                        (sentiment-label :initarg :|sentimentLabel| :type
                         (common-lisp:or sentiment-label common-lisp:null)
                         :accessor %sentiment-response-sentiment-label
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sentiment-response 'make-sentiment-response))
 (common-lisp:defun make-sentiment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sentiment-score sentiment-label)
   (common-lisp:apply #'common-lisp:make-instance 'sentiment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sentiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sentiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment-label))
      (common-lisp:list
       (common-lisp:cons "sentimentLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment-score))
      (common-lisp:list
       (common-lisp:cons "sentimentScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sentiment-response))
   common-lisp:nil))
(common-lisp:deftype sentiment-score () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-string-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype string-url-with-length () 'common-lisp:string)
(common-lisp:deftype string-with-length () 'common-lisp:string)
(common-lisp:deftype text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-media-type-exception
     (lex-runtime-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unsupported-media-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-media-type-exception
                    'unsupported-media-type-exception-message)))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |genericAttachmentList| ()
   '(trivial-types:proper-list generic-attachment))
 (common-lisp:defun |make-genericattachmentlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |listOfButtons| () '(trivial-types:proper-list button))
 (common-lisp:defun |make-listofbuttons|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list button))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun delete-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name bot-alias user-id)
   (common-lisp:declare (common-lisp:ignorable bot-name bot-alias user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bot/~A/alias/~A/user/~A/session"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeleteSession"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-session))
(common-lisp:progn
 (common-lisp:defun get-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name bot-alias user-id
                     checkpoint-label-filter)
   (common-lisp:declare
    (common-lisp:ignorable bot-name bot-alias user-id checkpoint-label-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bot/~A/alias/~A/user/~A/session/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "GetSession"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-session))
(common-lisp:progn
 (common-lisp:defun post-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name bot-alias user-id
                     session-attributes request-attributes content-type accept
                     input-stream active-contexts)
   (common-lisp:declare
    (common-lisp:ignorable bot-name bot-alias user-id session-attributes
     request-attributes content-type accept input-stream active-contexts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-post-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bot/~A/alias/~A/user/~A/content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "PostContent"
                                                        "2016-11-28")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'post-content))
(common-lisp:progn
 (common-lisp:defun post-text
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name bot-alias user-id
                     session-attributes request-attributes input-text
                     active-contexts)
   (common-lisp:declare
    (common-lisp:ignorable bot-name bot-alias user-id session-attributes
     request-attributes input-text active-contexts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-post-text-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bot/~A/alias/~A/user/~A/text"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "PostText"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'post-text))
(common-lisp:progn
 (common-lisp:defun put-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name bot-alias user-id
                     session-attributes dialog-action
                     recent-intent-summary-view accept active-contexts)
   (common-lisp:declare
    (common-lisp:ignorable bot-name bot-alias user-id session-attributes
     dialog-action recent-intent-summary-view accept active-contexts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bot/~A/alias/~A/user/~A/session"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "PutSession"
                                                        "2016-11-28")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'put-session))
