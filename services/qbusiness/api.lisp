;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/qbusiness/api
  (:use)
  (:nicknames #:aws/qbusiness)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/qbusiness/api)
(common-lisp:progn
 (common-lisp:define-condition qbusiness-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'qbusiness-error))
(common-lisp:progn
 (common-lisp:defclass qbusiness-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "qbusiness" :api-version
                        "2023-11-27" :host-prefix "qbusiness" :signing-name
                        "qbusiness" :global-host common-lisp:nil))
 (common-lisp:export 'qbusiness-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("LicenseNotFoundException" . license-not-found-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (access-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-configuration-"))
   (access-controls (common-lisp:error ":accesscontrols is required") :type
    (common-lisp:or access-controls common-lisp:null))
   (member-relation common-lisp:nil :type
    (common-lisp:or member-relation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-configuration 'make-access-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-controls))
      (common-lisp:list
       (common-lisp:cons "accessControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-relation))
      (common-lisp:list
       (common-lisp:cons "memberRelation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-"))
   (member-relation common-lisp:nil :type
    (common-lisp:or member-relation common-lisp:null))
   (principals (common-lisp:error ":principals is required") :type
    (common-lisp:or principals common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-control 'make-access-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-relation))
      (common-lisp:list
       (common-lisp:cons "memberRelation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-controls ()
   '(trivial-types:proper-list access-control))
 (common-lisp:defun make-access-controls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype action-payload-field-key () 'common-lisp:string)
(common-lisp:deftype action-payload-field-name-separator () 'common-lisp:string)
(common-lisp:deftype action-payload-field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-review (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-review-"))
   (payload common-lisp:nil :type
    (common-lisp:or action-review-payload common-lisp:null))
   (payload-field-name-separator common-lisp:nil :type
    (common-lisp:or action-payload-field-name-separator common-lisp:null))
   (plugin-id common-lisp:nil :type
    (common-lisp:or plugin-id common-lisp:null))
   (plugin-type common-lisp:nil :type
    (common-lisp:or plugin-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-review 'make-action-review))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-review))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-review))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payload-field-name-separator))
      (common-lisp:list
       (common-lisp:cons "payloadFieldNameSeparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-id))
      (common-lisp:list
       (common-lisp:cons "pluginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-type))
      (common-lisp:list
       (common-lisp:cons "pluginType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-review))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-review-payload () 'common-lisp:hash-table)
 (common-lisp:defun make-action-review-payload
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (action-review-payload-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-review-payload-field-"))
   (allowed-values common-lisp:nil :type
    (common-lisp:or action-review-payload-field-allowed-values
                    common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (display-order common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (required common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or action-payload-field-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-review-payload-field
                    'make-action-review-payload-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-order))
      (common-lisp:list
       (common-lisp:cons "displayOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-review-payload-field-allowed-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-review-payload-field-allowed-value-")))
 (common-lisp:export
  (common-lisp:list 'action-review-payload-field-allowed-value
                    'make-action-review-payload-field-allowed-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field-allowed-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field-allowed-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-review-payload-field-allowed-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-review-payload-field-allowed-values ()
   '(trivial-types:proper-list action-review-payload-field-allowed-value))
 (common-lisp:defun make-action-review-payload-field-allowed-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            action-review-payload-field-allowed-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-"))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or application-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'application 'make-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application))
   common-lisp:nil))
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:deftype application-id () 'common-lisp:string)
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:deftype application-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype applications () '(trivial-types:proper-list application))
 (common-lisp:defun make-applications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (applied-attachments-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-applied-attachments-configuration-"))
   (attachments-control-mode common-lisp:nil :type
    (common-lisp:or attachments-control-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'applied-attachments-configuration
                    'make-applied-attachments-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          applied-attachments-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          applied-attachments-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-control-mode))
      (common-lisp:list
       (common-lisp:cons "attachmentsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          applied-attachments-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attachment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-attachment-input-"))
   (data (common-lisp:error ":data is required") :type
    (common-lisp:or blob common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or attachment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attachment-input 'make-attachment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment-input))
   common-lisp:nil))
(common-lisp:deftype attachment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attachment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-attachment-output-"))
   (error common-lisp:nil :type (common-lisp:or error-detail common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or attachment-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or attachment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attachment-output 'make-attachment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment-output))
   common-lisp:nil))
(common-lisp:deftype attachment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attachments-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-attachments-configuration-"))
   (attachments-control-mode
    (common-lisp:error ":attachmentscontrolmode is required") :type
    (common-lisp:or attachments-control-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attachments-configuration
                    'make-attachments-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attachments-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attachments-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-control-mode))
      (common-lisp:list
       (common-lisp:cons "attachmentsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attachments-configuration))
   common-lisp:nil))
(common-lisp:deftype attachments-control-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attachments-input ()
   '(trivial-types:proper-list attachment-input))
 (common-lisp:defun make-attachments-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attachments-output ()
   '(trivial-types:proper-list attachment-output))
 (common-lisp:defun make-attachments-output
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-filter-"))
   (and-all-filters common-lisp:nil :type
    (common-lisp:or attribute-filters common-lisp:null))
   (contains-all common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (contains-any common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (equals-to common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (greater-than common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (greater-than-or-equals common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (less-than common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (less-than-or-equals common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (not-filter common-lisp:nil :type
    (common-lisp:or attribute-filter common-lisp:null))
   (or-all-filters common-lisp:nil :type
    (common-lisp:or attribute-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-filter 'make-attribute-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-all-filters))
      (common-lisp:list
       (common-lisp:cons "andAllFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-all))
      (common-lisp:list
       (common-lisp:cons "containsAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-any))
      (common-lisp:list
       (common-lisp:cons "containsAny"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equals-to))
      (common-lisp:list
       (common-lisp:cons "equalsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greater-than))
      (common-lisp:list
       (common-lisp:cons "greaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'greater-than-or-equals))
      (common-lisp:list
       (common-lisp:cons "greaterThanOrEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than))
      (common-lisp:list
       (common-lisp:cons "lessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than-or-equals))
      (common-lisp:list
       (common-lisp:cons "lessThanOrEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-filter))
      (common-lisp:list
       (common-lisp:cons "notFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-all-filters))
      (common-lisp:list
       (common-lisp:cons "orAllFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-filters ()
   '(trivial-types:proper-list attribute-filter))
 (common-lisp:defun make-attribute-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-type () 'common-lisp:string)
(common-lisp:deftype attribute-value-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (basic-auth-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-basic-auth-configuration-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (secret-arn (common-lisp:error ":secretarn is required") :type
    (common-lisp:or secret-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'basic-auth-configuration 'make-basic-auth-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          basic-auth-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          basic-auth-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          basic-auth-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-document-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-document-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-sync-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (documents (common-lisp:error ":documents is required") :type
    (common-lisp:or delete-documents common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-document-request
                    'make-batch-delete-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-sync-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceSyncId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-document-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-document-response-"))
   (failed-documents common-lisp:nil :type
    (common-lisp:or failed-documents common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-document-response
                    'make-batch-delete-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-documents))
      (common-lisp:list
       (common-lisp:cons "failedDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-document-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-document-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-sync-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (documents (common-lisp:error ":documents is required") :type
    (common-lisp:or documents common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-document-request
                    'make-batch-put-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-sync-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceSyncId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-document-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-document-response-"))
   (failed-documents common-lisp:nil :type
    (common-lisp:or failed-documents common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-document-response
                    'make-batch-put-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-documents))
      (common-lisp:list
       (common-lisp:cons "failedDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype blocked-phrase () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype blocked-phrases ()
   '(trivial-types:proper-list blocked-phrase))
 (common-lisp:defun make-blocked-phrases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blocked-phrase))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (blocked-phrases-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-blocked-phrases-configuration-"))
   (blocked-phrases common-lisp:nil :type
    (common-lisp:or blocked-phrases common-lisp:null))
   (system-message-override common-lisp:nil :type
    (common-lisp:or system-message-override common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blocked-phrases-configuration
                    'make-blocked-phrases-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked-phrases))
      (common-lisp:list
       (common-lisp:cons "blockedPhrases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-message-override))
      (common-lisp:list
       (common-lisp:cons "systemMessageOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (blocked-phrases-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-blocked-phrases-configuration-update-"))
   (blocked-phrases-to-create-or-update common-lisp:nil :type
    (common-lisp:or blocked-phrases common-lisp:null))
   (blocked-phrases-to-delete common-lisp:nil :type
    (common-lisp:or blocked-phrases common-lisp:null))
   (system-message-override common-lisp:nil :type
    (common-lisp:or system-message-override common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blocked-phrases-configuration-update
                    'make-blocked-phrases-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blocked-phrases-to-create-or-update))
      (common-lisp:list
       (common-lisp:cons "blockedPhrasesToCreateOrUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blocked-phrases-to-delete))
      (common-lisp:list
       (common-lisp:cons "blockedPhrasesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-message-override))
      (common-lisp:list
       (common-lisp:cons "systemMessageOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blocked-phrases-configuration-update))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boosting-duration-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (chat-sync-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-chat-sync-input-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (attachments common-lisp:nil :type
    (common-lisp:or attachments-input common-lisp:null))
   (attribute-filter common-lisp:nil :type
    (common-lisp:or attribute-filter common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (conversation-id common-lisp:nil :type
    (common-lisp:or conversation-id common-lisp:null))
   (parent-message-id common-lisp:nil :type
    (common-lisp:or message-id common-lisp:null))
   (user-groups common-lisp:nil :type
    (common-lisp:or user-groups common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null))
   (user-message common-lisp:nil :type
    (common-lisp:or user-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'chat-sync-input 'make-chat-sync-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input chat-sync-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input chat-sync-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-filter))
      (common-lisp:list
       (common-lisp:cons "attributeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-id))
      (common-lisp:list
       (common-lisp:cons "conversationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-message-id))
      (common-lisp:list
       (common-lisp:cons "parentMessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-message))
      (common-lisp:list
       (common-lisp:cons "userMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input chat-sync-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (chat-sync-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-chat-sync-output-"))
   (action-review common-lisp:nil :type
    (common-lisp:or action-review common-lisp:null))
   (conversation-id common-lisp:nil :type
    (common-lisp:or conversation-id common-lisp:null))
   (failed-attachments common-lisp:nil :type
    (common-lisp:or attachments-output common-lisp:null))
   (source-attributions common-lisp:nil :type
    (common-lisp:or source-attributions common-lisp:null))
   (system-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (system-message-id common-lisp:nil :type
    (common-lisp:or message-id common-lisp:null))
   (user-message-id common-lisp:nil :type
    (common-lisp:or message-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chat-sync-output 'make-chat-sync-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input chat-sync-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input chat-sync-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-review))
      (common-lisp:list
       (common-lisp:cons "actionReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-id))
      (common-lisp:list
       (common-lisp:cons "conversationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-attachments))
      (common-lisp:list
       (common-lisp:cons "failedAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-attributions))
      (common-lisp:list
       (common-lisp:cons "sourceAttributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-message))
      (common-lisp:list
       (common-lisp:cons "systemMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-message-id))
      (common-lisp:list
       (common-lisp:cons "systemMessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-message-id))
      (common-lisp:list
       (common-lisp:cons "userMessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input chat-sync-output))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (content-blocker-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-blocker-rule-"))
   (system-message-override common-lisp:nil :type
    (common-lisp:or system-message-override common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-blocker-rule 'make-content-blocker-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-blocker-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-blocker-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-message-override))
      (common-lisp:list
       (common-lisp:cons "systemMessageOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-blocker-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (content-retrieval-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-retrieval-rule-"))
   (eligible-data-sources common-lisp:nil :type
    (common-lisp:or eligible-data-sources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-retrieval-rule 'make-content-retrieval-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-retrieval-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-retrieval-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eligible-data-sources))
      (common-lisp:list
       (common-lisp:cons "eligibleDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-retrieval-rule))
   common-lisp:nil))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (conversation (:copier common-lisp:nil)
      (:conc-name "struct-shape-conversation-"))
   (conversation-id common-lisp:nil :type
    (common-lisp:or conversation-id common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or conversation-title common-lisp:null)))
 (common-lisp:export (common-lisp:list 'conversation 'make-conversation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conversation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conversation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-id))
      (common-lisp:list
       (common-lisp:cons "conversationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conversation))
   common-lisp:nil))
(common-lisp:deftype conversation-id () 'common-lisp:string)
(common-lisp:deftype conversation-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype conversations ()
   '(trivial-types:proper-list conversation))
 (common-lisp:defun make-conversations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conversation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-request-"))
   (attachments-configuration common-lisp:nil :type
    (common-lisp:or attachments-configuration common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (encryption-configuration common-lisp:nil :type
    (common-lisp:or encryption-configuration common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-configuration))
      (common-lisp:list
       (common-lisp:cons "attachmentsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or application-arn common-lisp:null))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "applicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-response-"))
   (data-source-arn common-lisp:nil :type
    (common-lisp:or data-source-arn common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-response
                    'make-create-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "dataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-index-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (capacity-configuration common-lisp:nil :type
    (common-lisp:or index-capacity-configuration common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or index-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-index-request 'make-create-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-configuration))
      (common-lisp:list
       (common-lisp:cons "capacityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-index-response-"))
   (index-arn common-lisp:nil :type
    (common-lisp:or index-arn common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-index-response 'make-create-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "indexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-plugin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-plugin-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (auth-configuration (common-lisp:error ":authconfiguration is required")
    :type (common-lisp:or plugin-auth-configuration common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or plugin-name common-lisp:null))
   (server-url (common-lisp:error ":serverurl is required") :type
    (common-lisp:or url common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or plugin-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-plugin-request 'make-create-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-configuration))
      (common-lisp:list
       (common-lisp:cons "authConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "serverUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-plugin-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-plugin-response-"))
   (plugin-arn common-lisp:nil :type
    (common-lisp:or plugin-arn common-lisp:null))
   (plugin-id common-lisp:nil :type
    (common-lisp:or plugin-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-plugin-response 'make-create-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-arn))
      (common-lisp:list
       (common-lisp:cons "pluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-id))
      (common-lisp:list
       (common-lisp:cons "pluginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-retriever-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-retriever-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or retriever-configuration common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or retriever-name common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or retriever-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-retriever-request 'make-create-retriever-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-retriever-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-retriever-response-"))
   (retriever-arn common-lisp:nil :type
    (common-lisp:or retriever-arn common-lisp:null))
   (retriever-id common-lisp:nil :type
    (common-lisp:or retriever-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-retriever-response
                    'make-create-retriever-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-arn))
      (common-lisp:list
       (common-lisp:cons "retrieverArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-id))
      (common-lisp:list
       (common-lisp:cons "retrieverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-retriever-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (user-aliases common-lisp:nil :type
    (common-lisp:or create-user-request-user-aliases-list common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-aliases))
      (common-lisp:list
       (common-lisp:cons "userAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-user-request-user-aliases-list ()
   '(trivial-types:proper-list user-alias))
 (common-lisp:defun make-create-user-request-user-aliases-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-response-")))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-web-experience-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-web-experience-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (sample-prompts-control-mode common-lisp:nil :type
    (common-lisp:or web-experience-sample-prompts-control-mode
                    common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or web-experience-subtitle common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or web-experience-title common-lisp:null))
   (welcome-message common-lisp:nil :type
    (common-lisp:or web-experience-welcome-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-web-experience-request
                    'make-create-web-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-prompts-control-mode))
      (common-lisp:list
       (common-lisp:cons "samplePromptsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'welcome-message))
      (common-lisp:list
       (common-lisp:cons "welcomeMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-web-experience-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-web-experience-response-"))
   (web-experience-arn common-lisp:nil :type
    (common-lisp:or web-experience-arn common-lisp:null))
   (web-experience-id common-lisp:nil :type
    (common-lisp:or web-experience-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-web-experience-response
                    'make-create-web-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-arn))
      (common-lisp:list
       (common-lisp:cons "webExperienceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-id))
      (common-lisp:list
       (common-lisp:cons "webExperienceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-experience-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-"))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or data-source-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-status common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:deftype data-source-arn () 'common-lisp:string)
(common-lisp:deftype data-source-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-ids ()
   '(trivial-types:proper-list data-source-id))
 (common-lisp:defun make-data-source-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-name () 'common-lisp:string)
(common-lisp:deftype data-source-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-sync-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-sync-job-"))
   (data-source-error-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or error-detail common-lisp:null))
   (execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or data-source-sync-job-metrics common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-sync-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-sync-job 'make-data-source-sync-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-sync-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-sync-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-error-code))
      (common-lisp:list
       (common-lisp:cons "dataSourceErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-sync-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-sync-job-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-sync-job-metrics-"))
   (documents-added common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (documents-deleted common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (documents-failed common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (documents-modified common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (documents-scanned common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-sync-job-metrics
                    'make-data-source-sync-job-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-added))
      (common-lisp:list
       (common-lisp:cons "documentsAdded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-deleted))
      (common-lisp:list
       (common-lisp:cons "documentsDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-failed))
      (common-lisp:list
       (common-lisp:cons "documentsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-modified))
      (common-lisp:list
       (common-lisp:cons "documentsModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-scanned))
      (common-lisp:list
       (common-lisp:cons "documentsScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metrics))
   common-lisp:nil))
(common-lisp:deftype data-source-sync-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-sync-jobs ()
   '(trivial-types:proper-list data-source-sync-job))
 (common-lisp:defun make-data-source-sync-jobs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-sync-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-vpc-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-vpc-configuration-"))
   (security-group-ids (common-lisp:error ":securitygroupids is required")
    :type (common-lisp:or security-group-ids common-lisp:null))
   (subnet-ids (common-lisp:error ":subnetids is required") :type
    (common-lisp:or subnet-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-vpc-configuration
                    'make-data-source-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-sources () '(trivial-types:proper-list data-source))
 (common-lisp:defun make-data-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (date-attribute-boosting-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-attribute-boosting-configuration-"))
   (boosting-duration-in-seconds common-lisp:nil :type
    (common-lisp:or boosting-duration-in-seconds common-lisp:null))
   (boosting-level (common-lisp:error ":boostinglevel is required") :type
    (common-lisp:or document-attribute-boosting-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-attribute-boosting-configuration
                    'make-date-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'boosting-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "boostingDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-level))
      (common-lisp:list
       (common-lisp:cons "boostingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-chat-controls-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-chat-controls-configuration-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-chat-controls-configuration-request
                    'make-delete-chat-controls-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-chat-controls-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-chat-controls-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-chat-controls-configuration-response
                    'make-delete-chat-controls-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-chat-controls-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-conversation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-conversation-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (conversation-id (common-lisp:error ":conversationid is required") :type
    (common-lisp:or conversation-id common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-conversation-request
                    'make-delete-conversation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-conversation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-conversation-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-conversation-response
                    'make-delete-conversation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conversation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-request
                    'make-delete-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-response
                    'make-delete-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-document-"))
   (document-id (common-lisp:error ":documentid is required") :type
    (common-lisp:or document-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'delete-document 'make-delete-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "documentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delete-documents ()
   '(trivial-types:proper-list delete-document))
 (common-lisp:defun make-delete-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delete-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (group-name (common-lisp:error ":groupname is required") :type
    (common-lisp:or group-name common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-group-response 'make-delete-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-index-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-index-request 'make-delete-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-index-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-index-response 'make-delete-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-plugin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-plugin-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (plugin-id (common-lisp:error ":pluginid is required") :type
    (common-lisp:or plugin-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-plugin-request 'make-delete-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-plugin-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-plugin-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-plugin-response 'make-delete-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-retriever-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-retriever-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (retriever-id (common-lisp:error ":retrieverid is required") :type
    (common-lisp:or retriever-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-retriever-request 'make-delete-retriever-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-retriever-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-retriever-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-retriever-response
                    'make-delete-retriever-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retriever-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-web-experience-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-web-experience-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (web-experience-id (common-lisp:error ":webexperienceid is required") :type
    (common-lisp:or web-experience-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-web-experience-request
                    'make-delete-web-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-web-experience-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-web-experience-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-web-experience-response
                    'make-delete-web-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-experience-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (document (:copier common-lisp:nil) (:conc-name "struct-shape-document-"))
   (access-configuration common-lisp:nil :type
    (common-lisp:or access-configuration common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or document-attributes common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or document-content common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (document-enrichment-configuration common-lisp:nil :type
    (common-lisp:or document-enrichment-configuration common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or document-id common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or title common-lisp:null)))
 (common-lisp:export (common-lisp:list 'document 'make-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-configuration))
      (common-lisp:list
       (common-lisp:cons "accessConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "documentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or document-attribute-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or document-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute 'make-document-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute-boosting-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-boosting-configuration-"))
   (date-configuration common-lisp:nil :type
    (common-lisp:or date-attribute-boosting-configuration common-lisp:null))
   (number-configuration common-lisp:nil :type
    (common-lisp:or number-attribute-boosting-configuration common-lisp:null))
   (string-configuration common-lisp:nil :type
    (common-lisp:or string-attribute-boosting-configuration common-lisp:null))
   (string-list-configuration common-lisp:nil :type
    (common-lisp:or string-list-attribute-boosting-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute-boosting-configuration
                    'make-document-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-configuration))
      (common-lisp:list
       (common-lisp:cons "dateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-configuration))
      (common-lisp:list
       (common-lisp:cons "numberConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-configuration))
      (common-lisp:list
       (common-lisp:cons "stringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-list-configuration))
      (common-lisp:list
       (common-lisp:cons "stringListConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:deftype document-attribute-boosting-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-attribute-boosting-override-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-document-attribute-boosting-override-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-condition-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or document-attribute-key common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or document-enrichment-condition-operator common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or document-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute-condition
                    'make-document-attribute-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-configuration-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (search common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or attribute-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute-configuration
                    'make-document-attribute-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search))
      (common-lisp:list
       (common-lisp:cons "search"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-attribute-configurations ()
   '(trivial-types:proper-list document-attribute-configuration))
 (common-lisp:defun make-document-attribute-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-attribute-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-attribute-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-attribute-string-list-value ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-document-attribute-string-list-value
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-target-"))
   (attribute-value-operator common-lisp:nil :type
    (common-lisp:or attribute-value-operator common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or document-attribute-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or document-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute-target
                    'make-document-attribute-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-value-operator))
      (common-lisp:list
       (common-lisp:cons "attributeValueOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-value-"))
   (date-value common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (long-value common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (string-list-value common-lisp:nil :type
    (common-lisp:or document-attribute-string-list-value common-lisp:null))
   (string-value common-lisp:nil :type
    (common-lisp:or document-attribute-value-string-value-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute-value 'make-document-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-value))
      (common-lisp:list
       (common-lisp:cons "dateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-list-value))
      (common-lisp:list
       (common-lisp:cons "stringListValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value))
   common-lisp:nil))
(common-lisp:deftype document-attribute-value-string-value-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-attributes ()
   '(trivial-types:proper-list document-attribute))
 (common-lisp:defun make-document-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (document-content (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-content-"))
   (blob common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (s3 common-lisp:nil :type (common-lisp:or s3 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-content 'make-document-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob))
      (common-lisp:list
       (common-lisp:cons "blob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-content))
   common-lisp:nil))
(common-lisp:deftype document-content-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-detail-list ()
   '(trivial-types:proper-list document-details))
 (common-lisp:defun make-document-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (document-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-details-"))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (document-id common-lisp:nil :type
    (common-lisp:or document-id common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or error-detail common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or document-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-details 'make-document-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "documentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-details))
   common-lisp:nil))
(common-lisp:deftype document-enrichment-condition-operator ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (document-enrichment-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-enrichment-configuration-"))
   (inline-configurations common-lisp:nil :type
    (common-lisp:or inline-document-enrichment-configurations
                    common-lisp:null))
   (post-extraction-hook-configuration common-lisp:nil :type
    (common-lisp:or hook-configuration common-lisp:null))
   (pre-extraction-hook-configuration common-lisp:nil :type
    (common-lisp:or hook-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-enrichment-configuration
                    'make-document-enrichment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-enrichment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-enrichment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inline-configurations))
      (common-lisp:list
       (common-lisp:cons "inlineConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-extraction-hook-configuration))
      (common-lisp:list
       (common-lisp:cons "postExtractionHookConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-extraction-hook-configuration))
      (common-lisp:list
       (common-lisp:cons "preExtractionHookConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-enrichment-configuration))
   common-lisp:nil))
(common-lisp:deftype document-id () 'common-lisp:string)
(common-lisp:deftype document-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype documents () '(trivial-types:proper-list document))
 (common-lisp:defun make-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (eligible-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-eligible-data-source-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'eligible-data-source 'make-eligible-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eligible-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eligible-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eligible-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype eligible-data-sources ()
   '(trivial-types:proper-list eligible-data-source))
 (common-lisp:defun make-eligible-data-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eligible-data-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-configuration-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-detail-"))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype example-chat-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype example-chat-messages ()
   '(trivial-types:proper-list example-chat-message))
 (common-lisp:defun make-example-chat-messages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list example-chat-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (failed-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-failed-document-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or error-detail common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or document-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failed-document 'make-failed-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-documents ()
   '(trivial-types:proper-list failed-document))
 (common-lisp:defun make-failed-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-request 'make-get-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or application-arn common-lisp:null))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null))
   (attachments-configuration common-lisp:nil :type
    (common-lisp:or applied-attachments-configuration common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (encryption-configuration common-lisp:nil :type
    (common-lisp:or encryption-configuration common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or error-detail common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or application-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-response 'make-get-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "applicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-configuration))
      (common-lisp:list
       (common-lisp:cons "attachmentsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-chat-controls-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-chat-controls-configuration-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-get-topic-configurations
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-chat-controls-configuration-request
                    'make-get-chat-controls-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-chat-controls-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-chat-controls-configuration-response-"))
   (blocked-phrases common-lisp:nil :type
    (common-lisp:or blocked-phrases-configuration common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (response-scope common-lisp:nil :type
    (common-lisp:or response-scope common-lisp:null))
   (topic-configurations common-lisp:nil :type
    (common-lisp:or topic-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-chat-controls-configuration-response
                    'make-get-chat-controls-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked-phrases))
      (common-lisp:list
       (common-lisp:cons "blockedPhrases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-scope))
      (common-lisp:list
       (common-lisp:cons "responseScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-configurations))
      (common-lisp:list
       (common-lisp:cons "topicConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-chat-controls-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-request 'make-get-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source-arn common-lisp:nil :type
    (common-lisp:or data-source-arn common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or data-source-name common-lisp:null))
   (document-enrichment-configuration common-lisp:nil :type
    (common-lisp:or document-enrichment-configuration common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or error-detail common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-status common-lisp:null))
   (sync-schedule common-lisp:nil :type
    (common-lisp:or sync-schedule common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-response 'make-get-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "dataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "documentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-schedule))
      (common-lisp:list
       (common-lisp:cons "syncSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (group-name (common-lisp:error ":groupname is required") :type
    (common-lisp:or group-name common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-request 'make-get-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-response-"))
   (status common-lisp:nil :type
    (common-lisp:or group-status-detail common-lisp:null))
   (status-history common-lisp:nil :type
    (common-lisp:or group-status-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-response 'make-get-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-history))
      (common-lisp:list
       (common-lisp:cons "statusHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-index-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-index-request 'make-get-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-index-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null))
   (capacity-configuration common-lisp:nil :type
    (common-lisp:or index-capacity-configuration common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (document-attribute-configurations common-lisp:nil :type
    (common-lisp:or document-attribute-configurations common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or error-detail common-lisp:null))
   (index-arn common-lisp:nil :type
    (common-lisp:or index-arn common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (index-statistics common-lisp:nil :type
    (common-lisp:or index-statistics common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or index-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-index-response 'make-get-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-configuration))
      (common-lisp:list
       (common-lisp:cons "capacityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-configurations))
      (common-lisp:list
       (common-lisp:cons "documentAttributeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "indexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-statistics))
      (common-lisp:list
       (common-lisp:cons "indexStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-plugin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-plugin-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (plugin-id (common-lisp:error ":pluginid is required") :type
    (common-lisp:or plugin-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-plugin-request 'make-get-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-plugin-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-plugin-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null))
   (auth-configuration common-lisp:nil :type
    (common-lisp:or plugin-auth-configuration common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or plugin-name common-lisp:null))
   (plugin-arn common-lisp:nil :type
    (common-lisp:or plugin-arn common-lisp:null))
   (plugin-id common-lisp:nil :type
    (common-lisp:or plugin-id common-lisp:null))
   (server-url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or plugin-state common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or plugin-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-plugin-response 'make-get-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-plugin-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-configuration))
      (common-lisp:list
       (common-lisp:cons "authConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-arn))
      (common-lisp:list
       (common-lisp:cons "pluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-id))
      (common-lisp:list
       (common-lisp:cons "pluginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "serverUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-retriever-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-retriever-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (retriever-id (common-lisp:error ":retrieverid is required") :type
    (common-lisp:or retriever-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-retriever-request 'make-get-retriever-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-retriever-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-retriever-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or retriever-configuration common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or retriever-name common-lisp:null))
   (retriever-arn common-lisp:nil :type
    (common-lisp:or retriever-arn common-lisp:null))
   (retriever-id common-lisp:nil :type
    (common-lisp:or retriever-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or retriever-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or retriever-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-retriever-response 'make-get-retriever-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-arn))
      (common-lisp:list
       (common-lisp:cons "retrieverArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-id))
      (common-lisp:list
       (common-lisp:cons "retrieverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-retriever-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-request 'make-get-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-response-"))
   (user-aliases common-lisp:nil :type
    (common-lisp:or user-aliases common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-response 'make-get-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-aliases))
      (common-lisp:list
       (common-lisp:cons "userAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-web-experience-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-web-experience-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (web-experience-id (common-lisp:error ":webexperienceid is required") :type
    (common-lisp:or web-experience-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-web-experience-request
                    'make-get-web-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-web-experience-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-web-experience-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null))
   (authentication-configuration common-lisp:nil :type
    (common-lisp:or web-experience-auth-configuration common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (default-endpoint common-lisp:nil :type
    (common-lisp:or url common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or error-detail common-lisp:null))
   (sample-prompts-control-mode common-lisp:nil :type
    (common-lisp:or web-experience-sample-prompts-control-mode
                    common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or web-experience-status common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or web-experience-subtitle common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or web-experience-title common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (web-experience-arn common-lisp:nil :type
    (common-lisp:or web-experience-arn common-lisp:null))
   (web-experience-id common-lisp:nil :type
    (common-lisp:or web-experience-id common-lisp:null))
   (welcome-message common-lisp:nil :type
    (common-lisp:or web-experience-welcome-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-web-experience-response
                    'make-get-web-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-configuration))
      (common-lisp:list
       (common-lisp:cons "authenticationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-endpoint))
      (common-lisp:list
       (common-lisp:cons "defaultEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-prompts-control-mode))
      (common-lisp:list
       (common-lisp:cons "samplePromptsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-arn))
      (common-lisp:list
       (common-lisp:cons "webExperienceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-id))
      (common-lisp:list
       (common-lisp:cons "webExperienceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'welcome-message))
      (common-lisp:list
       (common-lisp:cons "welcomeMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-web-experience-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group-members (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-members-"))
   (member-groups common-lisp:nil :type
    (common-lisp:or member-groups common-lisp:null))
   (member-users common-lisp:nil :type
    (common-lisp:or member-users common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-members 'make-group-members))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-members))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-members))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-groups))
      (common-lisp:list
       (common-lisp:cons "memberGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-users))
      (common-lisp:list
       (common-lisp:cons "memberUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-members))
   common-lisp:nil))
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:deftype group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (group-status-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-status-detail-"))
   (error-detail common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or group-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'group-status-detail 'make-group-status-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-status-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-status-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "errorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-status-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-status-details ()
   '(trivial-types:proper-list group-status-detail))
 (common-lisp:defun make-group-status-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-status-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-summary-"))
   (group-name common-lisp:nil :type
    (common-lisp:or group-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-summary 'make-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-summary-list ()
   '(trivial-types:proper-list group-summary))
 (common-lisp:defun make-group-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hook-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-hook-configuration-"))
   (invocation-condition common-lisp:nil :type
    (common-lisp:or document-attribute-condition common-lisp:null))
   (lambda-arn common-lisp:nil :type
    (common-lisp:or lambda-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or s3bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hook-configuration 'make-hook-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hook-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hook-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-condition))
      (common-lisp:list
       (common-lisp:cons "invocationCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hook-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (index (:copier common-lisp:nil) (:conc-name "struct-shape-index-"))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or index-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'index 'make-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index))
   common-lisp:nil))
(common-lisp:deftype index-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (index-capacity-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-index-capacity-configuration-"))
   (units common-lisp:nil :type
    (common-lisp:or index-capacity-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'index-capacity-configuration
                    'make-index-capacity-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          index-capacity-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          index-capacity-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          index-capacity-configuration))
   common-lisp:nil))
(common-lisp:deftype index-capacity-integer () 'common-lisp:integer)
(common-lisp:deftype index-id () 'common-lisp:string)
(common-lisp:deftype index-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (index-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-index-statistics-"))
   (text-document-statistics common-lisp:nil :type
    (common-lisp:or text-document-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'index-statistics 'make-index-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-document-statistics))
      (common-lisp:list
       (common-lisp:cons "textDocumentStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-statistics))
   common-lisp:nil))
(common-lisp:deftype index-status () 'common-lisp:string)
(common-lisp:deftype indexed-text-bytes () 'common-lisp:integer)
(common-lisp:deftype indexed-text-document () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype indices () '(trivial-types:proper-list index))
 (common-lisp:defun make-indices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (inline-document-enrichment-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-inline-document-enrichment-configuration-"))
   (condition common-lisp:nil :type
    (common-lisp:or document-attribute-condition common-lisp:null))
   (document-content-operator common-lisp:nil :type
    (common-lisp:or document-content-operator common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or document-attribute-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inline-document-enrichment-configuration
                    'make-inline-document-enrichment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inline-document-enrichment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inline-document-enrichment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-content-operator))
      (common-lisp:list
       (common-lisp:cons "documentContentOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inline-document-enrichment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inline-document-enrichment-configurations ()
   '(trivial-types:proper-list inline-document-enrichment-configuration))
 (common-lisp:defun make-inline-document-enrichment-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inline-document-enrichment-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (kendra-index-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-kendra-index-configuration-"))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or kendra-index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kendra-index-configuration
                    'make-kendra-index-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kendra-index-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kendra-index-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kendra-index-configuration))
   common-lisp:nil))
(common-lisp:deftype kendra-index-id () 'common-lisp:string)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition license-not-found-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       license-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'license-not-found-exception
                    'license-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-applications
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-response-"))
   (applications common-lisp:nil :type
    (common-lisp:or applications common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-conversations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-conversations-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-conversations
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-conversations-request
                    'make-list-conversations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-conversations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-conversations-response-"))
   (conversations common-lisp:nil :type
    (common-lisp:or conversations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-conversations-response
                    'make-list-conversations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversations))
      (common-lisp:list
       (common-lisp:cons "conversations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conversations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-source-sync-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-source-sync-jobs-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-data-sources-sync-jobs
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status-filter common-lisp:nil :type
    (common-lisp:or data-source-sync-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-source-sync-jobs-request
                    'make-list-data-source-sync-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-source-sync-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-source-sync-jobs-response-"))
   (history common-lisp:nil :type
    (common-lisp:or data-source-sync-jobs common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-source-sync-jobs-response
                    'make-list-data-source-sync-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'history))
      (common-lisp:list
       (common-lisp:cons "history"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-data-sources
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-request
                    'make-list-data-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-response-"))
   (data-sources common-lisp:nil :type
    (common-lisp:or data-sources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-response
                    'make-list-data-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-documents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-documents-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-ids common-lisp:nil :type
    (common-lisp:or data-source-ids common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-documents common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-documents-request 'make-list-documents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-documents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-documents-response-"))
   (document-detail-list common-lisp:nil :type
    (common-lisp:or document-detail-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-documents-response 'make-list-documents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-detail-list))
      (common-lisp:list
       (common-lisp:cons "documentDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-groups-request
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (updated-earlier-than (common-lisp:error ":updatedearlierthan is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-response-"))
   (items common-lisp:nil :type
    (common-lisp:or group-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-indices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-indices-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-indices common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-indices-request 'make-list-indices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-indices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-indices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-indices-response-"))
   (indices common-lisp:nil :type (common-lisp:or indices common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-indices-response 'make-list-indices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indices))
      (common-lisp:list
       (common-lisp:cons "indices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-messages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-messages-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (conversation-id (common-lisp:error ":conversationid is required") :type
    (common-lisp:or conversation-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-messages common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-messages-request 'make-list-messages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-messages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-messages-response-"))
   (messages common-lisp:nil :type (common-lisp:or messages common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-messages-response 'make-list-messages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-messages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-plugins-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-plugins-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-plugins common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-plugins-request 'make-list-plugins-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-plugins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-plugins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-plugins-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-plugins-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-plugins-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (plugins common-lisp:nil :type (common-lisp:or plugins common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-plugins-response 'make-list-plugins-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-plugins-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-plugins-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugins))
      (common-lisp:list
       (common-lisp:cons "plugins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-plugins-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-retrievers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-retrievers-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-retrievers-request
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-retrievers-request 'make-list-retrievers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-retrievers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-retrievers-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (retrievers common-lisp:nil :type
    (common-lisp:or retrievers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-retrievers-response 'make-list-retrievers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retrievers))
      (common-lisp:list
       (common-lisp:cons "retrievers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-retrievers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-web-experiences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-web-experiences-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-web-experiences-request
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-web-experiences-request
                    'make-list-web-experiences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-web-experiences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-web-experiences-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (web-experiences common-lisp:nil :type
    (common-lisp:or web-experiences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-web-experiences-response
                    'make-list-web-experiences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experiences))
      (common-lisp:list
       (common-lisp:cons "webExperiences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-web-experiences-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-get-topic-configurations ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-applications ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-conversations ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-data-sources ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-data-sources-sync-jobs ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-documents ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-groups-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-indices ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-messages ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-plugins ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-retrievers-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-web-experiences-request ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (member-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-group-"))
   (group-name (common-lisp:error ":groupname is required") :type
    (common-lisp:or group-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or membership-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member-group 'make-member-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-groups ()
   '(trivial-types:proper-list member-group))
 (common-lisp:defun make-member-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype member-relation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (member-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-user-"))
   (type common-lisp:nil :type
    (common-lisp:or membership-type common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or data-source-user-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member-user 'make-member-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-users () '(trivial-types:proper-list member-user))
 (common-lisp:defun make-member-users
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype membership-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (message (:copier common-lisp:nil) (:conc-name "struct-shape-message-"))
   (action-review common-lisp:nil :type
    (common-lisp:or action-review common-lisp:null))
   (attachments common-lisp:nil :type
    (common-lisp:or attachments-output common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or message-body common-lisp:null))
   (message-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-attribution common-lisp:nil :type
    (common-lisp:or source-attributions common-lisp:null))
   (time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or message-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'message 'make-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-review))
      (common-lisp:list
       (common-lisp:cons "actionReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "messageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-attribution))
      (common-lisp:list
       (common-lisp:cons "sourceAttribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message))
   common-lisp:nil))
(common-lisp:deftype message-body () 'common-lisp:string)
(common-lisp:deftype message-id () 'common-lisp:string)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:deftype message-usefulness () 'common-lisp:string)
(common-lisp:deftype message-usefulness-comment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (message-usefulness-feedback (:copier common-lisp:nil)
      (:conc-name "struct-shape-message-usefulness-feedback-"))
   (comment common-lisp:nil :type
    (common-lisp:or message-usefulness-comment common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or message-usefulness-reason common-lisp:null))
   (submitted-at (common-lisp:error ":submittedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (usefulness (common-lisp:error ":usefulness is required") :type
    (common-lisp:or message-usefulness common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'message-usefulness-feedback
                    'make-message-usefulness-feedback))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          message-usefulness-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          message-usefulness-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-at))
      (common-lisp:list
       (common-lisp:cons "submittedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usefulness))
      (common-lisp:list
       (common-lisp:cons "usefulness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          message-usefulness-feedback))
   common-lisp:nil))
(common-lisp:deftype message-usefulness-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype messages () '(trivial-types:proper-list message))
 (common-lisp:defun make-messages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (native-index-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-native-index-configuration-"))
   (boosting-override common-lisp:nil :type
    (common-lisp:or document-attribute-boosting-override-map common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'native-index-configuration
                    'make-native-index-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          native-index-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          native-index-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-override))
      (common-lisp:list
       (common-lisp:cons "boostingOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          native-index-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (number-attribute-boosting-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-number-attribute-boosting-configuration-"))
   (boosting-level (common-lisp:error ":boostinglevel is required") :type
    (common-lisp:or document-attribute-boosting-level common-lisp:null))
   (boosting-type common-lisp:nil :type
    (common-lisp:or number-attribute-boosting-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'number-attribute-boosting-configuration
                    'make-number-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          number-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          number-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-level))
      (common-lisp:list
       (common-lisp:cons "boostingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-type))
      (common-lisp:list
       (common-lisp:cons "boostingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          number-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:deftype number-attribute-boosting-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (oauth2client-credential-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-oauth2client-credential-configuration-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (secret-arn (common-lisp:error ":secretarn is required") :type
    (common-lisp:or secret-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oauth2client-credential-configuration
                    'make-oauth2client-credential-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oauth2client-credential-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oauth2client-credential-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oauth2client-credential-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (plugin (:copier common-lisp:nil) (:conc-name "struct-shape-plugin-"))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or plugin-name common-lisp:null))
   (plugin-id common-lisp:nil :type
    (common-lisp:or plugin-id common-lisp:null))
   (server-url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or plugin-state common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or plugin-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'plugin 'make-plugin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input plugin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input plugin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-id))
      (common-lisp:list
       (common-lisp:cons "pluginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "serverUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input plugin))
   common-lisp:nil))
(common-lisp:deftype plugin-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (plugin-auth-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-plugin-auth-configuration-"))
   (basic-auth-configuration common-lisp:nil :type
    (common-lisp:or basic-auth-configuration common-lisp:null))
   (o-auth2client-credential-configuration common-lisp:nil :type
    (common-lisp:or oauth2client-credential-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'plugin-auth-configuration
                    'make-plugin-auth-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          plugin-auth-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          plugin-auth-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-configuration))
      (common-lisp:list
       (common-lisp:cons "basicAuthConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'o-auth2client-credential-configuration))
      (common-lisp:list
       (common-lisp:cons "oAuth2ClientCredentialConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          plugin-auth-configuration))
   common-lisp:nil))
(common-lisp:deftype plugin-id () 'common-lisp:string)
(common-lisp:deftype plugin-name () 'common-lisp:string)
(common-lisp:deftype plugin-state () 'common-lisp:string)
(common-lisp:deftype plugin-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype plugins () '(trivial-types:proper-list plugin))
 (common-lisp:defun make-plugins
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list plugin))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (principal (:copier common-lisp:nil)
      (:conc-name "struct-shape-principal-"))
   (group common-lisp:nil :type
    (common-lisp:or principal-group common-lisp:null))
   (user common-lisp:nil :type
    (common-lisp:or principal-user common-lisp:null)))
 (common-lisp:export (common-lisp:list 'principal 'make-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (principal-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-principal-group-"))
   (access (common-lisp:error ":access is required") :type
    (common-lisp:or read-access-type common-lisp:null))
   (membership-type common-lisp:nil :type
    (common-lisp:or membership-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or group-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'principal-group 'make-principal-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-type))
      (common-lisp:list
       (common-lisp:cons "membershipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (principal-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-principal-user-"))
   (access (common-lisp:error ":access is required") :type
    (common-lisp:or read-access-type common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (membership-type common-lisp:nil :type
    (common-lisp:or membership-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'principal-user 'make-principal-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-type))
      (common-lisp:list
       (common-lisp:cons "membershipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal))
 (common-lisp:defun make-principals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-feedback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-feedback-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (conversation-id (common-lisp:error ":conversationid is required") :type
    (common-lisp:or conversation-id common-lisp:null))
   (message-copied-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (message-id (common-lisp:error ":messageid is required") :type
    (common-lisp:or system-message-id common-lisp:null))
   (message-usefulness common-lisp:nil :type
    (common-lisp:or message-usefulness-feedback common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-feedback-request 'make-put-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-copied-at))
      (common-lisp:list
       (common-lisp:cons "messageCopiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-usefulness))
      (common-lisp:list
       (common-lisp:cons "messageUsefulness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-group-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (group-members (common-lisp:error ":groupmembers is required") :type
    (common-lisp:or group-members common-lisp:null))
   (group-name (common-lisp:error ":groupname is required") :type
    (common-lisp:or group-name common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or membership-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-group-request 'make-put-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-members))
      (common-lisp:list
       (common-lisp:cons "groupMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-group-response-")))
 (common-lisp:export
  (common-lisp:list 'put-group-response 'make-put-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-group-response))
   common-lisp:nil))
(common-lisp:deftype read-access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype response-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (retriever (:copier common-lisp:nil)
      (:conc-name "struct-shape-retriever-"))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or retriever-name common-lisp:null))
   (retriever-id common-lisp:nil :type
    (common-lisp:or retriever-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or retriever-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or retriever-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'retriever 'make-retriever))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retriever))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retriever))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retriever-id))
      (common-lisp:list
       (common-lisp:cons "retrieverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retriever))
   common-lisp:nil))
(common-lisp:deftype retriever-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (retriever-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-retriever-configuration-"))
   (kendra-index-configuration common-lisp:nil :type
    (common-lisp:or kendra-index-configuration common-lisp:null))
   (native-index-configuration common-lisp:nil :type
    (common-lisp:or native-index-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retriever-configuration 'make-retriever-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retriever-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retriever-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-index-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraIndexConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'native-index-configuration))
      (common-lisp:list
       (common-lisp:cons "nativeIndexConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retriever-configuration))
   common-lisp:nil))
(common-lisp:deftype retriever-id () 'common-lisp:string)
(common-lisp:deftype retriever-name () 'common-lisp:string)
(common-lisp:deftype retriever-status () 'common-lisp:string)
(common-lisp:deftype retriever-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype retrievers () '(trivial-types:proper-list retriever))
 (common-lisp:defun make-retrievers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list retriever))
   aws-sdk/generator/shape::members))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (excluded-users-and-groups common-lisp:nil :type
    (common-lisp:or users-and-groups common-lisp:null))
   (included-users-and-groups common-lisp:nil :type
    (common-lisp:or users-and-groups common-lisp:null))
   (rule-configuration common-lisp:nil :type
    (common-lisp:or rule-configuration common-lisp:null))
   (rule-type (common-lisp:error ":ruletype is required") :type
    (common-lisp:or rule-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-users-and-groups))
      (common-lisp:list
       (common-lisp:cons "excludedUsersAndGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'included-users-and-groups))
      (common-lisp:list
       (common-lisp:cons "includedUsersAndGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-configuration))
      (common-lisp:list
       (common-lisp:cons "ruleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-type))
      (common-lisp:list
       (common-lisp:cons "ruleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-configuration-"))
   (content-blocker-rule common-lisp:nil :type
    (common-lisp:or content-blocker-rule common-lisp:null))
   (content-retrieval-rule common-lisp:nil :type
    (common-lisp:or content-retrieval-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-configuration 'make-rule-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-blocker-rule))
      (common-lisp:list
       (common-lisp:cons "contentBlockerRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-retrieval-rule))
      (common-lisp:list
       (common-lisp:cons "contentRetrievalRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-configuration))
   common-lisp:nil))
(common-lisp:deftype rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rules () '(trivial-types:proper-list rule))
 (common-lisp:defun make-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (s3 (:copier common-lisp:nil) (:conc-name "struct-shape-s3-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3 'make-s3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype saml-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (saml-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-saml-configuration-"))
   (metadata-xml (common-lisp:error ":metadataxml is required") :type
    (common-lisp:or saml-metadata-xml common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (user-group-attribute common-lisp:nil :type
    (common-lisp:or saml-attribute common-lisp:null))
   (user-id-attribute (common-lisp:error ":useridattribute is required") :type
    (common-lisp:or saml-attribute common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saml-configuration 'make-saml-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saml-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saml-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-xml))
      (common-lisp:list
       (common-lisp:cons "metadataXML"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-attribute))
      (common-lisp:list
       (common-lisp:cons "userGroupAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id-attribute))
      (common-lisp:list
       (common-lisp:cons "userIdAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saml-configuration))
   common-lisp:nil))
(common-lisp:deftype saml-metadata-xml () 'common-lisp:string)
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (source-attribution (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-attribution-"))
   (citation-number common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snippet common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (text-message-segments common-lisp:nil :type
    (common-lisp:or text-segment-list common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-attribution 'make-source-attribution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-attribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-attribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'citation-number))
      (common-lisp:list
       (common-lisp:cons "citationNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snippet))
      (common-lisp:list
       (common-lisp:cons "snippet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-message-segments))
      (common-lisp:list
       (common-lisp:cons "textMessageSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-attribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-attributions ()
   '(trivial-types:proper-list source-attribution))
 (common-lisp:defun make-source-attributions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-attribution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-source-sync-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-source-sync-job-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-source-sync-job-request
                    'make-start-data-source-sync-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-source-sync-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-source-sync-job-response-"))
   (execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-source-sync-job-response
                    'make-start-data-source-sync-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-response))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-data-source-sync-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-data-source-sync-job-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-data-source-sync-job-request
                    'make-stop-data-source-sync-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-data-source-sync-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-data-source-sync-job-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-data-source-sync-job-response
                    'make-stop-data-source-sync-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (string-attribute-boosting-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-attribute-boosting-configuration-"))
   (attribute-value-boosting common-lisp:nil :type
    (common-lisp:or string-attribute-value-boosting common-lisp:null))
   (boosting-level (common-lisp:error ":boostinglevel is required") :type
    (common-lisp:or document-attribute-boosting-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-attribute-boosting-configuration
                    'make-string-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-value-boosting))
      (common-lisp:list
       (common-lisp:cons "attributeValueBoosting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-level))
      (common-lisp:list
       (common-lisp:cons "boostingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-attribute-value-boosting ()
   'common-lisp:hash-table)
 (common-lisp:defun make-string-attribute-value-boosting
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype string-attribute-value-boosting-level ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (string-list-attribute-boosting-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-string-list-attribute-boosting-configuration-"))
   (boosting-level (common-lisp:error ":boostinglevel is required") :type
    (common-lisp:or document-attribute-boosting-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-list-attribute-boosting-configuration
                    'make-string-list-attribute-boosting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-list-attribute-boosting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-list-attribute-boosting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boosting-level))
      (common-lisp:list
       (common-lisp:cons "boostingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-list-attribute-boosting-configuration))
   common-lisp:nil))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sync-schedule () 'common-lisp:string)
(common-lisp:deftype system-message-id () 'common-lisp:string)
(common-lisp:deftype system-message-override () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tags
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (text-document-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-document-statistics-"))
   (indexed-text-bytes common-lisp:nil :type
    (common-lisp:or indexed-text-bytes common-lisp:null))
   (indexed-text-document-count common-lisp:nil :type
    (common-lisp:or indexed-text-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-document-statistics 'make-text-document-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-document-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-document-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indexed-text-bytes))
      (common-lisp:list
       (common-lisp:cons "indexedTextBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'indexed-text-document-count))
      (common-lisp:list
       (common-lisp:cons "indexedTextDocumentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-document-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (text-segment (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-segment-"))
   (begin-offset common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (end-offset common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'text-segment 'make-text-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "beginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "endOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype text-segment-list ()
   '(trivial-types:proper-list text-segment))
 (common-lisp:defun make-text-segment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text-segment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (qbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (topic-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-configuration-"))
   (description common-lisp:nil :type
    (common-lisp:or topic-description common-lisp:null))
   (example-chat-messages common-lisp:nil :type
    (common-lisp:or example-chat-messages common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or topic-configuration-name common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-configuration 'make-topic-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'example-chat-messages))
      (common-lisp:list
       (common-lisp:cons "exampleChatMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-configuration))
   common-lisp:nil))
(common-lisp:deftype topic-configuration-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype topic-configurations ()
   '(trivial-types:proper-list topic-configuration))
 (common-lisp:defun make-topic-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype topic-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (attachments-configuration common-lisp:nil :type
    (common-lisp:or attachments-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-configuration))
      (common-lisp:list
       (common-lisp:cons "attachmentsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-response-")))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-chat-controls-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-chat-controls-configuration-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (blocked-phrases-configuration-update common-lisp:nil :type
    (common-lisp:or blocked-phrases-configuration-update common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (response-scope common-lisp:nil :type
    (common-lisp:or response-scope common-lisp:null))
   (topic-configurations-to-create-or-update common-lisp:nil :type
    (common-lisp:or topic-configurations common-lisp:null))
   (topic-configurations-to-delete common-lisp:nil :type
    (common-lisp:or topic-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-chat-controls-configuration-request
                    'make-update-chat-controls-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blocked-phrases-configuration-update))
      (common-lisp:list
       (common-lisp:cons "blockedPhrasesConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-scope))
      (common-lisp:list
       (common-lisp:cons "responseScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-configurations-to-create-or-update))
      (common-lisp:list
       (common-lisp:cons "topicConfigurationsToCreateOrUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-configurations-to-delete))
      (common-lisp:list
       (common-lisp:cons "topicConfigurationsToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-chat-controls-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-chat-controls-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-chat-controls-configuration-response
                    'make-update-chat-controls-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-chat-controls-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or data-source-name common-lisp:null))
   (document-enrichment-configuration common-lisp:nil :type
    (common-lisp:or document-enrichment-configuration common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (sync-schedule common-lisp:nil :type
    (common-lisp:or sync-schedule common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-request
                    'make-update-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "documentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-schedule))
      (common-lisp:list
       (common-lisp:cons "syncSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-response-")))
 (common-lisp:export
  (common-lisp:list 'update-data-source-response
                    'make-update-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-index-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (capacity-configuration common-lisp:nil :type
    (common-lisp:or index-capacity-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (document-attribute-configurations common-lisp:nil :type
    (common-lisp:or document-attribute-configurations common-lisp:null))
   (index-id (common-lisp:error ":indexid is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-index-request 'make-update-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-configuration))
      (common-lisp:list
       (common-lisp:cons "capacityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-configurations))
      (common-lisp:list
       (common-lisp:cons "documentAttributeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-index-response-")))
 (common-lisp:export
  (common-lisp:list 'update-index-response 'make-update-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-plugin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-plugin-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (auth-configuration common-lisp:nil :type
    (common-lisp:or plugin-auth-configuration common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or plugin-name common-lisp:null))
   (plugin-id (common-lisp:error ":pluginid is required") :type
    (common-lisp:or plugin-id common-lisp:null))
   (server-url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or plugin-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-plugin-request 'make-update-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-configuration))
      (common-lisp:list
       (common-lisp:cons "authConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "serverUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-plugin-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-plugin-response-")))
 (common-lisp:export
  (common-lisp:list 'update-plugin-response 'make-update-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-retriever-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-retriever-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or retriever-configuration common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or retriever-name common-lisp:null))
   (retriever-id (common-lisp:error ":retrieverid is required") :type
    (common-lisp:or retriever-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-retriever-request 'make-update-retriever-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-retriever-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-retriever-response-")))
 (common-lisp:export
  (common-lisp:list 'update-retriever-response
                    'make-update-retriever-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-retriever-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (user-aliases-to-delete common-lisp:nil :type
    (common-lisp:or user-aliases common-lisp:null))
   (user-aliases-to-update common-lisp:nil :type
    (common-lisp:or user-aliases common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-aliases-to-delete))
      (common-lisp:list
       (common-lisp:cons "userAliasesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-aliases-to-update))
      (common-lisp:list
       (common-lisp:cons "userAliasesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-response-"))
   (user-aliases-added common-lisp:nil :type
    (common-lisp:or user-aliases common-lisp:null))
   (user-aliases-deleted common-lisp:nil :type
    (common-lisp:or user-aliases common-lisp:null))
   (user-aliases-updated common-lisp:nil :type
    (common-lisp:or user-aliases common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-aliases-added))
      (common-lisp:list
       (common-lisp:cons "userAliasesAdded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-aliases-deleted))
      (common-lisp:list
       (common-lisp:cons "userAliasesDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-aliases-updated))
      (common-lisp:list
       (common-lisp:cons "userAliasesUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-web-experience-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-web-experience-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (authentication-configuration common-lisp:nil :type
    (common-lisp:or web-experience-auth-configuration common-lisp:null))
   (sample-prompts-control-mode common-lisp:nil :type
    (common-lisp:or web-experience-sample-prompts-control-mode
                    common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or web-experience-subtitle common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or web-experience-title common-lisp:null))
   (web-experience-id (common-lisp:error ":webexperienceid is required") :type
    (common-lisp:or web-experience-id common-lisp:null))
   (welcome-message common-lisp:nil :type
    (common-lisp:or web-experience-welcome-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-web-experience-request
                    'make-update-web-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-configuration))
      (common-lisp:list
       (common-lisp:cons "authenticationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-prompts-control-mode))
      (common-lisp:list
       (common-lisp:cons "samplePromptsControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'welcome-message))
      (common-lisp:list
       (common-lisp:cons "welcomeMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-web-experience-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-web-experience-response-")))
 (common-lisp:export
  (common-lisp:list 'update-web-experience-response
                    'make-update-web-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-web-experience-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-alias (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-alias-"))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-alias 'make-user-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "indexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-aliases () '(trivial-types:proper-list user-alias))
 (common-lisp:defun make-user-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-groups () '(trivial-types:proper-list string))
 (common-lisp:defun make-user-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-ids () '(trivial-types:proper-list string))
 (common-lisp:defun make-user-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (users-and-groups (:copier common-lisp:nil)
      (:conc-name "struct-shape-users-and-groups-"))
   (user-groups common-lisp:nil :type
    (common-lisp:or user-groups common-lisp:null))
   (user-ids common-lisp:nil :type (common-lisp:or user-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'users-and-groups 'make-users-and-groups))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input users-and-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input users-and-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-groups))
      (common-lisp:list
       (common-lisp:cons "userGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "userIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input users-and-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (qbusiness-error)
     ((fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-fields
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-fields ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (web-experience (:copier common-lisp:nil)
      (:conc-name "struct-shape-web-experience-"))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (default-endpoint common-lisp:nil :type
    (common-lisp:or url common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or web-experience-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (web-experience-id common-lisp:nil :type
    (common-lisp:or web-experience-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'web-experience 'make-web-experience))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input web-experience))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input web-experience))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-endpoint))
      (common-lisp:list
       (common-lisp:cons "defaultEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-experience-id))
      (common-lisp:list
       (common-lisp:cons "webExperienceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input web-experience))
   common-lisp:nil))
(common-lisp:deftype web-experience-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (web-experience-auth-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-web-experience-auth-configuration-"))
   (saml-configuration common-lisp:nil :type
    (common-lisp:or saml-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'web-experience-auth-configuration
                    'make-web-experience-auth-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          web-experience-auth-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          web-experience-auth-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml-configuration))
      (common-lisp:list
       (common-lisp:cons "samlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          web-experience-auth-configuration))
   common-lisp:nil))
(common-lisp:deftype web-experience-id () 'common-lisp:string)
(common-lisp:deftype web-experience-sample-prompts-control-mode ()
  'common-lisp:string)
(common-lisp:deftype web-experience-status () 'common-lisp:string)
(common-lisp:deftype web-experience-subtitle () 'common-lisp:string)
(common-lisp:deftype web-experience-title () 'common-lisp:string)
(common-lisp:deftype web-experience-welcome-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype web-experiences ()
   '(trivial-types:proper-list web-experience))
 (common-lisp:defun make-web-experiences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list web-experience))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun batch-delete-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-sync-id
                     documents index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-sync-id documents
     index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/documents/delete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "BatchDeleteDocument"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-document))
(common-lisp:progn
 (common-lisp:defun batch-put-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-sync-id
                     documents index-id role-arn)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-sync-id documents
     index-id role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-put-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/documents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "BatchPutDocument"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-put-document))
(common-lisp:progn
 (common-lisp:defun chat-sync
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id attachments
                     attribute-filter client-token conversation-id
                     parent-message-id user-groups user-id user-message)
   (common-lisp:declare
    (common-lisp:ignorable application-id attachments attribute-filter
     client-token conversation-id parent-message-id user-groups user-id
     user-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-chat-sync-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations?sync"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ChatSync"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'chat-sync))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachments-configuration client-token
                     description display-name encryption-configuration role-arn
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable attachments-configuration client-token description
     display-name encryption-configuration role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/applications"
                                                        "CreateApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id capacity-configuration
                     client-token description display-name tags)
   (common-lisp:declare
    (common-lisp:ignorable application-id capacity-configuration client-token
     description display-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-index))
(common-lisp:progn
 (common-lisp:defun create-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id auth-configuration
                     client-token display-name server-url tags type)
   (common-lisp:declare
    (common-lisp:ignorable application-id auth-configuration client-token
     display-name server-url tags type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreatePlugin"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-plugin))
(common-lisp:progn
 (common-lisp:defun create-retriever
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token configuration
                     display-name role-arn tags type)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token configuration
     display-name role-arn tags type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-retriever-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateRetriever"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-retriever))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token user-aliases
                     user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token user-aliases user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-web-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token
                     sample-prompts-control-mode subtitle tags title
                     welcome-message)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token
     sample-prompts-control-mode subtitle tags title welcome-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-web-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateWebExperience"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-web-experience))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-chat-controls-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-chat-controls-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/chatcontrols"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteChatControlsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-chat-controls-configuration))
(common-lisp:progn
 (common-lisp:defun delete-conversation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id conversation-id user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id conversation-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-conversation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'conversation-id))))
                                                        "DeleteConversation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-conversation))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "DeleteDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id group-name
                     index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id group-name index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "DeleteGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id index-id)
   (common-lisp:declare (common-lisp:ignorable application-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "DeleteIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-index))
(common-lisp:progn
 (common-lisp:defun delete-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id plugin-id)
   (common-lisp:declare (common-lisp:ignorable application-id plugin-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'plugin-id))))
                                                        "DeletePlugin"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-plugin))
(common-lisp:progn
 (common-lisp:defun delete-retriever
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id retriever-id)
   (common-lisp:declare (common-lisp:ignorable application-id retriever-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-retriever-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'retriever-id))))
                                                        "DeleteRetriever"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-retriever))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id user-id)
   (common-lisp:declare (common-lisp:ignorable application-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeleteUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-web-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id web-experience-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id web-experience-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-web-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'web-experience-id))))
                                                        "DeleteWebExperience"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-web-experience))
(common-lisp:progn
 (common-lisp:defun get-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application))
(common-lisp:progn
 (common-lisp:defun get-chat-controls-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-chat-controls-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/chatcontrols"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetChatControlsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-chat-controls-configuration))
(common-lisp:progn
 (common-lisp:defun get-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "GetDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-source))
(common-lisp:progn
 (common-lisp:defun get-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id group-name
                     index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id group-name index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "GetGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-group))
(common-lisp:progn
 (common-lisp:defun get-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id index-id)
   (common-lisp:declare (common-lisp:ignorable application-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "GetIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-index))
(common-lisp:progn
 (common-lisp:defun get-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id plugin-id)
   (common-lisp:declare (common-lisp:ignorable application-id plugin-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'plugin-id))))
                                                        "GetPlugin"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-plugin))
(common-lisp:progn
 (common-lisp:defun get-retriever
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id retriever-id)
   (common-lisp:declare (common-lisp:ignorable application-id retriever-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-retriever-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'retriever-id))))
                                                        "GetRetriever"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-retriever))
(common-lisp:progn
 (common-lisp:defun get-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id user-id)
   (common-lisp:declare (common-lisp:ignorable application-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "GetUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user))
(common-lisp:progn
 (common-lisp:defun get-web-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id web-experience-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id web-experience-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-web-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'web-experience-id))))
                                                        "GetWebExperience"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-web-experience))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/applications"
                                                        "ListApplications"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-conversations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token
                     user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-conversations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListConversations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-conversations))
(common-lisp:progn
 (common-lisp:defun list-data-source-sync-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id end-time
                     index-id max-results next-token start-time status-filter)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id end-time index-id
     max-results next-token start-time status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-source-sync-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A/syncjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "ListDataSourceSyncJobs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-source-sync-jobs))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id index-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id index-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "ListDataSources"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-documents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-ids index-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-ids index-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-documents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/index/~A/documents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "ListDocuments"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-documents))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id
                     max-results next-token updated-earlier-than)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id max-results
     next-token updated-earlier-than))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "ListGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-indices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-indices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListIndices"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-indices))
(common-lisp:progn
 (common-lisp:defun list-messages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id conversation-id
                     max-results next-token user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id conversation-id max-results
     next-token user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-messages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'conversation-id))))
                                                        "ListMessages"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-messages))
(common-lisp:progn
 (common-lisp:defun list-plugins
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-plugins-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListPlugins"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-plugins))
(common-lisp:progn
 (common-lisp:defun list-retrievers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-retrievers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListRetrievers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-retrievers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-web-experiences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-web-experiences-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListWebExperiences"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-web-experiences))
(common-lisp:progn
 (common-lisp:defun put-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id conversation-id
                     message-copied-at message-id message-usefulness user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id conversation-id message-copied-at
     message-id message-usefulness user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/conversations/~A/messages/~A/feedback"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'conversation-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'message-id))))
                                                        "PutFeedback"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-feedback))
(common-lisp:progn
 (common-lisp:defun put-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id
                     group-members group-name index-id type)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id group-members
     group-name index-id type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "PutGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-group))
(common-lisp:progn
 (common-lisp:defun start-data-source-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-source-sync-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A/startsync"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "StartDataSourceSyncJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-data-source-sync-job))
(common-lisp:progn
 (common-lisp:defun stop-data-source-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-data-source-sync-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A/stopsync"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "StopDataSourceSyncJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-data-source-sync-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id attachments-configuration
                     description display-name role-arn)
   (common-lisp:declare
    (common-lisp:ignorable application-id attachments-configuration description
     display-name role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-chat-controls-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id
                     blocked-phrases-configuration-update client-token
                     response-scope topic-configurations-to-create-or-update
                     topic-configurations-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable application-id blocked-phrases-configuration-update
     client-token response-scope topic-configurations-to-create-or-update
     topic-configurations-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-chat-controls-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/chatcontrols"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateChatControlsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-chat-controls-configuration))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id data-source-id description
                     display-name document-enrichment-configuration index-id
                     role-arn sync-schedule vpc-configuration)
   (common-lisp:declare
    (common-lisp:ignorable application-id data-source-id description
     display-name document-enrichment-configuration index-id role-arn
     sync-schedule vpc-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "UpdateDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id capacity-configuration
                     description display-name document-attribute-configurations
                     index-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id capacity-configuration description
     display-name document-attribute-configurations index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/indices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-id))))
                                                        "UpdateIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-index))
(common-lisp:progn
 (common-lisp:defun update-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id auth-configuration
                     display-name plugin-id server-url state)
   (common-lisp:declare
    (common-lisp:ignorable application-id auth-configuration display-name
     plugin-id server-url state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/plugins/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'plugin-id))))
                                                        "UpdatePlugin"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-plugin))
(common-lisp:progn
 (common-lisp:defun update-retriever
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration display-name
                     retriever-id role-arn)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration display-name
     retriever-id role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-retriever-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/retrievers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'retriever-id))))
                                                        "UpdateRetriever"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-retriever))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id user-aliases-to-delete
                     user-aliases-to-update user-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id user-aliases-to-delete
     user-aliases-to-update user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
(common-lisp:progn
 (common-lisp:defun update-web-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id
                     authentication-configuration sample-prompts-control-mode
                     subtitle title web-experience-id welcome-message)
   (common-lisp:declare
    (common-lisp:ignorable application-id authentication-configuration
     sample-prompts-control-mode subtitle title web-experience-id
     welcome-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-web-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qbusiness-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/experiences/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'web-experience-id))))
                                                        "UpdateWebExperience"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-web-experience))
