;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/s3control/api
  (:use)
  (:nicknames #:aws/s3control)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/s3control/api)
(common-lisp:progn
 (common-lisp:defclass s3control-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "s3control" :protocol
                        :rest-xml))
 (common-lisp:export 's3control-request))
(common-lisp:progn
 (common-lisp:define-condition s3control-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 's3control-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("BucketAlreadyExists" . bucket-already-exists)
    ("BucketAlreadyOwnedByYou" . bucket-already-owned-by-you)
    ("IdempotencyException" . idempotency-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("JobStatusException" . job-status-exception)
    ("NoSuchPublicAccessBlockConfiguration"
     . no-such-public-access-block-configuration)
    ("NotFoundException" . not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (abort-incomplete-multipart-upload (:copier common-lisp:nil)
      (:conc-name "struct-shape-abort-incomplete-multipart-upload-"))
   (days-after-initiation common-lisp:nil :type
    (common-lisp:or days-after-initiation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'abort-incomplete-multipart-upload
                    'make-abort-incomplete-multipart-upload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'days-after-initiation))
      (common-lisp:list
       (common-lisp:cons "DaysAfterInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-control-translation (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-translation-"))
   (owner (common-lisp:error ":owner is required") :type
    (common-lisp:or owner-override common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-control-translation
                    'make-access-control-translation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-point (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-point-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-point-name common-lisp:null))
   (network-origin (common-lisp:error ":network-origin is required") :type
    (common-lisp:or network-origin common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or vpc-configuration common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (access-point-arn common-lisp:nil :type
    (common-lisp:or s3access-point-arn common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or alias common-lisp:null))
   (bucket-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-point 'make-access-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-origin))
      (common-lisp:list
       (common-lisp:cons "NetworkOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-point-list ()
   '(trivial-types:proper-list access-point))
 (common-lisp:defun |make-access-point-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-point-name () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (account-level (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-level-"))
   (activity-metrics common-lisp:nil :type
    (common-lisp:or activity-metrics common-lisp:null))
   (bucket-level (common-lisp:error ":bucket-level is required") :type
    (common-lisp:or bucket-level common-lisp:null))
   (advanced-cost-optimization-metrics common-lisp:nil :type
    (common-lisp:or advanced-cost-optimization-metrics common-lisp:null))
   (advanced-data-protection-metrics common-lisp:nil :type
    (common-lisp:or advanced-data-protection-metrics common-lisp:null))
   (detailed-status-codes-metrics common-lisp:nil :type
    (common-lisp:or detailed-status-codes-metrics common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-level 'make-account-level))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-metrics))
      (common-lisp:list
       (common-lisp:cons "ActivityMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-level))
      (common-lisp:list
       (common-lisp:cons "BucketLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-cost-optimization-metrics))
      (common-lisp:list
       (common-lisp:cons "AdvancedCostOptimizationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-data-protection-metrics))
      (common-lisp:list
       (common-lisp:cons "AdvancedDataProtectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-status-codes-metrics))
      (common-lisp:list
       (common-lisp:cons "DetailedStatusCodesMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-level))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-metrics-"))
   (is-enabled common-lisp:nil :type
    (common-lisp:or is-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-metrics 'make-activity-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (advanced-cost-optimization-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-advanced-cost-optimization-metrics-"))
   (is-enabled common-lisp:nil :type
    (common-lisp:or is-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'advanced-cost-optimization-metrics
                    'make-advanced-cost-optimization-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-cost-optimization-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-cost-optimization-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-cost-optimization-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (advanced-data-protection-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-advanced-data-protection-metrics-"))
   (is-enabled common-lisp:nil :type
    (common-lisp:or is-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'advanced-data-protection-metrics
                    'make-advanced-data-protection-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-data-protection-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-data-protection-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-data-protection-metrics))
   common-lisp:nil))
(common-lisp:deftype alias () 'common-lisp:string)
(common-lisp:deftype async-creation-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (async-error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-async-error-details-"))
   (code common-lisp:nil :type
    (common-lisp:or max-length1024string common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or max-length1024string common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or max-length1024string common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or max-length1024string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'async-error-details 'make-async-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input async-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input async-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input async-error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (async-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-async-operation-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or async-creation-timestamp common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or async-operation-name common-lisp:null))
   (request-token-arn common-lisp:nil :type
    (common-lisp:or async-request-token-arn common-lisp:null))
   (request-parameters common-lisp:nil :type
    (common-lisp:or async-request-parameters common-lisp:null))
   (request-status common-lisp:nil :type
    (common-lisp:or async-request-status common-lisp:null))
   (response-details common-lisp:nil :type
    (common-lisp:or async-response-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'async-operation 'make-async-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input async-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input async-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token-arn))
      (common-lisp:list
       (common-lisp:cons "RequestTokenARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-parameters))
      (common-lisp:list
       (common-lisp:cons "RequestParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-status))
      (common-lisp:list
       (common-lisp:cons "RequestStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-details))
      (common-lisp:list
       (common-lisp:cons "ResponseDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input async-operation))
   common-lisp:nil))
(common-lisp:deftype async-operation-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (async-request-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-async-request-parameters-"))
   (create-multi-region-access-point-request common-lisp:nil :type
    (common-lisp:or create-multi-region-access-point-input common-lisp:null))
   (delete-multi-region-access-point-request common-lisp:nil :type
    (common-lisp:or delete-multi-region-access-point-input common-lisp:null))
   (put-multi-region-access-point-policy-request common-lisp:nil :type
    (common-lisp:or put-multi-region-access-point-policy-input
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'async-request-parameters 'make-async-request-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          async-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          async-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-multi-region-access-point-request))
      (common-lisp:list
       (common-lisp:cons "CreateMultiRegionAccessPointRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-multi-region-access-point-request))
      (common-lisp:list
       (common-lisp:cons "DeleteMultiRegionAccessPointRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'put-multi-region-access-point-policy-request))
      (common-lisp:list
       (common-lisp:cons "PutMultiRegionAccessPointPolicyRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          async-request-parameters))
   common-lisp:nil))
(common-lisp:deftype async-request-status () 'common-lisp:string)
(common-lisp:deftype async-request-token-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (async-response-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-async-response-details-"))
   (multi-region-access-point-details common-lisp:nil :type
    (common-lisp:or multi-region-access-points-async-response
                    common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or async-error-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'async-response-details 'make-async-response-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          async-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          async-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-access-point-details))
      (common-lisp:list
       (common-lisp:cons "MultiRegionAccessPointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          async-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-transformation (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-transformation-"))
   (function-arn (common-lisp:error ":function-arn is required") :type
    (common-lisp:or function-arn-string common-lisp:null))
   (function-payload common-lisp:nil :type
    (common-lisp:or aws-lambda-transformation-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-transformation
                    'make-aws-lambda-transformation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-transformation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-transformation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-payload))
      (common-lisp:list
       (common-lisp:cons "FunctionPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-transformation))
   common-lisp:nil))
(common-lisp:deftype aws-lambda-transformation-payload () 'common-lisp:string)
(common-lisp:deftype aws-org-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bucket-already-exists
     (s3control-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-exists)))
(common-lisp:progn
 (common-lisp:define-condition bucket-already-owned-by-you
     (s3control-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-owned-by-you)))
(common-lisp:deftype bucket-canned-acl () 'common-lisp:string)
(common-lisp:deftype bucket-identifier-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-level (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-level-"))
   (activity-metrics common-lisp:nil :type
    (common-lisp:or activity-metrics common-lisp:null))
   (prefix-level common-lisp:nil :type
    (common-lisp:or prefix-level common-lisp:null))
   (advanced-cost-optimization-metrics common-lisp:nil :type
    (common-lisp:or advanced-cost-optimization-metrics common-lisp:null))
   (advanced-data-protection-metrics common-lisp:nil :type
    (common-lisp:or advanced-data-protection-metrics common-lisp:null))
   (detailed-status-codes-metrics common-lisp:nil :type
    (common-lisp:or detailed-status-codes-metrics common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket-level 'make-bucket-level))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-metrics))
      (common-lisp:list
       (common-lisp:cons "ActivityMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-level))
      (common-lisp:list
       (common-lisp:cons "PrefixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-cost-optimization-metrics))
      (common-lisp:list
       (common-lisp:cons "AdvancedCostOptimizationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-data-protection-metrics))
      (common-lisp:list
       (common-lisp:cons "AdvancedDataProtectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-status-codes-metrics))
      (common-lisp:list
       (common-lisp:cons "DetailedStatusCodesMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-level))
   common-lisp:nil))
(common-lisp:deftype bucket-location-constraint () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype bucket-versioning-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buckets ()
   '(trivial-types:proper-list s3bucket-arn-string))
 (common-lisp:defun |make-buckets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3bucket-arn-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-metrics-"))
   (is-enabled (common-lisp:error ":is-enabled is required") :type
    (common-lisp:or is-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-metrics 'make-cloud-watch-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cloud-watch-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cloud-watch-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cloud-watch-metrics))
   common-lisp:nil))
(common-lisp:deftype config-id () 'common-lisp:string)
(common-lisp:deftype confirm-remove-self-bucket-access () 'common-lisp:boolean)
(common-lisp:deftype confirmation-required () 'common-lisp:boolean)
(common-lisp:deftype continuation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-point-for-object-lambda-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-access-point-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or object-lambda-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-point-for-object-lambda-request
                    'make-create-access-point-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-point-for-object-lambda-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-access-point-for-object-lambda-result-"))
   (object-lambda-access-point-arn common-lisp:nil :type
    (common-lisp:or object-lambda-access-point-arn common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or object-lambda-access-point-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-point-for-object-lambda-result
                    'make-create-access-point-for-object-lambda-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lambda-access-point-arn))
      (common-lisp:list
       (common-lisp:cons "ObjectLambdaAccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-point-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-point-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-point-name common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or vpc-configuration common-lisp:null))
   (public-access-block-configuration common-lisp:nil :type
    (common-lisp:or public-access-block-configuration common-lisp:null))
   (bucket-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-point-request
                    'make-create-access-point-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-point-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-point-result-"))
   (access-point-arn common-lisp:nil :type
    (common-lisp:or s3access-point-arn common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-point-result
                    'make-create-access-point-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-configuration-"))
   (location-constraint common-lisp:nil :type
    (common-lisp:or bucket-location-constraint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-configuration
                    'make-create-bucket-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-constraint))
      (common-lisp:list
       (common-lisp:cons "LocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-request-"))
   (acl common-lisp:nil :type
    (common-lisp:or bucket-canned-acl common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (create-bucket-configuration common-lisp:nil :type
    (common-lisp:or create-bucket-configuration common-lisp:null))
   (grant-full-control common-lisp:nil :type
    (common-lisp:or grant-full-control common-lisp:null))
   (grant-read common-lisp:nil :type
    (common-lisp:or grant-read common-lisp:null))
   (grant-read-acp common-lisp:nil :type
    (common-lisp:or grant-read-acp common-lisp:null))
   (grant-write common-lisp:nil :type
    (common-lisp:or grant-write common-lisp:null))
   (grant-write-acp common-lisp:nil :type
    (common-lisp:or grant-write-acp common-lisp:null))
   (object-lock-enabled-for-bucket common-lisp:nil :type
    (common-lisp:or object-lock-enabled-for-bucket common-lisp:null))
   (outpost-id common-lisp:nil :type
    (common-lisp:or non-empty-max-length64string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-request 'make-create-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-enabled-for-bucket))
      (common-lisp:cons "x-amz-bucket-object-lock-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:cons "x-amz-outpost-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-bucket-configuration))
      (common-lisp:list
       (common-lisp:cons "CreateBucketConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'create-bucket-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-result-"))
   (location common-lisp:nil :type (common-lisp:or location common-lisp:null))
   (bucket-arn common-lisp:nil :type
    (common-lisp:or s3regional-bucket-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-result 'make-create-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (confirmation-required common-lisp:nil :type
    (common-lisp:or confirmation-required common-lisp:null))
   (operation (common-lisp:error ":operation is required") :type
    (common-lisp:or job-operation common-lisp:null))
   (report (common-lisp:error ":report is required") :type
    (common-lisp:or job-report common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or non-empty-max-length64string common-lisp:null))
   (manifest common-lisp:nil :type
    (common-lisp:or job-manifest common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-max-length256string common-lisp:null))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or job-priority common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or iamrole-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or s3tag-set common-lisp:null))
   (manifest-generator common-lisp:nil :type
    (common-lisp:or job-manifest-generator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-required))
      (common-lisp:list
       (common-lisp:cons "ConfirmationRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report))
      (common-lisp:list
       (common-lisp:cons "Report"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "Manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-generator))
      (common-lisp:list
       (common-lisp:cons "ManifestGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-result-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-result 'make-create-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multi-region-access-point-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multi-region-access-point-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or multi-region-access-point-name common-lisp:null))
   (public-access-block common-lisp:nil :type
    (common-lisp:or public-access-block-configuration common-lisp:null))
   (regions (common-lisp:error ":regions is required") :type
    (common-lisp:or region-creation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multi-region-access-point-input
                    'make-create-multi-region-access-point-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-block))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multi-region-access-point-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multi-region-access-point-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or multi-region-access-point-client-token common-lisp:null))
   (details (common-lisp:error ":details is required") :type
    (common-lisp:or create-multi-region-access-point-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multi-region-access-point-request
                    'make-create-multi-region-access-point-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multi-region-access-point-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multi-region-access-point-result-"))
   (request-token-arn common-lisp:nil :type
    (common-lisp:or async-request-token-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multi-region-access-point-result
                    'make-create-multi-region-access-point-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token-arn))
      (common-lisp:list
       (common-lisp:cons "RequestTokenARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-result))
   common-lisp:nil))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype creation-timestamp () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype days () 'common-lisp:integer)
(common-lisp:deftype days-after-initiation () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-point-for-object-lambda-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-access-point-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-for-object-lambda-request
                    'make-delete-access-point-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-point-policy-for-object-lambda-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-access-point-policy-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-policy-for-object-lambda-request
                    'make-delete-access-point-policy-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-point-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-point-policy-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-policy-request
                    'make-delete-access-point-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-point-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-point-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-request
                    'make-delete-access-point-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-lifecycle-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-bucket-lifecycle-configuration-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-lifecycle-configuration-request
                    'make-delete-bucket-lifecycle-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-policy-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-policy-request
                    'make-delete-bucket-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-replication-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-replication-request
                    'make-delete-bucket-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-request 'make-delete-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-tagging-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-tagging-request
                    'make-delete-bucket-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-tagging-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-tagging-request
                    'make-delete-job-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-tagging-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-tagging-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-job-tagging-result
                    'make-delete-job-tagging-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-marker-replication (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-marker-replication-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or delete-marker-replication-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-marker-replication
                    'make-delete-marker-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   common-lisp:nil))
(common-lisp:deftype delete-marker-replication-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-multi-region-access-point-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-multi-region-access-point-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or multi-region-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-multi-region-access-point-input
                    'make-delete-multi-region-access-point-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-multi-region-access-point-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-multi-region-access-point-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or multi-region-access-point-client-token common-lisp:null))
   (details (common-lisp:error ":details is required") :type
    (common-lisp:or delete-multi-region-access-point-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-multi-region-access-point-request
                    'make-delete-multi-region-access-point-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-multi-region-access-point-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-multi-region-access-point-result-"))
   (request-token-arn common-lisp:nil :type
    (common-lisp:or async-request-token-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-multi-region-access-point-result
                    'make-delete-multi-region-access-point-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token-arn))
      (common-lisp:list
       (common-lisp:cons "RequestTokenARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-public-access-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-public-access-block-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-public-access-block-request
                    'make-delete-public-access-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-storage-lens-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-storage-lens-configuration-request-"))
   (config-id (common-lisp:error ":config-id is required") :type
    (common-lisp:or config-id common-lisp:null))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-storage-lens-configuration-request
                    'make-delete-storage-lens-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-storage-lens-configuration-tagging-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-storage-lens-configuration-tagging-request-"))
   (config-id (common-lisp:error ":config-id is required") :type
    (common-lisp:or config-id common-lisp:null))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-storage-lens-configuration-tagging-request
                    'make-delete-storage-lens-configuration-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-storage-lens-configuration-tagging-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-storage-lens-configuration-tagging-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-storage-lens-configuration-tagging-result
                    'make-delete-storage-lens-configuration-tagging-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-request 'make-describe-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-result-"))
   (job common-lisp:nil :type
    (common-lisp:or job-descriptor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-result 'make-describe-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-multi-region-access-point-operation-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-multi-region-access-point-operation-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (request-token-arn (common-lisp:error ":request-token-arn is required")
    :type (common-lisp:or async-request-token-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-multi-region-access-point-operation-request
                    'make-describe-multi-region-access-point-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-multi-region-access-point-operation-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-multi-region-access-point-operation-result-"))
   (async-operation common-lisp:nil :type
    (common-lisp:or async-operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-multi-region-access-point-operation-result
                    'make-describe-multi-region-access-point-operation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'async-operation))
      (common-lisp:list
       (common-lisp:cons "AsyncOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-"))
   (account common-lisp:nil :type (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-identifier-string common-lisp:null))
   (replication-time common-lisp:nil :type
    (common-lisp:or replication-time common-lisp:null))
   (access-control-translation common-lisp:nil :type
    (common-lisp:or access-control-translation common-lisp:null))
   (encryption-configuration common-lisp:nil :type
    (common-lisp:or encryption-configuration common-lisp:null))
   (metrics common-lisp:nil :type (common-lisp:or metrics common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or replication-storage-class common-lisp:null)))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-translation))
      (common-lisp:list
       (common-lisp:cons "AccessControlTranslation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detailed-status-codes-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-detailed-status-codes-metrics-"))
   (is-enabled common-lisp:nil :type
    (common-lisp:or is-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detailed-status-codes-metrics
                    'make-detailed-status-codes-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detailed-status-codes-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detailed-status-codes-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detailed-status-codes-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-configuration-"))
   (replica-kms-key-id common-lisp:nil :type
    (common-lisp:or replica-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ReplicaKmsKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoints () 'common-lisp:hash-table)
 (common-lisp:defun |make-endpoints| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (established-multi-region-access-point-policy (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-established-multi-region-access-point-policy-"))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'established-multi-region-access-point-policy
                    'make-established-multi-region-access-point-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          established-multi-region-access-point-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          established-multi-region-access-point-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          established-multi-region-access-point-policy))
   common-lisp:nil))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (exclude (:copier common-lisp:nil) (:conc-name "struct-shape-exclude-"))
   (buckets common-lisp:nil :type (common-lisp:or buckets common-lisp:null))
   (regions common-lisp:nil :type (common-lisp:or regions common-lisp:null)))
 (common-lisp:export (common-lisp:list 'exclude 'make-exclude))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exclude))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exclude))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exclude))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (existing-object-replication (:copier common-lisp:nil)
      (:conc-name "struct-shape-existing-object-replication-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or existing-object-replication-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'existing-object-replication
                    'make-existing-object-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   common-lisp:nil))
(common-lisp:deftype existing-object-replication-status () 'common-lisp:string)
(common-lisp:deftype expiration-status () 'common-lisp:string)
(common-lisp:deftype expired-object-delete-marker () 'common-lisp:boolean)
(common-lisp:deftype format () 'common-lisp:string)
(common-lisp:deftype function-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (generated-manifest-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-generated-manifest-encryption-"))
   (sses3 common-lisp:nil :type
    (common-lisp:or sses3encryption common-lisp:null))
   (ssekms common-lisp:nil :type
    (common-lisp:or ssekmsencryption common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generated-manifest-encryption
                    'make-generated-manifest-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generated-manifest-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generated-manifest-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sses3))
      (common-lisp:list
       (common-lisp:cons "SSES3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekms))
      (common-lisp:list
       (common-lisp:cons "SSEKMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generated-manifest-encryption))
   common-lisp:nil))
(common-lisp:deftype generated-manifest-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-configuration-for-object-lambda-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-access-point-configuration-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-configuration-for-object-lambda-request
                    'make-get-access-point-configuration-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-configuration-for-object-lambda-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-access-point-configuration-for-object-lambda-result-"))
   (configuration common-lisp:nil :type
    (common-lisp:or object-lambda-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-configuration-for-object-lambda-result
                    'make-get-access-point-configuration-for-object-lambda-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-for-object-lambda-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-point-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-for-object-lambda-request
                    'make-get-access-point-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-for-object-lambda-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-point-for-object-lambda-result-"))
   (name common-lisp:nil :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null))
   (public-access-block-configuration common-lisp:nil :type
    (common-lisp:or public-access-block-configuration common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or object-lambda-access-point-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-for-object-lambda-result
                    'make-get-access-point-for-object-lambda-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-policy-for-object-lambda-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-access-point-policy-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-for-object-lambda-request
                    'make-get-access-point-policy-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-policy-for-object-lambda-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-access-point-policy-for-object-lambda-result-"))
   (policy common-lisp:nil :type
    (common-lisp:or object-lambda-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-for-object-lambda-result
                    'make-get-access-point-policy-for-object-lambda-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-point-policy-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-request
                    'make-get-access-point-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-point-policy-result-"))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-result
                    'make-get-access-point-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-policy-status-for-object-lambda-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-access-point-policy-status-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-status-for-object-lambda-request
                    'make-get-access-point-policy-status-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-policy-status-for-object-lambda-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-access-point-policy-status-for-object-lambda-result-"))
   (policy-status common-lisp:nil :type
    (common-lisp:or policy-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-status-for-object-lambda-result
                    'make-get-access-point-policy-status-for-object-lambda-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-policy-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-point-policy-status-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-status-request
                    'make-get-access-point-policy-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-policy-status-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-point-policy-status-result-"))
   (policy-status common-lisp:nil :type
    (common-lisp:or policy-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-status-result
                    'make-get-access-point-policy-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-point-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-request 'make-get-access-point-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-point-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-point-result-"))
   (name common-lisp:nil :type
    (common-lisp:or access-point-name common-lisp:null))
   (bucket common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (network-origin common-lisp:nil :type
    (common-lisp:or network-origin common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or vpc-configuration common-lisp:null))
   (public-access-block-configuration common-lisp:nil :type
    (common-lisp:or public-access-block-configuration common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or alias common-lisp:null))
   (access-point-arn common-lisp:nil :type
    (common-lisp:or s3access-point-arn common-lisp:null))
   (endpoints common-lisp:nil :type
    (common-lisp:or endpoints common-lisp:null))
   (bucket-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-result 'make-get-access-point-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-origin))
      (common-lisp:list
       (common-lisp:cons "NetworkOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-lifecycle-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-lifecycle-configuration-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-request
                    'make-get-bucket-lifecycle-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-lifecycle-configuration-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-lifecycle-configuration-result-"))
   (rules common-lisp:nil :type
    (common-lisp:or lifecycle-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-result
                    'make-get-bucket-lifecycle-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-policy-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-request
                    'make-get-bucket-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-policy-result-"))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-result 'make-get-bucket-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-replication-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-request
                    'make-get-bucket-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-replication-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-replication-result-"))
   (replication-configuration common-lisp:nil :type
    (common-lisp:or replication-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-result
                    'make-get-bucket-replication-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-request 'make-get-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-result-"))
   (bucket common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (public-access-block-enabled common-lisp:nil :type
    (common-lisp:or public-access-block-enabled common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-result 'make-get-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-enabled))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-tagging-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-request
                    'make-get-bucket-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-tagging-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-tagging-result-"))
   (tag-set (common-lisp:error ":tag-set is required") :type
    (common-lisp:or s3tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-result
                    'make-get-bucket-tagging-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-versioning-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-versioning-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-request
                    'make-get-bucket-versioning-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-versioning-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-versioning-result-"))
   (status common-lisp:nil :type
    (common-lisp:or bucket-versioning-status common-lisp:null))
   (mfadelete common-lisp:nil :type
    (common-lisp:or mfadelete-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-result
                    'make-get-bucket-versioning-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-tagging-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-tagging-request 'make-get-job-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-tagging-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-tagging-result-"))
   (tags common-lisp:nil :type (common-lisp:or s3tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-tagging-result 'make-get-job-tagging-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-multi-region-access-point-policy-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-multi-region-access-point-policy-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or multi-region-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-policy-request
                    'make-get-multi-region-access-point-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-multi-region-access-point-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-multi-region-access-point-policy-result-"))
   (policy common-lisp:nil :type
    (common-lisp:or multi-region-access-point-policy-document
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-policy-result
                    'make-get-multi-region-access-point-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-multi-region-access-point-policy-status-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-multi-region-access-point-policy-status-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or multi-region-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-policy-status-request
                    'make-get-multi-region-access-point-policy-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-multi-region-access-point-policy-status-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-multi-region-access-point-policy-status-result-"))
   (established common-lisp:nil :type
    (common-lisp:or policy-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-policy-status-result
                    'make-get-multi-region-access-point-policy-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'established))
      (common-lisp:list
       (common-lisp:cons "Established"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-multi-region-access-point-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-multi-region-access-point-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or multi-region-access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-request
                    'make-get-multi-region-access-point-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-multi-region-access-point-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-multi-region-access-point-result-"))
   (access-point common-lisp:nil :type
    (common-lisp:or multi-region-access-point-report common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-result
                    'make-get-multi-region-access-point-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point))
      (common-lisp:list
       (common-lisp:cons "AccessPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-multi-region-access-point-routes-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-multi-region-access-point-routes-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (mrap (common-lisp:error ":mrap is required") :type
    (common-lisp:or multi-region-access-point-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-routes-request
                    'make-get-multi-region-access-point-routes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-multi-region-access-point-routes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-multi-region-access-point-routes-result-"))
   (mrap common-lisp:nil :type
    (common-lisp:or multi-region-access-point-id common-lisp:null))
   (routes common-lisp:nil :type (common-lisp:or route-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-routes-result
                    'make-get-multi-region-access-point-routes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mrap))
      (common-lisp:list
       (common-lisp:cons "Mrap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routes))
      (common-lisp:list
       (common-lisp:cons "Routes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-public-access-block-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-public-access-block-output-"))
   (public-access-block-configuration common-lisp:nil :type
    (common-lisp:or public-access-block-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-output
                    'make-get-public-access-block-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'public-access-block-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-public-access-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-public-access-block-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-request
                    'make-get-public-access-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-storage-lens-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-storage-lens-configuration-request-"))
   (config-id (common-lisp:error ":config-id is required") :type
    (common-lisp:or config-id common-lisp:null))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-storage-lens-configuration-request
                    'make-get-storage-lens-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-storage-lens-configuration-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-storage-lens-configuration-result-"))
   (storage-lens-configuration common-lisp:nil :type
    (common-lisp:or storage-lens-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-storage-lens-configuration-result
                    'make-get-storage-lens-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-lens-configuration))
      (common-lisp:list
       (common-lisp:cons "StorageLensConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-result))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'storage-lens-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-storage-lens-configuration-tagging-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-storage-lens-configuration-tagging-request-"))
   (config-id (common-lisp:error ":config-id is required") :type
    (common-lisp:or config-id common-lisp:null))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-storage-lens-configuration-tagging-request
                    'make-get-storage-lens-configuration-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-storage-lens-configuration-tagging-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-storage-lens-configuration-tagging-result-"))
   (tags common-lisp:nil :type
    (common-lisp:or storage-lens-tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-storage-lens-configuration-tagging-result
                    'make-get-storage-lens-configuration-tagging-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-result))
   common-lisp:nil))
(common-lisp:deftype grant-full-control () 'common-lisp:string)
(common-lisp:deftype grant-read () 'common-lisp:string)
(common-lisp:deftype grant-read-acp () 'common-lisp:string)
(common-lisp:deftype grant-write () 'common-lisp:string)
(common-lisp:deftype grant-write-acp () 'common-lisp:string)
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotency-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotency-exception 'idempotency-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (include (:copier common-lisp:nil) (:conc-name "struct-shape-include-"))
   (buckets common-lisp:nil :type (common-lisp:or buckets common-lisp:null))
   (regions common-lisp:nil :type (common-lisp:or regions common-lisp:null)))
 (common-lisp:export (common-lisp:list 'include 'make-include))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input include))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input include))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input include))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:deftype is-enabled () 'common-lisp:boolean)
(common-lisp:deftype is-public () 'common-lisp:boolean)
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:deftype job-creation-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-descriptor-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (confirmation-required common-lisp:nil :type
    (common-lisp:or confirmation-required common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-max-length256string common-lisp:null))
   (job-arn common-lisp:nil :type (common-lisp:or job-arn common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null))
   (manifest common-lisp:nil :type
    (common-lisp:or job-manifest common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or job-operation common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or job-priority common-lisp:null))
   (progress-summary common-lisp:nil :type
    (common-lisp:or job-progress-summary common-lisp:null))
   (status-update-reason common-lisp:nil :type
    (common-lisp:or job-status-update-reason common-lisp:null))
   (failure-reasons common-lisp:nil :type
    (common-lisp:or job-failure-list common-lisp:null))
   (report common-lisp:nil :type (common-lisp:or job-report common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or job-creation-time common-lisp:null))
   (termination-date common-lisp:nil :type
    (common-lisp:or job-termination-date common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iamrole-arn common-lisp:null))
   (suspended-date common-lisp:nil :type
    (common-lisp:or suspended-date common-lisp:null))
   (suspended-cause common-lisp:nil :type
    (common-lisp:or suspended-cause common-lisp:null))
   (manifest-generator common-lisp:nil :type
    (common-lisp:or job-manifest-generator common-lisp:null))
   (generated-manifest-descriptor common-lisp:nil :type
    (common-lisp:or s3generated-manifest-descriptor common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-descriptor 'make-job-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-required))
      (common-lisp:list
       (common-lisp:cons "ConfirmationRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "JobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "Manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-summary))
      (common-lisp:list
       (common-lisp:cons "ProgressSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-reason))
      (common-lisp:list
       (common-lisp:cons "StatusUpdateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "FailureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report))
      (common-lisp:list
       (common-lisp:cons "Report"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'termination-date))
      (common-lisp:list
       (common-lisp:cons "TerminationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspended-date))
      (common-lisp:list
       (common-lisp:cons "SuspendedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspended-cause))
      (common-lisp:list
       (common-lisp:cons "SuspendedCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-generator))
      (common-lisp:list
       (common-lisp:cons "ManifestGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-manifest-descriptor))
      (common-lisp:list
       (common-lisp:cons "GeneratedManifestDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-failure (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-failure-"))
   (failure-code common-lisp:nil :type
    (common-lisp:or job-failure-code common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or job-failure-reason common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-failure 'make-job-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-failure))
   common-lisp:nil))
(common-lisp:deftype job-failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-failure-list ()
   '(trivial-types:proper-list job-failure))
 (common-lisp:defun |make-job-failure-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-failure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-failure-reason () 'common-lisp:string)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-list-descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-list-descriptor-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-max-length256string common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or operation-name common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or job-priority common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or job-creation-time common-lisp:null))
   (termination-date common-lisp:nil :type
    (common-lisp:or job-termination-date common-lisp:null))
   (progress-summary common-lisp:nil :type
    (common-lisp:or job-progress-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-list-descriptor 'make-job-list-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-list-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-list-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'termination-date))
      (common-lisp:list
       (common-lisp:cons "TerminationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-summary))
      (common-lisp:list
       (common-lisp:cons "ProgressSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-list-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-list-descriptor-list ()
   '(trivial-types:proper-list job-list-descriptor))
 (common-lisp:defun |make-job-list-descriptor-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-list-descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-manifest (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-manifest-"))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or job-manifest-spec common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or job-manifest-location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-manifest 'make-job-manifest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-manifest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-manifest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "Spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-manifest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-manifest-field-list ()
   '(trivial-types:proper-list job-manifest-field-name))
 (common-lisp:defun |make-job-manifest-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-manifest-field-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-manifest-field-name () 'common-lisp:string)
(common-lisp:deftype job-manifest-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-manifest-generator (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-manifest-generator-"))
   (s3job-manifest-generator common-lisp:nil :type
    (common-lisp:or s3job-manifest-generator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-manifest-generator 'make-job-manifest-generator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3job-manifest-generator))
      (common-lisp:list
       (common-lisp:cons "S3JobManifestGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-manifest-generator-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-manifest-generator-filter-"))
   (eligible-for-replication common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or object-creation-time common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or object-creation-time common-lisp:null))
   (object-replication-statuses common-lisp:nil :type
    (common-lisp:or replication-status-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-manifest-generator-filter
                    'make-job-manifest-generator-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eligible-for-replication))
      (common-lisp:list
       (common-lisp:cons "EligibleForReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-replication-statuses))
      (common-lisp:list
       (common-lisp:cons "ObjectReplicationStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-manifest-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-manifest-location-"))
   (object-arn (common-lisp:error ":object-arn is required") :type
    (common-lisp:or s3key-arn-string common-lisp:null))
   (object-version-id common-lisp:nil :type
    (common-lisp:or s3object-version-id common-lisp:null))
   (etag (common-lisp:error ":etag is required") :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-manifest-location 'make-job-manifest-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-arn))
      (common-lisp:list
       (common-lisp:cons "ObjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-version-id))
      (common-lisp:list
       (common-lisp:cons "ObjectVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-manifest-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-manifest-spec-"))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or job-manifest-format common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or job-manifest-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-manifest-spec 'make-job-manifest-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-manifest-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-manifest-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-manifest-spec))
   common-lisp:nil))
(common-lisp:deftype job-number-of-tasks-failed () 'common-lisp:integer)
(common-lisp:deftype job-number-of-tasks-succeeded () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (job-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-operation-"))
   (lambda-invoke common-lisp:nil :type
    (common-lisp:or lambda-invoke-operation common-lisp:null))
   (s3put-object-copy common-lisp:nil :type
    (common-lisp:or s3copy-object-operation common-lisp:null))
   (s3put-object-acl common-lisp:nil :type
    (common-lisp:or s3set-object-acl-operation common-lisp:null))
   (s3put-object-tagging common-lisp:nil :type
    (common-lisp:or s3set-object-tagging-operation common-lisp:null))
   (s3delete-object-tagging common-lisp:nil :type
    (common-lisp:or s3delete-object-tagging-operation common-lisp:null))
   (s3initiate-restore-object common-lisp:nil :type
    (common-lisp:or s3initiate-restore-object-operation common-lisp:null))
   (s3put-object-legal-hold common-lisp:nil :type
    (common-lisp:or s3set-object-legal-hold-operation common-lisp:null))
   (s3put-object-retention common-lisp:nil :type
    (common-lisp:or s3set-object-retention-operation common-lisp:null))
   (s3replicate-object common-lisp:nil :type
    (common-lisp:or s3replicate-object-operation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-operation 'make-job-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-invoke))
      (common-lisp:list
       (common-lisp:cons "LambdaInvoke"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3put-object-copy))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectCopy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3put-object-acl))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3put-object-tagging))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3delete-object-tagging))
      (common-lisp:list
       (common-lisp:cons "S3DeleteObjectTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3initiate-restore-object))
      (common-lisp:list
       (common-lisp:cons "S3InitiateRestoreObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3put-object-legal-hold))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectLegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3put-object-retention))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3replicate-object))
      (common-lisp:list
       (common-lisp:cons "S3ReplicateObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-operation))
   common-lisp:nil))
(common-lisp:deftype job-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (job-progress-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-progress-summary-"))
   (total-number-of-tasks common-lisp:nil :type
    (common-lisp:or job-total-number-of-tasks common-lisp:null))
   (number-of-tasks-succeeded common-lisp:nil :type
    (common-lisp:or job-number-of-tasks-succeeded common-lisp:null))
   (number-of-tasks-failed common-lisp:nil :type
    (common-lisp:or job-number-of-tasks-failed common-lisp:null))
   (timers common-lisp:nil :type (common-lisp:or job-timers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-progress-summary 'make-job-progress-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-progress-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-progress-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-tasks))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-tasks-succeeded))
      (common-lisp:list
       (common-lisp:cons "NumberOfTasksSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-tasks-failed))
      (common-lisp:list
       (common-lisp:cons "NumberOfTasksFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timers))
      (common-lisp:list
       (common-lisp:cons "Timers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-progress-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-report (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-report-"))
   (bucket common-lisp:nil :type
    (common-lisp:or s3bucket-arn-string common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or job-report-format common-lisp:null))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or boolean common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or report-prefix-string common-lisp:null))
   (report-scope common-lisp:nil :type
    (common-lisp:or job-report-scope common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-report 'make-job-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-scope))
      (common-lisp:list
       (common-lisp:cons "ReportScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-report))
   common-lisp:nil))
(common-lisp:deftype job-report-format () 'common-lisp:string)
(common-lisp:deftype job-report-scope () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition job-status-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       job-status-exception-message)))
 (common-lisp:export
  (common-lisp:list 'job-status-exception 'job-status-exception-message)))
(common-lisp:progn
 (common-lisp:deftype job-status-list ()
   '(trivial-types:proper-list job-status))
 (common-lisp:defun |make-job-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-status-update-reason () 'common-lisp:string)
(common-lisp:deftype job-termination-date () 'common-lisp:string)
(common-lisp:deftype job-time-in-state-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (job-timers (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-timers-"))
   (elapsed-time-in-active-seconds common-lisp:nil :type
    (common-lisp:or job-time-in-state-seconds common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-timers 'make-job-timers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-timers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-timers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-active-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInActiveSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-timers))
   common-lisp:nil))
(common-lisp:deftype job-total-number-of-tasks () 'common-lisp:integer)
(common-lisp:deftype kms-key-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-invoke-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-invoke-operation-"))
   (function-arn common-lisp:nil :type
    (common-lisp:or function-arn-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-invoke-operation 'make-lambda-invoke-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-invoke-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-invoke-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-invoke-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-configuration-"))
   (rules common-lisp:nil :type
    (common-lisp:or lifecycle-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-configuration 'make-lifecycle-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-expiration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-expiration-"))
   (date common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (days common-lisp:nil :type (common-lisp:or days common-lisp:null))
   (expired-object-delete-marker common-lisp:nil :type
    (common-lisp:or expired-object-delete-marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-expiration 'make-lifecycle-expiration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expired-object-delete-marker))
      (common-lisp:list
       (common-lisp:cons "ExpiredObjectDeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-rule-"))
   (expiration common-lisp:nil :type
    (common-lisp:or lifecycle-expiration common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or lifecycle-rule-filter common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or expiration-status common-lisp:null))
   (transitions common-lisp:nil :type
    (common-lisp:or transition-list common-lisp:null))
   (noncurrent-version-transitions common-lisp:nil :type
    (common-lisp:or noncurrent-version-transition-list common-lisp:null))
   (noncurrent-version-expiration common-lisp:nil :type
    (common-lisp:or noncurrent-version-expiration common-lisp:null))
   (abort-incomplete-multipart-upload common-lisp:nil :type
    (common-lisp:or abort-incomplete-multipart-upload common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lifecycle-rule 'make-lifecycle-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitions))
      (common-lisp:list
       (common-lisp:cons "Transitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transitions))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-rule-and-operator (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-rule-and-operator-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or s3tag-set common-lisp:null))
   (object-size-greater-than common-lisp:nil :type
    (common-lisp:or object-size-greater-than-bytes common-lisp:null))
   (object-size-less-than common-lisp:nil :type
    (common-lisp:or object-size-less-than-bytes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-and-operator
                    'make-lifecycle-rule-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-rule-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-rule-filter-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tag common-lisp:nil :type (common-lisp:or s3tag common-lisp:null))
   (and common-lisp:nil :type
    (common-lisp:or lifecycle-rule-and-operator common-lisp:null))
   (object-size-greater-than common-lisp:nil :type
    (common-lisp:or object-size-greater-than-bytes common-lisp:null))
   (object-size-less-than common-lisp:nil :type
    (common-lisp:or object-size-less-than-bytes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-filter 'make-lifecycle-rule-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-rules ()
   '(trivial-types:proper-list lifecycle-rule))
 (common-lisp:defun |make-lifecycle-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-points-for-object-lambda-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-access-points-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-points-for-object-lambda-request
                    'make-list-access-points-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-points-for-object-lambda-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-points-for-object-lambda-result-"))
   (object-lambda-access-point-list common-lisp:nil :type
    (common-lisp:or object-lambda-access-point-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-points-for-object-lambda-result
                    'make-list-access-points-for-object-lambda-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lambda-access-point-list))
      (common-lisp:list
       (common-lisp:cons "ObjectLambdaAccessPointList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-points-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-points-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-points-request
                    'make-list-access-points-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-points-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-points-result-"))
   (access-point-list common-lisp:nil :type
    (common-lisp:or access-point-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-points-result
                    'make-list-access-points-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-list))
      (common-lisp:list
       (common-lisp:cons "AccessPointList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (job-statuses common-lisp:nil :type
    (common-lisp:or job-status-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string-for-next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or string-for-next-token common-lisp:null))
   (jobs common-lisp:nil :type
    (common-lisp:or job-list-descriptor-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-result 'make-list-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multi-region-access-points-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multi-region-access-points-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multi-region-access-points-request
                    'make-list-multi-region-access-points-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multi-region-access-points-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multi-region-access-points-result-"))
   (access-points common-lisp:nil :type
    (common-lisp:or multi-region-access-point-report-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multi-region-access-points-result
                    'make-list-multi-region-access-points-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-points))
      (common-lisp:list
       (common-lisp:cons "AccessPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-regional-buckets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-regional-buckets-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (outpost-id common-lisp:nil :type
    (common-lisp:or non-empty-max-length64string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-regional-buckets-request
                    'make-list-regional-buckets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:cons "x-amz-outpost-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-regional-buckets-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-regional-buckets-result-"))
   (regional-bucket-list common-lisp:nil :type
    (common-lisp:or regional-bucket-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-regional-buckets-result
                    'make-list-regional-buckets-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regional-bucket-list))
      (common-lisp:list
       (common-lisp:cons "RegionalBucketList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-storage-lens-configuration-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-storage-lens-configuration-entry-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or config-id common-lisp:null))
   (storage-lens-arn (common-lisp:error ":storage-lens-arn is required") :type
    (common-lisp:or storage-lens-arn common-lisp:null))
   (home-region (common-lisp:error ":home-region is required") :type
    (common-lisp:or s3awsregion common-lisp:null))
   (is-enabled common-lisp:nil :type
    (common-lisp:or is-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-storage-lens-configuration-entry
                    'make-list-storage-lens-configuration-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configuration-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configuration-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-lens-arn))
      (common-lisp:list
       (common-lisp:cons "StorageLensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configuration-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-storage-lens-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-storage-lens-configurations-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-storage-lens-configurations-request
                    'make-list-storage-lens-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-storage-lens-configurations-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-storage-lens-configurations-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null))
   (storage-lens-configuration-list common-lisp:nil :type
    (common-lisp:or storage-lens-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-storage-lens-configurations-result
                    'make-list-storage-lens-configurations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-lens-configuration-list))
      (common-lisp:list
       (common-lisp:cons "StorageLensConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-result))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype mfa () 'common-lisp:string)
(common-lisp:deftype mfadelete () 'common-lisp:string)
(common-lisp:deftype mfadelete-status () 'common-lisp:string)
(common-lisp:deftype manifest-prefix-string () 'common-lisp:string)
(common-lisp:deftype max-length1024string () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (metrics (:copier common-lisp:nil) (:conc-name "struct-shape-metrics-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or metrics-status common-lisp:null))
   (event-threshold common-lisp:nil :type
    (common-lisp:or replication-time-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metrics 'make-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-threshold))
      (common-lisp:list
       (common-lisp:cons "EventThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics))
   common-lisp:nil))
(common-lisp:deftype metrics-status () 'common-lisp:string)
(common-lisp:deftype min-storage-bytes-percentage () 'common-lisp:double-float)
(common-lisp:deftype minutes () 'common-lisp:integer)
(common-lisp:deftype multi-region-access-point-alias () 'common-lisp:string)
(common-lisp:deftype multi-region-access-point-client-token ()
  'common-lisp:string)
(common-lisp:deftype multi-region-access-point-id () 'common-lisp:string)
(common-lisp:deftype multi-region-access-point-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (multi-region-access-point-policy-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-region-access-point-policy-document-"))
   (established common-lisp:nil :type
    (common-lisp:or established-multi-region-access-point-policy
                    common-lisp:null))
   (proposed common-lisp:nil :type
    (common-lisp:or proposed-multi-region-access-point-policy
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-point-policy-document
                    'make-multi-region-access-point-policy-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-policy-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-policy-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'established))
      (common-lisp:list
       (common-lisp:cons "Established"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposed))
      (common-lisp:list
       (common-lisp:cons "Proposed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-policy-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multi-region-access-point-regional-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-region-access-point-regional-response-"))
   (name common-lisp:nil :type (common-lisp:or region-name common-lisp:null))
   (request-status common-lisp:nil :type
    (common-lisp:or async-request-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-point-regional-response
                    'make-multi-region-access-point-regional-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-regional-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-regional-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-status))
      (common-lisp:list
       (common-lisp:cons "RequestStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-regional-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype multi-region-access-point-regional-response-list ()
   '(trivial-types:proper-list multi-region-access-point-regional-response))
 (common-lisp:defun |make-multi-region-access-point-regional-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multi-region-access-point-regional-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (multi-region-access-point-report (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-region-access-point-report-"))
   (name common-lisp:nil :type
    (common-lisp:or multi-region-access-point-name common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or multi-region-access-point-alias common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or creation-timestamp common-lisp:null))
   (public-access-block common-lisp:nil :type
    (common-lisp:or public-access-block-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or multi-region-access-point-status common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or region-report-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-point-report
                    'make-multi-region-access-point-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-block))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-report))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype multi-region-access-point-report-list ()
   '(trivial-types:proper-list multi-region-access-point-report))
 (common-lisp:defun |make-multi-region-access-point-report-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multi-region-access-point-report))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (multi-region-access-point-route (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-region-access-point-route-"))
   (bucket common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region-name common-lisp:null))
   (traffic-dial-percentage
    (common-lisp:error ":traffic-dial-percentage is required") :type
    (common-lisp:or traffic-dial-percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-point-route
                    'make-multi-region-access-point-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-dial-percentage))
      (common-lisp:list
       (common-lisp:cons "TrafficDialPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-route))
   common-lisp:nil))
(common-lisp:deftype multi-region-access-point-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (multi-region-access-points-async-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-region-access-points-async-response-"))
   (regions common-lisp:nil :type
    (common-lisp:or multi-region-access-point-regional-response-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-points-async-response
                    'make-multi-region-access-points-async-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-points-async-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-points-async-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-points-async-response))
   common-lisp:nil))
(common-lisp:deftype network-origin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-such-public-access-block-configuration
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-public-access-block-configuration-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-public-access-block-configuration
                    'no-such-public-access-block-configuration-message)))
(common-lisp:deftype no-such-public-access-block-configuration-message ()
  'common-lisp:string)
(common-lisp:deftype non-empty-max-length1024string () 'common-lisp:string)
(common-lisp:deftype non-empty-max-length2048string () 'common-lisp:string)
(common-lisp:deftype non-empty-max-length256string () 'common-lisp:string)
(common-lisp:deftype non-empty-max-length64string () 'common-lisp:string)
(common-lisp:deftype noncurrent-version-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (noncurrent-version-expiration (:copier common-lisp:nil)
      (:conc-name "struct-shape-noncurrent-version-expiration-"))
   (noncurrent-days common-lisp:nil :type
    (common-lisp:or days common-lisp:null))
   (newer-noncurrent-versions common-lisp:nil :type
    (common-lisp:or noncurrent-version-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-expiration
                    'make-noncurrent-version-expiration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'newer-noncurrent-versions))
      (common-lisp:list
       (common-lisp:cons "NewerNoncurrentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (noncurrent-version-transition (:copier common-lisp:nil)
      (:conc-name "struct-shape-noncurrent-version-transition-"))
   (noncurrent-days common-lisp:nil :type
    (common-lisp:or days common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or transition-storage-class common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-transition
                    'make-noncurrent-version-transition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype noncurrent-version-transition-list ()
   '(trivial-types:proper-list noncurrent-version-transition))
 (common-lisp:defun |make-noncurrent-version-transition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            noncurrent-version-transition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype object-creation-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object-lambda-access-point (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-lambda-access-point-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null))
   (object-lambda-access-point-arn common-lisp:nil :type
    (common-lisp:or object-lambda-access-point-arn common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or object-lambda-access-point-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-lambda-access-point
                    'make-object-lambda-access-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lambda-access-point-arn))
      (common-lisp:list
       (common-lisp:cons "ObjectLambdaAccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (object-lambda-access-point-alias (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-lambda-access-point-alias-"))
   (value common-lisp:nil :type
    (common-lisp:or object-lambda-access-point-alias-value common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or object-lambda-access-point-alias-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-lambda-access-point-alias
                    'make-object-lambda-access-point-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point-alias))
   common-lisp:nil))
(common-lisp:deftype object-lambda-access-point-alias-status ()
  'common-lisp:string)
(common-lisp:deftype object-lambda-access-point-alias-value ()
  'common-lisp:string)
(common-lisp:deftype object-lambda-access-point-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-lambda-access-point-list ()
   '(trivial-types:proper-list object-lambda-access-point))
 (common-lisp:defun |make-object-lambda-access-point-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            object-lambda-access-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-lambda-access-point-name () 'common-lisp:string)
(common-lisp:deftype object-lambda-allowed-feature () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-lambda-allowed-features-list ()
   '(trivial-types:proper-list object-lambda-allowed-feature))
 (common-lisp:defun |make-object-lambda-allowed-features-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            object-lambda-allowed-feature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (object-lambda-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-lambda-configuration-"))
   (supporting-access-point
    (common-lisp:error ":supporting-access-point is required") :type
    (common-lisp:or object-lambda-supporting-access-point-arn
                    common-lisp:null))
   (cloud-watch-metrics-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (allowed-features common-lisp:nil :type
    (common-lisp:or object-lambda-allowed-features-list common-lisp:null))
   (transformation-configurations
    (common-lisp:error ":transformation-configurations is required") :type
    (common-lisp:or object-lambda-transformation-configurations-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-lambda-configuration
                    'make-object-lambda-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supporting-access-point))
      (common-lisp:list
       (common-lisp:cons "SupportingAccessPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-features))
      (common-lisp:list
       (common-lisp:cons "AllowedFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transformation-configurations))
      (common-lisp:list
       (common-lisp:cons "TransformationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (object-lambda-content-transformation (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-lambda-content-transformation-"))
   (aws-lambda common-lisp:nil :type
    (common-lisp:or aws-lambda-transformation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-lambda-content-transformation
                    'make-object-lambda-content-transformation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-content-transformation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-content-transformation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-lambda))
      (common-lisp:list
       (common-lisp:cons "AwsLambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-content-transformation))
   common-lisp:nil))
(common-lisp:deftype object-lambda-policy () 'common-lisp:string)
(common-lisp:deftype object-lambda-supporting-access-point-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object-lambda-transformation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-lambda-transformation-configuration-"))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or object-lambda-transformation-configuration-actions-list
                    common-lisp:null))
   (content-transformation
    (common-lisp:error ":content-transformation is required") :type
    (common-lisp:or object-lambda-content-transformation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-lambda-transformation-configuration
                    'make-object-lambda-transformation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-transformation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-transformation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-transformation))
      (common-lisp:list
       (common-lisp:cons "ContentTransformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-transformation-configuration))
   common-lisp:nil))
(common-lisp:deftype object-lambda-transformation-configuration-action ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-lambda-transformation-configuration-actions-list
                      ()
   '(trivial-types:proper-list
     object-lambda-transformation-configuration-action))
 (common-lisp:defun |make-object-lambda-transformation-configuration-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            object-lambda-transformation-configuration-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype object-lambda-transformation-configurations-list ()
   '(trivial-types:proper-list object-lambda-transformation-configuration))
 (common-lisp:defun |make-object-lambda-transformation-configurations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            object-lambda-transformation-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-lock-enabled-for-bucket () 'common-lisp:boolean)
(common-lisp:deftype object-size-greater-than-bytes () 'common-lisp:integer)
(common-lisp:deftype object-size-less-than-bytes () 'common-lisp:integer)
(common-lisp:deftype operation-name () 'common-lisp:string)
(common-lisp:deftype output-schema-version () 'common-lisp:string)
(common-lisp:deftype owner-override () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-status-"))
   (is-public common-lisp:nil :type
    (common-lisp:or is-public common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-status 'make-policy-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "IsPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-status))
   common-lisp:nil))
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (prefix-level (:copier common-lisp:nil)
      (:conc-name "struct-shape-prefix-level-"))
   (storage-metrics (common-lisp:error ":storage-metrics is required") :type
    (common-lisp:or prefix-level-storage-metrics common-lisp:null)))
 (common-lisp:export (common-lisp:list 'prefix-level 'make-prefix-level))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prefix-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prefix-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-metrics))
      (common-lisp:list
       (common-lisp:cons "StorageMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prefix-level))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (prefix-level-storage-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-prefix-level-storage-metrics-"))
   (is-enabled common-lisp:nil :type
    (common-lisp:or is-enabled common-lisp:null))
   (selection-criteria common-lisp:nil :type
    (common-lisp:or selection-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prefix-level-storage-metrics
                    'make-prefix-level-storage-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prefix-level-storage-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prefix-level-storage-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-criteria))
      (common-lisp:list
       (common-lisp:cons "SelectionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prefix-level-storage-metrics))
   common-lisp:nil))
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (proposed-multi-region-access-point-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-proposed-multi-region-access-point-policy-"))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'proposed-multi-region-access-point-policy
                    'make-proposed-multi-region-access-point-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          proposed-multi-region-access-point-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          proposed-multi-region-access-point-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          proposed-multi-region-access-point-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (public-access-block-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-access-block-configuration-"))
   (block-public-acls common-lisp:nil :type
    (common-lisp:or setting common-lisp:null))
   (ignore-public-acls common-lisp:nil :type
    (common-lisp:or setting common-lisp:null))
   (block-public-policy common-lisp:nil :type
    (common-lisp:or setting common-lisp:null))
   (restrict-public-buckets common-lisp:nil :type
    (common-lisp:or setting common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'public-access-block-configuration
                    'make-public-access-block-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "IgnorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "BlockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "RestrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   common-lisp:nil))
(common-lisp:deftype public-access-block-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (put-access-point-configuration-for-object-lambda-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-access-point-configuration-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or object-lambda-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-access-point-configuration-for-object-lambda-request
                    'make-put-access-point-configuration-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-configuration-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-configuration-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-configuration-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-access-point-policy-for-object-lambda-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-access-point-policy-for-object-lambda-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or object-lambda-access-point-name common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or object-lambda-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-access-point-policy-for-object-lambda-request
                    'make-put-access-point-policy-for-object-lambda-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-access-point-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-access-point-policy-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-point-name common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-access-point-policy-request
                    'make-put-access-point-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-lifecycle-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-lifecycle-configuration-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (lifecycle-configuration common-lisp:nil :type
    (common-lisp:or lifecycle-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-lifecycle-configuration-request
                    'make-put-bucket-lifecycle-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'lifecycle-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-policy-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (confirm-remove-self-bucket-access common-lisp:nil :type
    (common-lisp:or confirm-remove-self-bucket-access common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-policy-request
                    'make-put-bucket-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirm-remove-self-bucket-access))
      (common-lisp:cons "x-amz-confirm-remove-self-bucket-access"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-replication-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (replication-configuration
    (common-lisp:error ":replication-configuration is required") :type
    (common-lisp:or replication-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-replication-request
                    'make-put-bucket-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'replication-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-tagging-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (tagging (common-lisp:error ":tagging is required") :type
    (common-lisp:or tagging common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-tagging-request
                    'make-put-bucket-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'tagging)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-versioning-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-versioning-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (mfa common-lisp:nil :type (common-lisp:or mfa common-lisp:null))
   (versioning-configuration
    (common-lisp:error ":versioning-configuration is required") :type
    (common-lisp:or versioning-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-versioning-request
                    'make-put-bucket-versioning-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "VersioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'versioning-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-job-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-job-tagging-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or s3tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-job-tagging-request 'make-put-job-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-job-tagging-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-job-tagging-result-")))
 (common-lisp:export
  (common-lisp:list 'put-job-tagging-result 'make-put-job-tagging-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-multi-region-access-point-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-multi-region-access-point-policy-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or multi-region-access-point-name common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-multi-region-access-point-policy-input
                    'make-put-multi-region-access-point-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-multi-region-access-point-policy-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-multi-region-access-point-policy-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or multi-region-access-point-client-token common-lisp:null))
   (details (common-lisp:error ":details is required") :type
    (common-lisp:or put-multi-region-access-point-policy-input
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-multi-region-access-point-policy-request
                    'make-put-multi-region-access-point-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-multi-region-access-point-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-multi-region-access-point-policy-result-"))
   (request-token-arn common-lisp:nil :type
    (common-lisp:or async-request-token-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-multi-region-access-point-policy-result
                    'make-put-multi-region-access-point-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token-arn))
      (common-lisp:list
       (common-lisp:cons "RequestTokenARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-public-access-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-public-access-block-request-"))
   (public-access-block-configuration
    (common-lisp:error ":public-access-block-configuration is required") :type
    (common-lisp:or public-access-block-configuration common-lisp:null))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-public-access-block-request
                    'make-put-public-access-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'public-access-block-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-storage-lens-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-storage-lens-configuration-request-"))
   (config-id (common-lisp:error ":config-id is required") :type
    (common-lisp:or config-id common-lisp:null))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (storage-lens-configuration
    (common-lisp:error ":storage-lens-configuration is required") :type
    (common-lisp:or storage-lens-configuration common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or storage-lens-tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-storage-lens-configuration-request
                    'make-put-storage-lens-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-lens-configuration))
      (common-lisp:list
       (common-lisp:cons "StorageLensConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-storage-lens-configuration-tagging-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-storage-lens-configuration-tagging-request-"))
   (config-id (common-lisp:error ":config-id is required") :type
    (common-lisp:or config-id common-lisp:null))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or storage-lens-tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-storage-lens-configuration-tagging-request
                    'make-put-storage-lens-configuration-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-storage-lens-configuration-tagging-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-storage-lens-configuration-tagging-result-")))
 (common-lisp:export
  (common-lisp:list 'put-storage-lens-configuration-tagging-result
                    'make-put-storage-lens-configuration-tagging-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (region (:copier common-lisp:nil) (:conc-name "struct-shape-region-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'region 'make-region))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-creation-list ()
   '(trivial-types:proper-list region))
 (common-lisp:defun |make-region-creation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (region-report (:copier common-lisp:nil)
      (:conc-name "struct-shape-region-report-"))
   (bucket common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region-name common-lisp:null))
   (bucket-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'region-report 'make-region-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region-report))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-report-list ()
   '(trivial-types:proper-list region-report))
 (common-lisp:defun |make-region-report-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region-report))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (regional-bucket (:copier common-lisp:nil)
      (:conc-name "struct-shape-regional-bucket-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-arn common-lisp:nil :type
    (common-lisp:or s3regional-bucket-arn common-lisp:null))
   (public-access-block-enabled
    (common-lisp:error ":public-access-block-enabled is required") :type
    (common-lisp:or public-access-block-enabled common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or creation-date common-lisp:null))
   (outpost-id common-lisp:nil :type
    (common-lisp:or non-empty-max-length64string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'regional-bucket 'make-regional-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input regional-bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input regional-bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-enabled))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:list
       (common-lisp:cons "OutpostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input regional-bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regional-bucket-list ()
   '(trivial-types:proper-list regional-bucket))
 (common-lisp:defun |make-regional-bucket-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list regional-bucket))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype regions () '(trivial-types:proper-list s3awsregion))
 (common-lisp:defun |make-regions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3awsregion))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replica-kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replica-modifications (:copier common-lisp:nil)
      (:conc-name "struct-shape-replica-modifications-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or replica-modifications-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replica-modifications 'make-replica-modifications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   common-lisp:nil))
(common-lisp:deftype replica-modifications-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-configuration-"))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or replication-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-configuration
                    'make-replication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-rule-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or priority common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or replication-rule-filter common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or replication-rule-status common-lisp:null))
   (source-selection-criteria common-lisp:nil :type
    (common-lisp:or source-selection-criteria common-lisp:null))
   (existing-object-replication common-lisp:nil :type
    (common-lisp:or existing-object-replication common-lisp:null))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or destination common-lisp:null))
   (delete-marker-replication common-lisp:nil :type
    (common-lisp:or delete-marker-replication common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-identifier-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-rule 'make-replication-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-selection-criteria))
      (common-lisp:list
       (common-lisp:cons "SourceSelectionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-object-replication))
      (common-lisp:list
       (common-lisp:cons "ExistingObjectReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-marker-replication))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkerReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-rule-and-operator (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-rule-and-operator-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or s3tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-rule-and-operator
                    'make-replication-rule-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-rule-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-rule-filter-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tag common-lisp:nil :type (common-lisp:or s3tag common-lisp:null))
   (and common-lisp:nil :type
    (common-lisp:or replication-rule-and-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-rule-filter 'make-replication-rule-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   common-lisp:nil))
(common-lisp:deftype replication-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-rules ()
   '(trivial-types:proper-list replication-rule))
 (common-lisp:defun |make-replication-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-status-filter-list ()
   '(trivial-types:proper-list replication-status))
 (common-lisp:defun |make-replication-status-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-time-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or replication-time-status common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or replication-time-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-time 'make-replication-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-time))
   common-lisp:nil))
(common-lisp:deftype replication-time-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-time-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-time-value-"))
   (minutes common-lisp:nil :type (common-lisp:or minutes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-time-value 'make-replication-time-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minutes))
      (common-lisp:list
       (common-lisp:cons "Minutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   common-lisp:nil))
(common-lisp:deftype report-prefix-string () 'common-lisp:string)
(common-lisp:deftype requested-job-status () 'common-lisp:string)
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype route-list ()
   '(trivial-types:proper-list multi-region-access-point-route))
 (common-lisp:defun |make-route-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multi-region-access-point-route))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3awsregion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3access-control-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3access-control-list-"))
   (owner (common-lisp:error ":owner is required") :type
    (common-lisp:or s3object-owner common-lisp:null))
   (grants common-lisp:nil :type
    (common-lisp:or s3grant-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3access-control-list 'make-s3access-control-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3access-control-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3access-control-policy-"))
   (access-control-list common-lisp:nil :type
    (common-lisp:or s3access-control-list common-lisp:null))
   (canned-access-control-list common-lisp:nil :type
    (common-lisp:or s3canned-access-control-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3access-control-policy 'make-s3access-control-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canned-access-control-list))
      (common-lisp:list
       (common-lisp:cons "CannedAccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-policy))
   common-lisp:nil))
(common-lisp:deftype s3access-point-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3bucket-destination-"))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or format common-lisp:null))
   (output-schema-version
    (common-lisp:error ":output-schema-version is required") :type
    (common-lisp:or output-schema-version common-lisp:null))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or s3bucket-arn-string common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (encryption common-lisp:nil :type
    (common-lisp:or storage-lens-data-export-encryption common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3bucket-destination 'make-s3bucket-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-schema-version))
      (common-lisp:list
       (common-lisp:cons "OutputSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-destination))
   common-lisp:nil))
(common-lisp:deftype s3canned-access-control-list () 'common-lisp:string)
(common-lisp:deftype s3checksum-algorithm () 'common-lisp:string)
(common-lisp:deftype s3content-length () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (s3copy-object-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3copy-object-operation-"))
   (target-resource common-lisp:nil :type
    (common-lisp:or s3bucket-arn-string common-lisp:null))
   (canned-access-control-list common-lisp:nil :type
    (common-lisp:or s3canned-access-control-list common-lisp:null))
   (access-control-grants common-lisp:nil :type
    (common-lisp:or s3grant-list common-lisp:null))
   (metadata-directive common-lisp:nil :type
    (common-lisp:or s3metadata-directive common-lisp:null))
   (modified-since-constraint common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (new-object-metadata common-lisp:nil :type
    (common-lisp:or s3object-metadata common-lisp:null))
   (new-object-tagging common-lisp:nil :type
    (common-lisp:or s3tag-set common-lisp:null))
   (redirect-location common-lisp:nil :type
    (common-lisp:or non-empty-max-length2048string common-lisp:null))
   (requester-pays common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or s3storage-class common-lisp:null))
   (un-modified-since-constraint common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (sseaws-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-arn-string common-lisp:null))
   (target-key-prefix common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (object-lock-legal-hold-status common-lisp:nil :type
    (common-lisp:or s3object-lock-legal-hold-status common-lisp:null))
   (object-lock-mode common-lisp:nil :type
    (common-lisp:or s3object-lock-mode common-lisp:null))
   (object-lock-retain-until-date common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or s3checksum-algorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3copy-object-operation 'make-s3copy-object-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3copy-object-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3copy-object-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-resource))
      (common-lisp:list
       (common-lisp:cons "TargetResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canned-access-control-list))
      (common-lisp:list
       (common-lisp:cons "CannedAccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-grants))
      (common-lisp:list
       (common-lisp:cons "AccessControlGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-directive))
      (common-lisp:list
       (common-lisp:cons "MetadataDirective"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modified-since-constraint))
      (common-lisp:list
       (common-lisp:cons "ModifiedSinceConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-object-metadata))
      (common-lisp:list
       (common-lisp:cons "NewObjectMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-object-tagging))
      (common-lisp:list
       (common-lisp:cons "NewObjectTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-location))
      (common-lisp:list
       (common-lisp:cons "RedirectLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-pays))
      (common-lisp:list
       (common-lisp:cons "RequesterPays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'un-modified-since-constraint))
      (common-lisp:list
       (common-lisp:cons "UnModifiedSinceConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sseaws-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "SSEAwsKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-key-prefix))
      (common-lisp:list
       (common-lisp:cons "TargetKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:list
       (common-lisp:cons "ObjectLockLegalHoldStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:list
       (common-lisp:cons "ObjectLockMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:list
       (common-lisp:cons "ObjectLockRetainUntilDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:list
       (common-lisp:cons "BucketKeyEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3copy-object-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3delete-object-tagging-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3delete-object-tagging-operation-")))
 (common-lisp:export
  (common-lisp:list 's3delete-object-tagging-operation
                    'make-s3delete-object-tagging-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3delete-object-tagging-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3delete-object-tagging-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3delete-object-tagging-operation))
   common-lisp:nil))
(common-lisp:deftype s3expiration-in-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (s3generated-manifest-descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3generated-manifest-descriptor-"))
   (format common-lisp:nil :type
    (common-lisp:or generated-manifest-format common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or job-manifest-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3generated-manifest-descriptor
                    'make-s3generated-manifest-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3generated-manifest-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3generated-manifest-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3generated-manifest-descriptor))
   common-lisp:nil))
(common-lisp:deftype s3glacier-job-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3grant (:copier common-lisp:nil) (:conc-name "struct-shape-s3grant-"))
   (grantee common-lisp:nil :type (common-lisp:or s3grantee common-lisp:null))
   (permission common-lisp:nil :type
    (common-lisp:or s3permission common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3grant 'make-s3grant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3grant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3grant-list () '(trivial-types:proper-list s3grant))
 (common-lisp:defun |make-s3grant-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (s3grantee (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3grantee-"))
   (type-identifier common-lisp:nil :type
    (common-lisp:or s3grantee-type-identifier common-lisp:null))
   (identifier common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3grantee 'make-s3grantee))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3grantee))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3grantee))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "TypeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3grantee))
   common-lisp:nil))
(common-lisp:deftype s3grantee-type-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3initiate-restore-object-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3initiate-restore-object-operation-"))
   (expiration-in-days common-lisp:nil :type
    (common-lisp:or s3expiration-in-days common-lisp:null))
   (glacier-job-tier common-lisp:nil :type
    (common-lisp:or s3glacier-job-tier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3initiate-restore-object-operation
                    'make-s3initiate-restore-object-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3initiate-restore-object-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3initiate-restore-object-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-in-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glacier-job-tier))
      (common-lisp:list
       (common-lisp:cons "GlacierJobTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3initiate-restore-object-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3job-manifest-generator (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3job-manifest-generator-"))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (source-bucket (common-lisp:error ":source-bucket is required") :type
    (common-lisp:or s3bucket-arn-string common-lisp:null))
   (manifest-output-location common-lisp:nil :type
    (common-lisp:or s3manifest-output-location common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or job-manifest-generator-filter common-lisp:null))
   (enable-manifest-output
    (common-lisp:error ":enable-manifest-output is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3job-manifest-generator 'make-s3job-manifest-generator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3job-manifest-generator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3job-manifest-generator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "ExpectedBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bucket))
      (common-lisp:list
       (common-lisp:cons "SourceBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-output-location))
      (common-lisp:list
       (common-lisp:cons "ManifestOutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-manifest-output))
      (common-lisp:list
       (common-lisp:cons "EnableManifestOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3job-manifest-generator))
   common-lisp:nil))
(common-lisp:deftype s3key-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3manifest-output-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3manifest-output-location-"))
   (expected-manifest-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket-arn-string common-lisp:null))
   (manifest-prefix common-lisp:nil :type
    (common-lisp:or manifest-prefix-string common-lisp:null))
   (manifest-encryption common-lisp:nil :type
    (common-lisp:or generated-manifest-encryption common-lisp:null))
   (manifest-format (common-lisp:error ":manifest-format is required") :type
    (common-lisp:or generated-manifest-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3manifest-output-location
                    'make-s3manifest-output-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3manifest-output-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3manifest-output-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-manifest-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "ExpectedManifestBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-prefix))
      (common-lisp:list
       (common-lisp:cons "ManifestPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-encryption))
      (common-lisp:list
       (common-lisp:cons "ManifestEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-format))
      (common-lisp:list
       (common-lisp:cons "ManifestFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3manifest-output-location))
   common-lisp:nil))
(common-lisp:deftype s3metadata-directive () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3object-lock-legal-hold (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3object-lock-legal-hold-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or s3object-lock-legal-hold-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3object-lock-legal-hold 'make-s3object-lock-legal-hold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3object-lock-legal-hold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3object-lock-legal-hold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3object-lock-legal-hold))
   common-lisp:nil))
(common-lisp:deftype s3object-lock-legal-hold-status () 'common-lisp:string)
(common-lisp:deftype s3object-lock-mode () 'common-lisp:string)
(common-lisp:deftype s3object-lock-retention-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3object-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3object-metadata-"))
   (cache-control common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (content-disposition common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (content-encoding common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (content-language common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (user-metadata common-lisp:nil :type
    (common-lisp:or s3user-metadata common-lisp:null))
   (content-length common-lisp:nil :type
    (common-lisp:or s3content-length common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (http-expires-date common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (requester-charged common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (ssealgorithm common-lisp:nil :type
    (common-lisp:or s3ssealgorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3object-metadata 'make-s3object-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:list
       (common-lisp:cons "CacheControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:list
       (common-lisp:cons "ContentDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:list
       (common-lisp:cons "ContentEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:list
       (common-lisp:cons "ContentLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-metadata))
      (common-lisp:list
       (common-lisp:cons "UserMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:list
       (common-lisp:cons "ContentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:list
       (common-lisp:cons "ContentMD5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-expires-date))
      (common-lisp:list
       (common-lisp:cons "HttpExpiresDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-charged))
      (common-lisp:list
       (common-lisp:cons "RequesterCharged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssealgorithm))
      (common-lisp:list
       (common-lisp:cons "SSEAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3object-owner (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3object-owner-"))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or non-empty-max-length1024string common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3object-owner 'make-s3object-owner))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object-owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object-owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object-owner))
   common-lisp:nil))
(common-lisp:deftype s3object-version-id () 'common-lisp:string)
(common-lisp:deftype s3permission () 'common-lisp:string)
(common-lisp:deftype s3regional-bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3replicate-object-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3replicate-object-operation-")))
 (common-lisp:export
  (common-lisp:list 's3replicate-object-operation
                    'make-s3replicate-object-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3replicate-object-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3replicate-object-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3replicate-object-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3retention (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3retention-"))
   (retain-until-date common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (mode common-lisp:nil :type
    (common-lisp:or s3object-lock-retention-mode common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3retention 'make-s3retention))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3retention))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3retention))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-until-date))
      (common-lisp:list
       (common-lisp:cons "RetainUntilDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3retention))
   common-lisp:nil))
(common-lisp:deftype s3ssealgorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3set-object-acl-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3set-object-acl-operation-"))
   (access-control-policy common-lisp:nil :type
    (common-lisp:or s3access-control-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3set-object-acl-operation
                    'make-s3set-object-acl-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-acl-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-acl-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-policy))
      (common-lisp:list
       (common-lisp:cons "AccessControlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-acl-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3set-object-legal-hold-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3set-object-legal-hold-operation-"))
   (legal-hold (common-lisp:error ":legal-hold is required") :type
    (common-lisp:or s3object-lock-legal-hold common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3set-object-legal-hold-operation
                    'make-s3set-object-legal-hold-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-legal-hold-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-legal-hold-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold))
      (common-lisp:list
       (common-lisp:cons "LegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-legal-hold-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3set-object-retention-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3set-object-retention-operation-"))
   (bypass-governance-retention common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (retention (common-lisp:error ":retention is required") :type
    (common-lisp:or s3retention common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3set-object-retention-operation
                    'make-s3set-object-retention-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-retention-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-retention-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:list
       (common-lisp:cons "BypassGovernanceRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-retention-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3set-object-tagging-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3set-object-tagging-operation-"))
   (tag-set common-lisp:nil :type (common-lisp:or s3tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3set-object-tagging-operation
                    'make-s3set-object-tagging-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-tagging-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-tagging-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-tagging-operation))
   common-lisp:nil))
(common-lisp:deftype s3storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3tag (:copier common-lisp:nil) (:conc-name "struct-shape-s3tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key-string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3tag 'make-s3tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3tag-set () '(trivial-types:proper-list s3tag))
 (common-lisp:defun |make-s3tag-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype s3user-metadata () 'common-lisp:hash-table)
 (common-lisp:defun |make-s3user-metadata|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (ssekms (:copier common-lisp:nil) (:conc-name "struct-shape-ssekms-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or ssekmskey-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ssekms 'make-ssekms))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssekms))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ssekmsencryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-ssekmsencryption-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or kms-key-arn-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ssekmsencryption 'make-ssekmsencryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssekmsencryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssekmsencryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssekmsencryption))
   common-lisp:nil))
(common-lisp:deftype ssekmskey-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sses3 (:copier common-lisp:nil) (:conc-name "struct-shape-sses3-")))
 (common-lisp:export (common-lisp:list 'sses3 'make-sses3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sses3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sses3encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-sses3encryption-")))
 (common-lisp:export (common-lisp:list 'sses3encryption 'make-sses3encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sses3encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sses3encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sses3encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (selection-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-selection-criteria-"))
   (delimiter common-lisp:nil :type
    (common-lisp:or storage-lens-prefix-level-delimiter common-lisp:null))
   (max-depth common-lisp:nil :type
    (common-lisp:or storage-lens-prefix-level-max-depth common-lisp:null))
   (min-storage-bytes-percentage common-lisp:nil :type
    (common-lisp:or min-storage-bytes-percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'selection-criteria 'make-selection-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input selection-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input selection-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-depth))
      (common-lisp:list
       (common-lisp:cons "MaxDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-storage-bytes-percentage))
      (common-lisp:list
       (common-lisp:cons "MinStorageBytesPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input selection-criteria))
   common-lisp:nil))
(common-lisp:deftype setting () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (source-selection-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-selection-criteria-"))
   (sse-kms-encrypted-objects common-lisp:nil :type
    (common-lisp:or sse-kms-encrypted-objects common-lisp:null))
   (replica-modifications common-lisp:nil :type
    (common-lisp:or replica-modifications common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-selection-criteria
                    'make-source-selection-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sse-kms-encrypted-objects))
      (common-lisp:list
       (common-lisp:cons "SseKmsEncryptedObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-modifications))
      (common-lisp:list
       (common-lisp:cons "ReplicaModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sse-kms-encrypted-objects (:copier common-lisp:nil)
      (:conc-name "struct-shape-sse-kms-encrypted-objects-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or sse-kms-encrypted-objects-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sse-kms-encrypted-objects
                    'make-sse-kms-encrypted-objects))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   common-lisp:nil))
(common-lisp:deftype sse-kms-encrypted-objects-status () 'common-lisp:string)
(common-lisp:deftype storage-lens-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (storage-lens-aws-org (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-lens-aws-org-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or aws-org-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-lens-aws-org 'make-storage-lens-aws-org))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-lens-aws-org))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-lens-aws-org))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-lens-aws-org))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-lens-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-lens-configuration-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or config-id common-lisp:null))
   (account-level (common-lisp:error ":account-level is required") :type
    (common-lisp:or account-level common-lisp:null))
   (include common-lisp:nil :type (common-lisp:or include common-lisp:null))
   (exclude common-lisp:nil :type (common-lisp:or exclude common-lisp:null))
   (data-export common-lisp:nil :type
    (common-lisp:or storage-lens-data-export common-lisp:null))
   (is-enabled (common-lisp:error ":is-enabled is required") :type
    (common-lisp:or is-enabled common-lisp:null))
   (aws-org common-lisp:nil :type
    (common-lisp:or storage-lens-aws-org common-lisp:null))
   (storage-lens-arn common-lisp:nil :type
    (common-lisp:or storage-lens-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-lens-configuration
                    'make-storage-lens-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-level))
      (common-lisp:list
       (common-lisp:cons "AccountLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "Include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude))
      (common-lisp:list
       (common-lisp:cons "Exclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-export))
      (common-lisp:list
       (common-lisp:cons "DataExport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-org))
      (common-lisp:list
       (common-lisp:cons "AwsOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-lens-arn))
      (common-lisp:list
       (common-lisp:cons "StorageLensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-lens-configuration-list ()
   '(trivial-types:proper-list list-storage-lens-configuration-entry))
 (common-lisp:defun |make-storage-lens-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-storage-lens-configuration-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-lens-data-export (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-lens-data-export-"))
   (s3bucket-destination common-lisp:nil :type
    (common-lisp:or s3bucket-destination common-lisp:null))
   (cloud-watch-metrics common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-lens-data-export 'make-storage-lens-data-export))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-destination))
      (common-lisp:list
       (common-lisp:cons "S3BucketDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-metrics))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-lens-data-export-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-lens-data-export-encryption-"))
   (sses3 common-lisp:nil :type (common-lisp:or sses3 common-lisp:null))
   (ssekms common-lisp:nil :type (common-lisp:or ssekms common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-lens-data-export-encryption
                    'make-storage-lens-data-export-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sses3))
      (common-lisp:list
       (common-lisp:cons "SSES3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekms))
      (common-lisp:list
       (common-lisp:cons "SSEKMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export-encryption))
   common-lisp:nil))
(common-lisp:deftype storage-lens-prefix-level-delimiter () 'common-lisp:string)
(common-lisp:deftype storage-lens-prefix-level-max-depth ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (storage-lens-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-lens-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key-string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-lens-tag 'make-storage-lens-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-lens-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-lens-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-lens-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-lens-tags ()
   '(trivial-types:proper-list storage-lens-tag))
 (common-lisp:defun |make-storage-lens-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-lens-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string-for-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (submit-multi-region-access-point-routes-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-submit-multi-region-access-point-routes-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (mrap (common-lisp:error ":mrap is required") :type
    (common-lisp:or multi-region-access-point-id common-lisp:null))
   (route-updates (common-lisp:error ":route-updates is required") :type
    (common-lisp:or route-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'submit-multi-region-access-point-routes-request
                    'make-submit-multi-region-access-point-routes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-updates))
      (common-lisp:list
       (common-lisp:cons "RouteUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (submit-multi-region-access-point-routes-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-submit-multi-region-access-point-routes-result-")))
 (common-lisp:export
  (common-lisp:list 'submit-multi-region-access-point-routes-result
                    'make-submit-multi-region-access-point-routes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-result))
   common-lisp:nil))
(common-lisp:deftype suspended-cause () 'common-lisp:string)
(common-lisp:deftype suspended-date () 'common-lisp:string)
(common-lisp:deftype tag-key-string () 'common-lisp:string)
(common-lisp:deftype tag-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tagging (:copier common-lisp:nil) (:conc-name "struct-shape-tagging-"))
   (tag-set (common-lisp:error ":tag-set is required") :type
    (common-lisp:or s3tag-set common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tagging 'make-tagging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagging))
   common-lisp:nil))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:deftype traffic-dial-percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (transition (:copier common-lisp:nil)
      (:conc-name "struct-shape-transition-"))
   (date common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (days common-lisp:nil :type (common-lisp:or days common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or transition-storage-class common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transition 'make-transition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transition-list ()
   '(trivial-types:proper-list transition))
 (common-lisp:defun |make-transition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transition-storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-priority-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-priority-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or job-priority common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-priority-request
                    'make-update-job-priority-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-priority-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-priority-result-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or job-priority common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-priority-result
                    'make-update-job-priority-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-status-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (requested-job-status
    (common-lisp:error ":requested-job-status is required") :type
    (common-lisp:or requested-job-status common-lisp:null))
   (status-update-reason common-lisp:nil :type
    (common-lisp:or job-status-update-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-status-request
                    'make-update-job-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-status-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-status-result-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null))
   (status-update-reason common-lisp:nil :type
    (common-lisp:or job-status-update-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-status-result 'make-update-job-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-reason))
      (common-lisp:list
       (common-lisp:cons "StatusUpdateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (versioning-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-versioning-configuration-"))
   (mfadelete common-lisp:nil :type
    (common-lisp:or mfadelete common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or bucket-versioning-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'versioning-configuration 'make-versioning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-configuration-"))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or vpc-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name bucket vpc-configuration
                     public-access-block-configuration bucket-account-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id name bucket vpc-configuration
     public-access-block-configuration bucket-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-point))
(common-lisp:progn
 (common-lisp:defun create-access-point-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name configuration)
   (common-lisp:declare (common-lisp:ignorable account-id name configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-access-point-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateAccessPointForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-point-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun create-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket create-bucket-configuration
                     grant-full-control grant-read grant-read-acp grant-write
                     grant-write-acp object-lock-enabled-for-bucket outpost-id)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket create-bucket-configuration
     grant-full-control grant-read grant-read-acp grant-write grant-write-acp
     object-lock-enabled-for-bucket outpost-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateBucket"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bucket))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id confirmation-required
                     operation report client-request-token manifest description
                     priority role-arn tags manifest-generator)
   (common-lisp:declare
    (common-lisp:ignorable account-id confirmation-required operation report
     client-request-token manifest description priority role-arn tags
     manifest-generator))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/v20180820/jobs"
                                                        "CreateJob"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-multi-region-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id client-token details)
   (common-lisp:declare
    (common-lisp:ignorable account-id client-token details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-multi-region-access-point-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/v20180820/async-requests/mrap/create"
                                                        "CreateMultiRegionAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-multi-region-access-point))
(common-lisp:progn
 (common-lisp:defun delete-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-point))
(common-lisp:progn
 (common-lisp:defun delete-access-point-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-access-point-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAccessPointForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-point-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun delete-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-access-point-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-point-policy))
(common-lisp:progn
 (common-lisp:defun delete-access-point-policy-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-access-point-policy-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAccessPointPolicyForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-point-policy-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun delete-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucket"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket))
(common-lisp:progn
 (common-lisp:defun delete-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/lifecycleconfiguration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucketLifecycleConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucketPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-policy))
(common-lisp:progn
 (common-lisp:defun delete-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-replication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucketReplication"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-replication))
(common-lisp:progn
 (common-lisp:defun delete-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucketTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun delete-job-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id)
   (common-lisp:declare (common-lisp:ignorable account-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteJobTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-job-tagging))
(common-lisp:progn
 (common-lisp:defun delete-multi-region-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id client-token details)
   (common-lisp:declare
    (common-lisp:ignorable account-id client-token details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-multi-region-access-point-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/v20180820/async-requests/mrap/delete"
                                                        "DeleteMultiRegionAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-multi-region-access-point))
(common-lisp:progn
 (common-lisp:defun delete-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-public-access-block-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        "/v20180820/configuration/publicAccessBlock"
                                                        "DeletePublicAccessBlock"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-public-access-block))
(common-lisp:progn
 (common-lisp:defun delete-storage-lens-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id)
   (common-lisp:declare (common-lisp:ignorable config-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-storage-lens-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "DeleteStorageLensConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-storage-lens-configuration))
(common-lisp:progn
 (common-lisp:defun delete-storage-lens-configuration-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id)
   (common-lisp:declare (common-lisp:ignorable config-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-storage-lens-configuration-tagging-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "DeleteStorageLensConfigurationTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-storage-lens-configuration-tagging))
(common-lisp:progn
 (common-lisp:defun describe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id)
   (common-lisp:declare (common-lisp:ignorable account-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DescribeJob"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-job))
(common-lisp:progn
 (common-lisp:defun describe-multi-region-access-point-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id request-token-arn)
   (common-lisp:declare (common-lisp:ignorable account-id request-token-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-multi-region-access-point-operation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/async-requests/mrap/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'request-token)))
                                                        "DescribeMultiRegionAccessPointOperation"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-multi-region-access-point-operation))
(common-lisp:progn
 (common-lisp:defun get-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point))
(common-lisp:progn
 (common-lisp:defun get-access-point-configuration-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-configuration-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointConfigurationForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-configuration-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun get-access-point-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun get-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-point-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-policy))
(common-lisp:progn
 (common-lisp:defun get-access-point-policy-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-policy-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointPolicyForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-policy-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun get-access-point-policy-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-policy-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A/policyStatus"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointPolicyStatus"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-policy-status))
(common-lisp:progn
 (common-lisp:defun get-access-point-policy-status-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-policy-status-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/policyStatus"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointPolicyStatusForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-policy-status-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun get-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucket"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket))
(common-lisp:progn
 (common-lisp:defun get-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/lifecycleconfiguration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketLifecycleConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-policy))
(common-lisp:progn
 (common-lisp:defun get-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketReplication"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-replication))
(common-lisp:progn
 (common-lisp:defun get-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun get-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketVersioning"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun get-job-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id)
   (common-lisp:declare (common-lisp:ignorable account-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetJobTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-tagging))
(common-lisp:progn
 (common-lisp:defun get-multi-region-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-multi-region-access-point-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'name)))
                                                        "GetMultiRegionAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multi-region-access-point))
(common-lisp:progn
 (common-lisp:defun get-multi-region-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-multi-region-access-point-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A/policy"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'name)))
                                                        "GetMultiRegionAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multi-region-access-point-policy))
(common-lisp:progn
 (common-lisp:defun get-multi-region-access-point-policy-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-multi-region-access-point-policy-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A/policystatus"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'name)))
                                                        "GetMultiRegionAccessPointPolicyStatus"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multi-region-access-point-policy-status))
(common-lisp:progn
 (common-lisp:defun get-multi-region-access-point-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id mrap)
   (common-lisp:declare (common-lisp:ignorable account-id mrap))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-multi-region-access-point-routes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A/routes"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'mrap)))
                                                        "GetMultiRegionAccessPointRoutes"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multi-region-access-point-routes))
(common-lisp:progn
 (common-lisp:defun get-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/configuration/publicAccessBlock"
                                                        "GetPublicAccessBlock"
                                                        "2018-08-20"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-public-access-block))
(common-lisp:progn
 (common-lisp:defun get-storage-lens-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id)
   (common-lisp:declare (common-lisp:ignorable config-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-storage-lens-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "GetStorageLensConfiguration"
                                                        "2018-08-20"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-storage-lens-configuration))
(common-lisp:progn
 (common-lisp:defun get-storage-lens-configuration-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id)
   (common-lisp:declare (common-lisp:ignorable config-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-storage-lens-configuration-tagging-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "GetStorageLensConfigurationTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-storage-lens-configuration-tagging))
(common-lisp:progn
 (common-lisp:defun list-access-points
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-points-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/accesspoint"
                                                        "ListAccessPoints"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-points))
(common-lisp:progn
 (common-lisp:defun list-access-points-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-access-points-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/accesspointforobjectlambda"
                                                        "ListAccessPointsForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-points-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-statuses next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable account-id job-statuses next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/jobs"
                                                        "ListJobs"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-multi-region-access-points
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-multi-region-access-points-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/mrap/instances"
                                                        "ListMultiRegionAccessPoints"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multi-region-access-points))
(common-lisp:progn
 (common-lisp:defun list-regional-buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id next-token max-results
                     outpost-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id next-token max-results outpost-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-regional-buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/bucket"
                                                        "ListRegionalBuckets"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-regional-buckets))
(common-lisp:progn
 (common-lisp:defun list-storage-lens-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id next-token)
   (common-lisp:declare (common-lisp:ignorable account-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-storage-lens-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/storagelens"
                                                        "ListStorageLensConfigurations"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-storage-lens-configurations))
(common-lisp:progn
 (common-lisp:defun put-access-point-configuration-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name configuration)
   (common-lisp:declare (common-lisp:ignorable account-id name configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-access-point-configuration-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutAccessPointConfigurationForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-access-point-configuration-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun put-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name policy)
   (common-lisp:declare (common-lisp:ignorable account-id name policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-access-point-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-access-point-policy))
(common-lisp:progn
 (common-lisp:defun put-access-point-policy-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name policy)
   (common-lisp:declare (common-lisp:ignorable account-id name policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-access-point-policy-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutAccessPointPolicyForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-access-point-policy-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun put-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket
                     lifecycle-configuration)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket lifecycle-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/lifecycleconfiguration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketLifecycleConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket
                     confirm-remove-self-bucket-access policy)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket confirm-remove-self-bucket-access
     policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-policy))
(common-lisp:progn
 (common-lisp:defun put-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket
                     replication-configuration)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket replication-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketReplication"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-replication))
(common-lisp:progn
 (common-lisp:defun put-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket tagging)
   (common-lisp:declare (common-lisp:ignorable account-id bucket tagging))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun put-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket mfa
                     versioning-configuration)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket mfa versioning-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketVersioning"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun put-job-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id tags)
   (common-lisp:declare (common-lisp:ignorable account-id job-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-job-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "PutJobTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-job-tagging))
(common-lisp:progn
 (common-lisp:defun put-multi-region-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id client-token details)
   (common-lisp:declare
    (common-lisp:ignorable account-id client-token details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-multi-region-access-point-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/v20180820/async-requests/mrap/put-policy"
                                                        "PutMultiRegionAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-multi-region-access-point-policy))
(common-lisp:progn
 (common-lisp:defun put-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key public-access-block-configuration
                     account-id)
   (common-lisp:declare
    (common-lisp:ignorable public-access-block-configuration account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        "/v20180820/configuration/publicAccessBlock"
                                                        "PutPublicAccessBlock"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-public-access-block))
(common-lisp:progn
 (common-lisp:defun put-storage-lens-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id
                     storage-lens-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable config-id account-id storage-lens-configuration
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-storage-lens-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "PutStorageLensConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-storage-lens-configuration))
(common-lisp:progn
 (common-lisp:defun put-storage-lens-configuration-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id tags)
   (common-lisp:declare (common-lisp:ignorable config-id account-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-storage-lens-configuration-tagging-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "PutStorageLensConfigurationTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-storage-lens-configuration-tagging))
(common-lisp:progn
 (common-lisp:defun submit-multi-region-access-point-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id mrap route-updates)
   (common-lisp:declare (common-lisp:ignorable account-id mrap route-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-submit-multi-region-access-point-routes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A/routes"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'mrap)))
                                                        "SubmitMultiRegionAccessPointRoutes"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'submit-multi-region-access-point-routes))
(common-lisp:progn
 (common-lisp:defun update-job-priority
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id priority)
   (common-lisp:declare (common-lisp:ignorable account-id job-id priority))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-priority-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/priority"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateJobPriority"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job-priority))
(common-lisp:progn
 (common-lisp:defun update-job-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id requested-job-status
                     status-update-reason)
   (common-lisp:declare
    (common-lisp:ignorable account-id job-id requested-job-status
     status-update-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateJobStatus"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job-status))
