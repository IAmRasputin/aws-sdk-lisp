;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/s3control/api
  (:use)
  (:nicknames #:aws/s3control)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/s3control/api)
(common-lisp:progn
 (common-lisp:defclass s3control-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "s3control" :protocol
                        :rest-xml))
 (common-lisp:export 's3control-request))
(common-lisp:progn
 (common-lisp:define-condition s3control-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 's3control-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("BucketAlreadyExists" . bucket-already-exists)
    ("BucketAlreadyOwnedByYou" . bucket-already-owned-by-you)
    ("IdempotencyException" . idempotency-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("JobStatusException" . job-status-exception)
    ("NoSuchPublicAccessBlockConfiguration"
     . no-such-public-access-block-configuration)
    ("NotFoundException" . not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defclass abort-incomplete-multipart-upload common-lisp:nil
                       ((days-after-initiation :initarg :days-after-initiation
                         :type
                         (common-lisp:or days-after-initiation
                                         common-lisp:null)
                         :accessor
                         %abort-incomplete-multipart-upload-days-after-initiation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'abort-incomplete-multipart-upload
                    'make-abort-incomplete-multipart-upload))
 (common-lisp:defun make-abort-incomplete-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key days-after-initiation)
   (common-lisp:apply #'common-lisp:make-instance
                      'abort-incomplete-multipart-upload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'days-after-initiation))
      (common-lisp:list
       (common-lisp:cons "DaysAfterInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-control-translation common-lisp:nil
                       ((owner :initarg :owner :type
                         (common-lisp:or owner-override common-lisp:null)
                         :accessor %access-control-translation-owner :initform
                         (common-lisp:error ":owner is required"))))
 (common-lisp:export
  (common-lisp:list 'access-control-translation
                    'make-access-control-translation))
 (common-lisp:defun make-access-control-translation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-translation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-point common-lisp:nil
                       ((bucket-account-id :initarg :bucket-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %access-point-bucket-account-id :initform
                         common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         %access-point-alias :initform common-lisp:nil)
                        (access-point-arn :initarg :access-point-arn :type
                         (common-lisp:or s3access-point-arn common-lisp:null)
                         :accessor %access-point-access-point-arn :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %access-point-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (vpc-configuration :initarg :vpc-configuration :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor %access-point-vpc-configuration :initform
                         common-lisp:nil)
                        (network-origin :initarg :network-origin :type
                         (common-lisp:or network-origin common-lisp:null)
                         :accessor %access-point-network-origin :initform
                         (common-lisp:error ":network-origin is required"))
                        (name :initarg :name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %access-point-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'access-point 'make-access-point))
 (common-lisp:defun make-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-account-id alias access-point-arn
                     bucket vpc-configuration network-origin name)
   (common-lisp:apply #'common-lisp:make-instance 'access-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-origin))
      (common-lisp:list
       (common-lisp:cons "NetworkOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-point-list ()
   '(trivial-types:proper-list access-point))
 (common-lisp:defun |make-access-point-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-point-name () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-level common-lisp:nil
                       ((detailed-status-codes-metrics :initarg
                         :detailed-status-codes-metrics :type
                         (common-lisp:or detailed-status-codes-metrics
                                         common-lisp:null)
                         :accessor %account-level-detailed-status-codes-metrics
                         :initform common-lisp:nil)
                        (advanced-data-protection-metrics :initarg
                         :advanced-data-protection-metrics :type
                         (common-lisp:or advanced-data-protection-metrics
                                         common-lisp:null)
                         :accessor
                         %account-level-advanced-data-protection-metrics
                         :initform common-lisp:nil)
                        (advanced-cost-optimization-metrics :initarg
                         :advanced-cost-optimization-metrics :type
                         (common-lisp:or advanced-cost-optimization-metrics
                                         common-lisp:null)
                         :accessor
                         %account-level-advanced-cost-optimization-metrics
                         :initform common-lisp:nil)
                        (bucket-level :initarg :bucket-level :type
                         (common-lisp:or bucket-level common-lisp:null)
                         :accessor %account-level-bucket-level :initform
                         (common-lisp:error ":bucket-level is required"))
                        (activity-metrics :initarg :activity-metrics :type
                         (common-lisp:or activity-metrics common-lisp:null)
                         :accessor %account-level-activity-metrics :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'account-level 'make-account-level))
 (common-lisp:defun make-account-level
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detailed-status-codes-metrics
                     advanced-data-protection-metrics
                     advanced-cost-optimization-metrics bucket-level
                     activity-metrics)
   (common-lisp:apply #'common-lisp:make-instance 'account-level
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-metrics))
      (common-lisp:list
       (common-lisp:cons "ActivityMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-level))
      (common-lisp:list
       (common-lisp:cons "BucketLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-cost-optimization-metrics))
      (common-lisp:list
       (common-lisp:cons "AdvancedCostOptimizationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-data-protection-metrics))
      (common-lisp:list
       (common-lisp:cons "AdvancedDataProtectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-status-codes-metrics))
      (common-lisp:list
       (common-lisp:cons "DetailedStatusCodesMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-level))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activity-metrics common-lisp:nil
                       ((is-enabled :initarg :is-enabled :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         %activity-metrics-is-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activity-metrics 'make-activity-metrics))
 (common-lisp:defun make-activity-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'activity-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advanced-cost-optimization-metrics common-lisp:nil
                       ((is-enabled :initarg :is-enabled :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         %advanced-cost-optimization-metrics-is-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'advanced-cost-optimization-metrics
                    'make-advanced-cost-optimization-metrics))
 (common-lisp:defun make-advanced-cost-optimization-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'advanced-cost-optimization-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-cost-optimization-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-cost-optimization-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-cost-optimization-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advanced-data-protection-metrics common-lisp:nil
                       ((is-enabled :initarg :is-enabled :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         %advanced-data-protection-metrics-is-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'advanced-data-protection-metrics
                    'make-advanced-data-protection-metrics))
 (common-lisp:defun make-advanced-data-protection-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'advanced-data-protection-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-data-protection-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-data-protection-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-data-protection-metrics))
   common-lisp:nil))
(common-lisp:deftype alias () 'common-lisp:string)
(common-lisp:deftype async-creation-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass async-error-details common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or max-length1024string common-lisp:null)
                         :accessor %async-error-details-request-id :initform
                         common-lisp:nil)
                        (resource :initarg :resource :type
                         (common-lisp:or max-length1024string common-lisp:null)
                         :accessor %async-error-details-resource :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or max-length1024string common-lisp:null)
                         :accessor %async-error-details-message :initform
                         common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or max-length1024string common-lisp:null)
                         :accessor %async-error-details-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'async-error-details 'make-async-error-details))
 (common-lisp:defun make-async-error-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id resource message code)
   (common-lisp:apply #'common-lisp:make-instance 'async-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input async-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input async-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input async-error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass async-operation common-lisp:nil
                       ((response-details :initarg :response-details :type
                         (common-lisp:or async-response-details
                                         common-lisp:null)
                         :accessor %async-operation-response-details :initform
                         common-lisp:nil)
                        (request-status :initarg :request-status :type
                         (common-lisp:or async-request-status common-lisp:null)
                         :accessor %async-operation-request-status :initform
                         common-lisp:nil)
                        (request-parameters :initarg :request-parameters :type
                         (common-lisp:or async-request-parameters
                                         common-lisp:null)
                         :accessor %async-operation-request-parameters
                         :initform common-lisp:nil)
                        (request-token-arn :initarg :request-token-arn :type
                         (common-lisp:or async-request-token-arn
                                         common-lisp:null)
                         :accessor %async-operation-request-token-arn :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or async-operation-name common-lisp:null)
                         :accessor %async-operation-operation :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or async-creation-timestamp
                                         common-lisp:null)
                         :accessor %async-operation-creation-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'async-operation 'make-async-operation))
 (common-lisp:defun make-async-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-details request-status
                     request-parameters request-token-arn operation
                     creation-time)
   (common-lisp:apply #'common-lisp:make-instance 'async-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input async-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input async-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token-arn))
      (common-lisp:list
       (common-lisp:cons "RequestTokenARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-parameters))
      (common-lisp:list
       (common-lisp:cons "RequestParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-status))
      (common-lisp:list
       (common-lisp:cons "RequestStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-details))
      (common-lisp:list
       (common-lisp:cons "ResponseDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input async-operation))
   common-lisp:nil))
(common-lisp:deftype async-operation-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass async-request-parameters common-lisp:nil
                       ((put-multi-region-access-point-policy-request :initarg
                         :put-multi-region-access-point-policy-request :type
                         (common-lisp:or
                          put-multi-region-access-point-policy-input
                          common-lisp:null)
                         :accessor
                         %async-request-parameters-put-multi-region-access-point-policy-request
                         :initform common-lisp:nil)
                        (delete-multi-region-access-point-request :initarg
                         :delete-multi-region-access-point-request :type
                         (common-lisp:or delete-multi-region-access-point-input
                                         common-lisp:null)
                         :accessor
                         %async-request-parameters-delete-multi-region-access-point-request
                         :initform common-lisp:nil)
                        (create-multi-region-access-point-request :initarg
                         :create-multi-region-access-point-request :type
                         (common-lisp:or create-multi-region-access-point-input
                                         common-lisp:null)
                         :accessor
                         %async-request-parameters-create-multi-region-access-point-request
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'async-request-parameters 'make-async-request-parameters))
 (common-lisp:defun make-async-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     put-multi-region-access-point-policy-request
                     delete-multi-region-access-point-request
                     create-multi-region-access-point-request)
   (common-lisp:apply #'common-lisp:make-instance 'async-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          async-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          async-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-multi-region-access-point-request))
      (common-lisp:list
       (common-lisp:cons "CreateMultiRegionAccessPointRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-multi-region-access-point-request))
      (common-lisp:list
       (common-lisp:cons "DeleteMultiRegionAccessPointRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'put-multi-region-access-point-policy-request))
      (common-lisp:list
       (common-lisp:cons "PutMultiRegionAccessPointPolicyRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          async-request-parameters))
   common-lisp:nil))
(common-lisp:deftype async-request-status () 'common-lisp:string)
(common-lisp:deftype async-request-token-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass async-response-details common-lisp:nil
                       ((error-details :initarg :error-details :type
                         (common-lisp:or async-error-details common-lisp:null)
                         :accessor %async-response-details-error-details
                         :initform common-lisp:nil)
                        (multi-region-access-point-details :initarg
                         :multi-region-access-point-details :type
                         (common-lisp:or
                          multi-region-access-points-async-response
                          common-lisp:null)
                         :accessor
                         %async-response-details-multi-region-access-point-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'async-response-details 'make-async-response-details))
 (common-lisp:defun make-async-response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-details
                     multi-region-access-point-details)
   (common-lisp:apply #'common-lisp:make-instance 'async-response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          async-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          async-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-access-point-details))
      (common-lisp:list
       (common-lisp:cons "MultiRegionAccessPointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          async-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-transformation common-lisp:nil
                       ((function-payload :initarg :function-payload :type
                         (common-lisp:or aws-lambda-transformation-payload
                                         common-lisp:null)
                         :accessor %aws-lambda-transformation-function-payload
                         :initform common-lisp:nil)
                        (function-arn :initarg :function-arn :type
                         (common-lisp:or function-arn-string common-lisp:null)
                         :accessor %aws-lambda-transformation-function-arn
                         :initform
                         (common-lisp:error ":function-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-transformation
                    'make-aws-lambda-transformation))
 (common-lisp:defun make-aws-lambda-transformation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-payload function-arn)
   (common-lisp:apply #'common-lisp:make-instance 'aws-lambda-transformation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-transformation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-transformation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-payload))
      (common-lisp:list
       (common-lisp:cons "FunctionPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-transformation))
   common-lisp:nil))
(common-lisp:deftype aws-lambda-transformation-payload () 'common-lisp:string)
(common-lisp:deftype aws-org-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bucket-already-exists
     (s3control-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-exists)))
(common-lisp:progn
 (common-lisp:define-condition bucket-already-owned-by-you
     (s3control-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-owned-by-you)))
(common-lisp:deftype bucket-canned-acl () 'common-lisp:string)
(common-lisp:deftype bucket-identifier-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bucket-level common-lisp:nil
                       ((detailed-status-codes-metrics :initarg
                         :detailed-status-codes-metrics :type
                         (common-lisp:or detailed-status-codes-metrics
                                         common-lisp:null)
                         :accessor %bucket-level-detailed-status-codes-metrics
                         :initform common-lisp:nil)
                        (advanced-data-protection-metrics :initarg
                         :advanced-data-protection-metrics :type
                         (common-lisp:or advanced-data-protection-metrics
                                         common-lisp:null)
                         :accessor
                         %bucket-level-advanced-data-protection-metrics
                         :initform common-lisp:nil)
                        (advanced-cost-optimization-metrics :initarg
                         :advanced-cost-optimization-metrics :type
                         (common-lisp:or advanced-cost-optimization-metrics
                                         common-lisp:null)
                         :accessor
                         %bucket-level-advanced-cost-optimization-metrics
                         :initform common-lisp:nil)
                        (prefix-level :initarg :prefix-level :type
                         (common-lisp:or prefix-level common-lisp:null)
                         :accessor %bucket-level-prefix-level :initform
                         common-lisp:nil)
                        (activity-metrics :initarg :activity-metrics :type
                         (common-lisp:or activity-metrics common-lisp:null)
                         :accessor %bucket-level-activity-metrics :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'bucket-level 'make-bucket-level))
 (common-lisp:defun make-bucket-level
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detailed-status-codes-metrics
                     advanced-data-protection-metrics
                     advanced-cost-optimization-metrics prefix-level
                     activity-metrics)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-level
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-metrics))
      (common-lisp:list
       (common-lisp:cons "ActivityMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-level))
      (common-lisp:list
       (common-lisp:cons "PrefixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-cost-optimization-metrics))
      (common-lisp:list
       (common-lisp:cons "AdvancedCostOptimizationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-data-protection-metrics))
      (common-lisp:list
       (common-lisp:cons "AdvancedDataProtectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-status-codes-metrics))
      (common-lisp:list
       (common-lisp:cons "DetailedStatusCodesMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-level))
   common-lisp:nil))
(common-lisp:deftype bucket-location-constraint () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype bucket-versioning-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buckets ()
   '(trivial-types:proper-list s3bucket-arn-string))
 (common-lisp:defun |make-buckets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3bucket-arn-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cloud-watch-metrics common-lisp:nil
                       ((is-enabled :initarg :is-enabled :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         %cloud-watch-metrics-is-enabled :initform
                         (common-lisp:error ":is-enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-metrics 'make-cloud-watch-metrics))
 (common-lisp:defun make-cloud-watch-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cloud-watch-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cloud-watch-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cloud-watch-metrics))
   common-lisp:nil))
(common-lisp:deftype config-id () 'common-lisp:string)
(common-lisp:deftype confirm-remove-self-bucket-access () 'common-lisp:boolean)
(common-lisp:deftype confirmation-required () 'common-lisp:boolean)
(common-lisp:deftype continuation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-access-point-for-object-lambda-request
                       common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or object-lambda-configuration
                                         common-lisp:null)
                         :accessor
                         %create-access-point-for-object-lambda-request-configuration
                         :initform
                         (common-lisp:error ":configuration is required"))
                        (name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %create-access-point-for-object-lambda-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-access-point-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-access-point-for-object-lambda-request
                    'make-create-access-point-for-object-lambda-request))
 (common-lisp:defun make-create-access-point-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-access-point-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-point-for-object-lambda-result
                       common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or object-lambda-access-point-alias
                                         common-lisp:null)
                         :accessor
                         %create-access-point-for-object-lambda-result-alias
                         :initform common-lisp:nil)
                        (object-lambda-access-point-arn :initarg
                         :object-lambda-access-point-arn :type
                         (common-lisp:or object-lambda-access-point-arn
                                         common-lisp:null)
                         :accessor
                         %create-access-point-for-object-lambda-result-object-lambda-access-point-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-access-point-for-object-lambda-result
                    'make-create-access-point-for-object-lambda-result))
 (common-lisp:defun make-create-access-point-for-object-lambda-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias object-lambda-access-point-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-access-point-for-object-lambda-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lambda-access-point-arn))
      (common-lisp:list
       (common-lisp:cons "ObjectLambdaAccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-point-request common-lisp:nil
                       ((bucket-account-id :initarg :bucket-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-access-point-request-bucket-account-id
                         :initform common-lisp:nil)
                        (public-access-block-configuration :initarg
                         :public-access-block-configuration :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %create-access-point-request-public-access-block-configuration
                         :initform common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         %create-access-point-request-vpc-configuration
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %create-access-point-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (name :initarg :name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %create-access-point-request-name :initform
                         (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-access-point-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-access-point-request
                    'make-create-access-point-request))
 (common-lisp:defun make-create-access-point-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-account-id
                     public-access-block-configuration vpc-configuration bucket
                     name account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-point-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-point-result common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         %create-access-point-result-alias :initform
                         common-lisp:nil)
                        (access-point-arn :initarg :access-point-arn :type
                         (common-lisp:or s3access-point-arn common-lisp:null)
                         :accessor %create-access-point-result-access-point-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-access-point-result
                    'make-create-access-point-result))
 (common-lisp:defun make-create-access-point-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias access-point-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-point-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bucket-configuration common-lisp:nil
                       ((location-constraint :initarg :location-constraint
                         :type
                         (common-lisp:or bucket-location-constraint
                                         common-lisp:null)
                         :accessor
                         %create-bucket-configuration-location-constraint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-configuration
                    'make-create-bucket-configuration))
 (common-lisp:defun make-create-bucket-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location-constraint)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-constraint))
      (common-lisp:list
       (common-lisp:cons "LocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bucket-request common-lisp:nil
                       ((outpost-id :initarg :outpost-id :type
                         (common-lisp:or non-empty-max-length64string
                                         common-lisp:null)
                         :accessor %create-bucket-request-outpost-id :initform
                         common-lisp:nil)
                        (object-lock-enabled-for-bucket :initarg
                         :object-lock-enabled-for-bucket :type
                         (common-lisp:or object-lock-enabled-for-bucket
                                         common-lisp:null)
                         :accessor
                         %create-bucket-request-object-lock-enabled-for-bucket
                         :initform common-lisp:nil)
                        (grant-write-acp :initarg :grant-write-acp :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor %create-bucket-request-grant-write-acp
                         :initform common-lisp:nil)
                        (grant-write :initarg :grant-write :type
                         (common-lisp:or grant-write common-lisp:null)
                         :accessor %create-bucket-request-grant-write :initform
                         common-lisp:nil)
                        (grant-read-acp :initarg :grant-read-acp :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor %create-bucket-request-grant-read-acp
                         :initform common-lisp:nil)
                        (grant-read :initarg :grant-read :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         %create-bucket-request-grant-read :initform
                         common-lisp:nil)
                        (grant-full-control :initarg :grant-full-control :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor %create-bucket-request-grant-full-control
                         :initform common-lisp:nil)
                        (create-bucket-configuration :initarg
                         :create-bucket-configuration :type
                         (common-lisp:or create-bucket-configuration
                                         common-lisp:null)
                         :accessor
                         %create-bucket-request-create-bucket-configuration
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %create-bucket-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (acl :initarg :acl :type
                         (common-lisp:or bucket-canned-acl common-lisp:null)
                         :accessor %create-bucket-request-acl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-request 'make-create-bucket-request))
 (common-lisp:defun make-create-bucket-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outpost-id object-lock-enabled-for-bucket
                     grant-write-acp grant-write grant-read-acp grant-read
                     grant-full-control create-bucket-configuration bucket acl)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-enabled-for-bucket))
      (common-lisp:cons "x-amz-bucket-object-lock-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:cons "x-amz-outpost-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-bucket-configuration))
      (common-lisp:list
       (common-lisp:cons "CreateBucketConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CreateBucketConfiguration" common-lisp:nil
                              "http://awss3control.amazonaws.com/doc/2018-08-20/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-bucket-result common-lisp:nil
                       ((bucket-arn :initarg :bucket-arn :type
                         (common-lisp:or s3regional-bucket-arn
                                         common-lisp:null)
                         :accessor %create-bucket-result-bucket-arn :initform
                         common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or location common-lisp:null) :accessor
                         %create-bucket-result-location :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-result 'make-create-bucket-result))
 (common-lisp:defun make-create-bucket-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-arn location)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-request common-lisp:nil
                       ((manifest-generator :initarg :manifest-generator :type
                         (common-lisp:or job-manifest-generator
                                         common-lisp:null)
                         :accessor %create-job-request-manifest-generator
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or s3tag-set common-lisp:null) :accessor
                         %create-job-request-tags :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %create-job-request-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (priority :initarg :priority :type
                         (common-lisp:or job-priority common-lisp:null)
                         :accessor %create-job-request-priority :initform
                         (common-lisp:error ":priority is required"))
                        (description :initarg :description :type
                         (common-lisp:or non-empty-max-length256string
                                         common-lisp:null)
                         :accessor %create-job-request-description :initform
                         common-lisp:nil)
                        (manifest :initarg :manifest :type
                         (common-lisp:or job-manifest common-lisp:null)
                         :accessor %create-job-request-manifest :initform
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or non-empty-max-length64string
                                         common-lisp:null)
                         :accessor %create-job-request-client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required"))
                        (report :initarg :report :type
                         (common-lisp:or job-report common-lisp:null) :accessor
                         %create-job-request-report :initform
                         (common-lisp:error ":report is required"))
                        (operation :initarg :operation :type
                         (common-lisp:or job-operation common-lisp:null)
                         :accessor %create-job-request-operation :initform
                         (common-lisp:error ":operation is required"))
                        (confirmation-required :initarg :confirmation-required
                         :type
                         (common-lisp:or confirmation-required
                                         common-lisp:null)
                         :accessor %create-job-request-confirmation-required
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-job-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defun make-create-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key manifest-generator tags role-arn priority
                     description manifest client-request-token report operation
                     confirmation-required account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-required))
      (common-lisp:list
       (common-lisp:cons "ConfirmationRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report))
      (common-lisp:list
       (common-lisp:cons "Report"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "Manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-generator))
      (common-lisp:list
       (common-lisp:cons "ManifestGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-result common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %create-job-result-job-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-job-result 'make-create-job-result))
 (common-lisp:defun make-create-job-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multi-region-access-point-input common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or region-creation-list common-lisp:null)
                         :accessor
                         %create-multi-region-access-point-input-regions
                         :initform (common-lisp:error ":regions is required"))
                        (public-access-block :initarg :public-access-block
                         :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %create-multi-region-access-point-input-public-access-block
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or multi-region-access-point-name
                                         common-lisp:null)
                         :accessor %create-multi-region-access-point-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-multi-region-access-point-input
                    'make-create-multi-region-access-point-input))
 (common-lisp:defun make-create-multi-region-access-point-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions public-access-block name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multi-region-access-point-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-block))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multi-region-access-point-request common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or create-multi-region-access-point-input
                                         common-lisp:null)
                         :accessor
                         %create-multi-region-access-point-request-details
                         :initform (common-lisp:error ":details is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or multi-region-access-point-client-token
                                         common-lisp:null)
                         :accessor
                         %create-multi-region-access-point-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-multi-region-access-point-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-multi-region-access-point-request
                    'make-create-multi-region-access-point-request))
 (common-lisp:defun make-create-multi-region-access-point-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details client-token account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multi-region-access-point-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multi-region-access-point-result common-lisp:nil
                       ((request-token-arn :initarg :request-token-arn :type
                         (common-lisp:or async-request-token-arn
                                         common-lisp:null)
                         :accessor
                         %create-multi-region-access-point-result-request-token-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-multi-region-access-point-result
                    'make-create-multi-region-access-point-result))
 (common-lisp:defun make-create-multi-region-access-point-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-token-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multi-region-access-point-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token-arn))
      (common-lisp:list
       (common-lisp:cons "RequestTokenARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multi-region-access-point-result))
   common-lisp:nil))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype creation-timestamp () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype days () 'common-lisp:integer)
(common-lisp:deftype days-after-initiation () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass delete-access-point-for-object-lambda-request
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %delete-access-point-for-object-lambda-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-access-point-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-for-object-lambda-request
                    'make-delete-access-point-for-object-lambda-request))
 (common-lisp:defun make-delete-access-point-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-access-point-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-point-policy-for-object-lambda-request
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %delete-access-point-policy-for-object-lambda-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-access-point-policy-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-policy-for-object-lambda-request
                    'make-delete-access-point-policy-for-object-lambda-request))
 (common-lisp:defun make-delete-access-point-policy-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-access-point-policy-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-point-policy-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %delete-access-point-policy-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-access-point-policy-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-policy-request
                    'make-delete-access-point-policy-request))
 (common-lisp:defun make-delete-access-point-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-access-point-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-point-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %delete-access-point-request-name :initform
                         (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-access-point-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-request
                    'make-delete-access-point-request))
 (common-lisp:defun make-delete-access-point-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-point-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-lifecycle-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %delete-bucket-lifecycle-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-bucket-lifecycle-configuration-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-lifecycle-configuration-request
                    'make-delete-bucket-lifecycle-configuration-request))
 (common-lisp:defun make-delete-bucket-lifecycle-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-lifecycle-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-policy-request common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-policy-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-bucket-policy-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-policy-request
                    'make-delete-bucket-policy-request))
 (common-lisp:defun make-delete-bucket-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-replication-request common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-replication-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-bucket-replication-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-replication-request
                    'make-delete-bucket-replication-request))
 (common-lisp:defun make-delete-bucket-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-request common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-bucket-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-request 'make-delete-bucket-request))
 (common-lisp:defun make-delete-bucket-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-tagging-request common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-tagging-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-bucket-tagging-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-tagging-request
                    'make-delete-bucket-tagging-request))
 (common-lisp:defun make-delete-bucket-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-tagging-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %delete-job-tagging-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-job-tagging-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-job-tagging-request
                    'make-delete-job-tagging-request))
 (common-lisp:defun make-delete-job-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-tagging-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-job-tagging-result
                    'make-delete-job-tagging-result))
 (common-lisp:defun make-delete-job-tagging-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-tagging-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-marker-replication common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or delete-marker-replication-status
                                         common-lisp:null)
                         :accessor %delete-marker-replication-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-marker-replication
                    'make-delete-marker-replication))
 (common-lisp:defun make-delete-marker-replication
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'delete-marker-replication
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   common-lisp:nil))
(common-lisp:deftype delete-marker-replication-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-multi-region-access-point-input common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or multi-region-access-point-name
                                         common-lisp:null)
                         :accessor %delete-multi-region-access-point-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-multi-region-access-point-input
                    'make-delete-multi-region-access-point-input))
 (common-lisp:defun make-delete-multi-region-access-point-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-multi-region-access-point-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multi-region-access-point-request common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or delete-multi-region-access-point-input
                                         common-lisp:null)
                         :accessor
                         %delete-multi-region-access-point-request-details
                         :initform (common-lisp:error ":details is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or multi-region-access-point-client-token
                                         common-lisp:null)
                         :accessor
                         %delete-multi-region-access-point-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-multi-region-access-point-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-multi-region-access-point-request
                    'make-delete-multi-region-access-point-request))
 (common-lisp:defun make-delete-multi-region-access-point-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details client-token account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-multi-region-access-point-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multi-region-access-point-result common-lisp:nil
                       ((request-token-arn :initarg :request-token-arn :type
                         (common-lisp:or async-request-token-arn
                                         common-lisp:null)
                         :accessor
                         %delete-multi-region-access-point-result-request-token-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-multi-region-access-point-result
                    'make-delete-multi-region-access-point-result))
 (common-lisp:defun make-delete-multi-region-access-point-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-token-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-multi-region-access-point-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token-arn))
      (common-lisp:list
       (common-lisp:cons "RequestTokenARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multi-region-access-point-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-public-access-block-request common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-public-access-block-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-public-access-block-request
                    'make-delete-public-access-block-request))
 (common-lisp:defun make-delete-public-access-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-public-access-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-storage-lens-configuration-request
                       common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-storage-lens-configuration-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))
                        (config-id :initarg :config-id :type
                         (common-lisp:or config-id common-lisp:null) :accessor
                         %delete-storage-lens-configuration-request-config-id
                         :initform
                         (common-lisp:error ":config-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-storage-lens-configuration-request
                    'make-delete-storage-lens-configuration-request))
 (common-lisp:defun make-delete-storage-lens-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id config-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-storage-lens-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-storage-lens-configuration-tagging-request
                       common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-storage-lens-configuration-tagging-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))
                        (config-id :initarg :config-id :type
                         (common-lisp:or config-id common-lisp:null) :accessor
                         %delete-storage-lens-configuration-tagging-request-config-id
                         :initform
                         (common-lisp:error ":config-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-storage-lens-configuration-tagging-request
                    'make-delete-storage-lens-configuration-tagging-request))
 (common-lisp:defun make-delete-storage-lens-configuration-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id config-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-storage-lens-configuration-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-storage-lens-configuration-tagging-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-storage-lens-configuration-tagging-result
                    'make-delete-storage-lens-configuration-tagging-result))
 (common-lisp:defun make-delete-storage-lens-configuration-tagging-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-storage-lens-configuration-tagging-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-lens-configuration-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-job-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-job-request 'make-describe-job-request))
 (common-lisp:defun make-describe-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-result common-lisp:nil
                       ((job :initarg :job :type
                         (common-lisp:or job-descriptor common-lisp:null)
                         :accessor %describe-job-result-job :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-job-result 'make-describe-job-result))
 (common-lisp:defun make-describe-job-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance 'describe-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multi-region-access-point-operation-request
                       common-lisp:nil
                       ((request-token-arn :initarg :request-token-arn :type
                         (common-lisp:or async-request-token-arn
                                         common-lisp:null)
                         :accessor
                         %describe-multi-region-access-point-operation-request-request-token-arn
                         :initform
                         (common-lisp:error ":request-token-arn is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-multi-region-access-point-operation-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-multi-region-access-point-operation-request
                    'make-describe-multi-region-access-point-operation-request))
 (common-lisp:defun make-describe-multi-region-access-point-operation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-token-arn account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-multi-region-access-point-operation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multi-region-access-point-operation-result
                       common-lisp:nil
                       ((async-operation :initarg :async-operation :type
                         (common-lisp:or async-operation common-lisp:null)
                         :accessor
                         %describe-multi-region-access-point-operation-result-async-operation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-multi-region-access-point-operation-result
                    'make-describe-multi-region-access-point-operation-result))
 (common-lisp:defun make-describe-multi-region-access-point-operation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key async-operation)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-multi-region-access-point-operation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'async-operation))
      (common-lisp:list
       (common-lisp:cons "AsyncOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multi-region-access-point-operation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((storage-class :initarg :storage-class :type
                         (common-lisp:or replication-storage-class
                                         common-lisp:null)
                         :accessor %destination-storage-class :initform
                         common-lisp:nil)
                        (metrics :initarg :metrics :type
                         (common-lisp:or metrics common-lisp:null) :accessor
                         %destination-metrics :initform common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor %destination-encryption-configuration
                         :initform common-lisp:nil)
                        (access-control-translation :initarg
                         :access-control-translation :type
                         (common-lisp:or access-control-translation
                                         common-lisp:null)
                         :accessor %destination-access-control-translation
                         :initform common-lisp:nil)
                        (replication-time :initarg :replication-time :type
                         (common-lisp:or replication-time common-lisp:null)
                         :accessor %destination-replication-time :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-identifier-string
                                         common-lisp:null)
                         :accessor %destination-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (account :initarg :account :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %destination-account :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defun make-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class metrics
                     encryption-configuration access-control-translation
                     replication-time bucket account)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-translation))
      (common-lisp:list
       (common-lisp:cons "AccessControlTranslation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detailed-status-codes-metrics common-lisp:nil
                       ((is-enabled :initarg :is-enabled :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         %detailed-status-codes-metrics-is-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detailed-status-codes-metrics
                    'make-detailed-status-codes-metrics))
 (common-lisp:defun make-detailed-status-codes-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'detailed-status-codes-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detailed-status-codes-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detailed-status-codes-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detailed-status-codes-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((replica-kms-key-id :initarg :replica-kms-key-id :type
                         (common-lisp:or replica-kms-key-id common-lisp:null)
                         :accessor %encryption-configuration-replica-kms-key-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defun make-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replica-kms-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ReplicaKmsKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoints () 'common-lisp:hash-table)
 (common-lisp:defun |make-endpoints| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass established-multi-region-access-point-policy
                       common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %established-multi-region-access-point-policy-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'established-multi-region-access-point-policy
                    'make-established-multi-region-access-point-policy))
 (common-lisp:defun make-established-multi-region-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'established-multi-region-access-point-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          established-multi-region-access-point-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          established-multi-region-access-point-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          established-multi-region-access-point-policy))
   common-lisp:nil))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass exclude common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or regions common-lisp:null) :accessor
                         %exclude-regions :initform common-lisp:nil)
                        (buckets :initarg :buckets :type
                         (common-lisp:or buckets common-lisp:null) :accessor
                         %exclude-buckets :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'exclude 'make-exclude))
 (common-lisp:defun make-exclude
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions buckets)
   (common-lisp:apply #'common-lisp:make-instance 'exclude
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exclude))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exclude))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exclude))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass existing-object-replication common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or existing-object-replication-status
                                         common-lisp:null)
                         :accessor %existing-object-replication-status
                         :initform (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'existing-object-replication
                    'make-existing-object-replication))
 (common-lisp:defun make-existing-object-replication
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'existing-object-replication
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   common-lisp:nil))
(common-lisp:deftype existing-object-replication-status () 'common-lisp:string)
(common-lisp:deftype expiration-status () 'common-lisp:string)
(common-lisp:deftype expired-object-delete-marker () 'common-lisp:boolean)
(common-lisp:deftype format () 'common-lisp:string)
(common-lisp:deftype function-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass generated-manifest-encryption common-lisp:nil
                       ((ssekms :initarg :ssekms :type
                         (common-lisp:or ssekmsencryption common-lisp:null)
                         :accessor %generated-manifest-encryption-ssekms
                         :initform common-lisp:nil)
                        (sses3 :initarg :sses3 :type
                         (common-lisp:or sses3encryption common-lisp:null)
                         :accessor %generated-manifest-encryption-sses3
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'generated-manifest-encryption
                    'make-generated-manifest-encryption))
 (common-lisp:defun make-generated-manifest-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssekms sses3)
   (common-lisp:apply #'common-lisp:make-instance
                      'generated-manifest-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generated-manifest-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generated-manifest-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sses3))
      (common-lisp:list
       (common-lisp:cons "SSES3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekms))
      (common-lisp:list
       (common-lisp:cons "SSEKMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generated-manifest-encryption))
   common-lisp:nil))
(common-lisp:deftype generated-manifest-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-access-point-configuration-for-object-lambda-request
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %get-access-point-configuration-for-object-lambda-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-access-point-configuration-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-point-configuration-for-object-lambda-request
                    'make-get-access-point-configuration-for-object-lambda-request))
 (common-lisp:defun make-get-access-point-configuration-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-configuration-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-configuration-for-object-lambda-result
                       common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or object-lambda-configuration
                                         common-lisp:null)
                         :accessor
                         %get-access-point-configuration-for-object-lambda-result-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-configuration-for-object-lambda-result
                    'make-get-access-point-configuration-for-object-lambda-result))
 (common-lisp:defun make-get-access-point-configuration-for-object-lambda-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-configuration-for-object-lambda-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-configuration-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-for-object-lambda-request
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %get-access-point-for-object-lambda-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-access-point-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-point-for-object-lambda-request
                    'make-get-access-point-for-object-lambda-request))
 (common-lisp:defun make-get-access-point-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-for-object-lambda-result
                       common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or object-lambda-access-point-alias
                                         common-lisp:null)
                         :accessor
                         %get-access-point-for-object-lambda-result-alias
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         %get-access-point-for-object-lambda-result-creation-date
                         :initform common-lisp:nil)
                        (public-access-block-configuration :initarg
                         :public-access-block-configuration :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %get-access-point-for-object-lambda-result-public-access-block-configuration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %get-access-point-for-object-lambda-result-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-for-object-lambda-result
                    'make-get-access-point-for-object-lambda-result))
 (common-lisp:defun make-get-access-point-for-object-lambda-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias creation-date
                     public-access-block-configuration name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-for-object-lambda-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-policy-for-object-lambda-request
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %get-access-point-policy-for-object-lambda-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-access-point-policy-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-for-object-lambda-request
                    'make-get-access-point-policy-for-object-lambda-request))
 (common-lisp:defun make-get-access-point-policy-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-policy-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-policy-for-object-lambda-result
                       common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or object-lambda-policy common-lisp:null)
                         :accessor
                         %get-access-point-policy-for-object-lambda-result-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-for-object-lambda-result
                    'make-get-access-point-policy-for-object-lambda-result))
 (common-lisp:defun make-get-access-point-policy-for-object-lambda-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-policy-for-object-lambda-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-policy-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %get-access-point-policy-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-access-point-policy-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-request
                    'make-get-access-point-policy-request))
 (common-lisp:defun make-get-access-point-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-policy-result common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %get-access-point-policy-result-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-result
                    'make-get-access-point-policy-result))
 (common-lisp:defun make-get-access-point-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-policy-status-for-object-lambda-request
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %get-access-point-policy-status-for-object-lambda-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-access-point-policy-status-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-status-for-object-lambda-request
                    'make-get-access-point-policy-status-for-object-lambda-request))
 (common-lisp:defun make-get-access-point-policy-status-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-policy-status-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-policy-status-for-object-lambda-result
                       common-lisp:nil
                       ((policy-status :initarg :policy-status :type
                         (common-lisp:or policy-status common-lisp:null)
                         :accessor
                         %get-access-point-policy-status-for-object-lambda-result-policy-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-status-for-object-lambda-result
                    'make-get-access-point-policy-status-for-object-lambda-result))
 (common-lisp:defun make-get-access-point-policy-status-for-object-lambda-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-policy-status-for-object-lambda-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-policy-status-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %get-access-point-policy-status-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-access-point-policy-status-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-status-request
                    'make-get-access-point-policy-status-request))
 (common-lisp:defun make-get-access-point-policy-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-policy-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-policy-status-result common-lisp:nil
                       ((policy-status :initarg :policy-status :type
                         (common-lisp:or policy-status common-lisp:null)
                         :accessor
                         %get-access-point-policy-status-result-policy-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-policy-status-result
                    'make-get-access-point-policy-status-result))
 (common-lisp:defun make-get-access-point-policy-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-point-policy-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-policy-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %get-access-point-request-name :initform
                         (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-access-point-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-point-request 'make-get-access-point-request))
 (common-lisp:defun make-get-access-point-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-point-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-point-result common-lisp:nil
                       ((bucket-account-id :initarg :bucket-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-access-point-result-bucket-account-id :initform
                         common-lisp:nil)
                        (endpoints :initarg :endpoints :type
                         (common-lisp:or endpoints common-lisp:null) :accessor
                         %get-access-point-result-endpoints :initform
                         common-lisp:nil)
                        (access-point-arn :initarg :access-point-arn :type
                         (common-lisp:or s3access-point-arn common-lisp:null)
                         :accessor %get-access-point-result-access-point-arn
                         :initform common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         %get-access-point-result-alias :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor %get-access-point-result-creation-date
                         :initform common-lisp:nil)
                        (public-access-block-configuration :initarg
                         :public-access-block-configuration :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %get-access-point-result-public-access-block-configuration
                         :initform common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor %get-access-point-result-vpc-configuration
                         :initform common-lisp:nil)
                        (network-origin :initarg :network-origin :type
                         (common-lisp:or network-origin common-lisp:null)
                         :accessor %get-access-point-result-network-origin
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-access-point-result-bucket :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %get-access-point-result-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-access-point-result 'make-get-access-point-result))
 (common-lisp:defun make-get-access-point-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-account-id endpoints
                     access-point-arn alias creation-date
                     public-access-block-configuration vpc-configuration
                     network-origin bucket name)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-point-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-origin))
      (common-lisp:list
       (common-lisp:cons "NetworkOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-point-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-bucket-lifecycle-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-bucket-lifecycle-configuration-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-request
                    'make-get-bucket-lifecycle-configuration-request))
 (common-lisp:defun make-get-bucket-lifecycle-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-lifecycle-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-configuration-result
                       common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or lifecycle-rules common-lisp:null)
                         :accessor
                         %get-bucket-lifecycle-configuration-result-rules
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-result
                    'make-get-bucket-lifecycle-configuration-result))
 (common-lisp:defun make-get-bucket-lifecycle-configuration-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-lifecycle-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-request common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-policy-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-bucket-policy-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-request
                    'make-get-bucket-policy-request))
 (common-lisp:defun make-get-bucket-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-result common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %get-bucket-policy-result-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-result 'make-get-bucket-policy-result))
 (common-lisp:defun make-get-bucket-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-replication-request common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-replication-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-bucket-replication-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-request
                    'make-get-bucket-replication-request))
 (common-lisp:defun make-get-bucket-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-replication-result common-lisp:nil
                       ((replication-configuration :initarg
                         :replication-configuration :type
                         (common-lisp:or replication-configuration
                                         common-lisp:null)
                         :accessor
                         %get-bucket-replication-result-replication-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-result
                    'make-get-bucket-replication-result))
 (common-lisp:defun make-get-bucket-replication-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-replication-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-request common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-bucket-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-request 'make-get-bucket-request))
 (common-lisp:defun make-get-bucket-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-result common-lisp:nil
                       ((creation-date :initarg :creation-date :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor %get-bucket-result-creation-date :initform
                         common-lisp:nil)
                        (public-access-block-enabled :initarg
                         :public-access-block-enabled :type
                         (common-lisp:or public-access-block-enabled
                                         common-lisp:null)
                         :accessor
                         %get-bucket-result-public-access-block-enabled
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-result-bucket :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-result 'make-get-bucket-result))
 (common-lisp:defun make-get-bucket-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date public-access-block-enabled
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-enabled))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-tagging-request common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-tagging-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-bucket-tagging-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-request
                    'make-get-bucket-tagging-request))
 (common-lisp:defun make-get-bucket-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-tagging-result common-lisp:nil
                       ((tag-set :initarg :tag-set :type
                         (common-lisp:or s3tag-set common-lisp:null) :accessor
                         %get-bucket-tagging-result-tag-set :initform
                         (common-lisp:error ":tag-set is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-result
                    'make-get-bucket-tagging-result))
 (common-lisp:defun make-get-bucket-tagging-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-set)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-tagging-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-versioning-request common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-versioning-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-bucket-versioning-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-request
                    'make-get-bucket-versioning-request))
 (common-lisp:defun make-get-bucket-versioning-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-versioning-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-versioning-result common-lisp:nil
                       ((mfadelete :initarg :mfadelete :type
                         (common-lisp:or mfadelete-status common-lisp:null)
                         :accessor %get-bucket-versioning-result-mfadelete
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or bucket-versioning-status
                                         common-lisp:null)
                         :accessor %get-bucket-versioning-result-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-result
                    'make-get-bucket-versioning-result))
 (common-lisp:defun make-get-bucket-versioning-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mfadelete status)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-versioning-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-tagging-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %get-job-tagging-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-job-tagging-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-job-tagging-request 'make-get-job-tagging-request))
 (common-lisp:defun make-get-job-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-tagging-result common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or s3tag-set common-lisp:null) :accessor
                         %get-job-tagging-result-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-job-tagging-result 'make-get-job-tagging-result))
 (common-lisp:defun make-get-job-tagging-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-tagging-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multi-region-access-point-policy-request
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or multi-region-access-point-name
                                         common-lisp:null)
                         :accessor
                         %get-multi-region-access-point-policy-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-multi-region-access-point-policy-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-policy-request
                    'make-get-multi-region-access-point-policy-request))
 (common-lisp:defun make-get-multi-region-access-point-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multi-region-access-point-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multi-region-access-point-policy-result
                       common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or
                          multi-region-access-point-policy-document
                          common-lisp:null)
                         :accessor
                         %get-multi-region-access-point-policy-result-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-policy-result
                    'make-get-multi-region-access-point-policy-result))
 (common-lisp:defun make-get-multi-region-access-point-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multi-region-access-point-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multi-region-access-point-policy-status-request
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or multi-region-access-point-name
                                         common-lisp:null)
                         :accessor
                         %get-multi-region-access-point-policy-status-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-multi-region-access-point-policy-status-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-policy-status-request
                    'make-get-multi-region-access-point-policy-status-request))
 (common-lisp:defun make-get-multi-region-access-point-policy-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multi-region-access-point-policy-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multi-region-access-point-policy-status-result
                       common-lisp:nil
                       ((established :initarg :established :type
                         (common-lisp:or policy-status common-lisp:null)
                         :accessor
                         %get-multi-region-access-point-policy-status-result-established
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-policy-status-result
                    'make-get-multi-region-access-point-policy-status-result))
 (common-lisp:defun make-get-multi-region-access-point-policy-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key established)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multi-region-access-point-policy-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'established))
      (common-lisp:list
       (common-lisp:cons "Established"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-policy-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multi-region-access-point-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or multi-region-access-point-name
                                         common-lisp:null)
                         :accessor %get-multi-region-access-point-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-multi-region-access-point-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-request
                    'make-get-multi-region-access-point-request))
 (common-lisp:defun make-get-multi-region-access-point-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multi-region-access-point-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multi-region-access-point-result common-lisp:nil
                       ((access-point :initarg :access-point :type
                         (common-lisp:or multi-region-access-point-report
                                         common-lisp:null)
                         :accessor
                         %get-multi-region-access-point-result-access-point
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-result
                    'make-get-multi-region-access-point-result))
 (common-lisp:defun make-get-multi-region-access-point-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-point)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multi-region-access-point-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point))
      (common-lisp:list
       (common-lisp:cons "AccessPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multi-region-access-point-routes-request
                       common-lisp:nil
                       ((mrap :initarg :mrap :type
                         (common-lisp:or multi-region-access-point-id
                                         common-lisp:null)
                         :accessor
                         %get-multi-region-access-point-routes-request-mrap
                         :initform (common-lisp:error ":mrap is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-multi-region-access-point-routes-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-routes-request
                    'make-get-multi-region-access-point-routes-request))
 (common-lisp:defun make-get-multi-region-access-point-routes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mrap account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multi-region-access-point-routes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multi-region-access-point-routes-result
                       common-lisp:nil
                       ((routes :initarg :routes :type
                         (common-lisp:or route-list common-lisp:null) :accessor
                         %get-multi-region-access-point-routes-result-routes
                         :initform common-lisp:nil)
                        (mrap :initarg :mrap :type
                         (common-lisp:or multi-region-access-point-id
                                         common-lisp:null)
                         :accessor
                         %get-multi-region-access-point-routes-result-mrap
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-multi-region-access-point-routes-result
                    'make-get-multi-region-access-point-routes-result))
 (common-lisp:defun make-get-multi-region-access-point-routes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key routes mrap)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multi-region-access-point-routes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mrap))
      (common-lisp:list
       (common-lisp:cons "Mrap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routes))
      (common-lisp:list
       (common-lisp:cons "Routes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multi-region-access-point-routes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-public-access-block-output common-lisp:nil
                       ((public-access-block-configuration :initarg
                         :public-access-block-configuration :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %get-public-access-block-output-public-access-block-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-output
                    'make-get-public-access-block-output))
 (common-lisp:defun make-get-public-access-block-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-access-block-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-public-access-block-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicAccessBlockConfiguration" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-public-access-block-request common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-public-access-block-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-request
                    'make-get-public-access-block-request))
 (common-lisp:defun make-get-public-access-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-public-access-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-storage-lens-configuration-request common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-storage-lens-configuration-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))
                        (config-id :initarg :config-id :type
                         (common-lisp:or config-id common-lisp:null) :accessor
                         %get-storage-lens-configuration-request-config-id
                         :initform
                         (common-lisp:error ":config-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-storage-lens-configuration-request
                    'make-get-storage-lens-configuration-request))
 (common-lisp:defun make-get-storage-lens-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id config-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-storage-lens-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-storage-lens-configuration-result common-lisp:nil
                       ((storage-lens-configuration :initarg
                         :storage-lens-configuration :type
                         (common-lisp:or storage-lens-configuration
                                         common-lisp:null)
                         :accessor
                         %get-storage-lens-configuration-result-storage-lens-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-storage-lens-configuration-result
                    'make-get-storage-lens-configuration-result))
 (common-lisp:defun make-get-storage-lens-configuration-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-lens-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-storage-lens-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-lens-configuration))
      (common-lisp:list
       (common-lisp:cons "StorageLensConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StorageLensConfiguration" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-storage-lens-configuration-tagging-request
                       common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-storage-lens-configuration-tagging-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))
                        (config-id :initarg :config-id :type
                         (common-lisp:or config-id common-lisp:null) :accessor
                         %get-storage-lens-configuration-tagging-request-config-id
                         :initform
                         (common-lisp:error ":config-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-storage-lens-configuration-tagging-request
                    'make-get-storage-lens-configuration-tagging-request))
 (common-lisp:defun make-get-storage-lens-configuration-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id config-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-storage-lens-configuration-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-storage-lens-configuration-tagging-result
                       common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or storage-lens-tags common-lisp:null)
                         :accessor
                         %get-storage-lens-configuration-tagging-result-tags
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-storage-lens-configuration-tagging-result
                    'make-get-storage-lens-configuration-tagging-result))
 (common-lisp:defun make-get-storage-lens-configuration-tagging-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-storage-lens-configuration-tagging-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-storage-lens-configuration-tagging-result))
   common-lisp:nil))
(common-lisp:deftype grant-full-control () 'common-lisp:string)
(common-lisp:deftype grant-read () 'common-lisp:string)
(common-lisp:deftype grant-read-acp () 'common-lisp:string)
(common-lisp:deftype grant-write () 'common-lisp:string)
(common-lisp:deftype grant-write-acp () 'common-lisp:string)
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotency-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotency-exception 'idempotency-exception-message)))
(common-lisp:progn
 (common-lisp:defclass include common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or regions common-lisp:null) :accessor
                         %include-regions :initform common-lisp:nil)
                        (buckets :initarg :buckets :type
                         (common-lisp:or buckets common-lisp:null) :accessor
                         %include-buckets :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'include 'make-include))
 (common-lisp:defun make-include
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions buckets)
   (common-lisp:apply #'common-lisp:make-instance 'include
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input include))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input include))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input include))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:deftype is-enabled () 'common-lisp:boolean)
(common-lisp:deftype is-public () 'common-lisp:boolean)
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:deftype job-creation-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-descriptor common-lisp:nil
                       ((generated-manifest-descriptor :initarg
                         :generated-manifest-descriptor :type
                         (common-lisp:or s3generated-manifest-descriptor
                                         common-lisp:null)
                         :accessor
                         %job-descriptor-generated-manifest-descriptor
                         :initform common-lisp:nil)
                        (manifest-generator :initarg :manifest-generator :type
                         (common-lisp:or job-manifest-generator
                                         common-lisp:null)
                         :accessor %job-descriptor-manifest-generator :initform
                         common-lisp:nil)
                        (suspended-cause :initarg :suspended-cause :type
                         (common-lisp:or suspended-cause common-lisp:null)
                         :accessor %job-descriptor-suspended-cause :initform
                         common-lisp:nil)
                        (suspended-date :initarg :suspended-date :type
                         (common-lisp:or suspended-date common-lisp:null)
                         :accessor %job-descriptor-suspended-date :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %job-descriptor-role-arn :initform
                         common-lisp:nil)
                        (termination-date :initarg :termination-date :type
                         (common-lisp:or job-termination-date common-lisp:null)
                         :accessor %job-descriptor-termination-date :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or job-creation-time common-lisp:null)
                         :accessor %job-descriptor-creation-time :initform
                         common-lisp:nil)
                        (report :initarg :report :type
                         (common-lisp:or job-report common-lisp:null) :accessor
                         %job-descriptor-report :initform common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :type
                         (common-lisp:or job-failure-list common-lisp:null)
                         :accessor %job-descriptor-failure-reasons :initform
                         common-lisp:nil)
                        (status-update-reason :initarg :status-update-reason
                         :type
                         (common-lisp:or job-status-update-reason
                                         common-lisp:null)
                         :accessor %job-descriptor-status-update-reason
                         :initform common-lisp:nil)
                        (progress-summary :initarg :progress-summary :type
                         (common-lisp:or job-progress-summary common-lisp:null)
                         :accessor %job-descriptor-progress-summary :initform
                         common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or job-priority common-lisp:null)
                         :accessor %job-descriptor-priority :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or job-operation common-lisp:null)
                         :accessor %job-descriptor-operation :initform
                         common-lisp:nil)
                        (manifest :initarg :manifest :type
                         (common-lisp:or job-manifest common-lisp:null)
                         :accessor %job-descriptor-manifest :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %job-descriptor-status :initform common-lisp:nil)
                        (job-arn :initarg :job-arn :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %job-descriptor-job-arn :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-max-length256string
                                         common-lisp:null)
                         :accessor %job-descriptor-description :initform
                         common-lisp:nil)
                        (confirmation-required :initarg :confirmation-required
                         :type
                         (common-lisp:or confirmation-required
                                         common-lisp:null)
                         :accessor %job-descriptor-confirmation-required
                         :initform common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %job-descriptor-job-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-descriptor 'make-job-descriptor))
 (common-lisp:defun make-job-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key generated-manifest-descriptor
                     manifest-generator suspended-cause suspended-date role-arn
                     termination-date creation-time report failure-reasons
                     status-update-reason progress-summary priority operation
                     manifest status job-arn description confirmation-required
                     job-id)
   (common-lisp:apply #'common-lisp:make-instance 'job-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-required))
      (common-lisp:list
       (common-lisp:cons "ConfirmationRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "JobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "Manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-summary))
      (common-lisp:list
       (common-lisp:cons "ProgressSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-reason))
      (common-lisp:list
       (common-lisp:cons "StatusUpdateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "FailureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report))
      (common-lisp:list
       (common-lisp:cons "Report"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'termination-date))
      (common-lisp:list
       (common-lisp:cons "TerminationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspended-date))
      (common-lisp:list
       (common-lisp:cons "SuspendedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspended-cause))
      (common-lisp:list
       (common-lisp:cons "SuspendedCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-generator))
      (common-lisp:list
       (common-lisp:cons "ManifestGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-manifest-descriptor))
      (common-lisp:list
       (common-lisp:cons "GeneratedManifestDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-failure common-lisp:nil
                       ((failure-reason :initarg :failure-reason :type
                         (common-lisp:or job-failure-reason common-lisp:null)
                         :accessor %job-failure-failure-reason :initform
                         common-lisp:nil)
                        (failure-code :initarg :failure-code :type
                         (common-lisp:or job-failure-code common-lisp:null)
                         :accessor %job-failure-failure-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-failure 'make-job-failure))
 (common-lisp:defun make-job-failure
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-reason failure-code)
   (common-lisp:apply #'common-lisp:make-instance 'job-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-failure))
   common-lisp:nil))
(common-lisp:deftype job-failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-failure-list ()
   '(trivial-types:proper-list job-failure))
 (common-lisp:defun |make-job-failure-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-failure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-failure-reason () 'common-lisp:string)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-list-descriptor common-lisp:nil
                       ((progress-summary :initarg :progress-summary :type
                         (common-lisp:or job-progress-summary common-lisp:null)
                         :accessor %job-list-descriptor-progress-summary
                         :initform common-lisp:nil)
                        (termination-date :initarg :termination-date :type
                         (common-lisp:or job-termination-date common-lisp:null)
                         :accessor %job-list-descriptor-termination-date
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or job-creation-time common-lisp:null)
                         :accessor %job-list-descriptor-creation-time :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %job-list-descriptor-status :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or job-priority common-lisp:null)
                         :accessor %job-list-descriptor-priority :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or operation-name common-lisp:null)
                         :accessor %job-list-descriptor-operation :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-max-length256string
                                         common-lisp:null)
                         :accessor %job-list-descriptor-description :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %job-list-descriptor-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-list-descriptor 'make-job-list-descriptor))
 (common-lisp:defun make-job-list-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key progress-summary termination-date
                     creation-time status priority operation description
                     job-id)
   (common-lisp:apply #'common-lisp:make-instance 'job-list-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-list-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-list-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'termination-date))
      (common-lisp:list
       (common-lisp:cons "TerminationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-summary))
      (common-lisp:list
       (common-lisp:cons "ProgressSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-list-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-list-descriptor-list ()
   '(trivial-types:proper-list job-list-descriptor))
 (common-lisp:defun |make-job-list-descriptor-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-list-descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-manifest common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or job-manifest-location
                                         common-lisp:null)
                         :accessor %job-manifest-location :initform
                         (common-lisp:error ":location is required"))
                        (spec :initarg :spec :type
                         (common-lisp:or job-manifest-spec common-lisp:null)
                         :accessor %job-manifest-spec :initform
                         (common-lisp:error ":spec is required"))))
 (common-lisp:export (common-lisp:list 'job-manifest 'make-job-manifest))
 (common-lisp:defun make-job-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location spec)
   (common-lisp:apply #'common-lisp:make-instance 'job-manifest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-manifest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-manifest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "Spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-manifest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-manifest-field-list ()
   '(trivial-types:proper-list job-manifest-field-name))
 (common-lisp:defun |make-job-manifest-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-manifest-field-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-manifest-field-name () 'common-lisp:string)
(common-lisp:deftype job-manifest-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-manifest-generator common-lisp:nil
                       ((s3job-manifest-generator :initarg
                         :s3job-manifest-generator :type
                         (common-lisp:or s3job-manifest-generator
                                         common-lisp:null)
                         :accessor
                         %job-manifest-generator-s3job-manifest-generator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-manifest-generator 'make-job-manifest-generator))
 (common-lisp:defun make-job-manifest-generator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3job-manifest-generator)
   (common-lisp:apply #'common-lisp:make-instance 'job-manifest-generator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3job-manifest-generator))
      (common-lisp:list
       (common-lisp:cons "S3JobManifestGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-manifest-generator-filter common-lisp:nil
                       ((object-replication-statuses :initarg
                         :object-replication-statuses :type
                         (common-lisp:or replication-status-filter-list
                                         common-lisp:null)
                         :accessor
                         %job-manifest-generator-filter-object-replication-statuses
                         :initform common-lisp:nil)
                        (created-before :initarg :created-before :type
                         (common-lisp:or object-creation-time common-lisp:null)
                         :accessor
                         %job-manifest-generator-filter-created-before
                         :initform common-lisp:nil)
                        (created-after :initarg :created-after :type
                         (common-lisp:or object-creation-time common-lisp:null)
                         :accessor %job-manifest-generator-filter-created-after
                         :initform common-lisp:nil)
                        (eligible-for-replication :initarg
                         :eligible-for-replication :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %job-manifest-generator-filter-eligible-for-replication
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-manifest-generator-filter
                    'make-job-manifest-generator-filter))
 (common-lisp:defun make-job-manifest-generator-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-replication-statuses
                     created-before created-after eligible-for-replication)
   (common-lisp:apply #'common-lisp:make-instance
                      'job-manifest-generator-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eligible-for-replication))
      (common-lisp:list
       (common-lisp:cons "EligibleForReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-replication-statuses))
      (common-lisp:list
       (common-lisp:cons "ObjectReplicationStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-generator-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-manifest-location common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %job-manifest-location-etag :initform
                         (common-lisp:error ":etag is required"))
                        (object-version-id :initarg :object-version-id :type
                         (common-lisp:or s3object-version-id common-lisp:null)
                         :accessor %job-manifest-location-object-version-id
                         :initform common-lisp:nil)
                        (object-arn :initarg :object-arn :type
                         (common-lisp:or s3key-arn-string common-lisp:null)
                         :accessor %job-manifest-location-object-arn :initform
                         (common-lisp:error ":object-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'job-manifest-location 'make-job-manifest-location))
 (common-lisp:defun make-job-manifest-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag object-version-id object-arn)
   (common-lisp:apply #'common-lisp:make-instance 'job-manifest-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-arn))
      (common-lisp:list
       (common-lisp:cons "ObjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-version-id))
      (common-lisp:list
       (common-lisp:cons "ObjectVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-manifest-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-manifest-spec common-lisp:nil
                       ((fields :initarg :fields :type
                         (common-lisp:or job-manifest-field-list
                                         common-lisp:null)
                         :accessor %job-manifest-spec-fields :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or job-manifest-format common-lisp:null)
                         :accessor %job-manifest-spec-format :initform
                         (common-lisp:error ":format is required"))))
 (common-lisp:export
  (common-lisp:list 'job-manifest-spec 'make-job-manifest-spec))
 (common-lisp:defun make-job-manifest-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fields format)
   (common-lisp:apply #'common-lisp:make-instance 'job-manifest-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-manifest-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-manifest-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-manifest-spec))
   common-lisp:nil))
(common-lisp:deftype job-number-of-tasks-failed () 'common-lisp:integer)
(common-lisp:deftype job-number-of-tasks-succeeded () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass job-operation common-lisp:nil
                       ((s3replicate-object :initarg :s3replicate-object :type
                         (common-lisp:or s3replicate-object-operation
                                         common-lisp:null)
                         :accessor %job-operation-s3replicate-object :initform
                         common-lisp:nil)
                        (s3put-object-retention :initarg
                         :s3put-object-retention :type
                         (common-lisp:or s3set-object-retention-operation
                                         common-lisp:null)
                         :accessor %job-operation-s3put-object-retention
                         :initform common-lisp:nil)
                        (s3put-object-legal-hold :initarg
                         :s3put-object-legal-hold :type
                         (common-lisp:or s3set-object-legal-hold-operation
                                         common-lisp:null)
                         :accessor %job-operation-s3put-object-legal-hold
                         :initform common-lisp:nil)
                        (s3initiate-restore-object :initarg
                         :s3initiate-restore-object :type
                         (common-lisp:or s3initiate-restore-object-operation
                                         common-lisp:null)
                         :accessor %job-operation-s3initiate-restore-object
                         :initform common-lisp:nil)
                        (s3delete-object-tagging :initarg
                         :s3delete-object-tagging :type
                         (common-lisp:or s3delete-object-tagging-operation
                                         common-lisp:null)
                         :accessor %job-operation-s3delete-object-tagging
                         :initform common-lisp:nil)
                        (s3put-object-tagging :initarg :s3put-object-tagging
                         :type
                         (common-lisp:or s3set-object-tagging-operation
                                         common-lisp:null)
                         :accessor %job-operation-s3put-object-tagging
                         :initform common-lisp:nil)
                        (s3put-object-acl :initarg :s3put-object-acl :type
                         (common-lisp:or s3set-object-acl-operation
                                         common-lisp:null)
                         :accessor %job-operation-s3put-object-acl :initform
                         common-lisp:nil)
                        (s3put-object-copy :initarg :s3put-object-copy :type
                         (common-lisp:or s3copy-object-operation
                                         common-lisp:null)
                         :accessor %job-operation-s3put-object-copy :initform
                         common-lisp:nil)
                        (lambda-invoke :initarg :lambda-invoke :type
                         (common-lisp:or lambda-invoke-operation
                                         common-lisp:null)
                         :accessor %job-operation-lambda-invoke :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-operation 'make-job-operation))
 (common-lisp:defun make-job-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3replicate-object s3put-object-retention
                     s3put-object-legal-hold s3initiate-restore-object
                     s3delete-object-tagging s3put-object-tagging
                     s3put-object-acl s3put-object-copy lambda-invoke)
   (common-lisp:apply #'common-lisp:make-instance 'job-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-invoke))
      (common-lisp:list
       (common-lisp:cons "LambdaInvoke"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3put-object-copy))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectCopy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3put-object-acl))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3put-object-tagging))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3delete-object-tagging))
      (common-lisp:list
       (common-lisp:cons "S3DeleteObjectTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3initiate-restore-object))
      (common-lisp:list
       (common-lisp:cons "S3InitiateRestoreObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3put-object-legal-hold))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectLegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3put-object-retention))
      (common-lisp:list
       (common-lisp:cons "S3PutObjectRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3replicate-object))
      (common-lisp:list
       (common-lisp:cons "S3ReplicateObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-operation))
   common-lisp:nil))
(common-lisp:deftype job-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass job-progress-summary common-lisp:nil
                       ((timers :initarg :timers :type
                         (common-lisp:or job-timers common-lisp:null) :accessor
                         %job-progress-summary-timers :initform
                         common-lisp:nil)
                        (number-of-tasks-failed :initarg
                         :number-of-tasks-failed :type
                         (common-lisp:or job-number-of-tasks-failed
                                         common-lisp:null)
                         :accessor %job-progress-summary-number-of-tasks-failed
                         :initform common-lisp:nil)
                        (number-of-tasks-succeeded :initarg
                         :number-of-tasks-succeeded :type
                         (common-lisp:or job-number-of-tasks-succeeded
                                         common-lisp:null)
                         :accessor
                         %job-progress-summary-number-of-tasks-succeeded
                         :initform common-lisp:nil)
                        (total-number-of-tasks :initarg :total-number-of-tasks
                         :type
                         (common-lisp:or job-total-number-of-tasks
                                         common-lisp:null)
                         :accessor %job-progress-summary-total-number-of-tasks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-progress-summary 'make-job-progress-summary))
 (common-lisp:defun make-job-progress-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timers number-of-tasks-failed
                     number-of-tasks-succeeded total-number-of-tasks)
   (common-lisp:apply #'common-lisp:make-instance 'job-progress-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-progress-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-progress-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-tasks))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-tasks-succeeded))
      (common-lisp:list
       (common-lisp:cons "NumberOfTasksSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-tasks-failed))
      (common-lisp:list
       (common-lisp:cons "NumberOfTasksFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timers))
      (common-lisp:list
       (common-lisp:cons "Timers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-progress-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-report common-lisp:nil
                       ((report-scope :initarg :report-scope :type
                         (common-lisp:or job-report-scope common-lisp:null)
                         :accessor %job-report-report-scope :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or report-prefix-string common-lisp:null)
                         :accessor %job-report-prefix :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %job-report-enabled :initform
                         (common-lisp:error ":enabled is required"))
                        (format :initarg :format :type
                         (common-lisp:or job-report-format common-lisp:null)
                         :accessor %job-report-format :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or s3bucket-arn-string common-lisp:null)
                         :accessor %job-report-bucket :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-report 'make-job-report))
 (common-lisp:defun make-job-report
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-scope prefix enabled format
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance 'job-report
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-scope))
      (common-lisp:list
       (common-lisp:cons "ReportScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-report))
   common-lisp:nil))
(common-lisp:deftype job-report-format () 'common-lisp:string)
(common-lisp:deftype job-report-scope () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition job-status-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       job-status-exception-message)))
 (common-lisp:export
  (common-lisp:list 'job-status-exception 'job-status-exception-message)))
(common-lisp:progn
 (common-lisp:deftype job-status-list ()
   '(trivial-types:proper-list job-status))
 (common-lisp:defun |make-job-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-status-update-reason () 'common-lisp:string)
(common-lisp:deftype job-termination-date () 'common-lisp:string)
(common-lisp:deftype job-time-in-state-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass job-timers common-lisp:nil
                       ((elapsed-time-in-active-seconds :initarg
                         :elapsed-time-in-active-seconds :type
                         (common-lisp:or job-time-in-state-seconds
                                         common-lisp:null)
                         :accessor %job-timers-elapsed-time-in-active-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-timers 'make-job-timers))
 (common-lisp:defun make-job-timers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key elapsed-time-in-active-seconds)
   (common-lisp:apply #'common-lisp:make-instance 'job-timers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-timers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-timers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-active-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInActiveSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-timers))
   common-lisp:nil))
(common-lisp:deftype job-total-number-of-tasks () 'common-lisp:integer)
(common-lisp:deftype kms-key-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-invoke-operation common-lisp:nil
                       ((function-arn :initarg :function-arn :type
                         (common-lisp:or function-arn-string common-lisp:null)
                         :accessor %lambda-invoke-operation-function-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lambda-invoke-operation 'make-lambda-invoke-operation))
 (common-lisp:defun make-lambda-invoke-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-arn)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-invoke-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-invoke-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-invoke-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-invoke-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-configuration common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or lifecycle-rules common-lisp:null)
                         :accessor %lifecycle-configuration-rules :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-configuration 'make-lifecycle-configuration))
 (common-lisp:defun make-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-expiration common-lisp:nil
                       ((expired-object-delete-marker :initarg
                         :expired-object-delete-marker :type
                         (common-lisp:or expired-object-delete-marker
                                         common-lisp:null)
                         :accessor
                         %lifecycle-expiration-expired-object-delete-marker
                         :initform common-lisp:nil)
                        (days :initarg :days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %lifecycle-expiration-days :initform common-lisp:nil)
                        (date :initarg :date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %lifecycle-expiration-date :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-expiration 'make-lifecycle-expiration))
 (common-lisp:defun make-lifecycle-expiration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expired-object-delete-marker days date)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-expiration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expired-object-delete-marker))
      (common-lisp:list
       (common-lisp:cons "ExpiredObjectDeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-rule common-lisp:nil
                       ((abort-incomplete-multipart-upload :initarg
                         :abort-incomplete-multipart-upload :type
                         (common-lisp:or abort-incomplete-multipart-upload
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-abort-incomplete-multipart-upload
                         :initform common-lisp:nil)
                        (noncurrent-version-expiration :initarg
                         :noncurrent-version-expiration :type
                         (common-lisp:or noncurrent-version-expiration
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-noncurrent-version-expiration
                         :initform common-lisp:nil)
                        (noncurrent-version-transitions :initarg
                         :noncurrent-version-transitions :type
                         (common-lisp:or noncurrent-version-transition-list
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-noncurrent-version-transitions
                         :initform common-lisp:nil)
                        (transitions :initarg :transitions :type
                         (common-lisp:or transition-list common-lisp:null)
                         :accessor %lifecycle-rule-transitions :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or expiration-status common-lisp:null)
                         :accessor %lifecycle-rule-status :initform
                         (common-lisp:error ":status is required"))
                        (filter :initarg :filter :type
                         (common-lisp:or lifecycle-rule-filter
                                         common-lisp:null)
                         :accessor %lifecycle-rule-filter :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %lifecycle-rule-id :initform common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or lifecycle-expiration common-lisp:null)
                         :accessor %lifecycle-rule-expiration :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'lifecycle-rule 'make-lifecycle-rule))
 (common-lisp:defun make-lifecycle-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key abort-incomplete-multipart-upload
                     noncurrent-version-expiration
                     noncurrent-version-transitions transitions status filter
                     id expiration)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitions))
      (common-lisp:list
       (common-lisp:cons "Transitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transitions))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-rule-and-operator common-lisp:nil
                       ((object-size-less-than :initarg :object-size-less-than
                         :type
                         (common-lisp:or object-size-less-than-bytes
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-and-operator-object-size-less-than
                         :initform common-lisp:nil)
                        (object-size-greater-than :initarg
                         :object-size-greater-than :type
                         (common-lisp:or object-size-greater-than-bytes
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-and-operator-object-size-greater-than
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or s3tag-set common-lisp:null) :accessor
                         %lifecycle-rule-and-operator-tags :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %lifecycle-rule-and-operator-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-and-operator
                    'make-lifecycle-rule-and-operator))
 (common-lisp:defun make-lifecycle-rule-and-operator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-size-less-than
                     object-size-greater-than tags prefix)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-rule-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-rule-filter common-lisp:nil
                       ((object-size-less-than :initarg :object-size-less-than
                         :type
                         (common-lisp:or object-size-less-than-bytes
                                         common-lisp:null)
                         :accessor %lifecycle-rule-filter-object-size-less-than
                         :initform common-lisp:nil)
                        (object-size-greater-than :initarg
                         :object-size-greater-than :type
                         (common-lisp:or object-size-greater-than-bytes
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-filter-object-size-greater-than
                         :initform common-lisp:nil)
                        (and :initarg :and :type
                         (common-lisp:or lifecycle-rule-and-operator
                                         common-lisp:null)
                         :accessor %lifecycle-rule-filter-and :initform
                         common-lisp:nil)
                        (tag :initarg :tag :type
                         (common-lisp:or s3tag common-lisp:null) :accessor
                         %lifecycle-rule-filter-tag :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %lifecycle-rule-filter-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-filter 'make-lifecycle-rule-filter))
 (common-lisp:defun make-lifecycle-rule-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-size-less-than
                     object-size-greater-than and tag prefix)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-rule-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-rules ()
   '(trivial-types:proper-list lifecycle-rule))
 (common-lisp:defun |make-lifecycle-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-access-points-for-object-lambda-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-access-points-for-object-lambda-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor
                         %list-access-points-for-object-lambda-request-next-token
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-access-points-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-access-points-for-object-lambda-request
                    'make-list-access-points-for-object-lambda-request))
 (common-lisp:defun make-list-access-points-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-points-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-points-for-object-lambda-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor
                         %list-access-points-for-object-lambda-result-next-token
                         :initform common-lisp:nil)
                        (object-lambda-access-point-list :initarg
                         :object-lambda-access-point-list :type
                         (common-lisp:or object-lambda-access-point-list
                                         common-lisp:null)
                         :accessor
                         %list-access-points-for-object-lambda-result-object-lambda-access-point-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-access-points-for-object-lambda-result
                    'make-list-access-points-for-object-lambda-result))
 (common-lisp:defun make-list-access-points-for-object-lambda-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     object-lambda-access-point-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-points-for-object-lambda-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lambda-access-point-list))
      (common-lisp:list
       (common-lisp:cons "ObjectLambdaAccessPointList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-for-object-lambda-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-points-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-access-points-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %list-access-points-request-next-token
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-access-points-request-bucket :initform
                         common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-access-points-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-access-points-request
                    'make-list-access-points-request))
 (common-lisp:defun make-list-access-points-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-points-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-points-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %list-access-points-result-next-token
                         :initform common-lisp:nil)
                        (access-point-list :initarg :access-point-list :type
                         (common-lisp:or access-point-list common-lisp:null)
                         :accessor %list-access-points-result-access-point-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-access-points-result
                    'make-list-access-points-result))
 (common-lisp:defun make-list-access-points-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token access-point-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-points-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-list))
      (common-lisp:list
       (common-lisp:cons "AccessPointList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-points-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-jobs-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string-for-next-token
                                         common-lisp:null)
                         :accessor %list-jobs-request-next-token :initform
                         common-lisp:nil)
                        (job-statuses :initarg :job-statuses :type
                         (common-lisp:or job-status-list common-lisp:null)
                         :accessor %list-jobs-request-job-statuses :initform
                         common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-jobs-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defun make-list-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token job-statuses
                     account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-result common-lisp:nil
                       ((jobs :initarg :jobs :type
                         (common-lisp:or job-list-descriptor-list
                                         common-lisp:null)
                         :accessor %list-jobs-result-jobs :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string-for-next-token
                                         common-lisp:null)
                         :accessor %list-jobs-result-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-result 'make-list-jobs-result))
 (common-lisp:defun make-list-jobs-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key jobs next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multi-region-access-points-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-multi-region-access-points-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor
                         %list-multi-region-access-points-request-next-token
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-multi-region-access-points-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-multi-region-access-points-request
                    'make-list-multi-region-access-points-request))
 (common-lisp:defun make-list-multi-region-access-points-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multi-region-access-points-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multi-region-access-points-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor
                         %list-multi-region-access-points-result-next-token
                         :initform common-lisp:nil)
                        (access-points :initarg :access-points :type
                         (common-lisp:or multi-region-access-point-report-list
                                         common-lisp:null)
                         :accessor
                         %list-multi-region-access-points-result-access-points
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multi-region-access-points-result
                    'make-list-multi-region-access-points-result))
 (common-lisp:defun make-list-multi-region-access-points-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token access-points)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multi-region-access-points-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-points))
      (common-lisp:list
       (common-lisp:cons "AccessPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multi-region-access-points-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-regional-buckets-request common-lisp:nil
                       ((outpost-id :initarg :outpost-id :type
                         (common-lisp:or non-empty-max-length64string
                                         common-lisp:null)
                         :accessor %list-regional-buckets-request-outpost-id
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-regional-buckets-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %list-regional-buckets-request-next-token
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-regional-buckets-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-regional-buckets-request
                    'make-list-regional-buckets-request))
 (common-lisp:defun make-list-regional-buckets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outpost-id max-results next-token
                     account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-regional-buckets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:cons "x-amz-outpost-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-regional-buckets-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %list-regional-buckets-result-next-token
                         :initform common-lisp:nil)
                        (regional-bucket-list :initarg :regional-bucket-list
                         :type
                         (common-lisp:or regional-bucket-list common-lisp:null)
                         :accessor
                         %list-regional-buckets-result-regional-bucket-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-regional-buckets-result
                    'make-list-regional-buckets-result))
 (common-lisp:defun make-list-regional-buckets-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token regional-bucket-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-regional-buckets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regional-bucket-list))
      (common-lisp:list
       (common-lisp:cons "RegionalBucketList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regional-buckets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-storage-lens-configuration-entry common-lisp:nil
                       ((is-enabled :initarg :is-enabled :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         %list-storage-lens-configuration-entry-is-enabled
                         :initform common-lisp:nil)
                        (home-region :initarg :home-region :type
                         (common-lisp:or s3awsregion common-lisp:null)
                         :accessor
                         %list-storage-lens-configuration-entry-home-region
                         :initform
                         (common-lisp:error ":home-region is required"))
                        (storage-lens-arn :initarg :storage-lens-arn :type
                         (common-lisp:or storage-lens-arn common-lisp:null)
                         :accessor
                         %list-storage-lens-configuration-entry-storage-lens-arn
                         :initform
                         (common-lisp:error ":storage-lens-arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or config-id common-lisp:null) :accessor
                         %list-storage-lens-configuration-entry-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-storage-lens-configuration-entry
                    'make-list-storage-lens-configuration-entry))
 (common-lisp:defun make-list-storage-lens-configuration-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-enabled home-region storage-lens-arn
                     id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-storage-lens-configuration-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configuration-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configuration-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-lens-arn))
      (common-lisp:list
       (common-lisp:cons "StorageLensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configuration-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-storage-lens-configurations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or continuation-token common-lisp:null)
                         :accessor
                         %list-storage-lens-configurations-request-next-token
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-storage-lens-configurations-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-storage-lens-configurations-request
                    'make-list-storage-lens-configurations-request))
 (common-lisp:defun make-list-storage-lens-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-storage-lens-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-storage-lens-configurations-result common-lisp:nil
                       ((storage-lens-configuration-list :initarg
                         :storage-lens-configuration-list :type
                         (common-lisp:or storage-lens-configuration-list
                                         common-lisp:null)
                         :accessor
                         %list-storage-lens-configurations-result-storage-lens-configuration-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or continuation-token common-lisp:null)
                         :accessor
                         %list-storage-lens-configurations-result-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-storage-lens-configurations-result
                    'make-list-storage-lens-configurations-result))
 (common-lisp:defun make-list-storage-lens-configurations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-lens-configuration-list
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-storage-lens-configurations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-lens-configuration-list))
      (common-lisp:list
       (common-lisp:cons "StorageLensConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-storage-lens-configurations-result))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype mfa () 'common-lisp:string)
(common-lisp:deftype mfadelete () 'common-lisp:string)
(common-lisp:deftype mfadelete-status () 'common-lisp:string)
(common-lisp:deftype manifest-prefix-string () 'common-lisp:string)
(common-lisp:deftype max-length1024string () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass metrics common-lisp:nil
                       ((event-threshold :initarg :event-threshold :type
                         (common-lisp:or replication-time-value
                                         common-lisp:null)
                         :accessor %metrics-event-threshold :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or metrics-status common-lisp:null)
                         :accessor %metrics-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export (common-lisp:list 'metrics 'make-metrics))
 (common-lisp:defun make-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-threshold status)
   (common-lisp:apply #'common-lisp:make-instance 'metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-threshold))
      (common-lisp:list
       (common-lisp:cons "EventThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics))
   common-lisp:nil))
(common-lisp:deftype metrics-status () 'common-lisp:string)
(common-lisp:deftype min-storage-bytes-percentage () 'common-lisp:double-float)
(common-lisp:deftype minutes () 'common-lisp:integer)
(common-lisp:deftype multi-region-access-point-alias () 'common-lisp:string)
(common-lisp:deftype multi-region-access-point-client-token ()
  'common-lisp:string)
(common-lisp:deftype multi-region-access-point-id () 'common-lisp:string)
(common-lisp:deftype multi-region-access-point-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass multi-region-access-point-policy-document
                       common-lisp:nil
                       ((proposed :initarg :proposed :type
                         (common-lisp:or
                          proposed-multi-region-access-point-policy
                          common-lisp:null)
                         :accessor
                         %multi-region-access-point-policy-document-proposed
                         :initform common-lisp:nil)
                        (established :initarg :established :type
                         (common-lisp:or
                          established-multi-region-access-point-policy
                          common-lisp:null)
                         :accessor
                         %multi-region-access-point-policy-document-established
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-point-policy-document
                    'make-multi-region-access-point-policy-document))
 (common-lisp:defun make-multi-region-access-point-policy-document
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key proposed established)
   (common-lisp:apply #'common-lisp:make-instance
                      'multi-region-access-point-policy-document
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-policy-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-policy-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'established))
      (common-lisp:list
       (common-lisp:cons "Established"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposed))
      (common-lisp:list
       (common-lisp:cons "Proposed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-policy-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multi-region-access-point-regional-response
                       common-lisp:nil
                       ((request-status :initarg :request-status :type
                         (common-lisp:or async-request-status common-lisp:null)
                         :accessor
                         %multi-region-access-point-regional-response-request-status
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor
                         %multi-region-access-point-regional-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-point-regional-response
                    'make-multi-region-access-point-regional-response))
 (common-lisp:defun make-multi-region-access-point-regional-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-status name)
   (common-lisp:apply #'common-lisp:make-instance
                      'multi-region-access-point-regional-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-regional-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-regional-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-status))
      (common-lisp:list
       (common-lisp:cons "RequestStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-regional-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype multi-region-access-point-regional-response-list ()
   '(trivial-types:proper-list multi-region-access-point-regional-response))
 (common-lisp:defun |make-multi-region-access-point-regional-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multi-region-access-point-regional-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass multi-region-access-point-report common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or region-report-list common-lisp:null)
                         :accessor %multi-region-access-point-report-regions
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or multi-region-access-point-status
                                         common-lisp:null)
                         :accessor %multi-region-access-point-report-status
                         :initform common-lisp:nil)
                        (public-access-block :initarg :public-access-block
                         :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %multi-region-access-point-report-public-access-block
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or creation-timestamp common-lisp:null)
                         :accessor %multi-region-access-point-report-created-at
                         :initform common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or multi-region-access-point-alias
                                         common-lisp:null)
                         :accessor %multi-region-access-point-report-alias
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or multi-region-access-point-name
                                         common-lisp:null)
                         :accessor %multi-region-access-point-report-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-point-report
                    'make-multi-region-access-point-report))
 (common-lisp:defun make-multi-region-access-point-report
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions status public-access-block
                     created-at alias name)
   (common-lisp:apply #'common-lisp:make-instance
                      'multi-region-access-point-report
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-block))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-report))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype multi-region-access-point-report-list ()
   '(trivial-types:proper-list multi-region-access-point-report))
 (common-lisp:defun |make-multi-region-access-point-report-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multi-region-access-point-report))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass multi-region-access-point-route common-lisp:nil
                       ((traffic-dial-percentage :initarg
                         :traffic-dial-percentage :type
                         (common-lisp:or traffic-dial-percentage
                                         common-lisp:null)
                         :accessor
                         %multi-region-access-point-route-traffic-dial-percentage
                         :initform
                         (common-lisp:error
                          ":traffic-dial-percentage is required"))
                        (region :initarg :region :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %multi-region-access-point-route-region
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %multi-region-access-point-route-bucket
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-point-route
                    'make-multi-region-access-point-route))
 (common-lisp:defun make-multi-region-access-point-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key traffic-dial-percentage region bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'multi-region-access-point-route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-dial-percentage))
      (common-lisp:list
       (common-lisp:cons "TrafficDialPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-point-route))
   common-lisp:nil))
(common-lisp:deftype multi-region-access-point-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass multi-region-access-points-async-response
                       common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or
                          multi-region-access-point-regional-response-list
                          common-lisp:null)
                         :accessor
                         %multi-region-access-points-async-response-regions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multi-region-access-points-async-response
                    'make-multi-region-access-points-async-response))
 (common-lisp:defun make-multi-region-access-points-async-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions)
   (common-lisp:apply #'common-lisp:make-instance
                      'multi-region-access-points-async-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-points-async-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-points-async-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-access-points-async-response))
   common-lisp:nil))
(common-lisp:deftype network-origin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-such-public-access-block-configuration
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-public-access-block-configuration-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-public-access-block-configuration
                    'no-such-public-access-block-configuration-message)))
(common-lisp:deftype no-such-public-access-block-configuration-message ()
  'common-lisp:string)
(common-lisp:deftype non-empty-max-length1024string () 'common-lisp:string)
(common-lisp:deftype non-empty-max-length2048string () 'common-lisp:string)
(common-lisp:deftype non-empty-max-length256string () 'common-lisp:string)
(common-lisp:deftype non-empty-max-length64string () 'common-lisp:string)
(common-lisp:deftype noncurrent-version-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass noncurrent-version-expiration common-lisp:nil
                       ((newer-noncurrent-versions :initarg
                         :newer-noncurrent-versions :type
                         (common-lisp:or noncurrent-version-count
                                         common-lisp:null)
                         :accessor
                         %noncurrent-version-expiration-newer-noncurrent-versions
                         :initform common-lisp:nil)
                        (noncurrent-days :initarg :noncurrent-days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %noncurrent-version-expiration-noncurrent-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-expiration
                    'make-noncurrent-version-expiration))
 (common-lisp:defun make-noncurrent-version-expiration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key newer-noncurrent-versions
                     noncurrent-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'noncurrent-version-expiration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'newer-noncurrent-versions))
      (common-lisp:list
       (common-lisp:cons "NewerNoncurrentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass noncurrent-version-transition common-lisp:nil
                       ((storage-class :initarg :storage-class :type
                         (common-lisp:or transition-storage-class
                                         common-lisp:null)
                         :accessor %noncurrent-version-transition-storage-class
                         :initform common-lisp:nil)
                        (noncurrent-days :initarg :noncurrent-days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %noncurrent-version-transition-noncurrent-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-transition
                    'make-noncurrent-version-transition))
 (common-lisp:defun make-noncurrent-version-transition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class noncurrent-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'noncurrent-version-transition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype noncurrent-version-transition-list ()
   '(trivial-types:proper-list noncurrent-version-transition))
 (common-lisp:defun |make-noncurrent-version-transition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            noncurrent-version-transition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype object-creation-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-lambda-access-point common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or object-lambda-access-point-alias
                                         common-lisp:null)
                         :accessor %object-lambda-access-point-alias :initform
                         common-lisp:nil)
                        (object-lambda-access-point-arn :initarg
                         :object-lambda-access-point-arn :type
                         (common-lisp:or object-lambda-access-point-arn
                                         common-lisp:null)
                         :accessor
                         %object-lambda-access-point-object-lambda-access-point-arn
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor %object-lambda-access-point-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'object-lambda-access-point
                    'make-object-lambda-access-point))
 (common-lisp:defun make-object-lambda-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias object-lambda-access-point-arn
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'object-lambda-access-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lambda-access-point-arn))
      (common-lisp:list
       (common-lisp:cons "ObjectLambdaAccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass object-lambda-access-point-alias common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or
                          object-lambda-access-point-alias-status
                          common-lisp:null)
                         :accessor %object-lambda-access-point-alias-status
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or object-lambda-access-point-alias-value
                                         common-lisp:null)
                         :accessor %object-lambda-access-point-alias-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'object-lambda-access-point-alias
                    'make-object-lambda-access-point-alias))
 (common-lisp:defun make-object-lambda-access-point-alias
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status value)
   (common-lisp:apply #'common-lisp:make-instance
                      'object-lambda-access-point-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-access-point-alias))
   common-lisp:nil))
(common-lisp:deftype object-lambda-access-point-alias-status ()
  'common-lisp:string)
(common-lisp:deftype object-lambda-access-point-alias-value ()
  'common-lisp:string)
(common-lisp:deftype object-lambda-access-point-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-lambda-access-point-list ()
   '(trivial-types:proper-list object-lambda-access-point))
 (common-lisp:defun |make-object-lambda-access-point-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            object-lambda-access-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-lambda-access-point-name () 'common-lisp:string)
(common-lisp:deftype object-lambda-allowed-feature () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-lambda-allowed-features-list ()
   '(trivial-types:proper-list object-lambda-allowed-feature))
 (common-lisp:defun |make-object-lambda-allowed-features-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            object-lambda-allowed-feature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass object-lambda-configuration common-lisp:nil
                       ((transformation-configurations :initarg
                         :transformation-configurations :type
                         (common-lisp:or
                          object-lambda-transformation-configurations-list
                          common-lisp:null)
                         :accessor
                         %object-lambda-configuration-transformation-configurations
                         :initform
                         (common-lisp:error
                          ":transformation-configurations is required"))
                        (allowed-features :initarg :allowed-features :type
                         (common-lisp:or object-lambda-allowed-features-list
                                         common-lisp:null)
                         :accessor
                         %object-lambda-configuration-allowed-features
                         :initform common-lisp:nil)
                        (cloud-watch-metrics-enabled :initarg
                         :cloud-watch-metrics-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %object-lambda-configuration-cloud-watch-metrics-enabled
                         :initform common-lisp:nil)
                        (supporting-access-point :initarg
                         :supporting-access-point :type
                         (common-lisp:or
                          object-lambda-supporting-access-point-arn
                          common-lisp:null)
                         :accessor
                         %object-lambda-configuration-supporting-access-point
                         :initform
                         (common-lisp:error
                          ":supporting-access-point is required"))))
 (common-lisp:export
  (common-lisp:list 'object-lambda-configuration
                    'make-object-lambda-configuration))
 (common-lisp:defun make-object-lambda-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transformation-configurations
                     allowed-features cloud-watch-metrics-enabled
                     supporting-access-point)
   (common-lisp:apply #'common-lisp:make-instance 'object-lambda-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supporting-access-point))
      (common-lisp:list
       (common-lisp:cons "SupportingAccessPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-features))
      (common-lisp:list
       (common-lisp:cons "AllowedFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transformation-configurations))
      (common-lisp:list
       (common-lisp:cons "TransformationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass object-lambda-content-transformation common-lisp:nil
                       ((aws-lambda :initarg :aws-lambda :type
                         (common-lisp:or aws-lambda-transformation
                                         common-lisp:null)
                         :accessor
                         %object-lambda-content-transformation-aws-lambda
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'object-lambda-content-transformation
                    'make-object-lambda-content-transformation))
 (common-lisp:defun make-object-lambda-content-transformation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-lambda)
   (common-lisp:apply #'common-lisp:make-instance
                      'object-lambda-content-transformation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-content-transformation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-content-transformation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-lambda))
      (common-lisp:list
       (common-lisp:cons "AwsLambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-content-transformation))
   common-lisp:nil))
(common-lisp:deftype object-lambda-policy () 'common-lisp:string)
(common-lisp:deftype object-lambda-supporting-access-point-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-lambda-transformation-configuration
                       common-lisp:nil
                       ((content-transformation :initarg
                         :content-transformation :type
                         (common-lisp:or object-lambda-content-transformation
                                         common-lisp:null)
                         :accessor
                         %object-lambda-transformation-configuration-content-transformation
                         :initform
                         (common-lisp:error
                          ":content-transformation is required"))
                        (actions :initarg :actions :type
                         (common-lisp:or
                          object-lambda-transformation-configuration-actions-list
                          common-lisp:null)
                         :accessor
                         %object-lambda-transformation-configuration-actions
                         :initform
                         (common-lisp:error ":actions is required"))))
 (common-lisp:export
  (common-lisp:list 'object-lambda-transformation-configuration
                    'make-object-lambda-transformation-configuration))
 (common-lisp:defun make-object-lambda-transformation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-transformation actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'object-lambda-transformation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-transformation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-transformation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-transformation))
      (common-lisp:list
       (common-lisp:cons "ContentTransformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lambda-transformation-configuration))
   common-lisp:nil))
(common-lisp:deftype object-lambda-transformation-configuration-action ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-lambda-transformation-configuration-actions-list
                      ()
   '(trivial-types:proper-list
     object-lambda-transformation-configuration-action))
 (common-lisp:defun |make-object-lambda-transformation-configuration-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            object-lambda-transformation-configuration-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype object-lambda-transformation-configurations-list ()
   '(trivial-types:proper-list object-lambda-transformation-configuration))
 (common-lisp:defun |make-object-lambda-transformation-configurations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            object-lambda-transformation-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-lock-enabled-for-bucket () 'common-lisp:boolean)
(common-lisp:deftype object-size-greater-than-bytes () 'common-lisp:integer)
(common-lisp:deftype object-size-less-than-bytes () 'common-lisp:integer)
(common-lisp:deftype operation-name () 'common-lisp:string)
(common-lisp:deftype output-schema-version () 'common-lisp:string)
(common-lisp:deftype owner-override () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-status common-lisp:nil
                       ((is-public :initarg :is-public :type
                         (common-lisp:or is-public common-lisp:null) :accessor
                         %policy-status-is-public :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy-status 'make-policy-status))
 (common-lisp:defun make-policy-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-public)
   (common-lisp:apply #'common-lisp:make-instance 'policy-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "IsPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-status))
   common-lisp:nil))
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass prefix-level common-lisp:nil
                       ((storage-metrics :initarg :storage-metrics :type
                         (common-lisp:or prefix-level-storage-metrics
                                         common-lisp:null)
                         :accessor %prefix-level-storage-metrics :initform
                         (common-lisp:error ":storage-metrics is required"))))
 (common-lisp:export (common-lisp:list 'prefix-level 'make-prefix-level))
 (common-lisp:defun make-prefix-level
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-metrics)
   (common-lisp:apply #'common-lisp:make-instance 'prefix-level
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prefix-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prefix-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-metrics))
      (common-lisp:list
       (common-lisp:cons "StorageMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prefix-level))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass prefix-level-storage-metrics common-lisp:nil
                       ((selection-criteria :initarg :selection-criteria :type
                         (common-lisp:or selection-criteria common-lisp:null)
                         :accessor
                         %prefix-level-storage-metrics-selection-criteria
                         :initform common-lisp:nil)
                        (is-enabled :initarg :is-enabled :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         %prefix-level-storage-metrics-is-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'prefix-level-storage-metrics
                    'make-prefix-level-storage-metrics))
 (common-lisp:defun make-prefix-level-storage-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selection-criteria is-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'prefix-level-storage-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prefix-level-storage-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prefix-level-storage-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-criteria))
      (common-lisp:list
       (common-lisp:cons "SelectionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prefix-level-storage-metrics))
   common-lisp:nil))
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass proposed-multi-region-access-point-policy
                       common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %proposed-multi-region-access-point-policy-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'proposed-multi-region-access-point-policy
                    'make-proposed-multi-region-access-point-policy))
 (common-lisp:defun make-proposed-multi-region-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'proposed-multi-region-access-point-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          proposed-multi-region-access-point-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          proposed-multi-region-access-point-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          proposed-multi-region-access-point-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass public-access-block-configuration common-lisp:nil
                       ((restrict-public-buckets :initarg
                         :restrict-public-buckets :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         %public-access-block-configuration-restrict-public-buckets
                         :initform common-lisp:nil)
                        (block-public-policy :initarg :block-public-policy
                         :type (common-lisp:or setting common-lisp:null)
                         :accessor
                         %public-access-block-configuration-block-public-policy
                         :initform common-lisp:nil)
                        (ignore-public-acls :initarg :ignore-public-acls :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         %public-access-block-configuration-ignore-public-acls
                         :initform common-lisp:nil)
                        (block-public-acls :initarg :block-public-acls :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         %public-access-block-configuration-block-public-acls
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'public-access-block-configuration
                    'make-public-access-block-configuration))
 (common-lisp:defun make-public-access-block-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restrict-public-buckets
                     block-public-policy ignore-public-acls block-public-acls)
   (common-lisp:apply #'common-lisp:make-instance
                      'public-access-block-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "IgnorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "BlockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "RestrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   common-lisp:nil))
(common-lisp:deftype public-access-block-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass put-access-point-configuration-for-object-lambda-request
                       common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or object-lambda-configuration
                                         common-lisp:null)
                         :accessor
                         %put-access-point-configuration-for-object-lambda-request-configuration
                         :initform
                         (common-lisp:error ":configuration is required"))
                        (name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %put-access-point-configuration-for-object-lambda-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-access-point-configuration-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-access-point-configuration-for-object-lambda-request
                    'make-put-access-point-configuration-for-object-lambda-request))
 (common-lisp:defun make-put-access-point-configuration-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-access-point-configuration-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-configuration-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-configuration-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-configuration-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-access-point-policy-for-object-lambda-request
                       common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or object-lambda-policy common-lisp:null)
                         :accessor
                         %put-access-point-policy-for-object-lambda-request-policy
                         :initform (common-lisp:error ":policy is required"))
                        (name :initarg :name :type
                         (common-lisp:or object-lambda-access-point-name
                                         common-lisp:null)
                         :accessor
                         %put-access-point-policy-for-object-lambda-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-access-point-policy-for-object-lambda-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-access-point-policy-for-object-lambda-request
                    'make-put-access-point-policy-for-object-lambda-request))
 (common-lisp:defun make-put-access-point-policy-for-object-lambda-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-access-point-policy-for-object-lambda-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-for-object-lambda-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-for-object-lambda-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-access-point-policy-request common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-access-point-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (name :initarg :name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %put-access-point-policy-request-name
                         :initform (common-lisp:error ":name is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-access-point-policy-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-access-point-policy-request
                    'make-put-access-point-policy-request))
 (common-lisp:defun make-put-access-point-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy name account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-access-point-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-bucket-lifecycle-configuration-request
                       common-lisp:nil
                       ((lifecycle-configuration :initarg
                         :lifecycle-configuration :type
                         (common-lisp:or lifecycle-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-lifecycle-configuration-request-lifecycle-configuration
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-bucket-lifecycle-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-bucket-lifecycle-configuration-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-lifecycle-configuration-request
                    'make-put-bucket-lifecycle-configuration-request))
 (common-lisp:defun make-put-bucket-lifecycle-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle-configuration bucket
                     account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-lifecycle-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("LifecycleConfiguration" common-lisp:nil
                              "http://awss3control.amazonaws.com/doc/2018-08-20/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-policy-request common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-bucket-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (confirm-remove-self-bucket-access :initarg
                         :confirm-remove-self-bucket-access :type
                         (common-lisp:or confirm-remove-self-bucket-access
                                         common-lisp:null)
                         :accessor
                         %put-bucket-policy-request-confirm-remove-self-bucket-access
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-policy-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-bucket-policy-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-policy-request
                    'make-put-bucket-policy-request))
 (common-lisp:defun make-put-bucket-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy confirm-remove-self-bucket-access
                     bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirm-remove-self-bucket-access))
      (common-lisp:cons "x-amz-confirm-remove-self-bucket-access"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-bucket-replication-request common-lisp:nil
                       ((replication-configuration :initarg
                         :replication-configuration :type
                         (common-lisp:or replication-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-replication-request-replication-configuration
                         :initform
                         (common-lisp:error
                          ":replication-configuration is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-replication-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-bucket-replication-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-replication-request
                    'make-put-bucket-replication-request))
 (common-lisp:defun make-put-bucket-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-configuration bucket
                     account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ReplicationConfiguration" common-lisp:nil
                              "http://awss3control.amazonaws.com/doc/2018-08-20/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-tagging-request common-lisp:nil
                       ((tagging :initarg :tagging :type
                         (common-lisp:or tagging common-lisp:null) :accessor
                         %put-bucket-tagging-request-tagging :initform
                         (common-lisp:error ":tagging is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-tagging-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-bucket-tagging-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-tagging-request
                    'make-put-bucket-tagging-request))
 (common-lisp:defun make-put-bucket-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tagging bucket account-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Tagging" common-lisp:nil
                              "http://awss3control.amazonaws.com/doc/2018-08-20/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-versioning-request common-lisp:nil
                       ((versioning-configuration :initarg
                         :versioning-configuration :type
                         (common-lisp:or versioning-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-versioning-request-versioning-configuration
                         :initform
                         (common-lisp:error
                          ":versioning-configuration is required"))
                        (mfa :initarg :mfa :type
                         (common-lisp:or mfa common-lisp:null) :accessor
                         %put-bucket-versioning-request-mfa :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-versioning-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-bucket-versioning-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-versioning-request
                    'make-put-bucket-versioning-request))
 (common-lisp:defun make-put-bucket-versioning-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key versioning-configuration mfa bucket
                     account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-versioning-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "VersioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("VersioningConfiguration" common-lisp:nil
                              "http://awss3control.amazonaws.com/doc/2018-08-20/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-job-tagging-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or s3tag-set common-lisp:null) :accessor
                         %put-job-tagging-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %put-job-tagging-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-job-tagging-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-job-tagging-request 'make-put-job-tagging-request))
 (common-lisp:defun make-put-job-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-job-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-job-tagging-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-job-tagging-result 'make-put-job-tagging-result))
 (common-lisp:defun make-put-job-tagging-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-job-tagging-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-job-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-multi-region-access-point-policy-input
                       common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-multi-region-access-point-policy-input-policy
                         :initform (common-lisp:error ":policy is required"))
                        (name :initarg :name :type
                         (common-lisp:or multi-region-access-point-name
                                         common-lisp:null)
                         :accessor
                         %put-multi-region-access-point-policy-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-multi-region-access-point-policy-input
                    'make-put-multi-region-access-point-policy-input))
 (common-lisp:defun make-put-multi-region-access-point-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy name)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-multi-region-access-point-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-multi-region-access-point-policy-request
                       common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or
                          put-multi-region-access-point-policy-input
                          common-lisp:null)
                         :accessor
                         %put-multi-region-access-point-policy-request-details
                         :initform (common-lisp:error ":details is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or multi-region-access-point-client-token
                                         common-lisp:null)
                         :accessor
                         %put-multi-region-access-point-policy-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-multi-region-access-point-policy-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-multi-region-access-point-policy-request
                    'make-put-multi-region-access-point-policy-request))
 (common-lisp:defun make-put-multi-region-access-point-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details client-token account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-multi-region-access-point-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-multi-region-access-point-policy-result
                       common-lisp:nil
                       ((request-token-arn :initarg :request-token-arn :type
                         (common-lisp:or async-request-token-arn
                                         common-lisp:null)
                         :accessor
                         %put-multi-region-access-point-policy-result-request-token-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-multi-region-access-point-policy-result
                    'make-put-multi-region-access-point-policy-result))
 (common-lisp:defun make-put-multi-region-access-point-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-token-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-multi-region-access-point-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token-arn))
      (common-lisp:list
       (common-lisp:cons "RequestTokenARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-multi-region-access-point-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-public-access-block-request common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-public-access-block-request-account-id :initform
                         (common-lisp:error ":account-id is required"))
                        (public-access-block-configuration :initarg
                         :public-access-block-configuration :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %put-public-access-block-request-public-access-block-configuration
                         :initform
                         (common-lisp:error
                          ":public-access-block-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'put-public-access-block-request
                    'make-put-public-access-block-request))
 (common-lisp:defun make-put-public-access-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id
                     public-access-block-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-public-access-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicAccessBlockConfiguration" common-lisp:nil
                              "http://awss3control.amazonaws.com/doc/2018-08-20/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-storage-lens-configuration-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or storage-lens-tags common-lisp:null)
                         :accessor %put-storage-lens-configuration-request-tags
                         :initform common-lisp:nil)
                        (storage-lens-configuration :initarg
                         :storage-lens-configuration :type
                         (common-lisp:or storage-lens-configuration
                                         common-lisp:null)
                         :accessor
                         %put-storage-lens-configuration-request-storage-lens-configuration
                         :initform
                         (common-lisp:error
                          ":storage-lens-configuration is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-storage-lens-configuration-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))
                        (config-id :initarg :config-id :type
                         (common-lisp:or config-id common-lisp:null) :accessor
                         %put-storage-lens-configuration-request-config-id
                         :initform
                         (common-lisp:error ":config-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-storage-lens-configuration-request
                    'make-put-storage-lens-configuration-request))
 (common-lisp:defun make-put-storage-lens-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags storage-lens-configuration
                     account-id config-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-storage-lens-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-lens-configuration))
      (common-lisp:list
       (common-lisp:cons "StorageLensConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-storage-lens-configuration-tagging-request
                       common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or storage-lens-tags common-lisp:null)
                         :accessor
                         %put-storage-lens-configuration-tagging-request-tags
                         :initform (common-lisp:error ":tags is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-storage-lens-configuration-tagging-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))
                        (config-id :initarg :config-id :type
                         (common-lisp:or config-id common-lisp:null) :accessor
                         %put-storage-lens-configuration-tagging-request-config-id
                         :initform
                         (common-lisp:error ":config-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-storage-lens-configuration-tagging-request
                    'make-put-storage-lens-configuration-tagging-request))
 (common-lisp:defun make-put-storage-lens-configuration-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags account-id config-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-storage-lens-configuration-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-storage-lens-configuration-tagging-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-storage-lens-configuration-tagging-result
                    'make-put-storage-lens-configuration-tagging-result))
 (common-lisp:defun make-put-storage-lens-configuration-tagging-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-storage-lens-configuration-tagging-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-lens-configuration-tagging-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass region common-lisp:nil
                       ((bucket-account-id :initarg :bucket-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %region-bucket-account-id :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %region-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export (common-lisp:list 'region 'make-region))
 (common-lisp:defun make-region
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-account-id bucket)
   (common-lisp:apply #'common-lisp:make-instance 'region
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-creation-list ()
   '(trivial-types:proper-list region))
 (common-lisp:defun |make-region-creation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass region-report common-lisp:nil
                       ((bucket-account-id :initarg :bucket-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %region-report-bucket-account-id :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %region-report-region :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %region-report-bucket :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'region-report 'make-region-report))
 (common-lisp:defun make-region-report
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-account-id region bucket)
   (common-lisp:apply #'common-lisp:make-instance 'region-report
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region-report))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-report-list ()
   '(trivial-types:proper-list region-report))
 (common-lisp:defun |make-region-report-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region-report))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass regional-bucket common-lisp:nil
                       ((outpost-id :initarg :outpost-id :type
                         (common-lisp:or non-empty-max-length64string
                                         common-lisp:null)
                         :accessor %regional-bucket-outpost-id :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor %regional-bucket-creation-date :initform
                         (common-lisp:error ":creation-date is required"))
                        (public-access-block-enabled :initarg
                         :public-access-block-enabled :type
                         (common-lisp:or public-access-block-enabled
                                         common-lisp:null)
                         :accessor %regional-bucket-public-access-block-enabled
                         :initform
                         (common-lisp:error
                          ":public-access-block-enabled is required"))
                        (bucket-arn :initarg :bucket-arn :type
                         (common-lisp:or s3regional-bucket-arn
                                         common-lisp:null)
                         :accessor %regional-bucket-bucket-arn :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %regional-bucket-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export (common-lisp:list 'regional-bucket 'make-regional-bucket))
 (common-lisp:defun make-regional-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outpost-id creation-date
                     public-access-block-enabled bucket-arn bucket)
   (common-lisp:apply #'common-lisp:make-instance 'regional-bucket
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input regional-bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input regional-bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-enabled))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:list
       (common-lisp:cons "OutpostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input regional-bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regional-bucket-list ()
   '(trivial-types:proper-list regional-bucket))
 (common-lisp:defun |make-regional-bucket-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list regional-bucket))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype regions () '(trivial-types:proper-list s3awsregion))
 (common-lisp:defun |make-regions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3awsregion))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replica-kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replica-modifications common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or replica-modifications-status
                                         common-lisp:null)
                         :accessor %replica-modifications-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'replica-modifications 'make-replica-modifications))
 (common-lisp:defun make-replica-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'replica-modifications
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   common-lisp:nil))
(common-lisp:deftype replica-modifications-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-configuration common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or replication-rules common-lisp:null)
                         :accessor %replication-configuration-rules :initform
                         (common-lisp:error ":rules is required"))
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %replication-configuration-role :initform
                         (common-lisp:error ":role is required"))))
 (common-lisp:export
  (common-lisp:list 'replication-configuration
                    'make-replication-configuration))
 (common-lisp:defun make-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules role)
   (common-lisp:apply #'common-lisp:make-instance 'replication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-rule common-lisp:nil
                       ((bucket :initarg :bucket :type
                         (common-lisp:or bucket-identifier-string
                                         common-lisp:null)
                         :accessor %replication-rule-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (delete-marker-replication :initarg
                         :delete-marker-replication :type
                         (common-lisp:or delete-marker-replication
                                         common-lisp:null)
                         :accessor %replication-rule-delete-marker-replication
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor %replication-rule-destination :initform
                         (common-lisp:error ":destination is required"))
                        (existing-object-replication :initarg
                         :existing-object-replication :type
                         (common-lisp:or existing-object-replication
                                         common-lisp:null)
                         :accessor
                         %replication-rule-existing-object-replication
                         :initform common-lisp:nil)
                        (source-selection-criteria :initarg
                         :source-selection-criteria :type
                         (common-lisp:or source-selection-criteria
                                         common-lisp:null)
                         :accessor %replication-rule-source-selection-criteria
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or replication-rule-status
                                         common-lisp:null)
                         :accessor %replication-rule-status :initform
                         (common-lisp:error ":status is required"))
                        (filter :initarg :filter :type
                         (common-lisp:or replication-rule-filter
                                         common-lisp:null)
                         :accessor %replication-rule-filter :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %replication-rule-prefix :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or priority common-lisp:null) :accessor
                         %replication-rule-priority :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %replication-rule-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-rule 'make-replication-rule))
 (common-lisp:defun make-replication-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket delete-marker-replication
                     destination existing-object-replication
                     source-selection-criteria status filter prefix priority
                     id)
   (common-lisp:apply #'common-lisp:make-instance 'replication-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-selection-criteria))
      (common-lisp:list
       (common-lisp:cons "SourceSelectionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-object-replication))
      (common-lisp:list
       (common-lisp:cons "ExistingObjectReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-marker-replication))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkerReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-rule-and-operator common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or s3tag-set common-lisp:null) :accessor
                         %replication-rule-and-operator-tags :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %replication-rule-and-operator-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-rule-and-operator
                    'make-replication-rule-and-operator))
 (common-lisp:defun make-replication-rule-and-operator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-rule-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-rule-filter common-lisp:nil
                       ((and :initarg :and :type
                         (common-lisp:or replication-rule-and-operator
                                         common-lisp:null)
                         :accessor %replication-rule-filter-and :initform
                         common-lisp:nil)
                        (tag :initarg :tag :type
                         (common-lisp:or s3tag common-lisp:null) :accessor
                         %replication-rule-filter-tag :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %replication-rule-filter-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-rule-filter 'make-replication-rule-filter))
 (common-lisp:defun make-replication-rule-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key and tag prefix)
   (common-lisp:apply #'common-lisp:make-instance 'replication-rule-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   common-lisp:nil))
(common-lisp:deftype replication-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-rules ()
   '(trivial-types:proper-list replication-rule))
 (common-lisp:defun |make-replication-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-status-filter-list ()
   '(trivial-types:proper-list replication-status))
 (common-lisp:defun |make-replication-status-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-time common-lisp:nil
                       ((time :initarg :time :type
                         (common-lisp:or replication-time-value
                                         common-lisp:null)
                         :accessor %replication-time-time :initform
                         (common-lisp:error ":time is required"))
                        (status :initarg :status :type
                         (common-lisp:or replication-time-status
                                         common-lisp:null)
                         :accessor %replication-time-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'replication-time 'make-replication-time))
 (common-lisp:defun make-replication-time
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time status)
   (common-lisp:apply #'common-lisp:make-instance 'replication-time
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-time))
   common-lisp:nil))
(common-lisp:deftype replication-time-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-time-value common-lisp:nil
                       ((minutes :initarg :minutes :type
                         (common-lisp:or minutes common-lisp:null) :accessor
                         %replication-time-value-minutes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-time-value 'make-replication-time-value))
 (common-lisp:defun make-replication-time-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minutes)
   (common-lisp:apply #'common-lisp:make-instance 'replication-time-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minutes))
      (common-lisp:list
       (common-lisp:cons "Minutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   common-lisp:nil))
(common-lisp:deftype report-prefix-string () 'common-lisp:string)
(common-lisp:deftype requested-job-status () 'common-lisp:string)
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype route-list ()
   '(trivial-types:proper-list multi-region-access-point-route))
 (common-lisp:defun |make-route-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multi-region-access-point-route))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3awsregion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3access-control-list common-lisp:nil
                       ((grants :initarg :grants :type
                         (common-lisp:or s3grant-list common-lisp:null)
                         :accessor %s3access-control-list-grants :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or s3object-owner common-lisp:null)
                         :accessor %s3access-control-list-owner :initform
                         (common-lisp:error ":owner is required"))))
 (common-lisp:export
  (common-lisp:list 's3access-control-list 'make-s3access-control-list))
 (common-lisp:defun make-s3access-control-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grants owner)
   (common-lisp:apply #'common-lisp:make-instance 's3access-control-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3access-control-policy common-lisp:nil
                       ((canned-access-control-list :initarg
                         :canned-access-control-list :type
                         (common-lisp:or s3canned-access-control-list
                                         common-lisp:null)
                         :accessor
                         %s3access-control-policy-canned-access-control-list
                         :initform common-lisp:nil)
                        (access-control-list :initarg :access-control-list
                         :type
                         (common-lisp:or s3access-control-list
                                         common-lisp:null)
                         :accessor %s3access-control-policy-access-control-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3access-control-policy 'make-s3access-control-policy))
 (common-lisp:defun make-s3access-control-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canned-access-control-list
                     access-control-list)
   (common-lisp:apply #'common-lisp:make-instance 's3access-control-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canned-access-control-list))
      (common-lisp:list
       (common-lisp:cons "CannedAccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3access-control-policy))
   common-lisp:nil))
(common-lisp:deftype s3access-point-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3bucket-destination common-lisp:nil
                       ((encryption :initarg :encryption :type
                         (common-lisp:or storage-lens-data-export-encryption
                                         common-lisp:null)
                         :accessor %s3bucket-destination-encryption :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %s3bucket-destination-prefix :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or s3bucket-arn-string common-lisp:null)
                         :accessor %s3bucket-destination-arn :initform
                         (common-lisp:error ":arn is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %s3bucket-destination-account-id :initform
                         (common-lisp:error ":account-id is required"))
                        (output-schema-version :initarg :output-schema-version
                         :type
                         (common-lisp:or output-schema-version
                                         common-lisp:null)
                         :accessor %s3bucket-destination-output-schema-version
                         :initform
                         (common-lisp:error
                          ":output-schema-version is required"))
                        (format :initarg :format :type
                         (common-lisp:or format common-lisp:null) :accessor
                         %s3bucket-destination-format :initform
                         (common-lisp:error ":format is required"))))
 (common-lisp:export
  (common-lisp:list 's3bucket-destination 'make-s3bucket-destination))
 (common-lisp:defun make-s3bucket-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption prefix arn account-id
                     output-schema-version format)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-schema-version))
      (common-lisp:list
       (common-lisp:cons "OutputSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-destination))
   common-lisp:nil))
(common-lisp:deftype s3canned-access-control-list () 'common-lisp:string)
(common-lisp:deftype s3checksum-algorithm () 'common-lisp:string)
(common-lisp:deftype s3content-length () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass s3copy-object-operation common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or s3checksum-algorithm common-lisp:null)
                         :accessor %s3copy-object-operation-checksum-algorithm
                         :initform common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %s3copy-object-operation-bucket-key-enabled :initform
                         common-lisp:nil)
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %s3copy-object-operation-object-lock-retain-until-date
                         :initform common-lisp:nil)
                        (object-lock-mode :initarg :object-lock-mode :type
                         (common-lisp:or s3object-lock-mode common-lisp:null)
                         :accessor %s3copy-object-operation-object-lock-mode
                         :initform common-lisp:nil)
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :type
                         (common-lisp:or s3object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         %s3copy-object-operation-object-lock-legal-hold-status
                         :initform common-lisp:nil)
                        (target-key-prefix :initarg :target-key-prefix :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3copy-object-operation-target-key-prefix
                         :initform common-lisp:nil)
                        (sseaws-kms-key-id :initarg :sseaws-kms-key-id :type
                         (common-lisp:or kms-key-arn-string common-lisp:null)
                         :accessor %s3copy-object-operation-sseaws-kms-key-id
                         :initform common-lisp:nil)
                        (un-modified-since-constraint :initarg
                         :un-modified-since-constraint :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %s3copy-object-operation-un-modified-since-constraint
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or s3storage-class common-lisp:null)
                         :accessor %s3copy-object-operation-storage-class
                         :initform common-lisp:nil)
                        (requester-pays :initarg :requester-pays :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %s3copy-object-operation-requester-pays :initform
                         common-lisp:nil)
                        (redirect-location :initarg :redirect-location :type
                         (common-lisp:or non-empty-max-length2048string
                                         common-lisp:null)
                         :accessor %s3copy-object-operation-redirect-location
                         :initform common-lisp:nil)
                        (new-object-tagging :initarg :new-object-tagging :type
                         (common-lisp:or s3tag-set common-lisp:null) :accessor
                         %s3copy-object-operation-new-object-tagging :initform
                         common-lisp:nil)
                        (new-object-metadata :initarg :new-object-metadata
                         :type
                         (common-lisp:or s3object-metadata common-lisp:null)
                         :accessor %s3copy-object-operation-new-object-metadata
                         :initform common-lisp:nil)
                        (modified-since-constraint :initarg
                         :modified-since-constraint :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %s3copy-object-operation-modified-since-constraint
                         :initform common-lisp:nil)
                        (metadata-directive :initarg :metadata-directive :type
                         (common-lisp:or s3metadata-directive common-lisp:null)
                         :accessor %s3copy-object-operation-metadata-directive
                         :initform common-lisp:nil)
                        (access-control-grants :initarg :access-control-grants
                         :type (common-lisp:or s3grant-list common-lisp:null)
                         :accessor
                         %s3copy-object-operation-access-control-grants
                         :initform common-lisp:nil)
                        (canned-access-control-list :initarg
                         :canned-access-control-list :type
                         (common-lisp:or s3canned-access-control-list
                                         common-lisp:null)
                         :accessor
                         %s3copy-object-operation-canned-access-control-list
                         :initform common-lisp:nil)
                        (target-resource :initarg :target-resource :type
                         (common-lisp:or s3bucket-arn-string common-lisp:null)
                         :accessor %s3copy-object-operation-target-resource
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3copy-object-operation 'make-s3copy-object-operation))
 (common-lisp:defun make-s3copy-object-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm bucket-key-enabled
                     object-lock-retain-until-date object-lock-mode
                     object-lock-legal-hold-status target-key-prefix
                     sseaws-kms-key-id un-modified-since-constraint
                     storage-class requester-pays redirect-location
                     new-object-tagging new-object-metadata
                     modified-since-constraint metadata-directive
                     access-control-grants canned-access-control-list
                     target-resource)
   (common-lisp:apply #'common-lisp:make-instance 's3copy-object-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3copy-object-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3copy-object-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-resource))
      (common-lisp:list
       (common-lisp:cons "TargetResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canned-access-control-list))
      (common-lisp:list
       (common-lisp:cons "CannedAccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-grants))
      (common-lisp:list
       (common-lisp:cons "AccessControlGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-directive))
      (common-lisp:list
       (common-lisp:cons "MetadataDirective"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modified-since-constraint))
      (common-lisp:list
       (common-lisp:cons "ModifiedSinceConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-object-metadata))
      (common-lisp:list
       (common-lisp:cons "NewObjectMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-object-tagging))
      (common-lisp:list
       (common-lisp:cons "NewObjectTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-location))
      (common-lisp:list
       (common-lisp:cons "RedirectLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-pays))
      (common-lisp:list
       (common-lisp:cons "RequesterPays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'un-modified-since-constraint))
      (common-lisp:list
       (common-lisp:cons "UnModifiedSinceConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sseaws-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "SSEAwsKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-key-prefix))
      (common-lisp:list
       (common-lisp:cons "TargetKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:list
       (common-lisp:cons "ObjectLockLegalHoldStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:list
       (common-lisp:cons "ObjectLockMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:list
       (common-lisp:cons "ObjectLockRetainUntilDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:list
       (common-lisp:cons "BucketKeyEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3copy-object-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3delete-object-tagging-operation common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 's3delete-object-tagging-operation
                    'make-s3delete-object-tagging-operation))
 (common-lisp:defun make-s3delete-object-tagging-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      's3delete-object-tagging-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3delete-object-tagging-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3delete-object-tagging-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3delete-object-tagging-operation))
   common-lisp:nil))
(common-lisp:deftype s3expiration-in-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass s3generated-manifest-descriptor common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or job-manifest-location
                                         common-lisp:null)
                         :accessor %s3generated-manifest-descriptor-location
                         :initform common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or generated-manifest-format
                                         common-lisp:null)
                         :accessor %s3generated-manifest-descriptor-format
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3generated-manifest-descriptor
                    'make-s3generated-manifest-descriptor))
 (common-lisp:defun make-s3generated-manifest-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location format)
   (common-lisp:apply #'common-lisp:make-instance
                      's3generated-manifest-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3generated-manifest-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3generated-manifest-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3generated-manifest-descriptor))
   common-lisp:nil))
(common-lisp:deftype s3glacier-job-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3grant common-lisp:nil
                       ((permission :initarg :permission :type
                         (common-lisp:or s3permission common-lisp:null)
                         :accessor %s3grant-permission :initform
                         common-lisp:nil)
                        (grantee :initarg :grantee :type
                         (common-lisp:or s3grantee common-lisp:null) :accessor
                         %s3grant-grantee :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3grant 'make-s3grant))
 (common-lisp:defun make-s3grant
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permission grantee)
   (common-lisp:apply #'common-lisp:make-instance 's3grant
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3grant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3grant-list () '(trivial-types:proper-list s3grant))
 (common-lisp:defun |make-s3grant-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3grantee common-lisp:nil
                       ((display-name :initarg :display-name :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3grantee-display-name :initform
                         common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3grantee-identifier :initform
                         common-lisp:nil)
                        (type-identifier :initarg :type-identifier :type
                         (common-lisp:or s3grantee-type-identifier
                                         common-lisp:null)
                         :accessor %s3grantee-type-identifier :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3grantee 'make-s3grantee))
 (common-lisp:defun make-s3grantee
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-name identifier type-identifier)
   (common-lisp:apply #'common-lisp:make-instance 's3grantee
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3grantee))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3grantee))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "TypeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3grantee))
   common-lisp:nil))
(common-lisp:deftype s3grantee-type-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3initiate-restore-object-operation common-lisp:nil
                       ((glacier-job-tier :initarg :glacier-job-tier :type
                         (common-lisp:or s3glacier-job-tier common-lisp:null)
                         :accessor
                         %s3initiate-restore-object-operation-glacier-job-tier
                         :initform common-lisp:nil)
                        (expiration-in-days :initarg :expiration-in-days :type
                         (common-lisp:or s3expiration-in-days common-lisp:null)
                         :accessor
                         %s3initiate-restore-object-operation-expiration-in-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3initiate-restore-object-operation
                    'make-s3initiate-restore-object-operation))
 (common-lisp:defun make-s3initiate-restore-object-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key glacier-job-tier expiration-in-days)
   (common-lisp:apply #'common-lisp:make-instance
                      's3initiate-restore-object-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3initiate-restore-object-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3initiate-restore-object-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-in-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glacier-job-tier))
      (common-lisp:list
       (common-lisp:cons "GlacierJobTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3initiate-restore-object-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3job-manifest-generator common-lisp:nil
                       ((enable-manifest-output :initarg
                         :enable-manifest-output :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %s3job-manifest-generator-enable-manifest-output
                         :initform
                         (common-lisp:error
                          ":enable-manifest-output is required"))
                        (filter :initarg :filter :type
                         (common-lisp:or job-manifest-generator-filter
                                         common-lisp:null)
                         :accessor %s3job-manifest-generator-filter :initform
                         common-lisp:nil)
                        (manifest-output-location :initarg
                         :manifest-output-location :type
                         (common-lisp:or s3manifest-output-location
                                         common-lisp:null)
                         :accessor
                         %s3job-manifest-generator-manifest-output-location
                         :initform common-lisp:nil)
                        (source-bucket :initarg :source-bucket :type
                         (common-lisp:or s3bucket-arn-string common-lisp:null)
                         :accessor %s3job-manifest-generator-source-bucket
                         :initform
                         (common-lisp:error ":source-bucket is required"))
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %s3job-manifest-generator-expected-bucket-owner
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3job-manifest-generator 'make-s3job-manifest-generator))
 (common-lisp:defun make-s3job-manifest-generator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-manifest-output filter
                     manifest-output-location source-bucket
                     expected-bucket-owner)
   (common-lisp:apply #'common-lisp:make-instance 's3job-manifest-generator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3job-manifest-generator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3job-manifest-generator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "ExpectedBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bucket))
      (common-lisp:list
       (common-lisp:cons "SourceBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-output-location))
      (common-lisp:list
       (common-lisp:cons "ManifestOutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-manifest-output))
      (common-lisp:list
       (common-lisp:cons "EnableManifestOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3job-manifest-generator))
   common-lisp:nil))
(common-lisp:deftype s3key-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3manifest-output-location common-lisp:nil
                       ((manifest-format :initarg :manifest-format :type
                         (common-lisp:or generated-manifest-format
                                         common-lisp:null)
                         :accessor %s3manifest-output-location-manifest-format
                         :initform
                         (common-lisp:error ":manifest-format is required"))
                        (manifest-encryption :initarg :manifest-encryption
                         :type
                         (common-lisp:or generated-manifest-encryption
                                         common-lisp:null)
                         :accessor
                         %s3manifest-output-location-manifest-encryption
                         :initform common-lisp:nil)
                        (manifest-prefix :initarg :manifest-prefix :type
                         (common-lisp:or manifest-prefix-string
                                         common-lisp:null)
                         :accessor %s3manifest-output-location-manifest-prefix
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or s3bucket-arn-string common-lisp:null)
                         :accessor %s3manifest-output-location-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (expected-manifest-bucket-owner :initarg
                         :expected-manifest-bucket-owner :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %s3manifest-output-location-expected-manifest-bucket-owner
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3manifest-output-location
                    'make-s3manifest-output-location))
 (common-lisp:defun make-s3manifest-output-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key manifest-format manifest-encryption
                     manifest-prefix bucket expected-manifest-bucket-owner)
   (common-lisp:apply #'common-lisp:make-instance 's3manifest-output-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3manifest-output-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3manifest-output-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-manifest-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "ExpectedManifestBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-prefix))
      (common-lisp:list
       (common-lisp:cons "ManifestPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-encryption))
      (common-lisp:list
       (common-lisp:cons "ManifestEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-format))
      (common-lisp:list
       (common-lisp:cons "ManifestFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3manifest-output-location))
   common-lisp:nil))
(common-lisp:deftype s3metadata-directive () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3object-lock-legal-hold common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or s3object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor %s3object-lock-legal-hold-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 's3object-lock-legal-hold 'make-s3object-lock-legal-hold))
 (common-lisp:defun make-s3object-lock-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 's3object-lock-legal-hold
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3object-lock-legal-hold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3object-lock-legal-hold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3object-lock-legal-hold))
   common-lisp:nil))
(common-lisp:deftype s3object-lock-legal-hold-status () 'common-lisp:string)
(common-lisp:deftype s3object-lock-mode () 'common-lisp:string)
(common-lisp:deftype s3object-lock-retention-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3object-metadata common-lisp:nil
                       ((ssealgorithm :initarg :ssealgorithm :type
                         (common-lisp:or s3ssealgorithm common-lisp:null)
                         :accessor %s3object-metadata-ssealgorithm :initform
                         common-lisp:nil)
                        (requester-charged :initarg :requester-charged :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %s3object-metadata-requester-charged :initform
                         common-lisp:nil)
                        (http-expires-date :initarg :http-expires-date :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %s3object-metadata-http-expires-date :initform
                         common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3object-metadata-content-type :initform
                         common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3object-metadata-content-md5 :initform
                         common-lisp:nil)
                        (content-length :initarg :content-length :type
                         (common-lisp:or s3content-length common-lisp:null)
                         :accessor %s3object-metadata-content-length :initform
                         common-lisp:nil)
                        (user-metadata :initarg :user-metadata :type
                         (common-lisp:or s3user-metadata common-lisp:null)
                         :accessor %s3object-metadata-user-metadata :initform
                         common-lisp:nil)
                        (content-language :initarg :content-language :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3object-metadata-content-language
                         :initform common-lisp:nil)
                        (content-encoding :initarg :content-encoding :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3object-metadata-content-encoding
                         :initform common-lisp:nil)
                        (content-disposition :initarg :content-disposition
                         :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3object-metadata-content-disposition
                         :initform common-lisp:nil)
                        (cache-control :initarg :cache-control :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3object-metadata-cache-control :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3object-metadata 'make-s3object-metadata))
 (common-lisp:defun make-s3object-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssealgorithm requester-charged
                     http-expires-date content-type content-md5 content-length
                     user-metadata content-language content-encoding
                     content-disposition cache-control)
   (common-lisp:apply #'common-lisp:make-instance 's3object-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:list
       (common-lisp:cons "CacheControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:list
       (common-lisp:cons "ContentDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:list
       (common-lisp:cons "ContentEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:list
       (common-lisp:cons "ContentLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-metadata))
      (common-lisp:list
       (common-lisp:cons "UserMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:list
       (common-lisp:cons "ContentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:list
       (common-lisp:cons "ContentMD5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-expires-date))
      (common-lisp:list
       (common-lisp:cons "HttpExpiresDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-charged))
      (common-lisp:list
       (common-lisp:cons "RequesterCharged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssealgorithm))
      (common-lisp:list
       (common-lisp:cons "SSEAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3object-owner common-lisp:nil
                       ((display-name :initarg :display-name :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3object-owner-display-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-max-length1024string
                                         common-lisp:null)
                         :accessor %s3object-owner-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3object-owner 'make-s3object-owner))
 (common-lisp:defun make-s3object-owner
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-name id)
   (common-lisp:apply #'common-lisp:make-instance 's3object-owner
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object-owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object-owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object-owner))
   common-lisp:nil))
(common-lisp:deftype s3object-version-id () 'common-lisp:string)
(common-lisp:deftype s3permission () 'common-lisp:string)
(common-lisp:deftype s3regional-bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3replicate-object-operation common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 's3replicate-object-operation
                    'make-s3replicate-object-operation))
 (common-lisp:defun make-s3replicate-object-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 's3replicate-object-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3replicate-object-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3replicate-object-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3replicate-object-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3retention common-lisp:nil
                       ((mode :initarg :mode :type
                         (common-lisp:or s3object-lock-retention-mode
                                         common-lisp:null)
                         :accessor %s3retention-mode :initform common-lisp:nil)
                        (retain-until-date :initarg :retain-until-date :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %s3retention-retain-until-date :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3retention 'make-s3retention))
 (common-lisp:defun make-s3retention
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mode retain-until-date)
   (common-lisp:apply #'common-lisp:make-instance 's3retention
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3retention))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3retention))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-until-date))
      (common-lisp:list
       (common-lisp:cons "RetainUntilDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3retention))
   common-lisp:nil))
(common-lisp:deftype s3ssealgorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3set-object-acl-operation common-lisp:nil
                       ((access-control-policy :initarg :access-control-policy
                         :type
                         (common-lisp:or s3access-control-policy
                                         common-lisp:null)
                         :accessor
                         %s3set-object-acl-operation-access-control-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3set-object-acl-operation
                    'make-s3set-object-acl-operation))
 (common-lisp:defun make-s3set-object-acl-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-control-policy)
   (common-lisp:apply #'common-lisp:make-instance 's3set-object-acl-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-acl-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-acl-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-policy))
      (common-lisp:list
       (common-lisp:cons "AccessControlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-acl-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3set-object-legal-hold-operation common-lisp:nil
                       ((legal-hold :initarg :legal-hold :type
                         (common-lisp:or s3object-lock-legal-hold
                                         common-lisp:null)
                         :accessor
                         %s3set-object-legal-hold-operation-legal-hold
                         :initform
                         (common-lisp:error ":legal-hold is required"))))
 (common-lisp:export
  (common-lisp:list 's3set-object-legal-hold-operation
                    'make-s3set-object-legal-hold-operation))
 (common-lisp:defun make-s3set-object-legal-hold-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key legal-hold)
   (common-lisp:apply #'common-lisp:make-instance
                      's3set-object-legal-hold-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-legal-hold-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-legal-hold-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold))
      (common-lisp:list
       (common-lisp:cons "LegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-legal-hold-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3set-object-retention-operation common-lisp:nil
                       ((retention :initarg :retention :type
                         (common-lisp:or s3retention common-lisp:null)
                         :accessor %s3set-object-retention-operation-retention
                         :initform
                         (common-lisp:error ":retention is required"))
                        (bypass-governance-retention :initarg
                         :bypass-governance-retention :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %s3set-object-retention-operation-bypass-governance-retention
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3set-object-retention-operation
                    'make-s3set-object-retention-operation))
 (common-lisp:defun make-s3set-object-retention-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retention bypass-governance-retention)
   (common-lisp:apply #'common-lisp:make-instance
                      's3set-object-retention-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-retention-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-retention-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:list
       (common-lisp:cons "BypassGovernanceRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-retention-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3set-object-tagging-operation common-lisp:nil
                       ((tag-set :initarg :tag-set :type
                         (common-lisp:or s3tag-set common-lisp:null) :accessor
                         %s3set-object-tagging-operation-tag-set :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3set-object-tagging-operation
                    'make-s3set-object-tagging-operation))
 (common-lisp:defun make-s3set-object-tagging-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-set)
   (common-lisp:apply #'common-lisp:make-instance
                      's3set-object-tagging-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-tagging-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-tagging-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3set-object-tagging-operation))
   common-lisp:nil))
(common-lisp:deftype s3storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value-string common-lisp:null)
                         :accessor %s3tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key-string common-lisp:null)
                         :accessor %s3tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 's3tag 'make-s3tag))
 (common-lisp:defun make-s3tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 's3tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3tag-set () '(trivial-types:proper-list s3tag))
 (common-lisp:defun |make-s3tag-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype s3user-metadata () 'common-lisp:hash-table)
 (common-lisp:defun |make-s3user-metadata|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass ssekms common-lisp:nil
                       ((key-id :initarg :key-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %ssekms-key-id :initform
                         (common-lisp:error ":key-id is required"))))
 (common-lisp:export (common-lisp:list 'ssekms 'make-ssekms))
 (common-lisp:defun make-ssekms
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-id)
   (common-lisp:apply #'common-lisp:make-instance 'ssekms
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssekms))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ssekmsencryption common-lisp:nil
                       ((key-id :initarg :key-id :type
                         (common-lisp:or kms-key-arn-string common-lisp:null)
                         :accessor %ssekmsencryption-key-id :initform
                         (common-lisp:error ":key-id is required"))))
 (common-lisp:export
  (common-lisp:list 'ssekmsencryption 'make-ssekmsencryption))
 (common-lisp:defun make-ssekmsencryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-id)
   (common-lisp:apply #'common-lisp:make-instance 'ssekmsencryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssekmsencryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssekmsencryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssekmsencryption))
   common-lisp:nil))
(common-lisp:deftype ssekmskey-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sses3 common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'sses3 'make-sses3))
 (common-lisp:defun make-sses3
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'sses3
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sses3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sses3encryption common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'sses3encryption 'make-sses3encryption))
 (common-lisp:defun make-sses3encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'sses3encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sses3encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sses3encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sses3encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass selection-criteria common-lisp:nil
                       ((min-storage-bytes-percentage :initarg
                         :min-storage-bytes-percentage :type
                         (common-lisp:or min-storage-bytes-percentage
                                         common-lisp:null)
                         :accessor
                         %selection-criteria-min-storage-bytes-percentage
                         :initform common-lisp:nil)
                        (max-depth :initarg :max-depth :type
                         (common-lisp:or storage-lens-prefix-level-max-depth
                                         common-lisp:null)
                         :accessor %selection-criteria-max-depth :initform
                         common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or storage-lens-prefix-level-delimiter
                                         common-lisp:null)
                         :accessor %selection-criteria-delimiter :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'selection-criteria 'make-selection-criteria))
 (common-lisp:defun make-selection-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min-storage-bytes-percentage max-depth
                     delimiter)
   (common-lisp:apply #'common-lisp:make-instance 'selection-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input selection-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input selection-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-depth))
      (common-lisp:list
       (common-lisp:cons "MaxDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-storage-bytes-percentage))
      (common-lisp:list
       (common-lisp:cons "MinStorageBytesPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input selection-criteria))
   common-lisp:nil))
(common-lisp:deftype setting () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass source-selection-criteria common-lisp:nil
                       ((replica-modifications :initarg :replica-modifications
                         :type
                         (common-lisp:or replica-modifications
                                         common-lisp:null)
                         :accessor
                         %source-selection-criteria-replica-modifications
                         :initform common-lisp:nil)
                        (sse-kms-encrypted-objects :initarg
                         :sse-kms-encrypted-objects :type
                         (common-lisp:or sse-kms-encrypted-objects
                                         common-lisp:null)
                         :accessor
                         %source-selection-criteria-sse-kms-encrypted-objects
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-selection-criteria
                    'make-source-selection-criteria))
 (common-lisp:defun make-source-selection-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replica-modifications
                     sse-kms-encrypted-objects)
   (common-lisp:apply #'common-lisp:make-instance 'source-selection-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sse-kms-encrypted-objects))
      (common-lisp:list
       (common-lisp:cons "SseKmsEncryptedObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-modifications))
      (common-lisp:list
       (common-lisp:cons "ReplicaModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sse-kms-encrypted-objects common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or sse-kms-encrypted-objects-status
                                         common-lisp:null)
                         :accessor %sse-kms-encrypted-objects-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'sse-kms-encrypted-objects
                    'make-sse-kms-encrypted-objects))
 (common-lisp:defun make-sse-kms-encrypted-objects
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'sse-kms-encrypted-objects
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   common-lisp:nil))
(common-lisp:deftype sse-kms-encrypted-objects-status () 'common-lisp:string)
(common-lisp:deftype storage-lens-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass storage-lens-aws-org common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or aws-org-arn common-lisp:null)
                         :accessor %storage-lens-aws-org-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'storage-lens-aws-org 'make-storage-lens-aws-org))
 (common-lisp:defun make-storage-lens-aws-org
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'storage-lens-aws-org
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-lens-aws-org))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-lens-aws-org))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-lens-aws-org))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-lens-configuration common-lisp:nil
                       ((storage-lens-arn :initarg :storage-lens-arn :type
                         (common-lisp:or storage-lens-arn common-lisp:null)
                         :accessor %storage-lens-configuration-storage-lens-arn
                         :initform common-lisp:nil)
                        (aws-org :initarg :aws-org :type
                         (common-lisp:or storage-lens-aws-org common-lisp:null)
                         :accessor %storage-lens-configuration-aws-org
                         :initform common-lisp:nil)
                        (is-enabled :initarg :is-enabled :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         %storage-lens-configuration-is-enabled :initform
                         (common-lisp:error ":is-enabled is required"))
                        (data-export :initarg :data-export :type
                         (common-lisp:or storage-lens-data-export
                                         common-lisp:null)
                         :accessor %storage-lens-configuration-data-export
                         :initform common-lisp:nil)
                        (exclude :initarg :exclude :type
                         (common-lisp:or exclude common-lisp:null) :accessor
                         %storage-lens-configuration-exclude :initform
                         common-lisp:nil)
                        (include :initarg :include :type
                         (common-lisp:or include common-lisp:null) :accessor
                         %storage-lens-configuration-include :initform
                         common-lisp:nil)
                        (account-level :initarg :account-level :type
                         (common-lisp:or account-level common-lisp:null)
                         :accessor %storage-lens-configuration-account-level
                         :initform
                         (common-lisp:error ":account-level is required"))
                        (id :initarg :id :type
                         (common-lisp:or config-id common-lisp:null) :accessor
                         %storage-lens-configuration-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'storage-lens-configuration
                    'make-storage-lens-configuration))
 (common-lisp:defun make-storage-lens-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-lens-arn aws-org is-enabled
                     data-export exclude include account-level id)
   (common-lisp:apply #'common-lisp:make-instance 'storage-lens-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-level))
      (common-lisp:list
       (common-lisp:cons "AccountLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "Include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude))
      (common-lisp:list
       (common-lisp:cons "Exclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-export))
      (common-lisp:list
       (common-lisp:cons "DataExport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-org))
      (common-lisp:list
       (common-lisp:cons "AwsOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-lens-arn))
      (common-lisp:list
       (common-lisp:cons "StorageLensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-lens-configuration-list ()
   '(trivial-types:proper-list list-storage-lens-configuration-entry))
 (common-lisp:defun |make-storage-lens-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-storage-lens-configuration-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass storage-lens-data-export common-lisp:nil
                       ((cloud-watch-metrics :initarg :cloud-watch-metrics
                         :type
                         (common-lisp:or cloud-watch-metrics common-lisp:null)
                         :accessor
                         %storage-lens-data-export-cloud-watch-metrics
                         :initform common-lisp:nil)
                        (s3bucket-destination :initarg :s3bucket-destination
                         :type
                         (common-lisp:or s3bucket-destination common-lisp:null)
                         :accessor
                         %storage-lens-data-export-s3bucket-destination
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'storage-lens-data-export 'make-storage-lens-data-export))
 (common-lisp:defun make-storage-lens-data-export
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-metrics s3bucket-destination)
   (common-lisp:apply #'common-lisp:make-instance 'storage-lens-data-export
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-destination))
      (common-lisp:list
       (common-lisp:cons "S3BucketDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-metrics))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-lens-data-export-encryption common-lisp:nil
                       ((ssekms :initarg :ssekms :type
                         (common-lisp:or ssekms common-lisp:null) :accessor
                         %storage-lens-data-export-encryption-ssekms :initform
                         common-lisp:nil)
                        (sses3 :initarg :sses3 :type
                         (common-lisp:or sses3 common-lisp:null) :accessor
                         %storage-lens-data-export-encryption-sses3 :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'storage-lens-data-export-encryption
                    'make-storage-lens-data-export-encryption))
 (common-lisp:defun make-storage-lens-data-export-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssekms sses3)
   (common-lisp:apply #'common-lisp:make-instance
                      'storage-lens-data-export-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sses3))
      (common-lisp:list
       (common-lisp:cons "SSES3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekms))
      (common-lisp:list
       (common-lisp:cons "SSEKMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-lens-data-export-encryption))
   common-lisp:nil))
(common-lisp:deftype storage-lens-prefix-level-delimiter () 'common-lisp:string)
(common-lisp:deftype storage-lens-prefix-level-max-depth ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass storage-lens-tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value-string common-lisp:null)
                         :accessor %storage-lens-tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key-string common-lisp:null)
                         :accessor %storage-lens-tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'storage-lens-tag 'make-storage-lens-tag))
 (common-lisp:defun make-storage-lens-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'storage-lens-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-lens-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-lens-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-lens-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-lens-tags ()
   '(trivial-types:proper-list storage-lens-tag))
 (common-lisp:defun |make-storage-lens-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-lens-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string-for-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass submit-multi-region-access-point-routes-request
                       common-lisp:nil
                       ((route-updates :initarg :route-updates :type
                         (common-lisp:or route-list common-lisp:null) :accessor
                         %submit-multi-region-access-point-routes-request-route-updates
                         :initform
                         (common-lisp:error ":route-updates is required"))
                        (mrap :initarg :mrap :type
                         (common-lisp:or multi-region-access-point-id
                                         common-lisp:null)
                         :accessor
                         %submit-multi-region-access-point-routes-request-mrap
                         :initform (common-lisp:error ":mrap is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %submit-multi-region-access-point-routes-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'submit-multi-region-access-point-routes-request
                    'make-submit-multi-region-access-point-routes-request))
 (common-lisp:defun make-submit-multi-region-access-point-routes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route-updates mrap account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-multi-region-access-point-routes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-updates))
      (common-lisp:list
       (common-lisp:cons "RouteUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-multi-region-access-point-routes-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'submit-multi-region-access-point-routes-result
                    'make-submit-multi-region-access-point-routes-result))
 (common-lisp:defun make-submit-multi-region-access-point-routes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-multi-region-access-point-routes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-multi-region-access-point-routes-result))
   common-lisp:nil))
(common-lisp:deftype suspended-cause () 'common-lisp:string)
(common-lisp:deftype suspended-date () 'common-lisp:string)
(common-lisp:deftype tag-key-string () 'common-lisp:string)
(common-lisp:deftype tag-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tagging common-lisp:nil
                       ((tag-set :initarg :tag-set :type
                         (common-lisp:or s3tag-set common-lisp:null) :accessor
                         %tagging-tag-set :initform
                         (common-lisp:error ":tag-set is required"))))
 (common-lisp:export (common-lisp:list 'tagging 'make-tagging))
 (common-lisp:defun make-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-set)
   (common-lisp:apply #'common-lisp:make-instance 'tagging
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagging))
   common-lisp:nil))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (s3control-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:deftype traffic-dial-percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass transition common-lisp:nil
                       ((storage-class :initarg :storage-class :type
                         (common-lisp:or transition-storage-class
                                         common-lisp:null)
                         :accessor %transition-storage-class :initform
                         common-lisp:nil)
                        (days :initarg :days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %transition-days :initform common-lisp:nil)
                        (date :initarg :date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %transition-date :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'transition 'make-transition))
 (common-lisp:defun make-transition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class days date)
   (common-lisp:apply #'common-lisp:make-instance 'transition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transition-list ()
   '(trivial-types:proper-list transition))
 (common-lisp:defun |make-transition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transition-storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-job-priority-request common-lisp:nil
                       ((priority :initarg :priority :type
                         (common-lisp:or job-priority common-lisp:null)
                         :accessor %update-job-priority-request-priority
                         :initform (common-lisp:error ":priority is required"))
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %update-job-priority-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-job-priority-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-job-priority-request
                    'make-update-job-priority-request))
 (common-lisp:defun make-update-job-priority-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key priority job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-priority-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-priority-result common-lisp:nil
                       ((priority :initarg :priority :type
                         (common-lisp:or job-priority common-lisp:null)
                         :accessor %update-job-priority-result-priority
                         :initform (common-lisp:error ":priority is required"))
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %update-job-priority-result-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-job-priority-result
                    'make-update-job-priority-result))
 (common-lisp:defun make-update-job-priority-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key priority job-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-priority-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-priority-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-status-request common-lisp:nil
                       ((status-update-reason :initarg :status-update-reason
                         :type
                         (common-lisp:or job-status-update-reason
                                         common-lisp:null)
                         :accessor
                         %update-job-status-request-status-update-reason
                         :initform common-lisp:nil)
                        (requested-job-status :initarg :requested-job-status
                         :type
                         (common-lisp:or requested-job-status common-lisp:null)
                         :accessor
                         %update-job-status-request-requested-job-status
                         :initform
                         (common-lisp:error
                          ":requested-job-status is required"))
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %update-job-status-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-job-status-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-job-status-request
                    'make-update-job-status-request))
 (common-lisp:defun make-update-job-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-update-reason requested-job-status
                     job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:cons "x-amz-account-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-status-result common-lisp:nil
                       ((status-update-reason :initarg :status-update-reason
                         :type
                         (common-lisp:or job-status-update-reason
                                         common-lisp:null)
                         :accessor
                         %update-job-status-result-status-update-reason
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %update-job-status-result-status :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %update-job-status-result-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-job-status-result 'make-update-job-status-result))
 (common-lisp:defun make-update-job-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-update-reason status job-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-reason))
      (common-lisp:list
       (common-lisp:cons "StatusUpdateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass versioning-configuration common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or bucket-versioning-status
                                         common-lisp:null)
                         :accessor %versioning-configuration-status :initform
                         common-lisp:nil)
                        (mfadelete :initarg :mfadelete :type
                         (common-lisp:or mfadelete common-lisp:null) :accessor
                         %versioning-configuration-mfadelete :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'versioning-configuration 'make-versioning-configuration))
 (common-lisp:defun make-versioning-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status mfadelete)
   (common-lisp:apply #'common-lisp:make-instance 'versioning-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-configuration common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %vpc-configuration-vpc-id :initform
                         (common-lisp:error ":vpc-id is required"))))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defun make-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name bucket vpc-configuration
                     public-access-block-configuration bucket-account-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id name bucket vpc-configuration
     public-access-block-configuration bucket-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-point))
(common-lisp:progn
 (common-lisp:defun create-access-point-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name configuration)
   (common-lisp:declare (common-lisp:ignorable account-id name configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-access-point-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateAccessPointForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-point-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun create-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket create-bucket-configuration
                     grant-full-control grant-read grant-read-acp grant-write
                     grant-write-acp object-lock-enabled-for-bucket outpost-id)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket create-bucket-configuration
     grant-full-control grant-read grant-read-acp grant-write grant-write-acp
     object-lock-enabled-for-bucket outpost-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateBucket"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bucket))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id confirmation-required
                     operation report client-request-token manifest description
                     priority role-arn tags manifest-generator)
   (common-lisp:declare
    (common-lisp:ignorable account-id confirmation-required operation report
     client-request-token manifest description priority role-arn tags
     manifest-generator))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/v20180820/jobs"
                                                        "CreateJob"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-multi-region-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id client-token details)
   (common-lisp:declare
    (common-lisp:ignorable account-id client-token details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-multi-region-access-point-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/v20180820/async-requests/mrap/create"
                                                        "CreateMultiRegionAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-multi-region-access-point))
(common-lisp:progn
 (common-lisp:defun delete-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-point))
(common-lisp:progn
 (common-lisp:defun delete-access-point-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-access-point-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAccessPointForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-point-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun delete-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-access-point-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-point-policy))
(common-lisp:progn
 (common-lisp:defun delete-access-point-policy-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-access-point-policy-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAccessPointPolicyForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-point-policy-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun delete-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucket"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket))
(common-lisp:progn
 (common-lisp:defun delete-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/lifecycleconfiguration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucketLifecycleConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucketPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-policy))
(common-lisp:progn
 (common-lisp:defun delete-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-replication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucketReplication"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-replication))
(common-lisp:progn
 (common-lisp:defun delete-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBucketTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun delete-job-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id)
   (common-lisp:declare (common-lisp:ignorable account-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteJobTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-job-tagging))
(common-lisp:progn
 (common-lisp:defun delete-multi-region-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id client-token details)
   (common-lisp:declare
    (common-lisp:ignorable account-id client-token details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-multi-region-access-point-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/v20180820/async-requests/mrap/delete"
                                                        "DeleteMultiRegionAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-multi-region-access-point))
(common-lisp:progn
 (common-lisp:defun delete-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-public-access-block-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        "/v20180820/configuration/publicAccessBlock"
                                                        "DeletePublicAccessBlock"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-public-access-block))
(common-lisp:progn
 (common-lisp:defun delete-storage-lens-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id)
   (common-lisp:declare (common-lisp:ignorable config-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-storage-lens-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "DeleteStorageLensConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-storage-lens-configuration))
(common-lisp:progn
 (common-lisp:defun delete-storage-lens-configuration-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id)
   (common-lisp:declare (common-lisp:ignorable config-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-storage-lens-configuration-tagging-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "DeleteStorageLensConfigurationTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-storage-lens-configuration-tagging))
(common-lisp:progn
 (common-lisp:defun describe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id)
   (common-lisp:declare (common-lisp:ignorable account-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DescribeJob"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-job))
(common-lisp:progn
 (common-lisp:defun describe-multi-region-access-point-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id request-token-arn)
   (common-lisp:declare (common-lisp:ignorable account-id request-token-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-multi-region-access-point-operation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/async-requests/mrap/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'request-token)))
                                                        "DescribeMultiRegionAccessPointOperation"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-multi-region-access-point-operation))
(common-lisp:progn
 (common-lisp:defun get-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point))
(common-lisp:progn
 (common-lisp:defun get-access-point-configuration-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-configuration-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointConfigurationForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-configuration-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun get-access-point-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun get-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-point-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-policy))
(common-lisp:progn
 (common-lisp:defun get-access-point-policy-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-policy-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointPolicyForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-policy-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun get-access-point-policy-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-policy-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A/policyStatus"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointPolicyStatus"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-policy-status))
(common-lisp:progn
 (common-lisp:defun get-access-point-policy-status-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-point-policy-status-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/policyStatus"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAccessPointPolicyStatusForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-point-policy-status-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun get-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucket"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket))
(common-lisp:progn
 (common-lisp:defun get-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/lifecycleconfiguration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketLifecycleConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-policy))
(common-lisp:progn
 (common-lisp:defun get-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketReplication"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-replication))
(common-lisp:progn
 (common-lisp:defun get-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun get-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket)
   (common-lisp:declare (common-lisp:ignorable account-id bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBucketVersioning"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun get-job-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id)
   (common-lisp:declare (common-lisp:ignorable account-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetJobTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-tagging))
(common-lisp:progn
 (common-lisp:defun get-multi-region-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-multi-region-access-point-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'name)))
                                                        "GetMultiRegionAccessPoint"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multi-region-access-point))
(common-lisp:progn
 (common-lisp:defun get-multi-region-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-multi-region-access-point-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A/policy"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'name)))
                                                        "GetMultiRegionAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multi-region-access-point-policy))
(common-lisp:progn
 (common-lisp:defun get-multi-region-access-point-policy-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name)
   (common-lisp:declare (common-lisp:ignorable account-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-multi-region-access-point-policy-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A/policystatus"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'name)))
                                                        "GetMultiRegionAccessPointPolicyStatus"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multi-region-access-point-policy-status))
(common-lisp:progn
 (common-lisp:defun get-multi-region-access-point-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id mrap)
   (common-lisp:declare (common-lisp:ignorable account-id mrap))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-multi-region-access-point-routes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A/routes"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'mrap)))
                                                        "GetMultiRegionAccessPointRoutes"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multi-region-access-point-routes))
(common-lisp:progn
 (common-lisp:defun get-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/configuration/publicAccessBlock"
                                                        "GetPublicAccessBlock"
                                                        "2018-08-20"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-public-access-block))
(common-lisp:progn
 (common-lisp:defun get-storage-lens-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id)
   (common-lisp:declare (common-lisp:ignorable config-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-storage-lens-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "GetStorageLensConfiguration"
                                                        "2018-08-20"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-storage-lens-configuration))
(common-lisp:progn
 (common-lisp:defun get-storage-lens-configuration-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id)
   (common-lisp:declare (common-lisp:ignorable config-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-storage-lens-configuration-tagging-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "GetStorageLensConfigurationTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-storage-lens-configuration-tagging))
(common-lisp:progn
 (common-lisp:defun list-access-points
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-points-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/accesspoint"
                                                        "ListAccessPoints"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-points))
(common-lisp:progn
 (common-lisp:defun list-access-points-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-access-points-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/accesspointforobjectlambda"
                                                        "ListAccessPointsForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-points-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-statuses next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable account-id job-statuses next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/jobs"
                                                        "ListJobs"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-multi-region-access-points
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-multi-region-access-points-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/mrap/instances"
                                                        "ListMultiRegionAccessPoints"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multi-region-access-points))
(common-lisp:progn
 (common-lisp:defun list-regional-buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id next-token max-results
                     outpost-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id next-token max-results outpost-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-regional-buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/bucket"
                                                        "ListRegionalBuckets"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-regional-buckets))
(common-lisp:progn
 (common-lisp:defun list-storage-lens-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id next-token)
   (common-lisp:declare (common-lisp:ignorable account-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-storage-lens-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/v20180820/storagelens"
                                                        "ListStorageLensConfigurations"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-storage-lens-configurations))
(common-lisp:progn
 (common-lisp:defun put-access-point-configuration-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name configuration)
   (common-lisp:declare (common-lisp:ignorable account-id name configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-access-point-configuration-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutAccessPointConfigurationForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-access-point-configuration-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun put-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name policy)
   (common-lisp:declare (common-lisp:ignorable account-id name policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-access-point-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspoint/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-access-point-policy))
(common-lisp:progn
 (common-lisp:defun put-access-point-policy-for-object-lambda
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id name policy)
   (common-lisp:declare (common-lisp:ignorable account-id name policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-access-point-policy-for-object-lambda-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/accesspointforobjectlambda/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutAccessPointPolicyForObjectLambda"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-access-point-policy-for-object-lambda))
(common-lisp:progn
 (common-lisp:defun put-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket
                     lifecycle-configuration)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket lifecycle-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/lifecycleconfiguration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketLifecycleConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket
                     confirm-remove-self-bucket-access policy)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket confirm-remove-self-bucket-access
     policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-policy))
(common-lisp:progn
 (common-lisp:defun put-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket
                     replication-configuration)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket replication-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketReplication"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-replication))
(common-lisp:progn
 (common-lisp:defun put-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket tagging)
   (common-lisp:declare (common-lisp:ignorable account-id bucket tagging))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun put-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id bucket mfa
                     versioning-configuration)
   (common-lisp:declare
    (common-lisp:ignorable account-id bucket mfa versioning-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/bucket/~A/versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBucketVersioning"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun put-job-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id tags)
   (common-lisp:declare (common-lisp:ignorable account-id job-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-job-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "PutJobTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-job-tagging))
(common-lisp:progn
 (common-lisp:defun put-multi-region-access-point-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id client-token details)
   (common-lisp:declare
    (common-lisp:ignorable account-id client-token details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-multi-region-access-point-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/v20180820/async-requests/mrap/put-policy"
                                                        "PutMultiRegionAccessPointPolicy"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-multi-region-access-point-policy))
(common-lisp:progn
 (common-lisp:defun put-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key public-access-block-configuration
                     account-id)
   (common-lisp:declare
    (common-lisp:ignorable public-access-block-configuration account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        "/v20180820/configuration/publicAccessBlock"
                                                        "PutPublicAccessBlock"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-public-access-block))
(common-lisp:progn
 (common-lisp:defun put-storage-lens-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id
                     storage-lens-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable config-id account-id storage-lens-configuration
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-storage-lens-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "PutStorageLensConfiguration"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-storage-lens-configuration))
(common-lisp:progn
 (common-lisp:defun put-storage-lens-configuration-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id account-id tags)
   (common-lisp:declare (common-lisp:ignorable config-id account-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-storage-lens-configuration-tagging-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/storagelens/~A/tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'storagelensid))))
                                                        "PutStorageLensConfigurationTagging"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-storage-lens-configuration-tagging))
(common-lisp:progn
 (common-lisp:defun submit-multi-region-access-point-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id mrap route-updates)
   (common-lisp:declare (common-lisp:ignorable account-id mrap route-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-submit-multi-region-access-point-routes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/mrap/instances/~A/routes"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'mrap)))
                                                        "SubmitMultiRegionAccessPointRoutes"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'submit-multi-region-access-point-routes))
(common-lisp:progn
 (common-lisp:defun update-job-priority
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id priority)
   (common-lisp:declare (common-lisp:ignorable account-id job-id priority))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-priority-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/priority"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateJobPriority"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job-priority))
(common-lisp:progn
 (common-lisp:defun update-job-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id requested-job-status
                     status-update-reason)
   (common-lisp:declare
    (common-lisp:ignorable account-id job-id requested-job-status
     status-update-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3control-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20180820/jobs/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateJobStatus"
                                                        "2018-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job-status))
