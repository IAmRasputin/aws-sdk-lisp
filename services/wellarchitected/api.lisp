;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/wellarchitected/api
  (:use)
  (:nicknames #:aws/wellarchitected)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/wellarchitected/api)
(common-lisp:progn
 (common-lisp:define-condition wellarchitected-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'wellarchitected-error))
(common-lisp:progn
 (common-lisp:defclass wellarchitected-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "wellarchitected"
                        :api-version "2020-03-31" :host-prefix
                        "wellarchitected" :signing-name "wellarchitected"
                        :global-host common-lisp:nil))
 (common-lisp:export 'wellarchitected-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype account-summary () 'common-lisp:hash-table)
 (common-lisp:defun make-account-summary (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype additional-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (additional-resources (:copier common-lisp:nil)
      (:conc-name "struct-shape-additional-resources-"))
   (type common-lisp:nil :type
    (common-lisp:or additional-resource-type common-lisp:null))
   (content common-lisp:nil :type (common-lisp:or urls common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'additional-resources 'make-additional-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input additional-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input additional-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input additional-resources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-resources-list ()
   '(trivial-types:proper-list additional-resources))
 (common-lisp:defun make-additional-resources-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-resources))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (answer (:copier common-lisp:nil) (:conc-name "struct-shape-answer-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (question-title common-lisp:nil :type
    (common-lisp:or question-title common-lisp:null))
   (question-description common-lisp:nil :type
    (common-lisp:or question-description common-lisp:null))
   (improvement-plan-url common-lisp:nil :type
    (common-lisp:or improvement-plan-url common-lisp:null))
   (helpful-resource-url common-lisp:nil :type
    (common-lisp:or helpful-resource-url common-lisp:null))
   (helpful-resource-display-text common-lisp:nil :type
    (common-lisp:or display-text common-lisp:null))
   (choices common-lisp:nil :type (common-lisp:or choices common-lisp:null))
   (selected-choices common-lisp:nil :type
    (common-lisp:or selected-choices common-lisp:null))
   (choice-answers common-lisp:nil :type
    (common-lisp:or choice-answers common-lisp:null))
   (is-applicable common-lisp:nil :type
    (common-lisp:or is-applicable common-lisp:null))
   (risk common-lisp:nil :type (common-lisp:or risk common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or answer-reason common-lisp:null)))
 (common-lisp:export (common-lisp:list 'answer 'make-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-description))
      (common-lisp:list
       (common-lisp:cons "QuestionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-plan-url))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlanUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'helpful-resource-url))
      (common-lisp:list
       (common-lisp:cons "HelpfulResourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'helpful-resource-display-text))
      (common-lisp:list
       (common-lisp:cons "HelpfulResourceDisplayText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choices))
      (common-lisp:list
       (common-lisp:cons "Choices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-answers))
      (common-lisp:list
       (common-lisp:cons "ChoiceAnswers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk))
      (common-lisp:list
       (common-lisp:cons "Risk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input answer))
   common-lisp:nil))
(common-lisp:deftype answer-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype answer-summaries ()
   '(trivial-types:proper-list answer-summary))
 (common-lisp:defun make-answer-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list answer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (answer-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-answer-summary-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (question-title common-lisp:nil :type
    (common-lisp:or question-title common-lisp:null))
   (choices common-lisp:nil :type (common-lisp:or choices common-lisp:null))
   (selected-choices common-lisp:nil :type
    (common-lisp:or selected-choices common-lisp:null))
   (choice-answer-summaries common-lisp:nil :type
    (common-lisp:or choice-answer-summaries common-lisp:null))
   (is-applicable common-lisp:nil :type
    (common-lisp:or is-applicable common-lisp:null))
   (risk common-lisp:nil :type (common-lisp:or risk common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or answer-reason common-lisp:null))
   (question-type common-lisp:nil :type
    (common-lisp:or question-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'answer-summary 'make-answer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input answer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input answer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choices))
      (common-lisp:list
       (common-lisp:cons "Choices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'choice-answer-summaries))
      (common-lisp:list
       (common-lisp:cons "ChoiceAnswerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk))
      (common-lisp:list
       (common-lisp:cons "Risk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-type))
      (common-lisp:list
       (common-lisp:cons "QuestionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input answer-summary))
   common-lisp:nil))
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-lenses-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-lenses-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-aliases (common-lisp:error ":lens-aliases is required") :type
    (common-lisp:or lens-aliases common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-lenses-input 'make-associate-lenses-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-lenses-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-lenses-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-aliases))
      (common-lisp:list
       (common-lisp:cons "LensAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-lenses-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-profiles-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-profiles-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (profile-arns (common-lisp:error ":profile-arns is required") :type
    (common-lisp:or profile-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-profiles-input 'make-associate-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-profiles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arns))
      (common-lisp:list
       (common-lisp:cons "ProfileArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-profiles-input))
   common-lisp:nil))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-region () 'common-lisp:string)
(common-lisp:deftype base64string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (best-practice (:copier common-lisp:nil)
      (:conc-name "struct-shape-best-practice-"))
   (choice-id common-lisp:nil :type
    (common-lisp:or choice-id common-lisp:null))
   (choice-title common-lisp:nil :type
    (common-lisp:or choice-title common-lisp:null)))
 (common-lisp:export (common-lisp:list 'best-practice 'make-best-practice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input best-practice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input best-practice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-title))
      (common-lisp:list
       (common-lisp:cons "ChoiceTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input best-practice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype best-practices ()
   '(trivial-types:proper-list best-practice))
 (common-lisp:defun make-best-practices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list best-practice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype check-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (check-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-detail-"))
   (id common-lisp:nil :type (common-lisp:or check-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or check-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or check-description common-lisp:null))
   (provider common-lisp:nil :type
    (common-lisp:or check-provider common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (choice-id common-lisp:nil :type
    (common-lisp:or choice-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or check-status common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (flagged-resources common-lisp:nil :type
    (common-lisp:or flagged-resources common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or check-failure-reason common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'check-detail 'make-check-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input check-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input check-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flagged-resources))
      (common-lisp:list
       (common-lisp:cons "FlaggedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input check-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype check-details ()
   '(trivial-types:proper-list check-detail))
 (common-lisp:defun make-check-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list check-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype check-failure-reason () 'common-lisp:string)
(common-lisp:deftype check-id () 'common-lisp:string)
(common-lisp:deftype check-name () 'common-lisp:string)
(common-lisp:deftype check-provider () 'common-lisp:string)
(common-lisp:deftype check-status () 'common-lisp:string)
(common-lisp:deftype check-status-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype check-summaries ()
   '(trivial-types:proper-list check-summary))
 (common-lisp:defun make-check-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list check-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (check-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-summary-"))
   (id common-lisp:nil :type (common-lisp:or check-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or check-name common-lisp:null))
   (provider common-lisp:nil :type
    (common-lisp:or check-provider common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or check-description common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (choice-id common-lisp:nil :type
    (common-lisp:or choice-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or check-status common-lisp:null))
   (account-summary common-lisp:nil :type
    (common-lisp:or account-summary common-lisp:null)))
 (common-lisp:export (common-lisp:list 'check-summary 'make-check-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input check-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input check-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-summary))
      (common-lisp:list
       (common-lisp:cons "AccountSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input check-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (choice (:copier common-lisp:nil) (:conc-name "struct-shape-choice-"))
   (choice-id common-lisp:nil :type
    (common-lisp:or choice-id common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or choice-title common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or choice-description common-lisp:null))
   (helpful-resource common-lisp:nil :type
    (common-lisp:or choice-content common-lisp:null))
   (improvement-plan common-lisp:nil :type
    (common-lisp:or choice-content common-lisp:null))
   (additional-resources common-lisp:nil :type
    (common-lisp:or additional-resources-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'choice 'make-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'helpful-resource))
      (common-lisp:list
       (common-lisp:cons "HelpfulResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-plan))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-resources))
      (common-lisp:list
       (common-lisp:cons "AdditionalResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input choice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (choice-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-choice-answer-"))
   (choice-id common-lisp:nil :type
    (common-lisp:or choice-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or choice-status common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or choice-reason common-lisp:null))
   (notes common-lisp:nil :type
    (common-lisp:or choice-notes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'choice-answer 'make-choice-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input choice-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input choice-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input choice-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype choice-answer-summaries ()
   '(trivial-types:proper-list choice-answer-summary))
 (common-lisp:defun make-choice-answer-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-answer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (choice-answer-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-choice-answer-summary-"))
   (choice-id common-lisp:nil :type
    (common-lisp:or choice-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or choice-status common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or choice-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'choice-answer-summary 'make-choice-answer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          choice-answer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          choice-answer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          choice-answer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype choice-answers ()
   '(trivial-types:proper-list choice-answer))
 (common-lisp:defun make-choice-answers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-answer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (choice-content (:copier common-lisp:nil)
      (:conc-name "struct-shape-choice-content-"))
   (display-text common-lisp:nil :type
    (common-lisp:or choice-content-display-text common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or choice-content-url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'choice-content 'make-choice-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input choice-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input choice-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-text))
      (common-lisp:list
       (common-lisp:cons "DisplayText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input choice-content))
   common-lisp:nil))
(common-lisp:deftype choice-content-display-text () 'common-lisp:string)
(common-lisp:deftype choice-content-url () 'common-lisp:string)
(common-lisp:deftype choice-description () 'common-lisp:string)
(common-lisp:deftype choice-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (choice-improvement-plan (:copier common-lisp:nil)
      (:conc-name "struct-shape-choice-improvement-plan-"))
   (choice-id common-lisp:nil :type
    (common-lisp:or choice-id common-lisp:null))
   (display-text common-lisp:nil :type
    (common-lisp:or display-text common-lisp:null))
   (improvement-plan-url common-lisp:nil :type
    (common-lisp:or improvement-plan-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'choice-improvement-plan 'make-choice-improvement-plan))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          choice-improvement-plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          choice-improvement-plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-text))
      (common-lisp:list
       (common-lisp:cons "DisplayText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-plan-url))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlanUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          choice-improvement-plan))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype choice-improvement-plans ()
   '(trivial-types:proper-list choice-improvement-plan))
 (common-lisp:defun make-choice-improvement-plans
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-improvement-plan))
   aws-sdk/generator/shape::members))
(common-lisp:deftype choice-notes () 'common-lisp:string)
(common-lisp:deftype choice-reason () 'common-lisp:string)
(common-lisp:deftype choice-status () 'common-lisp:string)
(common-lisp:deftype choice-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (choice-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-choice-update-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or choice-status common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or choice-reason common-lisp:null))
   (notes common-lisp:nil :type
    (common-lisp:or choice-notes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'choice-update 'make-choice-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input choice-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input choice-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input choice-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype choice-updates () 'common-lisp:hash-table)
 (common-lisp:defun make-choice-updates (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype choices () '(trivial-types:proper-list choice))
 (common-lisp:defun make-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (consolidated-report-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-consolidated-report-metric-"))
   (metric-type common-lisp:nil :type
    (common-lisp:or metric-type common-lisp:null))
   (risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (workload-arn common-lisp:nil :type
    (common-lisp:or workload-arn common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (lenses common-lisp:nil :type
    (common-lisp:or lens-metrics common-lisp:null))
   (lenses-applied-count common-lisp:nil :type
    (common-lisp:or lenses-applied-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'consolidated-report-metric
                    'make-consolidated-report-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          consolidated-report-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          consolidated-report-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "MetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-arn))
      (common-lisp:list
       (common-lisp:cons "WorkloadArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lenses-applied-count))
      (common-lisp:list
       (common-lisp:cons "LensesAppliedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          consolidated-report-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype consolidated-report-metrics ()
   '(trivial-types:proper-list consolidated-report-metric))
 (common-lisp:defun make-consolidated-report-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            consolidated-report-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-lens-share-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lens-share-input-"))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (shared-with (common-lisp:error ":shared-with is required") :type
    (common-lisp:or shared-with common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lens-share-input 'make-create-lens-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lens-share-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lens-share-output-"))
   (share-id common-lisp:nil :type (common-lisp:or share-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lens-share-output 'make-create-lens-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lens-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lens-version-input-"))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-version (common-lisp:error ":lens-version is required") :type
    (common-lisp:or lens-version common-lisp:null))
   (is-major-version common-lisp:nil :type
    (common-lisp:or is-major-version common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lens-version-input
                    'make-create-lens-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-major-version))
      (common-lisp:list
       (common-lisp:cons "IsMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lens-version-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lens-version-output-"))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lens-version-output
                    'make-create-lens-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-milestone-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-milestone-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-name (common-lisp:error ":milestone-name is required") :type
    (common-lisp:or milestone-name common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-milestone-input 'make-create-milestone-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-milestone-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-milestone-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-milestone-output 'make-create-milestone-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-input-"))
   (profile-name (common-lisp:error ":profile-name is required") :type
    (common-lisp:or profile-name common-lisp:null))
   (profile-description (common-lisp:error ":profile-description is required")
    :type (common-lisp:or profile-description common-lisp:null))
   (profile-questions (common-lisp:error ":profile-questions is required")
    :type (common-lisp:or profile-question-updates common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-input 'make-create-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-description))
      (common-lisp:list
       (common-lisp:cons "ProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-questions))
      (common-lisp:list
       (common-lisp:cons "ProfileQuestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-output-"))
   (profile-arn common-lisp:nil :type
    (common-lisp:or profile-arn common-lisp:null))
   (profile-version common-lisp:nil :type
    (common-lisp:or profile-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-output 'make-create-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-version))
      (common-lisp:list
       (common-lisp:cons "ProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-share-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-share-input-"))
   (profile-arn (common-lisp:error ":profile-arn is required") :type
    (common-lisp:or profile-arn common-lisp:null))
   (shared-with (common-lisp:error ":shared-with is required") :type
    (common-lisp:or shared-with common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-share-input
                    'make-create-profile-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-share-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-share-output-"))
   (share-id common-lisp:nil :type (common-lisp:or share-id common-lisp:null))
   (profile-arn common-lisp:nil :type
    (common-lisp:or profile-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-share-output
                    'make-create-profile-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-review-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-review-template-input-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or template-name common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or template-description common-lisp:null))
   (lenses (common-lisp:error ":lenses is required") :type
    (common-lisp:or review-template-lenses common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-review-template-input
                    'make-create-review-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-review-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-review-template-output-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-review-template-output
                    'make-create-review-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-share-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-share-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (shared-with (common-lisp:error ":shared-with is required") :type
    (common-lisp:or shared-with common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-share-input
                    'make-create-template-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-share-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-share-output-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (share-id common-lisp:nil :type (common-lisp:or share-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-share-output
                    'make-create-template-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workload-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workload-input-"))
   (workload-name (common-lisp:error ":workload-name is required") :type
    (common-lisp:or workload-name common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or workload-description common-lisp:null))
   (environment (common-lisp:error ":environment is required") :type
    (common-lisp:or workload-environment common-lisp:null))
   (account-ids common-lisp:nil :type
    (common-lisp:or workload-account-ids common-lisp:null))
   (aws-regions common-lisp:nil :type
    (common-lisp:or workload-aws-regions common-lisp:null))
   (non-aws-regions common-lisp:nil :type
    (common-lisp:or workload-non-aws-regions common-lisp:null))
   (pillar-priorities common-lisp:nil :type
    (common-lisp:or workload-pillar-priorities common-lisp:null))
   (architectural-design common-lisp:nil :type
    (common-lisp:or workload-architectural-design common-lisp:null))
   (review-owner common-lisp:nil :type
    (common-lisp:or workload-review-owner common-lisp:null))
   (industry-type common-lisp:nil :type
    (common-lisp:or workload-industry-type common-lisp:null))
   (industry common-lisp:nil :type
    (common-lisp:or workload-industry common-lisp:null))
   (lenses (common-lisp:error ":lenses is required") :type
    (common-lisp:or workload-lenses common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (discovery-config common-lisp:nil :type
    (common-lisp:or workload-discovery-config common-lisp:null))
   (applications common-lisp:nil :type
    (common-lisp:or workload-applications common-lisp:null))
   (profile-arns common-lisp:nil :type
    (common-lisp:or workload-profile-arns common-lisp:null))
   (review-template-arns common-lisp:nil :type
    (common-lisp:or review-template-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workload-input 'make-create-workload-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-regions))
      (common-lisp:list
       (common-lisp:cons "AwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-aws-regions))
      (common-lisp:list
       (common-lisp:cons "NonAwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-priorities))
      (common-lisp:list
       (common-lisp:cons "PillarPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'architectural-design))
      (common-lisp:list
       (common-lisp:cons "ArchitecturalDesign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-owner))
      (common-lisp:list
       (common-lisp:cons "ReviewOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry-type))
      (common-lisp:list
       (common-lisp:cons "IndustryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry))
      (common-lisp:list
       (common-lisp:cons "Industry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-config))
      (common-lisp:list
       (common-lisp:cons "DiscoveryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arns))
      (common-lisp:list
       (common-lisp:cons "ProfileArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'review-template-arns))
      (common-lisp:list
       (common-lisp:cons "ReviewTemplateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workload-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workload-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-arn common-lisp:nil :type
    (common-lisp:or workload-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workload-output 'make-create-workload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-arn))
      (common-lisp:list
       (common-lisp:cons "WorkloadArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workload-share-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workload-share-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (shared-with (common-lisp:error ":shared-with is required") :type
    (common-lisp:or shared-with common-lisp:null))
   (permission-type (common-lisp:error ":permission-type is required") :type
    (common-lisp:or permission-type common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workload-share-input
                    'make-create-workload-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workload-share-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workload-share-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (share-id common-lisp:nil :type (common-lisp:or share-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workload-share-output
                    'make-create-workload-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-output))
   common-lisp:nil))
(common-lisp:deftype definition-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lens-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lens-input-"))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null))
   (lens-status (common-lisp:error ":lens-status is required") :type
    (common-lisp:or lens-status-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lens-input 'make-delete-lens-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-lens-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lens-share-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lens-share-input-"))
   (share-id (common-lisp:error ":share-id is required") :type
    (common-lisp:or share-id common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lens-share-input 'make-delete-lens-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lens-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lens-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lens-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-input-"))
   (profile-arn (common-lisp:error ":profile-arn is required") :type
    (common-lisp:or profile-arn common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-input 'make-delete-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-share-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-share-input-"))
   (share-id (common-lisp:error ":share-id is required") :type
    (common-lisp:or share-id common-lisp:null))
   (profile-arn (common-lisp:error ":profile-arn is required") :type
    (common-lisp:or profile-arn common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-share-input
                    'make-delete-profile-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-review-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-review-template-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-review-template-input
                    'make-delete-review-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-review-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-template-share-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-template-share-input-"))
   (share-id (common-lisp:error ":share-id is required") :type
    (common-lisp:or share-id common-lisp:null))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-template-share-input
                    'make-delete-template-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workload-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workload-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workload-input 'make-delete-workload-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workload-share-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workload-share-input-"))
   (share-id (common-lisp:error ":share-id is required") :type
    (common-lisp:or share-id common-lisp:null))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workload-share-input
                    'make-delete-workload-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-share-input))
   common-lisp:nil))
(common-lisp:deftype difference-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-lenses-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-lenses-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-aliases (common-lisp:error ":lens-aliases is required") :type
    (common-lisp:or lens-aliases common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-lenses-input
                    'make-disassociate-lenses-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lenses-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lenses-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-aliases))
      (common-lisp:list
       (common-lisp:cons "LensAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lenses-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-profiles-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-profiles-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (profile-arns (common-lisp:error ":profile-arns is required") :type
    (common-lisp:or profile-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-profiles-input
                    'make-disassociate-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-profiles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arns))
      (common-lisp:list
       (common-lisp:cons "ProfileArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-profiles-input))
   common-lisp:nil))
(common-lisp:deftype discovery-integration-status () 'common-lisp:string)
(common-lisp:deftype display-text () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype exception-resource-id () 'common-lisp:string)
(common-lisp:deftype exception-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-lens-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-lens-input-"))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-lens-input 'make-export-lens-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-lens-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-lens-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-lens-output-"))
   (lens-json common-lisp:nil :type
    (common-lisp:or lens-json common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-lens-output 'make-export-lens-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-lens-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-lens-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-json))
      (common-lisp:list
       (common-lisp:cons "LensJSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-lens-output))
   common-lisp:nil))
(common-lisp:deftype flagged-resources () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-answer-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-answer-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (question-id (common-lisp:error ":question-id is required") :type
    (common-lisp:or question-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-answer-input 'make-get-answer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-answer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-answer-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-answer-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (answer common-lisp:nil :type (common-lisp:or answer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-answer-output 'make-get-answer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-answer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-answer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-answer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-consolidated-report-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-consolidated-report-input-"))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or report-format common-lisp:null))
   (include-shared-resources common-lisp:nil :type
    (common-lisp:or include-shared-resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or get-consolidated-report-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-consolidated-report-input
                    'make-get-consolidated-report-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-input))
   common-lisp:nil))
(common-lisp:deftype get-consolidated-report-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-consolidated-report-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-consolidated-report-output-"))
   (metrics common-lisp:nil :type
    (common-lisp:or consolidated-report-metrics common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (base64string common-lisp:nil :type
    (common-lisp:or base64string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-consolidated-report-output
                    'make-get-consolidated-report-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base64string))
      (common-lisp:list
       (common-lisp:cons "Base64String"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lens-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lens-input-"))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-lens-input 'make-get-lens-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lens-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lens-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lens-output-"))
   (lens common-lisp:nil :type (common-lisp:or lens common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-lens-output 'make-get-lens-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lens-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lens-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens))
      (common-lisp:list
       (common-lisp:cons "Lens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lens-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lens-review-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lens-review-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lens-review-input 'make-get-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lens-review-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lens-review-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (lens-review common-lisp:nil :type
    (common-lisp:or lens-review common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lens-review-output 'make-get-lens-review-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review))
      (common-lisp:list
       (common-lisp:cons "LensReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lens-review-report-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lens-review-report-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lens-review-report-input
                    'make-get-lens-review-report-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lens-review-report-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lens-review-report-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (lens-review-report common-lisp:nil :type
    (common-lisp:or lens-review-report common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lens-review-report-output
                    'make-get-lens-review-report-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review-report))
      (common-lisp:list
       (common-lisp:cons "LensReviewReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lens-version-difference-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lens-version-difference-input-"))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (base-lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (target-lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lens-version-difference-input
                    'make-get-lens-version-difference-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lens-version-difference-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lens-version-difference-output-"))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (base-lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (target-lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (latest-lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (version-differences common-lisp:nil :type
    (common-lisp:or version-differences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lens-version-difference-output
                    'make-get-lens-version-difference-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-lens-version))
      (common-lisp:list
       (common-lisp:cons "BaseLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-lens-version))
      (common-lisp:list
       (common-lisp:cons "TargetLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-lens-version))
      (common-lisp:list
       (common-lisp:cons "LatestLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-differences))
      (common-lisp:list
       (common-lisp:cons "VersionDifferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-milestone-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-milestone-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-number (common-lisp:error ":milestone-number is required") :type
    (common-lisp:or milestone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-milestone-input 'make-get-milestone-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-milestone-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-milestone-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-milestone-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-milestone-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-milestone-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone common-lisp:nil :type
    (common-lisp:or milestone common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-milestone-output 'make-get-milestone-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-milestone-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-milestone-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone))
      (common-lisp:list
       (common-lisp:cons "Milestone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-milestone-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-input-"))
   (profile-arn (common-lisp:error ":profile-arn is required") :type
    (common-lisp:or profile-arn common-lisp:null))
   (profile-version common-lisp:nil :type
    (common-lisp:or profile-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-profile-input 'make-get-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-output-"))
   (profile common-lisp:nil :type (common-lisp:or profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-profile-output 'make-get-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-template-input-")))
 (common-lisp:export
  (common-lisp:list 'get-profile-template-input
                    'make-get-profile-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-template-output-"))
   (profile-template common-lisp:nil :type
    (common-lisp:or profile-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-profile-template-output
                    'make-get-profile-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-template))
      (common-lisp:list
       (common-lisp:cons "ProfileTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-review-template-answer-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-review-template-answer-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (question-id (common-lisp:error ":question-id is required") :type
    (common-lisp:or question-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-review-template-answer-input
                    'make-get-review-template-answer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-review-template-answer-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-review-template-answer-output-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (answer common-lisp:nil :type
    (common-lisp:or review-template-answer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-review-template-answer-output
                    'make-get-review-template-answer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-review-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-review-template-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-review-template-input
                    'make-get-review-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-review-template-lens-review-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-review-template-lens-review-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-review-template-lens-review-input
                    'make-get-review-template-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-review-template-lens-review-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-review-template-lens-review-output-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-review common-lisp:nil :type
    (common-lisp:or review-template-lens-review common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-review-template-lens-review-output
                    'make-get-review-template-lens-review-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review))
      (common-lisp:list
       (common-lisp:cons "LensReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-review-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-review-template-output-"))
   (review-template common-lisp:nil :type
    (common-lisp:or review-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-review-template-output
                    'make-get-review-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-template))
      (common-lisp:list
       (common-lisp:cons "ReviewTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workload-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workload-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workload-input 'make-get-workload-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workload-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workload-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workload-output-"))
   (workload common-lisp:nil :type (common-lisp:or workload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workload-output 'make-get-workload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload))
      (common-lisp:list
       (common-lisp:cons "Workload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workload-output))
   common-lisp:nil))
(common-lisp:deftype helpful-resource-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-lens-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-lens-input-"))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (jsonstring (common-lisp:error ":jsonstring is required") :type
    (common-lisp:or lens-json common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-lens-input 'make-import-lens-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-lens-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jsonstring))
      (common-lisp:list
       (common-lisp:cons "JSONString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-lens-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-lens-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-lens-output-"))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or import-lens-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-lens-output 'make-import-lens-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-lens-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-lens-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-lens-output))
   common-lisp:nil))
(common-lisp:deftype import-lens-status () 'common-lisp:string)
(common-lisp:deftype improvement-plan-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype improvement-summaries ()
   '(trivial-types:proper-list improvement-summary))
 (common-lisp:defun make-improvement-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list improvement-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (improvement-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-improvement-summary-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (question-title common-lisp:nil :type
    (common-lisp:or question-title common-lisp:null))
   (risk common-lisp:nil :type (common-lisp:or risk common-lisp:null))
   (improvement-plan-url common-lisp:nil :type
    (common-lisp:or improvement-plan-url common-lisp:null))
   (improvement-plans common-lisp:nil :type
    (common-lisp:or choice-improvement-plans common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'improvement-summary 'make-improvement-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input improvement-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input improvement-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk))
      (common-lisp:list
       (common-lisp:cons "Risk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-plan-url))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlanUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-plans))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input improvement-summary))
   common-lisp:nil))
(common-lisp:deftype include-shared-resources () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype is-applicable () 'common-lisp:boolean)
(common-lisp:deftype is-major-version () 'common-lisp:boolean)
(common-lisp:deftype is-review-owner-update-acknowledged ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (lens (:copier common-lisp:nil) (:conc-name "struct-shape-lens-"))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or lens-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or lens-description common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or lens-owner common-lisp:null))
   (share-invitation-id common-lisp:nil :type
    (common-lisp:or share-invitation-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lens 'make-lens))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens))
   common-lisp:nil))
(common-lisp:deftype lens-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lens-aliases () '(trivial-types:proper-list lens-alias))
 (common-lisp:defun make-lens-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lens-arn () 'common-lisp:string)
(common-lisp:deftype lens-description () 'common-lisp:string)
(common-lisp:deftype lens-json () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lens-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-lens-metric-"))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (pillars common-lisp:nil :type
    (common-lisp:or pillar-metrics common-lisp:null))
   (risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lens-metric 'make-lens-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillars))
      (common-lisp:list
       (common-lisp:cons "Pillars"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lens-metrics () '(trivial-types:proper-list lens-metric))
 (common-lisp:defun make-lens-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lens-name () 'common-lisp:string)
(common-lisp:deftype lens-name-prefix () 'common-lisp:string)
(common-lisp:deftype lens-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lens-review (:copier common-lisp:nil)
      (:conc-name "struct-shape-lens-review-"))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (lens-name common-lisp:nil :type
    (common-lisp:or lens-name common-lisp:null))
   (lens-status common-lisp:nil :type
    (common-lisp:or lens-status common-lisp:null))
   (pillar-review-summaries common-lisp:nil :type
    (common-lisp:or pillar-review-summaries common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (profiles common-lisp:nil :type
    (common-lisp:or workload-profiles common-lisp:null))
   (prioritized-risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lens-review 'make-lens-review))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-review))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-review))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-status))
      (common-lisp:list
       (common-lisp:cons "LensStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pillar-review-summaries))
      (common-lisp:list
       (common-lisp:cons "PillarReviewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-review))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lens-review-report (:copier common-lisp:nil)
      (:conc-name "struct-shape-lens-review-report-"))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (base64string common-lisp:nil :type
    (common-lisp:or base64string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lens-review-report 'make-lens-review-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-review-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-review-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base64string))
      (common-lisp:list
       (common-lisp:cons "Base64String"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-review-report))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lens-review-summaries ()
   '(trivial-types:proper-list lens-review-summary))
 (common-lisp:defun make-lens-review-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-review-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lens-review-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-lens-review-summary-"))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (lens-name common-lisp:nil :type
    (common-lisp:or lens-name common-lisp:null))
   (lens-status common-lisp:nil :type
    (common-lisp:or lens-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null))
   (profiles common-lisp:nil :type
    (common-lisp:or workload-profiles common-lisp:null))
   (prioritized-risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lens-review-summary 'make-lens-review-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-review-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-review-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-status))
      (common-lisp:list
       (common-lisp:cons "LensStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-review-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lens-share-summaries ()
   '(trivial-types:proper-list lens-share-summary))
 (common-lisp:defun make-lens-share-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-share-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lens-share-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-lens-share-summary-"))
   (share-id common-lisp:nil :type (common-lisp:or share-id common-lisp:null))
   (shared-with common-lisp:nil :type
    (common-lisp:or shared-with common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lens-share-summary 'make-lens-share-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-share-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-share-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-share-summary))
   common-lisp:nil))
(common-lisp:deftype lens-status () 'common-lisp:string)
(common-lisp:deftype lens-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lens-summaries ()
   '(trivial-types:proper-list lens-summary))
 (common-lisp:defun make-lens-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lens-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-lens-summary-"))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-name common-lisp:nil :type
    (common-lisp:or lens-name common-lisp:null))
   (lens-type common-lisp:nil :type
    (common-lisp:or lens-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or lens-description common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (lens-status common-lisp:nil :type
    (common-lisp:or lens-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lens-summary 'make-lens-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-type))
      (common-lisp:list
       (common-lisp:cons "LensType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-status))
      (common-lisp:list
       (common-lisp:cons "LensStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-summary))
   common-lisp:nil))
(common-lisp:deftype lens-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lens-upgrade-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-lens-upgrade-summary-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (current-lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (latest-lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lens-upgrade-summary 'make-lens-upgrade-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-upgrade-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-upgrade-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-lens-version))
      (common-lisp:list
       (common-lisp:cons "CurrentLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-lens-version))
      (common-lisp:list
       (common-lisp:cons "LatestLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-upgrade-summary))
   common-lisp:nil))
(common-lisp:deftype lens-version () 'common-lisp:string)
(common-lisp:deftype lenses-applied-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-answers-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-answers-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-answers-max-results common-lisp:null))
   (question-priority common-lisp:nil :type
    (common-lisp:or question-priority common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-answers-input 'make-list-answers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-answers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-answers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-answers-input))
   common-lisp:nil))
(common-lisp:deftype list-answers-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-answers-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-answers-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (answer-summaries common-lisp:nil :type
    (common-lisp:or answer-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-answers-output 'make-list-answers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-answers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-answers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-summaries))
      (common-lisp:list
       (common-lisp:cons "AnswerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-answers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-check-details-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-check-details-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (lens-arn (common-lisp:error ":lens-arn is required") :type
    (common-lisp:or lens-arn common-lisp:null))
   (pillar-id (common-lisp:error ":pillar-id is required") :type
    (common-lisp:or pillar-id common-lisp:null))
   (question-id (common-lisp:error ":question-id is required") :type
    (common-lisp:or question-id common-lisp:null))
   (choice-id (common-lisp:error ":choice-id is required") :type
    (common-lisp:or choice-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-check-details-input 'make-list-check-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-check-details-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-check-details-output-"))
   (check-details common-lisp:nil :type
    (common-lisp:or check-details common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-check-details-output
                    'make-list-check-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-details))
      (common-lisp:list
       (common-lisp:cons "CheckDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-check-summaries-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-check-summaries-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (lens-arn (common-lisp:error ":lens-arn is required") :type
    (common-lisp:or lens-arn common-lisp:null))
   (pillar-id (common-lisp:error ":pillar-id is required") :type
    (common-lisp:or pillar-id common-lisp:null))
   (question-id (common-lisp:error ":question-id is required") :type
    (common-lisp:or question-id common-lisp:null))
   (choice-id (common-lisp:error ":choice-id is required") :type
    (common-lisp:or choice-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-check-summaries-input
                    'make-list-check-summaries-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-check-summaries-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-check-summaries-output-"))
   (check-summaries common-lisp:nil :type
    (common-lisp:or check-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-check-summaries-output
                    'make-list-check-summaries-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-summaries))
      (common-lisp:list
       (common-lisp:cons "CheckSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lens-review-improvements-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lens-review-improvements-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-lens-review-improvements-max-results
                    common-lisp:null))
   (question-priority common-lisp:nil :type
    (common-lisp:or question-priority common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lens-review-improvements-input
                    'make-list-lens-review-improvements-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-input))
   common-lisp:nil))
(common-lisp:deftype list-lens-review-improvements-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-lens-review-improvements-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lens-review-improvements-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (improvement-summaries common-lisp:nil :type
    (common-lisp:or improvement-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lens-review-improvements-output
                    'make-list-lens-review-improvements-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-summaries))
      (common-lisp:list
       (common-lisp:cons "ImprovementSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lens-reviews-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lens-reviews-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lens-reviews-input 'make-list-lens-reviews-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lens-reviews-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lens-reviews-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (lens-review-summaries common-lisp:nil :type
    (common-lisp:or lens-review-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lens-reviews-output 'make-list-lens-reviews-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lens-review-summaries))
      (common-lisp:list
       (common-lisp:cons "LensReviewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lens-shares-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lens-shares-input-"))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (shared-with-prefix common-lisp:nil :type
    (common-lisp:or shared-with-prefix common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-workload-shares-max-results common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lens-shares-input 'make-list-lens-shares-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lens-shares-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lens-shares-output-"))
   (lens-share-summaries common-lisp:nil :type
    (common-lisp:or lens-share-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lens-shares-output 'make-list-lens-shares-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lens-share-summaries))
      (common-lisp:list
       (common-lisp:cons "LensShareSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lenses-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lenses-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (lens-type common-lisp:nil :type
    (common-lisp:or lens-type common-lisp:null))
   (lens-status common-lisp:nil :type
    (common-lisp:or lens-status-type common-lisp:null))
   (lens-name common-lisp:nil :type
    (common-lisp:or lens-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lenses-input 'make-list-lenses-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lenses-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lenses-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lenses-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lenses-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lenses-output-"))
   (lens-summaries common-lisp:nil :type
    (common-lisp:or lens-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lenses-output 'make-list-lenses-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lenses-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lenses-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-summaries))
      (common-lisp:list
       (common-lisp:cons "LensSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lenses-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-milestones-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-milestones-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-milestones-input 'make-list-milestones-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-milestones-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-milestones-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (milestone-summaries common-lisp:nil :type
    (common-lisp:or milestone-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-milestones-output 'make-list-milestones-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-summaries))
      (common-lisp:list
       (common-lisp:cons "MilestoneSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notifications-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notifications-input-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-notifications-max-results common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notifications-input 'make-list-notifications-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   common-lisp:nil))
(common-lisp:deftype list-notifications-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-notifications-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notifications-output-"))
   (notification-summaries common-lisp:nil :type
    (common-lisp:or notification-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notifications-output
                    'make-list-notifications-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-summaries))
      (common-lisp:list
       (common-lisp:cons "NotificationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-notifications-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-notifications-input-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-notifications-input
                    'make-list-profile-notifications-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-notifications-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-notifications-output-"))
   (notification-summaries common-lisp:nil :type
    (common-lisp:or profile-notification-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-notifications-output
                    'make-list-profile-notifications-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-summaries))
      (common-lisp:list
       (common-lisp:cons "NotificationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-shares-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-shares-input-"))
   (profile-arn (common-lisp:error ":profile-arn is required") :type
    (common-lisp:or profile-arn common-lisp:null))
   (shared-with-prefix common-lisp:nil :type
    (common-lisp:or shared-with-prefix common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-profile-shares-max-results common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-shares-input
                    'make-list-profile-shares-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-input))
   common-lisp:nil))
(common-lisp:deftype list-profile-shares-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-shares-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-shares-output-"))
   (profile-share-summaries common-lisp:nil :type
    (common-lisp:or profile-share-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-shares-output
                    'make-list-profile-shares-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-share-summaries))
      (common-lisp:list
       (common-lisp:cons "ProfileShareSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profiles-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profiles-input-"))
   (profile-name-prefix common-lisp:nil :type
    (common-lisp:or profile-name-prefix common-lisp:null))
   (profile-owner-type common-lisp:nil :type
    (common-lisp:or profile-owner-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profiles-input 'make-list-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-profiles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profiles-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profiles-output-"))
   (profile-summaries common-lisp:nil :type
    (common-lisp:or profile-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profiles-output 'make-list-profiles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-profiles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-profiles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-summaries))
      (common-lisp:list
       (common-lisp:cons "ProfileSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-profiles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-review-template-answers-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-review-template-answers-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-review-template-answers-max-results
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-review-template-answers-input
                    'make-list-review-template-answers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-input))
   common-lisp:nil))
(common-lisp:deftype list-review-template-answers-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-review-template-answers-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-review-template-answers-output-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (answer-summaries common-lisp:nil :type
    (common-lisp:or review-template-answer-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-review-template-answers-output
                    'make-list-review-template-answers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-summaries))
      (common-lisp:list
       (common-lisp:cons "AnswerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-review-templates-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-review-templates-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-review-templates-input
                    'make-list-review-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-review-templates-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-review-templates-output-"))
   (review-templates common-lisp:nil :type
    (common-lisp:or review-templates common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-review-templates-output
                    'make-list-review-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-templates))
      (common-lisp:list
       (common-lisp:cons "ReviewTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-share-invitations-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-share-invitations-input-"))
   (workload-name-prefix common-lisp:nil :type
    (common-lisp:or workload-name-prefix common-lisp:null))
   (lens-name-prefix common-lisp:nil :type
    (common-lisp:or lens-name-prefix common-lisp:null))
   (share-resource-type common-lisp:nil :type
    (common-lisp:or share-resource-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-share-invitations-max-results common-lisp:null))
   (profile-name-prefix common-lisp:nil :type
    (common-lisp:or profile-name-prefix common-lisp:null))
   (template-name-prefix common-lisp:nil :type
    (common-lisp:or template-name-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-share-invitations-input
                    'make-list-share-invitations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-input))
   common-lisp:nil))
(common-lisp:deftype list-share-invitations-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-share-invitations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-share-invitations-output-"))
   (share-invitation-summaries common-lisp:nil :type
    (common-lisp:or share-invitation-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-share-invitations-output
                    'make-list-share-invitations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'share-invitation-summaries))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (workload-arn (common-lisp:error ":workload-arn is required") :type
    (common-lisp:or workload-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-shares-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-template-shares-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (shared-with-prefix common-lisp:nil :type
    (common-lisp:or shared-with-prefix common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-template-shares-max-results common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-shares-input
                    'make-list-template-shares-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-input))
   common-lisp:nil))
(common-lisp:deftype list-template-shares-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-shares-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-template-shares-output-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (template-share-summaries common-lisp:nil :type
    (common-lisp:or template-share-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-shares-output
                    'make-list-template-shares-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-share-summaries))
      (common-lisp:list
       (common-lisp:cons "TemplateShareSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workload-shares-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workload-shares-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (shared-with-prefix common-lisp:nil :type
    (common-lisp:or shared-with-prefix common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-workload-shares-max-results common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workload-shares-input
                    'make-list-workload-shares-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-input))
   common-lisp:nil))
(common-lisp:deftype list-workload-shares-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-workload-shares-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workload-shares-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-share-summaries common-lisp:nil :type
    (common-lisp:or workload-share-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workload-shares-output
                    'make-list-workload-shares-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-share-summaries))
      (common-lisp:list
       (common-lisp:cons "WorkloadShareSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workloads-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workloads-input-"))
   (workload-name-prefix common-lisp:nil :type
    (common-lisp:or workload-name-prefix common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-workloads-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workloads-input 'make-list-workloads-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-workloads-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-workloads-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-name-prefix))
      (common-lisp:list
       (common-lisp:cons "WorkloadNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-workloads-input))
   common-lisp:nil))
(common-lisp:deftype list-workloads-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-workloads-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workloads-output-"))
   (workload-summaries common-lisp:nil :type
    (common-lisp:or workload-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workloads-output 'make-list-workloads-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-summaries))
      (common-lisp:list
       (common-lisp:cons "WorkloadSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-output))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-selected-profile-choices () 'common-lisp:integer)
(common-lisp:deftype metric-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (milestone (:copier common-lisp:nil)
      (:conc-name "struct-shape-milestone-"))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (milestone-name common-lisp:nil :type
    (common-lisp:or milestone-name common-lisp:null))
   (recorded-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (workload common-lisp:nil :type (common-lisp:or workload common-lisp:null)))
 (common-lisp:export (common-lisp:list 'milestone 'make-milestone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input milestone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input milestone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recorded-at))
      (common-lisp:list
       (common-lisp:cons "RecordedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload))
      (common-lisp:list
       (common-lisp:cons "Workload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input milestone))
   common-lisp:nil))
(common-lisp:deftype milestone-name () 'common-lisp:string)
(common-lisp:deftype milestone-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype milestone-summaries ()
   '(trivial-types:proper-list milestone-summary))
 (common-lisp:defun make-milestone-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list milestone-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (milestone-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-milestone-summary-"))
   (milestone-number common-lisp:nil :type
    (common-lisp:or milestone-number common-lisp:null))
   (milestone-name common-lisp:nil :type
    (common-lisp:or milestone-name common-lisp:null))
   (recorded-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (workload-summary common-lisp:nil :type
    (common-lisp:or workload-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'milestone-summary 'make-milestone-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input milestone-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input milestone-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recorded-at))
      (common-lisp:list
       (common-lisp:cons "RecordedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-summary))
      (common-lisp:list
       (common-lisp:cons "WorkloadSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input milestone-summary))
   common-lisp:nil))
(common-lisp:deftype min-selected-profile-choices () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype notes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-summaries ()
   '(trivial-types:proper-list notification-summary))
 (common-lisp:defun make-notification-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (notification-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-summary-"))
   (type common-lisp:nil :type
    (common-lisp:or notification-type common-lisp:null))
   (lens-upgrade-summary common-lisp:nil :type
    (common-lisp:or lens-upgrade-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-summary 'make-notification-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lens-upgrade-summary))
      (common-lisp:list
       (common-lisp:cons "LensUpgradeSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-summary))
   common-lisp:nil))
(common-lisp:deftype notification-type () 'common-lisp:string)
(common-lisp:deftype organization-sharing-status () 'common-lisp:string)
(common-lisp:deftype permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pillar-difference (:copier common-lisp:nil)
      (:conc-name "struct-shape-pillar-difference-"))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (pillar-name common-lisp:nil :type
    (common-lisp:or pillar-name common-lisp:null))
   (difference-status common-lisp:nil :type
    (common-lisp:or difference-status common-lisp:null))
   (question-differences common-lisp:nil :type
    (common-lisp:or question-differences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pillar-difference 'make-pillar-difference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pillar-difference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pillar-difference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-name))
      (common-lisp:list
       (common-lisp:cons "PillarName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'difference-status))
      (common-lisp:list
       (common-lisp:cons "DifferenceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-differences))
      (common-lisp:list
       (common-lisp:cons "QuestionDifferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pillar-difference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pillar-differences ()
   '(trivial-types:proper-list pillar-difference))
 (common-lisp:defun make-pillar-differences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pillar-difference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pillar-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pillar-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-pillar-metric-"))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null))
   (questions common-lisp:nil :type
    (common-lisp:or question-metrics common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pillar-metric 'make-pillar-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pillar-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pillar-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'questions))
      (common-lisp:list
       (common-lisp:cons "Questions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pillar-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pillar-metrics ()
   '(trivial-types:proper-list pillar-metric))
 (common-lisp:defun make-pillar-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pillar-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pillar-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pillar-notes () 'common-lisp:hash-table)
 (common-lisp:defun make-pillar-notes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype pillar-review-summaries ()
   '(trivial-types:proper-list pillar-review-summary))
 (common-lisp:defun make-pillar-review-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pillar-review-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pillar-review-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-pillar-review-summary-"))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (pillar-name common-lisp:nil :type
    (common-lisp:or pillar-name common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null))
   (prioritized-risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pillar-review-summary 'make-pillar-review-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pillar-review-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pillar-review-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-name))
      (common-lisp:list
       (common-lisp:cons "PillarName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pillar-review-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (profile (:copier common-lisp:nil) (:conc-name "struct-shape-profile-"))
   (profile-arn common-lisp:nil :type
    (common-lisp:or profile-arn common-lisp:null))
   (profile-version common-lisp:nil :type
    (common-lisp:or profile-version common-lisp:null))
   (profile-name common-lisp:nil :type
    (common-lisp:or profile-name common-lisp:null))
   (profile-description common-lisp:nil :type
    (common-lisp:or profile-description common-lisp:null))
   (profile-questions common-lisp:nil :type
    (common-lisp:or profile-questions common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (share-invitation-id common-lisp:nil :type
    (common-lisp:or share-invitation-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'profile 'make-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-version))
      (common-lisp:list
       (common-lisp:cons "ProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-description))
      (common-lisp:list
       (common-lisp:cons "ProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-questions))
      (common-lisp:list
       (common-lisp:cons "ProfileQuestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile))
   common-lisp:nil))
(common-lisp:deftype profile-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype profile-arns () '(trivial-types:proper-list profile-arn))
 (common-lisp:defun make-profile-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (profile-choice (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-choice-"))
   (choice-id common-lisp:nil :type
    (common-lisp:or choice-id common-lisp:null))
   (choice-title common-lisp:nil :type
    (common-lisp:or choice-title common-lisp:null))
   (choice-description common-lisp:nil :type
    (common-lisp:or choice-description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'profile-choice 'make-profile-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-title))
      (common-lisp:list
       (common-lisp:cons "ChoiceTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-description))
      (common-lisp:list
       (common-lisp:cons "ChoiceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-choice))
   common-lisp:nil))
(common-lisp:deftype profile-description () 'common-lisp:string)
(common-lisp:deftype profile-name () 'common-lisp:string)
(common-lisp:deftype profile-name-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype profile-notification-summaries ()
   '(trivial-types:proper-list profile-notification-summary))
 (common-lisp:defun make-profile-notification-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            profile-notification-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (profile-notification-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-notification-summary-"))
   (current-profile-version common-lisp:nil :type
    (common-lisp:or profile-version common-lisp:null))
   (latest-profile-version common-lisp:nil :type
    (common-lisp:or profile-version common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or profile-notification-type common-lisp:null))
   (profile-arn common-lisp:nil :type
    (common-lisp:or profile-arn common-lisp:null))
   (profile-name common-lisp:nil :type
    (common-lisp:or profile-name common-lisp:null))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profile-notification-summary
                    'make-profile-notification-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-notification-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-notification-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-profile-version))
      (common-lisp:list
       (common-lisp:cons "CurrentProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-profile-version))
      (common-lisp:list
       (common-lisp:cons "LatestProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-notification-summary))
   common-lisp:nil))
(common-lisp:deftype profile-notification-type () 'common-lisp:string)
(common-lisp:deftype profile-owner-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (profile-question (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-question-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (question-title common-lisp:nil :type
    (common-lisp:or question-title common-lisp:null))
   (question-description common-lisp:nil :type
    (common-lisp:or question-description common-lisp:null))
   (question-choices common-lisp:nil :type
    (common-lisp:or profile-question-choices common-lisp:null))
   (selected-choice-ids common-lisp:nil :type
    (common-lisp:or selected-choice-ids common-lisp:null))
   (min-selected-choices common-lisp:nil :type
    (common-lisp:or min-selected-profile-choices common-lisp:null))
   (max-selected-choices common-lisp:nil :type
    (common-lisp:or max-selected-profile-choices common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profile-question 'make-profile-question))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-question))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-question))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-description))
      (common-lisp:list
       (common-lisp:cons "QuestionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-choices))
      (common-lisp:list
       (common-lisp:cons "QuestionChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choice-ids))
      (common-lisp:list
       (common-lisp:cons "SelectedChoiceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-selected-choices))
      (common-lisp:list
       (common-lisp:cons "MinSelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-selected-choices))
      (common-lisp:list
       (common-lisp:cons "MaxSelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-question))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-question-choices ()
   '(trivial-types:proper-list profile-choice))
 (common-lisp:defun make-profile-question-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-choice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (profile-question-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-question-update-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (selected-choice-ids common-lisp:nil :type
    (common-lisp:or selected-profile-choice-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profile-question-update 'make-profile-question-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-question-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-question-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choice-ids))
      (common-lisp:list
       (common-lisp:cons "SelectedChoiceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-question-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-question-updates ()
   '(trivial-types:proper-list profile-question-update))
 (common-lisp:defun make-profile-question-updates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-question-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-questions ()
   '(trivial-types:proper-list profile-question))
 (common-lisp:defun make-profile-questions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-question))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-share-summaries ()
   '(trivial-types:proper-list profile-share-summary))
 (common-lisp:defun make-profile-share-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-share-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (profile-share-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-share-summary-"))
   (share-id common-lisp:nil :type (common-lisp:or share-id common-lisp:null))
   (shared-with common-lisp:nil :type
    (common-lisp:or shared-with common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profile-share-summary 'make-profile-share-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-share-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-share-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-share-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-summaries ()
   '(trivial-types:proper-list profile-summary))
 (common-lisp:defun make-profile-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (profile-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-summary-"))
   (profile-arn common-lisp:nil :type
    (common-lisp:or profile-arn common-lisp:null))
   (profile-version common-lisp:nil :type
    (common-lisp:or profile-version common-lisp:null))
   (profile-name common-lisp:nil :type
    (common-lisp:or profile-name common-lisp:null))
   (profile-description common-lisp:nil :type
    (common-lisp:or profile-description common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'profile-summary 'make-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-version))
      (common-lisp:list
       (common-lisp:cons "ProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-description))
      (common-lisp:list
       (common-lisp:cons "ProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (profile-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-template-"))
   (template-name common-lisp:nil :type
    (common-lisp:or profile-name common-lisp:null))
   (template-questions common-lisp:nil :type
    (common-lisp:or template-questions common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profile-template 'make-profile-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-questions))
      (common-lisp:list
       (common-lisp:cons "TemplateQuestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (profile-template-choice (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-template-choice-"))
   (choice-id common-lisp:nil :type
    (common-lisp:or choice-id common-lisp:null))
   (choice-title common-lisp:nil :type
    (common-lisp:or choice-title common-lisp:null))
   (choice-description common-lisp:nil :type
    (common-lisp:or choice-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profile-template-choice 'make-profile-template-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-title))
      (common-lisp:list
       (common-lisp:cons "ChoiceTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-description))
      (common-lisp:list
       (common-lisp:cons "ChoiceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-choice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (profile-template-question (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-template-question-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (question-title common-lisp:nil :type
    (common-lisp:or question-title common-lisp:null))
   (question-description common-lisp:nil :type
    (common-lisp:or question-description common-lisp:null))
   (question-choices common-lisp:nil :type
    (common-lisp:or profile-template-question-choices common-lisp:null))
   (min-selected-choices common-lisp:nil :type
    (common-lisp:or min-selected-profile-choices common-lisp:null))
   (max-selected-choices common-lisp:nil :type
    (common-lisp:or max-selected-profile-choices common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profile-template-question
                    'make-profile-template-question))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-question))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-question))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-description))
      (common-lisp:list
       (common-lisp:cons "QuestionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-choices))
      (common-lisp:list
       (common-lisp:cons "QuestionChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-selected-choices))
      (common-lisp:list
       (common-lisp:cons "MinSelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-selected-choices))
      (common-lisp:list
       (common-lisp:cons "MaxSelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-question))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-template-question-choices ()
   '(trivial-types:proper-list profile-template-choice))
 (common-lisp:defun make-profile-template-question-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-template-choice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profile-version () 'common-lisp:string)
(common-lisp:deftype question () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype question-counts () 'common-lisp:hash-table)
 (common-lisp:defun make-question-counts (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype question-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (question-difference (:copier common-lisp:nil)
      (:conc-name "struct-shape-question-difference-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (question-title common-lisp:nil :type
    (common-lisp:or question-title common-lisp:null))
   (difference-status common-lisp:nil :type
    (common-lisp:or difference-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'question-difference 'make-question-difference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input question-difference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input question-difference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'difference-status))
      (common-lisp:list
       (common-lisp:cons "DifferenceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input question-difference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype question-differences ()
   '(trivial-types:proper-list question-difference))
 (common-lisp:defun make-question-differences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list question-difference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype question-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (question-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-question-metric-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (risk common-lisp:nil :type (common-lisp:or risk common-lisp:null))
   (best-practices common-lisp:nil :type
    (common-lisp:or best-practices common-lisp:null)))
 (common-lisp:export (common-lisp:list 'question-metric 'make-question-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input question-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input question-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk))
      (common-lisp:list
       (common-lisp:cons "Risk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'best-practices))
      (common-lisp:list
       (common-lisp:cons "BestPractices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input question-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype question-metrics ()
   '(trivial-types:proper-list question-metric))
 (common-lisp:defun make-question-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list question-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype question-priority () 'common-lisp:string)
(common-lisp:deftype question-title () 'common-lisp:string)
(common-lisp:deftype question-type () 'common-lisp:string)
(common-lisp:deftype quota-code () 'common-lisp:string)
(common-lisp:deftype report-format () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (review-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-review-template-"))
   (description common-lisp:nil :type
    (common-lisp:or template-description common-lisp:null))
   (lenses common-lisp:nil :type
    (common-lisp:or review-template-lenses common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (question-counts common-lisp:nil :type
    (common-lisp:or question-counts common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (update-status common-lisp:nil :type
    (common-lisp:or review-template-update-status common-lisp:null))
   (share-invitation-id common-lisp:nil :type
    (common-lisp:or share-invitation-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'review-template 'make-review-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input review-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input review-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-counts))
      (common-lisp:list
       (common-lisp:cons "QuestionCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input review-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (review-template-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-review-template-answer-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (question-title common-lisp:nil :type
    (common-lisp:or question-title common-lisp:null))
   (question-description common-lisp:nil :type
    (common-lisp:or question-description common-lisp:null))
   (improvement-plan-url common-lisp:nil :type
    (common-lisp:or improvement-plan-url common-lisp:null))
   (helpful-resource-url common-lisp:nil :type
    (common-lisp:or helpful-resource-url common-lisp:null))
   (helpful-resource-display-text common-lisp:nil :type
    (common-lisp:or display-text common-lisp:null))
   (choices common-lisp:nil :type (common-lisp:or choices common-lisp:null))
   (selected-choices common-lisp:nil :type
    (common-lisp:or selected-choices common-lisp:null))
   (choice-answers common-lisp:nil :type
    (common-lisp:or choice-answers common-lisp:null))
   (is-applicable common-lisp:nil :type
    (common-lisp:or is-applicable common-lisp:null))
   (answer-status common-lisp:nil :type
    (common-lisp:or review-template-answer-status common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or answer-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'review-template-answer 'make-review-template-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-description))
      (common-lisp:list
       (common-lisp:cons "QuestionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-plan-url))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlanUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'helpful-resource-url))
      (common-lisp:list
       (common-lisp:cons "HelpfulResourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'helpful-resource-display-text))
      (common-lisp:list
       (common-lisp:cons "HelpfulResourceDisplayText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choices))
      (common-lisp:list
       (common-lisp:cons "Choices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-answers))
      (common-lisp:list
       (common-lisp:cons "ChoiceAnswers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-status))
      (common-lisp:list
       (common-lisp:cons "AnswerStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer))
   common-lisp:nil))
(common-lisp:deftype review-template-answer-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype review-template-answer-summaries ()
   '(trivial-types:proper-list review-template-answer-summary))
 (common-lisp:defun make-review-template-answer-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            review-template-answer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (review-template-answer-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-review-template-answer-summary-"))
   (question-id common-lisp:nil :type
    (common-lisp:or question-id common-lisp:null))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (question-title common-lisp:nil :type
    (common-lisp:or question-title common-lisp:null))
   (choices common-lisp:nil :type (common-lisp:or choices common-lisp:null))
   (selected-choices common-lisp:nil :type
    (common-lisp:or selected-choices common-lisp:null))
   (choice-answer-summaries common-lisp:nil :type
    (common-lisp:or choice-answer-summaries common-lisp:null))
   (is-applicable common-lisp:nil :type
    (common-lisp:or is-applicable common-lisp:null))
   (answer-status common-lisp:nil :type
    (common-lisp:or review-template-answer-status common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or answer-reason common-lisp:null))
   (question-type common-lisp:nil :type
    (common-lisp:or question-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'review-template-answer-summary
                    'make-review-template-answer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choices))
      (common-lisp:list
       (common-lisp:cons "Choices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'choice-answer-summaries))
      (common-lisp:list
       (common-lisp:cons "ChoiceAnswerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-status))
      (common-lisp:list
       (common-lisp:cons "AnswerStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-type))
      (common-lisp:list
       (common-lisp:cons "QuestionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype review-template-arns ()
   '(trivial-types:proper-list template-arn))
 (common-lisp:defun make-review-template-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype review-template-lens-aliases ()
   '(trivial-types:proper-list lens-alias))
 (common-lisp:defun make-review-template-lens-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (review-template-lens-review (:copier common-lisp:nil)
      (:conc-name "struct-shape-review-template-lens-review-"))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (lens-version common-lisp:nil :type
    (common-lisp:or lens-version common-lisp:null))
   (lens-name common-lisp:nil :type
    (common-lisp:or lens-name common-lisp:null))
   (lens-status common-lisp:nil :type
    (common-lisp:or lens-status common-lisp:null))
   (pillar-review-summaries common-lisp:nil :type
    (common-lisp:or review-template-pillar-review-summaries common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (question-counts common-lisp:nil :type
    (common-lisp:or question-counts common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'review-template-lens-review
                    'make-review-template-lens-review))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-lens-review))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-lens-review))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-status))
      (common-lisp:list
       (common-lisp:cons "LensStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pillar-review-summaries))
      (common-lisp:list
       (common-lisp:cons "PillarReviewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-counts))
      (common-lisp:list
       (common-lisp:cons "QuestionCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-lens-review))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype review-template-lenses ()
   '(trivial-types:proper-list lens-alias))
 (common-lisp:defun make-review-template-lenses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype review-template-pillar-review-summaries ()
   '(trivial-types:proper-list review-template-pillar-review-summary))
 (common-lisp:defun make-review-template-pillar-review-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            review-template-pillar-review-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (review-template-pillar-review-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-review-template-pillar-review-summary-"))
   (pillar-id common-lisp:nil :type
    (common-lisp:or pillar-id common-lisp:null))
   (pillar-name common-lisp:nil :type
    (common-lisp:or pillar-name common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (question-counts common-lisp:nil :type
    (common-lisp:or question-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'review-template-pillar-review-summary
                    'make-review-template-pillar-review-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-pillar-review-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-pillar-review-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-name))
      (common-lisp:list
       (common-lisp:cons "PillarName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-counts))
      (common-lisp:list
       (common-lisp:cons "QuestionCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-pillar-review-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (review-template-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-review-template-summary-"))
   (description common-lisp:nil :type
    (common-lisp:or template-description common-lisp:null))
   (lenses common-lisp:nil :type
    (common-lisp:or review-template-lenses common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null))
   (update-status common-lisp:nil :type
    (common-lisp:or review-template-update-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'review-template-summary 'make-review-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-summary))
   common-lisp:nil))
(common-lisp:deftype review-template-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype review-templates ()
   '(trivial-types:proper-list review-template-summary))
 (common-lisp:defun make-review-templates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list review-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype risk () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype risk-counts () 'common-lisp:hash-table)
 (common-lisp:defun make-risk-counts (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype selected-choice-ids ()
   '(trivial-types:proper-list choice-id))
 (common-lisp:defun make-selected-choice-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype selected-choices ()
   '(trivial-types:proper-list choice-id))
 (common-lisp:defun make-selected-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype selected-profile-choice-ids ()
   '(trivial-types:proper-list choice-id))
 (common-lisp:defun make-selected-profile-choice-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype share-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (share-invitation (:copier common-lisp:nil)
      (:conc-name "struct-shape-share-invitation-"))
   (share-invitation-id common-lisp:nil :type
    (common-lisp:or share-invitation-id common-lisp:null))
   (share-resource-type common-lisp:nil :type
    (common-lisp:or share-resource-type common-lisp:null))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (profile-arn common-lisp:nil :type
    (common-lisp:or profile-arn common-lisp:null))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'share-invitation 'make-share-invitation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-invitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-invitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-resource-type))
      (common-lisp:list
       (common-lisp:cons "ShareResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-invitation))
   common-lisp:nil))
(common-lisp:deftype share-invitation-action () 'common-lisp:string)
(common-lisp:deftype share-invitation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype share-invitation-summaries ()
   '(trivial-types:proper-list share-invitation-summary))
 (common-lisp:defun make-share-invitation-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            share-invitation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (share-invitation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-share-invitation-summary-"))
   (share-invitation-id common-lisp:nil :type
    (common-lisp:or share-invitation-id common-lisp:null))
   (shared-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (shared-with common-lisp:nil :type
    (common-lisp:or shared-with common-lisp:null))
   (permission-type common-lisp:nil :type
    (common-lisp:or permission-type common-lisp:null))
   (share-resource-type common-lisp:nil :type
    (common-lisp:or share-resource-type common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-name common-lisp:nil :type
    (common-lisp:or lens-name common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (profile-name common-lisp:nil :type
    (common-lisp:or profile-name common-lisp:null))
   (profile-arn common-lisp:nil :type
    (common-lisp:or profile-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'share-invitation-summary 'make-share-invitation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          share-invitation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          share-invitation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-by))
      (common-lisp:list
       (common-lisp:cons "SharedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-resource-type))
      (common-lisp:list
       (common-lisp:cons "ShareResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          share-invitation-summary))
   common-lisp:nil))
(common-lisp:deftype share-resource-type () 'common-lisp:string)
(common-lisp:deftype share-status () 'common-lisp:string)
(common-lisp:deftype shared-with () 'common-lisp:string)
(common-lisp:deftype shared-with-prefix () 'common-lisp:string)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (workload-arn (common-lisp:error ":workload-arn is required") :type
    (common-lisp:or workload-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype template-arn () 'common-lisp:string)
(common-lisp:deftype template-description () 'common-lisp:string)
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:deftype template-name-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype template-questions ()
   '(trivial-types:proper-list profile-template-question))
 (common-lisp:defun make-template-questions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            profile-template-question))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype template-share-summaries ()
   '(trivial-types:proper-list template-share-summary))
 (common-lisp:defun make-template-share-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-share-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (template-share-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-share-summary-"))
   (share-id common-lisp:nil :type (common-lisp:or share-id common-lisp:null))
   (shared-with common-lisp:nil :type
    (common-lisp:or shared-with common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-share-summary 'make-template-share-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-share-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-share-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-share-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype trusted-advisor-integration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (workload-arn (common-lisp:error ":workload-arn is required") :type
    (common-lisp:or workload-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-answer-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-answer-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (question-id (common-lisp:error ":question-id is required") :type
    (common-lisp:or question-id common-lisp:null))
   (selected-choices common-lisp:nil :type
    (common-lisp:or selected-choices common-lisp:null))
   (choice-updates common-lisp:nil :type
    (common-lisp:or choice-updates common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (is-applicable common-lisp:nil :type
    (common-lisp:or is-applicable common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or answer-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-answer-input 'make-update-answer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-answer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-updates))
      (common-lisp:list
       (common-lisp:cons "ChoiceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-answer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-answer-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-answer-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-arn common-lisp:nil :type (common-lisp:or lens-arn common-lisp:null))
   (answer common-lisp:nil :type (common-lisp:or answer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-answer-output 'make-update-answer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-answer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-answer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-answer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-global-settings-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-global-settings-input-"))
   (organization-sharing-status common-lisp:nil :type
    (common-lisp:or organization-sharing-status common-lisp:null))
   (discovery-integration-status common-lisp:nil :type
    (common-lisp:or discovery-integration-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-global-settings-input
                    'make-update-global-settings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-global-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-global-settings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-sharing-status))
      (common-lisp:list
       (common-lisp:cons "OrganizationSharingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'discovery-integration-status))
      (common-lisp:list
       (common-lisp:cons "DiscoveryIntegrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-global-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-lens-review-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-lens-review-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (pillar-notes common-lisp:nil :type
    (common-lisp:or pillar-notes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-lens-review-input 'make-update-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-notes))
      (common-lisp:list
       (common-lisp:cons "LensNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-notes))
      (common-lisp:list
       (common-lisp:cons "PillarNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-lens-review-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-lens-review-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-review common-lisp:nil :type
    (common-lisp:or lens-review common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-lens-review-output
                    'make-update-lens-review-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review))
      (common-lisp:list
       (common-lisp:cons "LensReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-profile-input-"))
   (profile-arn (common-lisp:error ":profile-arn is required") :type
    (common-lisp:or profile-arn common-lisp:null))
   (profile-description common-lisp:nil :type
    (common-lisp:or profile-description common-lisp:null))
   (profile-questions common-lisp:nil :type
    (common-lisp:or profile-question-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-profile-input 'make-update-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-description))
      (common-lisp:list
       (common-lisp:cons "ProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-questions))
      (common-lisp:list
       (common-lisp:cons "ProfileQuestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-profile-output-"))
   (profile common-lisp:nil :type (common-lisp:or profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-profile-output 'make-update-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-review-template-answer-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-review-template-answer-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (question-id (common-lisp:error ":question-id is required") :type
    (common-lisp:or question-id common-lisp:null))
   (selected-choices common-lisp:nil :type
    (common-lisp:or selected-choices common-lisp:null))
   (choice-updates common-lisp:nil :type
    (common-lisp:or choice-updates common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (is-applicable common-lisp:nil :type
    (common-lisp:or is-applicable common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or answer-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-review-template-answer-input
                    'make-update-review-template-answer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-updates))
      (common-lisp:list
       (common-lisp:cons "ChoiceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-review-template-answer-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-review-template-answer-output-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-alias common-lisp:nil :type
    (common-lisp:or lens-alias common-lisp:null))
   (answer common-lisp:nil :type
    (common-lisp:or review-template-answer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-review-template-answer-output
                    'make-update-review-template-answer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-review-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-review-template-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or template-description common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (lenses-to-associate common-lisp:nil :type
    (common-lisp:or review-template-lens-aliases common-lisp:null))
   (lenses-to-disassociate common-lisp:nil :type
    (common-lisp:or review-template-lens-aliases common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-review-template-input
                    'make-update-review-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses-to-associate))
      (common-lisp:list
       (common-lisp:cons "LensesToAssociate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lenses-to-disassociate))
      (common-lisp:list
       (common-lisp:cons "LensesToDisassociate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-review-template-lens-review-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-review-template-lens-review-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (lens-notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (pillar-notes common-lisp:nil :type
    (common-lisp:or pillar-notes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-review-template-lens-review-input
                    'make-update-review-template-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-notes))
      (common-lisp:list
       (common-lisp:cons "LensNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-notes))
      (common-lisp:list
       (common-lisp:cons "PillarNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-review-template-lens-review-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-review-template-lens-review-output-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-review common-lisp:nil :type
    (common-lisp:or review-template-lens-review common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-review-template-lens-review-output
                    'make-update-review-template-lens-review-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review))
      (common-lisp:list
       (common-lisp:cons "LensReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-review-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-review-template-output-"))
   (review-template common-lisp:nil :type
    (common-lisp:or review-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-review-template-output
                    'make-update-review-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-template))
      (common-lisp:list
       (common-lisp:cons "ReviewTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-share-invitation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-share-invitation-input-"))
   (share-invitation-id (common-lisp:error ":share-invitation-id is required")
    :type (common-lisp:or share-invitation-id common-lisp:null))
   (share-invitation-action
    (common-lisp:error ":share-invitation-action is required") :type
    (common-lisp:or share-invitation-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-share-invitation-input
                    'make-update-share-invitation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'share-invitation-action))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-share-invitation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-share-invitation-output-"))
   (share-invitation common-lisp:nil :type
    (common-lisp:or share-invitation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-share-invitation-output
                    'make-update-share-invitation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation))
      (common-lisp:list
       (common-lisp:cons "ShareInvitation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workload-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workload-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or workload-description common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or workload-environment common-lisp:null))
   (account-ids common-lisp:nil :type
    (common-lisp:or workload-account-ids common-lisp:null))
   (aws-regions common-lisp:nil :type
    (common-lisp:or workload-aws-regions common-lisp:null))
   (non-aws-regions common-lisp:nil :type
    (common-lisp:or workload-non-aws-regions common-lisp:null))
   (pillar-priorities common-lisp:nil :type
    (common-lisp:or workload-pillar-priorities common-lisp:null))
   (architectural-design common-lisp:nil :type
    (common-lisp:or workload-architectural-design common-lisp:null))
   (review-owner common-lisp:nil :type
    (common-lisp:or workload-review-owner common-lisp:null))
   (is-review-owner-update-acknowledged common-lisp:nil :type
    (common-lisp:or is-review-owner-update-acknowledged common-lisp:null))
   (industry-type common-lisp:nil :type
    (common-lisp:or workload-industry-type common-lisp:null))
   (industry common-lisp:nil :type
    (common-lisp:or workload-industry common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (improvement-status common-lisp:nil :type
    (common-lisp:or workload-improvement-status common-lisp:null))
   (discovery-config common-lisp:nil :type
    (common-lisp:or workload-discovery-config common-lisp:null))
   (applications common-lisp:nil :type
    (common-lisp:or workload-applications common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workload-input 'make-update-workload-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-regions))
      (common-lisp:list
       (common-lisp:cons "AwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-aws-regions))
      (common-lisp:list
       (common-lisp:cons "NonAwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-priorities))
      (common-lisp:list
       (common-lisp:cons "PillarPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'architectural-design))
      (common-lisp:list
       (common-lisp:cons "ArchitecturalDesign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-owner))
      (common-lisp:list
       (common-lisp:cons "ReviewOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-review-owner-update-acknowledged))
      (common-lisp:list
       (common-lisp:cons "IsReviewOwnerUpdateAcknowledged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry-type))
      (common-lisp:list
       (common-lisp:cons "IndustryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry))
      (common-lisp:list
       (common-lisp:cons "Industry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-status))
      (common-lisp:list
       (common-lisp:cons "ImprovementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-config))
      (common-lisp:list
       (common-lisp:cons "DiscoveryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workload-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workload-output-"))
   (workload common-lisp:nil :type (common-lisp:or workload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workload-output 'make-update-workload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload))
      (common-lisp:list
       (common-lisp:cons "Workload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workload-share-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workload-share-input-"))
   (share-id (common-lisp:error ":share-id is required") :type
    (common-lisp:or share-id common-lisp:null))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (permission-type (common-lisp:error ":permission-type is required") :type
    (common-lisp:or permission-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workload-share-input
                    'make-update-workload-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workload-share-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workload-share-output-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-share common-lisp:nil :type
    (common-lisp:or workload-share common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workload-share-output
                    'make-update-workload-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-share))
      (common-lisp:list
       (common-lisp:cons "WorkloadShare"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upgrade-lens-review-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-upgrade-lens-review-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (milestone-name (common-lisp:error ":milestone-name is required") :type
    (common-lisp:or milestone-name common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upgrade-lens-review-input
                    'make-upgrade-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-lens-review-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upgrade-profile-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-upgrade-profile-version-input-"))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (profile-arn (common-lisp:error ":profile-arn is required") :type
    (common-lisp:or profile-arn common-lisp:null))
   (milestone-name common-lisp:nil :type
    (common-lisp:or milestone-name common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upgrade-profile-version-input
                    'make-upgrade-profile-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-profile-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-profile-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-profile-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upgrade-review-template-lens-review-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-upgrade-review-template-lens-review-input-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null))
   (lens-alias (common-lisp:error ":lens-alias is required") :type
    (common-lisp:or lens-alias common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upgrade-review-template-lens-review-input
                    'make-upgrade-review-template-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-review-template-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-review-template-lens-review-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-review-template-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype urls () '(trivial-types:proper-list choice-content))
 (common-lisp:defun make-urls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-content))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or validation-exception-field-name common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or exception-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-field-name () 'common-lisp:string)
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (version-differences (:copier common-lisp:nil)
      (:conc-name "struct-shape-version-differences-"))
   (pillar-differences common-lisp:nil :type
    (common-lisp:or pillar-differences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'version-differences 'make-version-differences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version-differences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version-differences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-differences))
      (common-lisp:list
       (common-lisp:cons "PillarDifferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version-differences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workload (:copier common-lisp:nil) (:conc-name "struct-shape-workload-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-arn common-lisp:nil :type
    (common-lisp:or workload-arn common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or workload-description common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or workload-environment common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (account-ids common-lisp:nil :type
    (common-lisp:or workload-account-ids common-lisp:null))
   (aws-regions common-lisp:nil :type
    (common-lisp:or workload-aws-regions common-lisp:null))
   (non-aws-regions common-lisp:nil :type
    (common-lisp:or workload-non-aws-regions common-lisp:null))
   (architectural-design common-lisp:nil :type
    (common-lisp:or workload-architectural-design common-lisp:null))
   (review-owner common-lisp:nil :type
    (common-lisp:or workload-review-owner common-lisp:null))
   (review-restriction-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (is-review-owner-update-acknowledged common-lisp:nil :type
    (common-lisp:or is-review-owner-update-acknowledged common-lisp:null))
   (industry-type common-lisp:nil :type
    (common-lisp:or workload-industry-type common-lisp:null))
   (industry common-lisp:nil :type
    (common-lisp:or workload-industry common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or notes common-lisp:null))
   (improvement-status common-lisp:nil :type
    (common-lisp:or workload-improvement-status common-lisp:null))
   (risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null))
   (pillar-priorities common-lisp:nil :type
    (common-lisp:or workload-pillar-priorities common-lisp:null))
   (lenses common-lisp:nil :type
    (common-lisp:or workload-lenses common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (share-invitation-id common-lisp:nil :type
    (common-lisp:or share-invitation-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (discovery-config common-lisp:nil :type
    (common-lisp:or workload-discovery-config common-lisp:null))
   (applications common-lisp:nil :type
    (common-lisp:or workload-applications common-lisp:null))
   (profiles common-lisp:nil :type
    (common-lisp:or workload-profiles common-lisp:null))
   (prioritized-risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workload 'make-workload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-arn))
      (common-lisp:list
       (common-lisp:cons "WorkloadArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-regions))
      (common-lisp:list
       (common-lisp:cons "AwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-aws-regions))
      (common-lisp:list
       (common-lisp:cons "NonAwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'architectural-design))
      (common-lisp:list
       (common-lisp:cons "ArchitecturalDesign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-owner))
      (common-lisp:list
       (common-lisp:cons "ReviewOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'review-restriction-date))
      (common-lisp:list
       (common-lisp:cons "ReviewRestrictionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-review-owner-update-acknowledged))
      (common-lisp:list
       (common-lisp:cons "IsReviewOwnerUpdateAcknowledged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry-type))
      (common-lisp:list
       (common-lisp:cons "IndustryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry))
      (common-lisp:list
       (common-lisp:cons "Industry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-status))
      (common-lisp:list
       (common-lisp:cons "ImprovementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-priorities))
      (common-lisp:list
       (common-lisp:cons "PillarPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-config))
      (common-lisp:list
       (common-lisp:cons "DiscoveryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-account-ids ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun make-workload-account-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workload-applications ()
   '(trivial-types:proper-list application-arn))
 (common-lisp:defun make-workload-applications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workload-architectural-design () 'common-lisp:string)
(common-lisp:deftype workload-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workload-aws-regions ()
   '(trivial-types:proper-list aws-region))
 (common-lisp:defun make-workload-aws-regions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workload-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workload-discovery-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-workload-discovery-config-"))
   (trusted-advisor-integration-status common-lisp:nil :type
    (common-lisp:or trusted-advisor-integration-status common-lisp:null))
   (workload-resource-definition common-lisp:nil :type
    (common-lisp:or workload-resource-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workload-discovery-config
                    'make-workload-discovery-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workload-discovery-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workload-discovery-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trusted-advisor-integration-status))
      (common-lisp:list
       (common-lisp:cons "TrustedAdvisorIntegrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-resource-definition))
      (common-lisp:list
       (common-lisp:cons "WorkloadResourceDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workload-discovery-config))
   common-lisp:nil))
(common-lisp:deftype workload-environment () 'common-lisp:string)
(common-lisp:deftype workload-id () 'common-lisp:string)
(common-lisp:deftype workload-improvement-status () 'common-lisp:string)
(common-lisp:deftype workload-industry () 'common-lisp:string)
(common-lisp:deftype workload-industry-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workload-lenses ()
   '(trivial-types:proper-list lens-alias))
 (common-lisp:defun make-workload-lenses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workload-name () 'common-lisp:string)
(common-lisp:deftype workload-name-prefix () 'common-lisp:string)
(common-lisp:deftype workload-non-aws-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workload-non-aws-regions ()
   '(trivial-types:proper-list workload-non-aws-region))
 (common-lisp:defun make-workload-non-aws-regions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload-non-aws-region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workload-pillar-priorities ()
   '(trivial-types:proper-list pillar-id))
 (common-lisp:defun make-workload-pillar-priorities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pillar-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workload-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-workload-profile-"))
   (profile-arn common-lisp:nil :type
    (common-lisp:or profile-arn common-lisp:null))
   (profile-version common-lisp:nil :type
    (common-lisp:or profile-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workload-profile 'make-workload-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-version))
      (common-lisp:list
       (common-lisp:cons "ProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-profile-arns ()
   '(trivial-types:proper-list profile-arn))
 (common-lisp:defun make-workload-profile-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workload-profiles ()
   '(trivial-types:proper-list workload-profile))
 (common-lisp:defun make-workload-profiles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workload-resource-definition ()
   '(trivial-types:proper-list definition-type))
 (common-lisp:defun make-workload-resource-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list definition-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workload-review-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workload-share (:copier common-lisp:nil)
      (:conc-name "struct-shape-workload-share-"))
   (share-id common-lisp:nil :type (common-lisp:or share-id common-lisp:null))
   (shared-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (shared-with common-lisp:nil :type
    (common-lisp:or shared-with common-lisp:null))
   (permission-type common-lisp:nil :type
    (common-lisp:or permission-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workload-share 'make-workload-share))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload-share))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload-share))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-by))
      (common-lisp:list
       (common-lisp:cons "SharedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload-share))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-share-summaries ()
   '(trivial-types:proper-list workload-share-summary))
 (common-lisp:defun make-workload-share-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload-share-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workload-share-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-workload-share-summary-"))
   (share-id common-lisp:nil :type (common-lisp:or share-id common-lisp:null))
   (shared-with common-lisp:nil :type
    (common-lisp:or shared-with common-lisp:null))
   (permission-type common-lisp:nil :type
    (common-lisp:or permission-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workload-share-summary 'make-workload-share-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workload-share-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workload-share-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workload-share-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-summaries ()
   '(trivial-types:proper-list workload-summary))
 (common-lisp:defun make-workload-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workload-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-workload-summary-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-arn common-lisp:nil :type
    (common-lisp:or workload-arn common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (lenses common-lisp:nil :type
    (common-lisp:or workload-lenses common-lisp:null))
   (risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null))
   (improvement-status common-lisp:nil :type
    (common-lisp:or workload-improvement-status common-lisp:null))
   (profiles common-lisp:nil :type
    (common-lisp:or workload-profiles common-lisp:null))
   (prioritized-risk-counts common-lisp:nil :type
    (common-lisp:or risk-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workload-summary 'make-workload-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-arn))
      (common-lisp:list
       (common-lisp:cons "WorkloadArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-status))
      (common-lisp:list
       (common-lisp:cons "ImprovementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-lenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-aliases)
   (common-lisp:declare (common-lisp:ignorable workload-id lens-aliases))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-lenses-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/associateLenses"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "AssociateLenses"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-lenses))
(common-lisp:progn
 (common-lisp:defun associate-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id profile-arns)
   (common-lisp:declare (common-lisp:ignorable workload-id profile-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/associateProfiles"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "AssociateProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-profiles))
(common-lisp:progn
 (common-lisp:defun create-lens-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias shared-with
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias shared-with client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lens-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "CreateLensShare"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-lens-share))
(common-lisp:progn
 (common-lisp:defun create-lens-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias lens-version is-major-version
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias lens-version is-major-version
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lens-version-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/versions"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "CreateLensVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-lens-version))
(common-lisp:progn
 (common-lisp:defun create-milestone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id milestone-name
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id milestone-name client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-milestone-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/milestones"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "CreateMilestone"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-milestone))
(common-lisp:progn
 (common-lisp:defun create-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-name profile-description
                     profile-questions client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable profile-name profile-description profile-questions
     client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/profiles" "CreateProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-profile))
(common-lisp:progn
 (common-lisp:defun create-profile-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn shared-with
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable profile-arn shared-with client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "CreateProfileShare"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-profile-share))
(common-lisp:progn
 (common-lisp:defun create-review-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name description lenses notes
                     tags client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable template-name description lenses notes tags
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-review-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/reviewTemplates" "CreateReviewTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-review-template))
(common-lisp:progn
 (common-lisp:defun create-template-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn shared-with
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable template-arn shared-with client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "CreateTemplateShare"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-template-share))
(common-lisp:progn
 (common-lisp:defun create-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-name description environment
                     account-ids aws-regions non-aws-regions pillar-priorities
                     architectural-design review-owner industry-type industry
                     lenses notes client-request-token tags discovery-config
                     applications profile-arns review-template-arns)
   (common-lisp:declare
    (common-lisp:ignorable workload-name description environment account-ids
     aws-regions non-aws-regions pillar-priorities architectural-design
     review-owner industry-type industry lenses notes client-request-token tags
     discovery-config applications profile-arns review-template-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workload-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/workloads" "CreateWorkload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workload))
(common-lisp:progn
 (common-lisp:defun create-workload-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id shared-with permission-type
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id shared-with permission-type
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workload-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "CreateWorkloadShare"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workload-share))
(common-lisp:progn
 (common-lisp:defun delete-lens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias client-request-token
                     lens-status)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias client-request-token lens-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lens-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "DeleteLens"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-lens))
(common-lisp:progn
 (common-lisp:defun delete-lens-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id lens-alias client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable share-id lens-alias client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lens-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "DeleteLensShare"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-lens-share))
(common-lisp:progn
 (common-lisp:defun delete-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable profile-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "DeleteProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profile))
(common-lisp:progn
 (common-lisp:defun delete-profile-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id profile-arn
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable share-id profile-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "DeleteProfileShare"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profile-share))
(common-lisp:progn
 (common-lisp:defun delete-review-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable template-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-review-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/reviewTemplates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "DeleteReviewTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-review-template))
(common-lisp:progn
 (common-lisp:defun delete-template-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id template-arn
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable share-id template-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-template-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/shares/~A/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "DeleteTemplateShare"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-template-share))
(common-lisp:progn
 (common-lisp:defun delete-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workload-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "DeleteWorkload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workload))
(common-lisp:progn
 (common-lisp:defun delete-workload-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id workload-id
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable share-id workload-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workload-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "DeleteWorkloadShare"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workload-share))
(common-lisp:progn
 (common-lisp:defun disassociate-lenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-aliases)
   (common-lisp:declare (common-lisp:ignorable workload-id lens-aliases))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-lenses-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/disassociateLenses"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "DisassociateLenses"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-lenses))
(common-lisp:progn
 (common-lisp:defun disassociate-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id profile-arns)
   (common-lisp:declare (common-lisp:ignorable workload-id profile-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/disassociateProfiles"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "DisassociateProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-profiles))
(common-lisp:progn
 (common-lisp:defun export-lens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias lens-version)
   (common-lisp:declare (common-lisp:ignorable lens-alias lens-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-lens-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/export"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ExportLens"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-lens))
(common-lisp:progn
 (common-lisp:defun get-answer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias question-id
                     milestone-number)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias question-id
     milestone-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-answer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/answers/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'question-id))))
        "GetAnswer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-answer))
(common-lisp:progn
 (common-lisp:defun get-consolidated-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key format include-shared-resources
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable format include-shared-resources next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-consolidated-report-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/consolidatedReport" "GetConsolidatedReport"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-consolidated-report))
(common-lisp:progn
 (common-lisp:defun get-lens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias lens-version)
   (common-lisp:declare (common-lisp:ignorable lens-alias lens-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lens-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetLens"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lens))
(common-lisp:progn
 (common-lisp:defun get-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias milestone-number)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias milestone-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lens-review-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/lensReviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetLensReview"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lens-review))
(common-lisp:progn
 (common-lisp:defun get-lens-review-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias milestone-number)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias milestone-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lens-review-report-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/report"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetLensReviewReport"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lens-review-report))
(common-lisp:progn
 (common-lisp:defun get-lens-version-difference
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias base-lens-version
                     target-lens-version)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias base-lens-version target-lens-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-lens-version-difference-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/versionDifference"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetLensVersionDifference"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lens-version-difference))
(common-lisp:progn
 (common-lisp:defun get-milestone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id milestone-number)
   (common-lisp:declare (common-lisp:ignorable workload-id milestone-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-milestone-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/milestones/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'milestone-number))))
        "GetMilestone"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-milestone))
(common-lisp:progn
 (common-lisp:defun get-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn profile-version)
   (common-lisp:declare (common-lisp:ignorable profile-arn profile-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "GetProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-profile))
(common-lisp:progn
 (common-lisp:defun get-profile-template ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'wellarchitected-request :method "GET" :path
                                "/profileTemplate" :operation
                                "GetProfileTemplate"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-profile-template))
(common-lisp:progn
 (common-lisp:defun get-review-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn)
   (common-lisp:declare (common-lisp:ignorable template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-review-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/reviewTemplates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "GetReviewTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-review-template))
(common-lisp:progn
 (common-lisp:defun get-review-template-answer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias question-id)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias question-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-review-template-answer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A/answers/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'question-id))))
        "GetReviewTemplateAnswer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-review-template-answer))
(common-lisp:progn
 (common-lisp:defun get-review-template-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias)
   (common-lisp:declare (common-lisp:ignorable template-arn lens-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-review-template-lens-review-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetReviewTemplateLensReview"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-review-template-lens-review))
(common-lisp:progn
 (common-lisp:defun get-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id)
   (common-lisp:declare (common-lisp:ignorable workload-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workload-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "GetWorkload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workload))
(common-lisp:progn
 (common-lisp:defun import-lens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias jsonstring
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias jsonstring client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-lens-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PUT"
        "/importLens" "ImportLens"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-lens))
(common-lisp:progn
 (common-lisp:defun list-answers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias pillar-id
                     milestone-number next-token max-results question-priority)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias pillar-id milestone-number
     next-token max-results question-priority))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-answers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/answers"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ListAnswers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-answers))
(common-lisp:progn
 (common-lisp:defun list-check-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results
                     lens-arn pillar-id question-id choice-id)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results lens-arn
     pillar-id question-id choice-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-check-details-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/checks"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListCheckDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-check-details))
(common-lisp:progn
 (common-lisp:defun list-check-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results
                     lens-arn pillar-id question-id choice-id)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results lens-arn
     pillar-id question-id choice-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-check-summaries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/checkSummaries"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListCheckSummaries"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-check-summaries))
(common-lisp:progn
 (common-lisp:defun list-lens-review-improvements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias pillar-id
                     milestone-number next-token max-results question-priority)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias pillar-id milestone-number
     next-token max-results question-priority))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-lens-review-improvements-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/improvements"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ListLensReviewImprovements"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lens-review-improvements))
(common-lisp:progn
 (common-lisp:defun list-lens-reviews
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id milestone-number next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable workload-id milestone-number next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lens-reviews-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/lensReviews"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListLensReviews"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lens-reviews))
(common-lisp:progn
 (common-lisp:defun list-lens-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias shared-with-prefix next-token
                     max-results status)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias shared-with-prefix next-token max-results
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lens-shares-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ListLensShares"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lens-shares))
(common-lisp:progn
 (common-lisp:defun list-lenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results lens-type
                     lens-status lens-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results lens-type lens-status
     lens-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lenses-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/lenses" "ListLenses"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lenses))
(common-lisp:progn
 (common-lisp:defun list-milestones
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-milestones-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/milestonesSummaries"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListMilestones"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-milestones))
(common-lisp:progn
 (common-lisp:defun list-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results
                     resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notifications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/notifications" "ListNotifications"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-notifications))
(common-lisp:progn
 (common-lisp:defun list-profile-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profile-notifications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/profileNotifications/" "ListProfileNotifications"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profile-notifications))
(common-lisp:progn
 (common-lisp:defun list-profile-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn shared-with-prefix next-token
                     max-results status)
   (common-lisp:declare
    (common-lisp:ignorable profile-arn shared-with-prefix next-token
     max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profile-shares-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "ListProfileShares"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profile-shares))
(common-lisp:progn
 (common-lisp:defun list-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-name-prefix profile-owner-type
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable profile-name-prefix profile-owner-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/profileSummaries" "ListProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profiles))
(common-lisp:progn
 (common-lisp:defun list-review-template-answers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias pillar-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias pillar-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-review-template-answers-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A/answers"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ListReviewTemplateAnswers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-review-template-answers))
(common-lisp:progn
 (common-lisp:defun list-review-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-review-templates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/reviewTemplates" "ListReviewTemplates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-review-templates))
(common-lisp:progn
 (common-lisp:defun list-share-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-name-prefix lens-name-prefix
                     share-resource-type next-token max-results
                     profile-name-prefix template-name-prefix)
   (common-lisp:declare
    (common-lisp:ignorable workload-name-prefix lens-name-prefix
     share-resource-type next-token max-results profile-name-prefix
     template-name-prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-share-invitations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/shareInvitations" "ListShareInvitations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-share-invitations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-arn)
   (common-lisp:declare (common-lisp:ignorable workload-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-template-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn shared-with-prefix
                     next-token max-results status)
   (common-lisp:declare
    (common-lisp:ignorable template-arn shared-with-prefix next-token
     max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-template-shares-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "ListTemplateShares"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-template-shares))
(common-lisp:progn
 (common-lisp:defun list-workload-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id shared-with-prefix next-token
                     max-results status)
   (common-lisp:declare
    (common-lisp:ignorable workload-id shared-with-prefix next-token
     max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workload-shares-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListWorkloadShares"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workload-shares))
(common-lisp:progn
 (common-lisp:defun list-workloads
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-name-prefix next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable workload-name-prefix next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workloads-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/workloadsSummaries" "ListWorkloads"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workloads))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-arn tags)
   (common-lisp:declare (common-lisp:ignorable workload-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable workload-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-answer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias question-id
                     selected-choices choice-updates notes is-applicable
                     reason)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias question-id selected-choices
     choice-updates notes is-applicable reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-answer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/answers/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'question-id))))
        "UpdateAnswer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-answer))
(common-lisp:progn
 (common-lisp:defun update-global-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-sharing-status
                     discovery-integration-status)
   (common-lisp:declare
    (common-lisp:ignorable organization-sharing-status
     discovery-integration-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-global-settings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        "/global-settings" "UpdateGlobalSettings"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-global-settings))
(common-lisp:progn
 (common-lisp:defun update-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias lens-notes
                     pillar-notes)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias lens-notes pillar-notes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lens-review-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/lensReviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "UpdateLensReview"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-lens-review))
(common-lisp:progn
 (common-lisp:defun update-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn profile-description
                     profile-questions)
   (common-lisp:declare
    (common-lisp:ignorable profile-arn profile-description profile-questions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "UpdateProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-profile))
(common-lisp:progn
 (common-lisp:defun update-review-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn template-name description
                     notes lenses-to-associate lenses-to-disassociate)
   (common-lisp:declare
    (common-lisp:ignorable template-arn template-name description notes
     lenses-to-associate lenses-to-disassociate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-review-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/reviewTemplates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "UpdateReviewTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-review-template))
(common-lisp:progn
 (common-lisp:defun update-review-template-answer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias question-id
                     selected-choices choice-updates notes is-applicable
                     reason)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias question-id selected-choices
     choice-updates notes is-applicable reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-review-template-answer-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A/answers/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'question-id))))
        "UpdateReviewTemplateAnswer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-review-template-answer))
(common-lisp:progn
 (common-lisp:defun update-review-template-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias lens-notes
                     pillar-notes)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias lens-notes pillar-notes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-review-template-lens-review-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "UpdateReviewTemplateLensReview"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-review-template-lens-review))
(common-lisp:progn
 (common-lisp:defun update-share-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-invitation-id
                     share-invitation-action)
   (common-lisp:declare
    (common-lisp:ignorable share-invitation-id share-invitation-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-share-invitation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/shareInvitations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-invitation-id))))
        "UpdateShareInvitation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-share-invitation))
(common-lisp:progn
 (common-lisp:defun update-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id workload-name description
                     environment account-ids aws-regions non-aws-regions
                     pillar-priorities architectural-design review-owner
                     is-review-owner-update-acknowledged industry-type industry
                     notes improvement-status discovery-config applications)
   (common-lisp:declare
    (common-lisp:ignorable workload-id workload-name description environment
     account-ids aws-regions non-aws-regions pillar-priorities
     architectural-design review-owner is-review-owner-update-acknowledged
     industry-type industry notes improvement-status discovery-config
     applications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workload-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "UpdateWorkload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workload))
(common-lisp:progn
 (common-lisp:defun update-workload-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id workload-id permission-type)
   (common-lisp:declare
    (common-lisp:ignorable share-id workload-id permission-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workload-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "UpdateWorkloadShare"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workload-share))
(common-lisp:progn
 (common-lisp:defun upgrade-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias milestone-name
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias milestone-name
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upgrade-lens-review-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/upgrade"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "UpgradeLensReview"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'upgrade-lens-review))
(common-lisp:progn
 (common-lisp:defun upgrade-profile-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id profile-arn milestone-name
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id profile-arn milestone-name
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upgrade-profile-version-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/profiles/~A/upgrade"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "UpgradeProfileVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'upgrade-profile-version))
(common-lisp:progn
 (common-lisp:defun upgrade-review-template-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-upgrade-review-template-lens-review-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A/upgrade"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "UpgradeReviewTemplateLensReview"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'upgrade-review-template-lens-review))
