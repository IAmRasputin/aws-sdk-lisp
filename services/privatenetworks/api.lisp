;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/privatenetworks/api
  (:use)
  (:nicknames #:aws/privatenetworks)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/privatenetworks/api)
(common-lisp:progn
 (common-lisp:defclass privatenetworks-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "privatenetworks" :protocol
                        :rest-json))
 (common-lisp:export 'privatenetworks-request))
(common-lisp:progn
 (common-lisp:define-condition privatenetworks-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'privatenetworks-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (privatenetworks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass acknowledge-order-receipt-request common-lisp:nil
                       ((order-arn :initarg :|orderArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %acknowledge-order-receipt-request-order-arn :initform
                         (common-lisp:error ":orderarn is required"))))
 (common-lisp:export
  (common-lisp:list 'acknowledge-order-receipt-request
                    'make-acknowledge-order-receipt-request))
 (common-lisp:defun make-acknowledge-order-receipt-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'acknowledge-order-receipt-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-order-receipt-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-order-receipt-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-arn))
      (common-lisp:list
       (common-lisp:cons "orderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-order-receipt-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass acknowledge-order-receipt-response common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or order common-lisp:null) :accessor
                         %acknowledge-order-receipt-response-order :initform
                         (common-lisp:error ":order is required"))))
 (common-lisp:export
  (common-lisp:list 'acknowledge-order-receipt-response
                    'make-acknowledge-order-receipt-response))
 (common-lisp:defun make-acknowledge-order-receipt-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order)
   (common-lisp:apply #'common-lisp:make-instance
                      'acknowledge-order-receipt-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-order-receipt-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-order-receipt-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-order-receipt-response))
   common-lisp:nil))
(common-lisp:deftype acknowledgment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass activate-device-identifier-request common-lisp:nil
                       ((device-identifier-arn :initarg :|deviceIdentifierArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %activate-device-identifier-request-device-identifier-arn
                         :initform
                         (common-lisp:error
                          ":deviceidentifierarn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %activate-device-identifier-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activate-device-identifier-request
                    'make-activate-device-identifier-request))
 (common-lisp:defun make-activate-device-identifier-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-identifier-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-device-identifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-device-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-device-identifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-identifier-arn))
      (common-lisp:list
       (common-lisp:cons "deviceIdentifierArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-device-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-device-identifier-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %activate-device-identifier-response-tags :initform
                         common-lisp:nil)
                        (device-identifier :initarg :|deviceIdentifier| :type
                         (common-lisp:or device-identifier common-lisp:null)
                         :accessor
                         %activate-device-identifier-response-device-identifier
                         :initform
                         (common-lisp:error ":deviceidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'activate-device-identifier-response
                    'make-activate-device-identifier-response))
 (common-lisp:defun make-activate-device-identifier-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags device-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-device-identifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-device-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-device-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-identifier))
      (common-lisp:list
       (common-lisp:cons "deviceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-device-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-network-site-request common-lisp:nil
                       ((shipping-address :initarg :|shippingAddress| :type
                         (common-lisp:or address common-lisp:null) :accessor
                         %activate-network-site-request-shipping-address
                         :initform
                         (common-lisp:error ":shippingaddress is required"))
                        (network-site-arn :initarg :|networkSiteArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %activate-network-site-request-network-site-arn
                         :initform
                         (common-lisp:error ":networksitearn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %activate-network-site-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activate-network-site-request
                    'make-activate-network-site-request))
 (common-lisp:defun make-activate-network-site-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shipping-address network-site-arn
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-network-site-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-network-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-network-site-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site-arn))
      (common-lisp:list
       (common-lisp:cons "networkSiteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "shippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-network-site-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-network-site-response common-lisp:nil
                       ((network-site :initarg :|networkSite| :type
                         (common-lisp:or network-site common-lisp:null)
                         :accessor %activate-network-site-response-network-site
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activate-network-site-response
                    'make-activate-network-site-response))
 (common-lisp:defun make-activate-network-site-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-site)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-network-site-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-network-site-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-network-site-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site))
      (common-lisp:list
       (common-lisp:cons "networkSite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-network-site-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass address common-lisp:nil
                       ((street3 :initarg :|street3| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-street3 :initform common-lisp:nil)
                        (street2 :initarg :|street2| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-street2 :initform common-lisp:nil)
                        (street1 :initarg :|street1| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-street1 :initform
                         (common-lisp:error ":street1 is required"))
                        (state-or-province :initarg :|stateOrProvince| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-state-or-province :initform
                         (common-lisp:error ":stateorprovince is required"))
                        (postal-code :initarg :|postalCode| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-postal-code :initform
                         (common-lisp:error ":postalcode is required"))
                        (phone-number :initarg :|phoneNumber| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-phone-number :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-name :initform
                         (common-lisp:error ":name is required"))
                        (country :initarg :|country| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-country :initform
                         (common-lisp:error ":country is required"))
                        (company :initarg :|company| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-company :initform common-lisp:nil)
                        (city :initarg :|city| :type
                         (common-lisp:or address-content common-lisp:null)
                         :accessor %address-city :initform
                         (common-lisp:error ":city is required"))))
 (common-lisp:export (common-lisp:list 'address 'make-address))
 (common-lisp:defun make-address
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key street3 street2 street1 state-or-province
                     postal-code phone-number name country company city)
   (common-lisp:apply #'common-lisp:make-instance 'address
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "city"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company))
      (common-lisp:list
       (common-lisp:cons "company"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "phoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "postalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-or-province))
      (common-lisp:list
       (common-lisp:cons "stateOrProvince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street1))
      (common-lisp:list
       (common-lisp:cons "street1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street2))
      (common-lisp:list
       (common-lisp:cons "street2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street3))
      (common-lisp:list
       (common-lisp:cons "street3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address))
   common-lisp:nil))
(common-lisp:deftype address-content () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configure-access-point-request common-lisp:nil
                       ((position :initarg :|position| :type
                         (common-lisp:or position common-lisp:null) :accessor
                         %configure-access-point-request-position :initform
                         common-lisp:nil)
                        (cpi-username :initarg :|cpiUsername| :type
                         (common-lisp:or
                          configure-access-point-request-cpi-username-string
                          common-lisp:null)
                         :accessor %configure-access-point-request-cpi-username
                         :initform common-lisp:nil)
                        (cpi-user-password :initarg :|cpiUserPassword| :type
                         (common-lisp:or
                          configure-access-point-request-cpi-user-password-string
                          common-lisp:null)
                         :accessor
                         %configure-access-point-request-cpi-user-password
                         :initform common-lisp:nil)
                        (cpi-user-id :initarg :|cpiUserId| :type
                         (common-lisp:or
                          configure-access-point-request-cpi-user-id-string
                          common-lisp:null)
                         :accessor %configure-access-point-request-cpi-user-id
                         :initform common-lisp:nil)
                        (cpi-secret-key :initarg :|cpiSecretKey| :type
                         (common-lisp:or
                          configure-access-point-request-cpi-secret-key-string
                          common-lisp:null)
                         :accessor
                         %configure-access-point-request-cpi-secret-key
                         :initform common-lisp:nil)
                        (access-point-arn :initarg :|accessPointArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %configure-access-point-request-access-point-arn
                         :initform
                         (common-lisp:error ":accesspointarn is required"))))
 (common-lisp:export
  (common-lisp:list 'configure-access-point-request
                    'make-configure-access-point-request))
 (common-lisp:defun make-configure-access-point-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key position cpi-username cpi-user-password
                     cpi-user-id cpi-secret-key access-point-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'configure-access-point-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "accessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpi-secret-key))
      (common-lisp:list
       (common-lisp:cons "cpiSecretKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpi-user-id))
      (common-lisp:list
       (common-lisp:cons "cpiUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpi-user-password))
      (common-lisp:list
       (common-lisp:cons "cpiUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpi-username))
      (common-lisp:list
       (common-lisp:cons "cpiUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-access-point-request))
   common-lisp:nil))
(common-lisp:deftype configure-access-point-request-cpi-secret-key-string ()
  'common-lisp:string)
(common-lisp:deftype configure-access-point-request-cpi-user-id-string ()
  'common-lisp:string)
(common-lisp:deftype configure-access-point-request-cpi-user-password-string ()
  'common-lisp:string)
(common-lisp:deftype configure-access-point-request-cpi-username-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configure-access-point-response common-lisp:nil
                       ((access-point :initarg :|accessPoint| :type
                         (common-lisp:or network-resource common-lisp:null)
                         :accessor
                         %configure-access-point-response-access-point
                         :initform
                         (common-lisp:error ":accesspoint is required"))))
 (common-lisp:export
  (common-lisp:list 'configure-access-point-response
                    'make-configure-access-point-response))
 (common-lisp:defun make-configure-access-point-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-point)
   (common-lisp:apply #'common-lisp:make-instance
                      'configure-access-point-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-access-point-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-access-point-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point))
      (common-lisp:list
       (common-lisp:cons "accessPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-access-point-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-network-request-tags :initform
                         common-lisp:nil)
                        (network-name :initarg :|networkName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-network-request-network-name :initform
                         (common-lisp:error ":networkname is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-network-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-network-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-network-request 'make-create-network-request))
 (common-lisp:defun make-create-network-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags network-name description
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "networkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-network-response-tags :initform
                         common-lisp:nil)
                        (network :initarg :|network| :type
                         (common-lisp:or network common-lisp:null) :accessor
                         %create-network-response-network :initform
                         (common-lisp:error ":network is required"))))
 (common-lisp:export
  (common-lisp:list 'create-network-response 'make-create-network-response))
 (common-lisp:defun make-create-network-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags network)
   (common-lisp:apply #'common-lisp:make-instance 'create-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-site-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-network-site-request-tags :initform
                         common-lisp:nil)
                        (pending-plan :initarg :|pendingPlan| :type
                         (common-lisp:or site-plan common-lisp:null) :accessor
                         %create-network-site-request-pending-plan :initform
                         common-lisp:nil)
                        (network-site-name :initarg :|networkSiteName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-network-site-request-network-site-name
                         :initform
                         (common-lisp:error ":networksitename is required"))
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-network-site-request-network-arn :initform
                         (common-lisp:error ":networkarn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-network-site-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-network-site-request-client-token
                         :initform common-lisp:nil)
                        (availability-zone-id :initarg :|availabilityZoneId|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-network-site-request-availability-zone-id
                         :initform common-lisp:nil)
                        (availability-zone :initarg :|availabilityZone| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-network-site-request-availability-zone
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-network-site-request
                    'make-create-network-site-request))
 (common-lisp:defun make-create-network-site-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags pending-plan network-site-name
                     network-arn description client-token availability-zone-id
                     availability-zone)
   (common-lisp:apply #'common-lisp:make-instance 'create-network-site-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-site-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site-name))
      (common-lisp:list
       (common-lisp:cons "networkSiteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-plan))
      (common-lisp:list
       (common-lisp:cons "pendingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-site-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-site-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-network-site-response-tags :initform
                         common-lisp:nil)
                        (network-site :initarg :|networkSite| :type
                         (common-lisp:or network-site common-lisp:null)
                         :accessor %create-network-site-response-network-site
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-network-site-response
                    'make-create-network-site-response))
 (common-lisp:defun make-create-network-site-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags network-site)
   (common-lisp:apply #'common-lisp:make-instance 'create-network-site-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-site-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-site-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site))
      (common-lisp:list
       (common-lisp:cons "networkSite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-site-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deactivate-device-identifier-request common-lisp:nil
                       ((device-identifier-arn :initarg :|deviceIdentifierArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %deactivate-device-identifier-request-device-identifier-arn
                         :initform
                         (common-lisp:error
                          ":deviceidentifierarn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %deactivate-device-identifier-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deactivate-device-identifier-request
                    'make-deactivate-device-identifier-request))
 (common-lisp:defun make-deactivate-device-identifier-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-identifier-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'deactivate-device-identifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-device-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-device-identifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-identifier-arn))
      (common-lisp:list
       (common-lisp:cons "deviceIdentifierArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-device-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deactivate-device-identifier-response common-lisp:nil
                       ((device-identifier :initarg :|deviceIdentifier| :type
                         (common-lisp:or device-identifier common-lisp:null)
                         :accessor
                         %deactivate-device-identifier-response-device-identifier
                         :initform
                         (common-lisp:error ":deviceidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'deactivate-device-identifier-response
                    'make-deactivate-device-identifier-response))
 (common-lisp:defun make-deactivate-device-identifier-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'deactivate-device-identifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-device-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-device-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-identifier))
      (common-lisp:list
       (common-lisp:cons "deviceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-device-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-request common-lisp:nil
                       ((network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-network-request-network-arn :initform
                         (common-lisp:error ":networkarn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %delete-network-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-network-request 'make-delete-network-request))
 (common-lisp:defun make-delete-network-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-response common-lisp:nil
                       ((network :initarg :|network| :type
                         (common-lisp:or network common-lisp:null) :accessor
                         %delete-network-response-network :initform
                         (common-lisp:error ":network is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-network-response 'make-delete-network-response))
 (common-lisp:defun make-delete-network-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network)
   (common-lisp:apply #'common-lisp:make-instance 'delete-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-site-request common-lisp:nil
                       ((network-site-arn :initarg :|networkSiteArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-network-site-request-network-site-arn
                         :initform
                         (common-lisp:error ":networksitearn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %delete-network-site-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-network-site-request
                    'make-delete-network-site-request))
 (common-lisp:defun make-delete-network-site-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-site-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-network-site-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-site-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-site-response common-lisp:nil
                       ((network-site :initarg :|networkSite| :type
                         (common-lisp:or network-site common-lisp:null)
                         :accessor %delete-network-site-response-network-site
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-network-site-response
                    'make-delete-network-site-response))
 (common-lisp:defun make-delete-network-site-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-site)
   (common-lisp:apply #'common-lisp:make-instance 'delete-network-site-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-site-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-site-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site))
      (common-lisp:list
       (common-lisp:cons "networkSite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-site-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-identifier common-lisp:nil
                       ((vendor :initarg :|vendor| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %device-identifier-vendor :initform common-lisp:nil)
                        (traffic-group-arn :initarg :|trafficGroupArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %device-identifier-traffic-group-arn :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or device-identifier-status
                                         common-lisp:null)
                         :accessor %device-identifier-status :initform
                         common-lisp:nil)
                        (order-arn :initarg :|orderArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %device-identifier-order-arn :initform
                         common-lisp:nil)
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %device-identifier-network-arn :initform
                         common-lisp:nil)
                        (imsi :initarg :|imsi| :type
                         (common-lisp:or device-identifier-imsi-string
                                         common-lisp:null)
                         :accessor %device-identifier-imsi :initform
                         common-lisp:nil)
                        (iccid :initarg :|iccid| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %device-identifier-iccid :initform common-lisp:nil)
                        (device-identifier-arn :initarg :|deviceIdentifierArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %device-identifier-device-identifier-arn :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %device-identifier-created-at :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'device-identifier 'make-device-identifier))
 (common-lisp:defun make-device-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vendor traffic-group-arn status order-arn
                     network-arn imsi iccid device-identifier-arn created-at)
   (common-lisp:apply #'common-lisp:make-instance 'device-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-identifier-arn))
      (common-lisp:list
       (common-lisp:cons "deviceIdentifierArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iccid))
      (common-lisp:list
       (common-lisp:cons "iccid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imsi))
      (common-lisp:list
       (common-lisp:cons "imsi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-arn))
      (common-lisp:list
       (common-lisp:cons "orderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-group-arn))
      (common-lisp:list
       (common-lisp:cons "trafficGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-identifier))
   common-lisp:nil))
(common-lisp:deftype device-identifier-filter-keys () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-identifier-filter-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-device-identifier-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype device-identifier-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-device-identifier-filters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype device-identifier-imsi-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-identifier-list ()
   '(trivial-types:proper-list device-identifier))
 (common-lisp:defun |make-device-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-identifier-status () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype elevation-reference () 'common-lisp:string)
(common-lisp:deftype elevation-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-device-identifier-request common-lisp:nil
                       ((device-identifier-arn :initarg :|deviceIdentifierArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %get-device-identifier-request-device-identifier-arn
                         :initform
                         (common-lisp:error
                          ":deviceidentifierarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-device-identifier-request
                    'make-get-device-identifier-request))
 (common-lisp:defun make-get-device-identifier-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-identifier-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-device-identifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-identifier-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-device-identifier-response-tags :initform
                         common-lisp:nil)
                        (device-identifier :initarg :|deviceIdentifier| :type
                         (common-lisp:or device-identifier common-lisp:null)
                         :accessor
                         %get-device-identifier-response-device-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-device-identifier-response
                    'make-get-device-identifier-response))
 (common-lisp:defun make-get-device-identifier-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags device-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-device-identifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-identifier))
      (common-lisp:list
       (common-lisp:cons "deviceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-request common-lisp:nil
                       ((network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-network-request-network-arn :initform
                         (common-lisp:error ":networkarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-network-request 'make-get-network-request))
 (common-lisp:defun make-get-network-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-resource-request common-lisp:nil
                       ((network-resource-arn :initarg :|networkResourceArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %get-network-resource-request-network-resource-arn
                         :initform
                         (common-lisp:error
                          ":networkresourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-network-resource-request
                    'make-get-network-resource-request))
 (common-lisp:defun make-get-network-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-network-resource-response-tags :initform
                         common-lisp:nil)
                        (network-resource :initarg :|networkResource| :type
                         (common-lisp:or network-resource common-lisp:null)
                         :accessor
                         %get-network-resource-response-network-resource
                         :initform
                         (common-lisp:error ":networkresource is required"))))
 (common-lisp:export
  (common-lisp:list 'get-network-resource-response
                    'make-get-network-resource-response))
 (common-lisp:defun make-get-network-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags network-resource)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-resource))
      (common-lisp:list
       (common-lisp:cons "networkResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-network-response-tags :initform common-lisp:nil)
                        (network :initarg :|network| :type
                         (common-lisp:or network common-lisp:null) :accessor
                         %get-network-response-network :initform
                         (common-lisp:error ":network is required"))))
 (common-lisp:export
  (common-lisp:list 'get-network-response 'make-get-network-response))
 (common-lisp:defun make-get-network-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags network)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-site-request common-lisp:nil
                       ((network-site-arn :initarg :|networkSiteArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-network-site-request-network-site-arn :initform
                         (common-lisp:error ":networksitearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-network-site-request 'make-get-network-site-request))
 (common-lisp:defun make-get-network-site-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-site-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-site-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-site-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-site-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-network-site-response-tags :initform
                         common-lisp:nil)
                        (network-site :initarg :|networkSite| :type
                         (common-lisp:or network-site common-lisp:null)
                         :accessor %get-network-site-response-network-site
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-network-site-response
                    'make-get-network-site-response))
 (common-lisp:defun make-get-network-site-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags network-site)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-site-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-site-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-site-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site))
      (common-lisp:list
       (common-lisp:cons "networkSite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-site-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-order-request common-lisp:nil
                       ((order-arn :initarg :|orderArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-order-request-order-arn :initform
                         (common-lisp:error ":orderarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-order-request 'make-get-order-request))
 (common-lisp:defun make-get-order-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-order-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-order-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-order-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-order-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-order-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-order-response-tags :initform common-lisp:nil)
                        (order :initarg :|order| :type
                         (common-lisp:or order common-lisp:null) :accessor
                         %get-order-response-order :initform
                         (common-lisp:error ":order is required"))))
 (common-lisp:export
  (common-lisp:list 'get-order-response 'make-get-order-response))
 (common-lisp:defun make-get-order-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags order)
   (common-lisp:apply #'common-lisp:make-instance 'get-order-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-order-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-order-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-order-response))
   common-lisp:nil))
(common-lisp:deftype health-status () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (privatenetworks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (privatenetworks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-device-identifiers-request common-lisp:nil
                       ((start-token :initarg :|startToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-device-identifiers-request-start-token
                         :initform common-lisp:nil)
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-device-identifiers-request-network-arn :initform
                         (common-lisp:error ":networkarn is required"))
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-device-identifiers-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-device-identifiers-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or device-identifier-filters
                                         common-lisp:null)
                         :accessor %list-device-identifiers-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-device-identifiers-request
                    'make-list-device-identifiers-request))
 (common-lisp:defun make-list-device-identifiers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-token network-arn max-results
                     filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-device-identifiers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-identifiers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-identifiers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-token))
      (common-lisp:list
       (common-lisp:cons "startToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-identifiers-request))
   common-lisp:nil))
(common-lisp:deftype list-device-identifiers-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-device-identifiers-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-device-identifiers-response-next-token
                         :initform common-lisp:nil)
                        (device-identifiers :initarg :|deviceIdentifiers| :type
                         (common-lisp:or device-identifier-list
                                         common-lisp:null)
                         :accessor
                         %list-device-identifiers-response-device-identifiers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-device-identifiers-response
                    'make-list-device-identifiers-response))
 (common-lisp:defun make-list-device-identifiers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token device-identifiers)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-device-identifiers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-identifiers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-identifiers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-identifiers))
      (common-lisp:list
       (common-lisp:cons "deviceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-identifiers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-resources-request common-lisp:nil
                       ((start-token :initarg :|startToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-network-resources-request-start-token
                         :initform common-lisp:nil)
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-network-resources-request-network-arn :initform
                         (common-lisp:error ":networkarn is required"))
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-network-resources-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-network-resources-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or network-resource-filters
                                         common-lisp:null)
                         :accessor %list-network-resources-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-network-resources-request
                    'make-list-network-resources-request))
 (common-lisp:defun make-list-network-resources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-token network-arn max-results
                     filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-network-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-token))
      (common-lisp:list
       (common-lisp:cons "startToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-resources-request))
   common-lisp:nil))
(common-lisp:deftype list-network-resources-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-network-resources-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-network-resources-response-next-token
                         :initform common-lisp:nil)
                        (network-resources :initarg :|networkResources| :type
                         (common-lisp:or network-resource-list
                                         common-lisp:null)
                         :accessor
                         %list-network-resources-response-network-resources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-network-resources-response
                    'make-list-network-resources-response))
 (common-lisp:defun make-list-network-resources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token network-resources)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-network-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-resources))
      (common-lisp:list
       (common-lisp:cons "networkResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-sites-request common-lisp:nil
                       ((start-token :initarg :|startToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-network-sites-request-start-token
                         :initform common-lisp:nil)
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-network-sites-request-network-arn :initform
                         (common-lisp:error ":networkarn is required"))
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-network-sites-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-network-sites-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or network-site-filters common-lisp:null)
                         :accessor %list-network-sites-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-network-sites-request
                    'make-list-network-sites-request))
 (common-lisp:defun make-list-network-sites-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-token network-arn max-results
                     filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-network-sites-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-sites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-sites-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-token))
      (common-lisp:list
       (common-lisp:cons "startToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-sites-request))
   common-lisp:nil))
(common-lisp:deftype list-network-sites-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-network-sites-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-network-sites-response-next-token
                         :initform common-lisp:nil)
                        (network-sites :initarg :|networkSites| :type
                         (common-lisp:or network-site-list common-lisp:null)
                         :accessor %list-network-sites-response-network-sites
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-network-sites-response
                    'make-list-network-sites-response))
 (common-lisp:defun make-list-network-sites-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token network-sites)
   (common-lisp:apply #'common-lisp:make-instance 'list-network-sites-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-sites-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-sites-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-sites))
      (common-lisp:list
       (common-lisp:cons "networkSites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-sites-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-networks-request common-lisp:nil
                       ((start-token :initarg :|startToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-networks-request-start-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-networks-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-networks-request-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or network-filters common-lisp:null)
                         :accessor %list-networks-request-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-networks-request 'make-list-networks-request))
 (common-lisp:defun make-list-networks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-networks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-networks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-networks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-token))
      (common-lisp:list
       (common-lisp:cons "startToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-networks-request))
   common-lisp:nil))
(common-lisp:deftype list-networks-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-networks-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-networks-response-next-token :initform
                         common-lisp:nil)
                        (networks :initarg :|networks| :type
                         (common-lisp:or network-list common-lisp:null)
                         :accessor %list-networks-response-networks :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-networks-response 'make-list-networks-response))
 (common-lisp:defun make-list-networks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token networks)
   (common-lisp:apply #'common-lisp:make-instance 'list-networks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-networks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-networks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networks))
      (common-lisp:list
       (common-lisp:cons "networks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-networks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-orders-request common-lisp:nil
                       ((start-token :initarg :|startToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-orders-request-start-token :initform
                         common-lisp:nil)
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-orders-request-network-arn :initform
                         (common-lisp:error ":networkarn is required"))
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-orders-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-orders-request-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or order-filters common-lisp:null)
                         :accessor %list-orders-request-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-orders-request 'make-list-orders-request))
 (common-lisp:defun make-list-orders-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-token network-arn max-results
                     filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-orders-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-orders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-orders-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-token))
      (common-lisp:list
       (common-lisp:cons "startToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-orders-request))
   common-lisp:nil))
(common-lisp:deftype list-orders-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-orders-response common-lisp:nil
                       ((orders :initarg :|orders| :type
                         (common-lisp:or order-list common-lisp:null) :accessor
                         %list-orders-response-orders :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-orders-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-orders-response 'make-list-orders-response))
 (common-lisp:defun make-list-orders-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key orders next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-orders-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-orders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-orders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orders))
      (common-lisp:list
       (common-lisp:cons "orders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-orders-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass name-value-pair common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %name-value-pair-value :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %name-value-pair-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'name-value-pair 'make-name-value-pair))
 (common-lisp:defun make-name-value-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'name-value-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input name-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input name-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input name-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype name-value-pairs ()
   '(trivial-types:proper-list name-value-pair))
 (common-lisp:defun |make-name-value-pairs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network common-lisp:nil
                       ((status-reason :initarg :|statusReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-status-reason :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or network-status common-lisp:null)
                         :accessor %network-status :initform
                         (common-lisp:error ":status is required"))
                        (network-name :initarg :|networkName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %network-network-name :initform
                         (common-lisp:error ":networkname is required"))
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %network-network-arn :initform
                         (common-lisp:error ":networkarn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %network-description :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %network-created-at :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'network 'make-network))
 (common-lisp:defun make-network
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-reason status network-name
                     network-arn description created-at)
   (common-lisp:apply #'common-lisp:make-instance 'network
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "networkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network))
   common-lisp:nil))
(common-lisp:deftype network-filter-keys () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-filter-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-network-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-network-filters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype network-list () '(trivial-types:proper-list network))
 (common-lisp:defun |make-network-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-resource common-lisp:nil
                       ((vendor :initarg :|vendor| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-resource-vendor :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or network-resource-type
                                         common-lisp:null)
                         :accessor %network-resource-type :initform
                         common-lisp:nil)
                        (status-reason :initarg :|statusReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-resource-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or network-resource-status
                                         common-lisp:null)
                         :accessor %network-resource-status :initform
                         common-lisp:nil)
                        (serial-number :initarg :|serialNumber| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-resource-serial-number :initform
                         common-lisp:nil)
                        (return-information :initarg :|returnInformation| :type
                         (common-lisp:or return-information common-lisp:null)
                         :accessor %network-resource-return-information
                         :initform common-lisp:nil)
                        (position :initarg :|position| :type
                         (common-lisp:or position common-lisp:null) :accessor
                         %network-resource-position :initform common-lisp:nil)
                        (order-arn :initarg :|orderArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %network-resource-order-arn :initform common-lisp:nil)
                        (network-site-arn :initarg :|networkSiteArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %network-resource-network-site-arn :initform
                         common-lisp:nil)
                        (network-resource-arn :initarg :|networkResourceArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %network-resource-network-resource-arn :initform
                         common-lisp:nil)
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %network-resource-network-arn :initform
                         common-lisp:nil)
                        (model :initarg :|model| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-resource-model :initform common-lisp:nil)
                        (health :initarg :|health| :type
                         (common-lisp:or health-status common-lisp:null)
                         :accessor %network-resource-health :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %network-resource-description :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %network-resource-created-at :initform
                         common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or name-value-pairs common-lisp:null)
                         :accessor %network-resource-attributes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-resource 'make-network-resource))
 (common-lisp:defun make-network-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vendor type status-reason status
                     serial-number return-information position order-arn
                     network-site-arn network-resource-arn network-arn model
                     health description created-at attributes)
   (common-lisp:apply #'common-lisp:make-instance 'network-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-resource-arn))
      (common-lisp:list
       (common-lisp:cons "networkResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site-arn))
      (common-lisp:list
       (common-lisp:cons "networkSiteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-arn))
      (common-lisp:list
       (common-lisp:cons "orderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-information))
      (common-lisp:list
       (common-lisp:cons "returnInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "serialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-resource-definition common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or network-resource-definition-type
                                         common-lisp:null)
                         :accessor %network-resource-definition-type :initform
                         (common-lisp:error ":type is required"))
                        (options :initarg :|options| :type
                         (common-lisp:or options common-lisp:null) :accessor
                         %network-resource-definition-options :initform
                         common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or
                          network-resource-definition-count-integer
                          common-lisp:null)
                         :accessor %network-resource-definition-count :initform
                         (common-lisp:error ":count is required"))))
 (common-lisp:export
  (common-lisp:list 'network-resource-definition
                    'make-network-resource-definition))
 (common-lisp:defun make-network-resource-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type options count)
   (common-lisp:apply #'common-lisp:make-instance 'network-resource-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-definition))
   common-lisp:nil))
(common-lisp:deftype network-resource-definition-count-integer ()
  'common-lisp:integer)
(common-lisp:deftype network-resource-definition-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-resource-definitions ()
   '(trivial-types:proper-list network-resource-definition))
 (common-lisp:defun |make-network-resource-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            network-resource-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype network-resource-filter-keys () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-resource-filter-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-network-resource-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-resource-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-network-resource-filters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype network-resource-list ()
   '(trivial-types:proper-list network-resource))
 (common-lisp:defun |make-network-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype network-resource-status () 'common-lisp:string)
(common-lisp:deftype network-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-site common-lisp:nil
                       ((status-reason :initarg :|statusReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-site-status-reason :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or network-site-status common-lisp:null)
                         :accessor %network-site-status :initform
                         (common-lisp:error ":status is required"))
                        (pending-plan :initarg :|pendingPlan| :type
                         (common-lisp:or site-plan common-lisp:null) :accessor
                         %network-site-pending-plan :initform common-lisp:nil)
                        (network-site-name :initarg :|networkSiteName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %network-site-network-site-name :initform
                         (common-lisp:error ":networksitename is required"))
                        (network-site-arn :initarg :|networkSiteArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %network-site-network-site-arn :initform
                         (common-lisp:error ":networksitearn is required"))
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %network-site-network-arn :initform
                         (common-lisp:error ":networkarn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %network-site-description :initform
                         common-lisp:nil)
                        (current-plan :initarg :|currentPlan| :type
                         (common-lisp:or site-plan common-lisp:null) :accessor
                         %network-site-current-plan :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %network-site-created-at :initform common-lisp:nil)
                        (availability-zone-id :initarg :|availabilityZoneId|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %network-site-availability-zone-id :initform
                         common-lisp:nil)
                        (availability-zone :initarg :|availabilityZone| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-site-availability-zone :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'network-site 'make-network-site))
 (common-lisp:defun make-network-site
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-reason status pending-plan
                     network-site-name network-site-arn network-arn description
                     current-plan created-at availability-zone-id
                     availability-zone)
   (common-lisp:apply #'common-lisp:make-instance 'network-site
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-site))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-site))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-plan))
      (common-lisp:list
       (common-lisp:cons "currentPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site-arn))
      (common-lisp:list
       (common-lisp:cons "networkSiteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site-name))
      (common-lisp:list
       (common-lisp:cons "networkSiteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-plan))
      (common-lisp:list
       (common-lisp:cons "pendingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-site))
   common-lisp:nil))
(common-lisp:deftype network-site-filter-keys () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-site-filter-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-network-site-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-site-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-network-site-filters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype network-site-list ()
   '(trivial-types:proper-list network-site))
 (common-lisp:defun |make-network-site-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-site))
   aws-sdk/generator/shape::members))
(common-lisp:deftype network-site-status () 'common-lisp:string)
(common-lisp:deftype network-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype options () '(trivial-types:proper-list name-value-pair))
 (common-lisp:defun |make-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass order common-lisp:nil
                       ((tracking-information :initarg :|trackingInformation|
                         :type
                         (common-lisp:or tracking-information-list
                                         common-lisp:null)
                         :accessor %order-tracking-information :initform
                         common-lisp:nil)
                        (shipping-address :initarg :|shippingAddress| :type
                         (common-lisp:or address common-lisp:null) :accessor
                         %order-shipping-address :initform common-lisp:nil)
                        (order-arn :initarg :|orderArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %order-order-arn :initform common-lisp:nil)
                        (network-site-arn :initarg :|networkSiteArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %order-network-site-arn :initform common-lisp:nil)
                        (network-arn :initarg :|networkArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %order-network-arn :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %order-created-at :initform common-lisp:nil)
                        (acknowledgment-status :initarg :|acknowledgmentStatus|
                         :type
                         (common-lisp:or acknowledgment-status
                                         common-lisp:null)
                         :accessor %order-acknowledgment-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'order 'make-order))
 (common-lisp:defun make-order
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tracking-information shipping-address
                     order-arn network-site-arn network-arn created-at
                     acknowledgment-status)
   (common-lisp:apply #'common-lisp:make-instance 'order
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acknowledgment-status))
      (common-lisp:list
       (common-lisp:cons "acknowledgmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-arn))
      (common-lisp:list
       (common-lisp:cons "networkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site-arn))
      (common-lisp:list
       (common-lisp:cons "networkSiteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-arn))
      (common-lisp:list
       (common-lisp:cons "orderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "shippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tracking-information))
      (common-lisp:list
       (common-lisp:cons "trackingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order))
   common-lisp:nil))
(common-lisp:deftype order-filter-keys () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype order-filter-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-order-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype order-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-order-filters| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype order-list () '(trivial-types:proper-list order))
 (common-lisp:defun |make-order-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list order))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ping-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ping-response-status :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ping-response 'make-ping-response))
 (common-lisp:defun make-ping-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'ping-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ping-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ping-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ping-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass position common-lisp:nil
                       ((longitude :initarg :|longitude| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %position-longitude :initform common-lisp:nil)
                        (latitude :initarg :|latitude| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %position-latitude :initform common-lisp:nil)
                        (elevation-unit :initarg :|elevationUnit| :type
                         (common-lisp:or elevation-unit common-lisp:null)
                         :accessor %position-elevation-unit :initform
                         common-lisp:nil)
                        (elevation-reference :initarg :|elevationReference|
                         :type
                         (common-lisp:or elevation-reference common-lisp:null)
                         :accessor %position-elevation-reference :initform
                         common-lisp:nil)
                        (elevation :initarg :|elevation| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %position-elevation :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'position 'make-position))
 (common-lisp:defun make-position
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key longitude latitude elevation-unit
                     elevation-reference elevation)
   (common-lisp:apply #'common-lisp:make-instance 'position
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elevation))
      (common-lisp:list
       (common-lisp:cons "elevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elevation-reference))
      (common-lisp:list
       (common-lisp:cons "elevationReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elevation-unit))
      (common-lisp:list
       (common-lisp:cons "elevationUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latitude))
      (common-lisp:list
       (common-lisp:cons "latitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'longitude))
      (common-lisp:list
       (common-lisp:cons "longitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input position))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (privatenetworks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass return-information common-lisp:nil
                       ((shipping-label :initarg :|shippingLabel| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %return-information-shipping-label :initform
                         common-lisp:nil)
                        (shipping-address :initarg :|shippingAddress| :type
                         (common-lisp:or address common-lisp:null) :accessor
                         %return-information-shipping-address :initform
                         common-lisp:nil)
                        (return-reason :initarg :|returnReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %return-information-return-reason :initform
                         common-lisp:nil)
                        (replacement-order-arn :initarg :|replacementOrderArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %return-information-replacement-order-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'return-information 'make-return-information))
 (common-lisp:defun make-return-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shipping-label shipping-address
                     return-reason replacement-order-arn)
   (common-lisp:apply #'common-lisp:make-instance 'return-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input return-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input return-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replacement-order-arn))
      (common-lisp:list
       (common-lisp:cons "replacementOrderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-reason))
      (common-lisp:list
       (common-lisp:cons "returnReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "shippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-label))
      (common-lisp:list
       (common-lisp:cons "shippingLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input return-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass site-plan common-lisp:nil
                       ((resource-definitions :initarg :|resourceDefinitions|
                         :type
                         (common-lisp:or network-resource-definitions
                                         common-lisp:null)
                         :accessor %site-plan-resource-definitions :initform
                         common-lisp:nil)
                        (options :initarg :|options| :type
                         (common-lisp:or options common-lisp:null) :accessor
                         %site-plan-options :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'site-plan 'make-site-plan))
 (common-lisp:defun make-site-plan
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-definitions options)
   (common-lisp:apply #'common-lisp:make-instance 'site-plan
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input site-plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input site-plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-definitions))
      (common-lisp:list
       (common-lisp:cons "resourceDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input site-plan))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-network-resource-update-request common-lisp:nil
                       ((update-type :initarg :|updateType| :type
                         (common-lisp:or update-type common-lisp:null)
                         :accessor
                         %start-network-resource-update-request-update-type
                         :initform
                         (common-lisp:error ":updatetype is required"))
                        (shipping-address :initarg :|shippingAddress| :type
                         (common-lisp:or address common-lisp:null) :accessor
                         %start-network-resource-update-request-shipping-address
                         :initform common-lisp:nil)
                        (return-reason :initarg :|returnReason| :type
                         (common-lisp:or
                          start-network-resource-update-request-return-reason-string
                          common-lisp:null)
                         :accessor
                         %start-network-resource-update-request-return-reason
                         :initform common-lisp:nil)
                        (network-resource-arn :initarg :|networkResourceArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %start-network-resource-update-request-network-resource-arn
                         :initform
                         (common-lisp:error
                          ":networkresourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-network-resource-update-request
                    'make-start-network-resource-update-request))
 (common-lisp:defun make-start-network-resource-update-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-type shipping-address
                     return-reason network-resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-network-resource-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-network-resource-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-network-resource-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-resource-arn))
      (common-lisp:list
       (common-lisp:cons "networkResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-reason))
      (common-lisp:list
       (common-lisp:cons "returnReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "shippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-network-resource-update-request))
   common-lisp:nil))
(common-lisp:deftype start-network-resource-update-request-return-reason-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-network-resource-update-response common-lisp:nil
                       ((network-resource :initarg :|networkResource| :type
                         (common-lisp:or network-resource common-lisp:null)
                         :accessor
                         %start-network-resource-update-response-network-resource
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-network-resource-update-response
                    'make-start-network-resource-update-response))
 (common-lisp:defun make-start-network-resource-update-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-resource)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-network-resource-update-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-network-resource-update-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-network-resource-update-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-resource))
      (common-lisp:list
       (common-lisp:cons "networkResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-network-resource-update-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (privatenetworks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tracking-information common-lisp:nil
                       ((tracking-number :initarg :|trackingNumber| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tracking-information-tracking-number :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tracking-information 'make-tracking-information))
 (common-lisp:defun make-tracking-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tracking-number)
   (common-lisp:apply #'common-lisp:make-instance 'tracking-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tracking-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tracking-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-number))
      (common-lisp:list
       (common-lisp:cons "trackingNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tracking-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tracking-information-list ()
   '(trivial-types:proper-list tracking-information))
 (common-lisp:defun |make-tracking-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tracking-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-site-plan-request common-lisp:nil
                       ((pending-plan :initarg :|pendingPlan| :type
                         (common-lisp:or site-plan common-lisp:null) :accessor
                         %update-network-site-plan-request-pending-plan
                         :initform
                         (common-lisp:error ":pendingplan is required"))
                        (network-site-arn :initarg :|networkSiteArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-network-site-plan-request-network-site-arn
                         :initform
                         (common-lisp:error ":networksitearn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-network-site-plan-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-network-site-plan-request
                    'make-update-network-site-plan-request))
 (common-lisp:defun make-update-network-site-plan-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pending-plan network-site-arn
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-site-plan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-site-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-site-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site-arn))
      (common-lisp:list
       (common-lisp:cons "networkSiteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-plan))
      (common-lisp:list
       (common-lisp:cons "pendingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-site-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-site-request common-lisp:nil
                       ((network-site-arn :initarg :|networkSiteArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-network-site-request-network-site-arn
                         :initform
                         (common-lisp:error ":networksitearn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-network-site-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-network-site-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-network-site-request
                    'make-update-network-site-request))
 (common-lisp:defun make-update-network-site-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-site-arn description
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-network-site-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-site-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site-arn))
      (common-lisp:list
       (common-lisp:cons "networkSiteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-site-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-site-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %update-network-site-response-tags :initform
                         common-lisp:nil)
                        (network-site :initarg :|networkSite| :type
                         (common-lisp:or network-site common-lisp:null)
                         :accessor %update-network-site-response-network-site
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-network-site-response
                    'make-update-network-site-response))
 (common-lisp:defun make-update-network-site-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags network-site)
   (common-lisp:apply #'common-lisp:make-instance 'update-network-site-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-site-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-site-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-site))
      (common-lisp:list
       (common-lisp:cons "networkSite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-site-response))
   common-lisp:nil))
(common-lisp:deftype update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (privatenetworks-error)
     ((field-list :initarg :|fieldList| :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))
                        (message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name message)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun acknowledge-order-receipt
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key order-arn)
   (common-lisp:declare (common-lisp:ignorable order-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-acknowledge-order-receipt-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/orders/acknowledge" "AcknowledgeOrderReceipt"
        "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'acknowledge-order-receipt))
(common-lisp:progn
 (common-lisp:defun activate-device-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token device-identifier-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token device-identifier-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-activate-device-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/device-identifiers/activate" "ActivateDeviceIdentifier"
        "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-device-identifier))
(common-lisp:progn
 (common-lisp:defun activate-network-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token network-site-arn
                     shipping-address)
   (common-lisp:declare
    (common-lisp:ignorable client-token network-site-arn shipping-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-network-site-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/network-sites/activate" "ActivateNetworkSite"
        "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-network-site))
(common-lisp:progn
 (common-lisp:defun configure-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-point-arn cpi-secret-key
                     cpi-user-id cpi-user-password cpi-username position)
   (common-lisp:declare
    (common-lisp:ignorable access-point-arn cpi-secret-key cpi-user-id
     cpi-user-password cpi-username position))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-configure-access-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/network-resources/configure" "ConfigureAccessPoint"
        "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'configure-access-point))
(common-lisp:progn
 (common-lisp:defun create-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description network-name
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description network-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/networks" "CreateNetwork" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-network))
(common-lisp:progn
 (common-lisp:defun create-network-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone availability-zone-id
                     client-token description network-arn network-site-name
                     pending-plan tags)
   (common-lisp:declare
    (common-lisp:ignorable availability-zone availability-zone-id client-token
     description network-arn network-site-name pending-plan tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-site-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/network-sites" "CreateNetworkSite" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-network-site))
(common-lisp:progn
 (common-lisp:defun deactivate-device-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token device-identifier-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token device-identifier-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deactivate-device-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/device-identifiers/deactivate"
        "DeactivateDeviceIdentifier" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-device-identifier))
(common-lisp:progn
 (common-lisp:defun delete-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token network-arn)
   (common-lisp:declare (common-lisp:ignorable client-token network-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v1/networks/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-arn))))
        "DeleteNetwork" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-network))
(common-lisp:progn
 (common-lisp:defun delete-network-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token network-site-arn)
   (common-lisp:declare (common-lisp:ignorable client-token network-site-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-network-site-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v1/network-sites/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-site-arn))))
        "DeleteNetworkSite" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-network-site))
(common-lisp:progn
 (common-lisp:defun get-device-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-identifier-arn)
   (common-lisp:declare (common-lisp:ignorable device-identifier-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-identifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v1/device-identifiers/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'device-identifier-arn))))
        "GetDeviceIdentifier" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-device-identifier))
(common-lisp:progn
 (common-lisp:defun get-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-arn)
   (common-lisp:declare (common-lisp:ignorable network-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v1/networks/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-arn))))
        "GetNetwork" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-network))
(common-lisp:progn
 (common-lisp:defun get-network-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-resource-arn)
   (common-lisp:declare (common-lisp:ignorable network-resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v1/network-resources/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-resource-arn))))
        "GetNetworkResource" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-network-resource))
(common-lisp:progn
 (common-lisp:defun get-network-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-site-arn)
   (common-lisp:declare (common-lisp:ignorable network-site-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-site-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v1/network-sites/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-site-arn))))
        "GetNetworkSite" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-network-site))
(common-lisp:progn
 (common-lisp:defun get-order
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key order-arn)
   (common-lisp:declare (common-lisp:ignorable order-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-order-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v1/orders/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'order-arn))))
        "GetOrder" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-order))
(common-lisp:progn
 (common-lisp:defun list-device-identifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results network-arn
                     start-token)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results network-arn start-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-device-identifiers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/device-identifiers/list" "ListDeviceIdentifiers"
        "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-device-identifiers))
(common-lisp:progn
 (common-lisp:defun list-network-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results network-arn
                     start-token)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results network-arn start-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-network-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/network-resources" "ListNetworkResources"
        "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-network-resources))
(common-lisp:progn
 (common-lisp:defun list-network-sites
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results network-arn
                     start-token)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results network-arn start-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-network-sites-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/network-sites/list" "ListNetworkSites" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-network-sites))
(common-lisp:progn
 (common-lisp:defun list-networks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results start-token)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results start-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-networks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/networks/list" "ListNetworks" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-networks))
(common-lisp:progn
 (common-lisp:defun list-orders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results network-arn
                     start-token)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results network-arn start-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-orders-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/orders/list" "ListOrders" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-orders))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun ping ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'privatenetworks-request :method "GET" :path
                                "/ping" :protocol :rest-json :operation "Ping"
                                :params
                                `(("Action" ,@"Ping")
                                  ("Version" ,@"2021-12-03"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'ping))
(common-lisp:progn
 (common-lisp:defun start-network-resource-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-resource-arn return-reason
                     shipping-address update-type)
   (common-lisp:declare
    (common-lisp:ignorable network-resource-arn return-reason shipping-address
     update-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-network-resource-update-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json "/v1/network-resources/update" "StartNetworkResourceUpdate"
        "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-network-resource-update))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-network-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     network-site-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token description network-site-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-network-site-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "PUT"
        :rest-json "/v1/network-sites/site" "UpdateNetworkSite" "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-network-site))
(common-lisp:progn
 (common-lisp:defun update-network-site-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token network-site-arn
                     pending-plan)
   (common-lisp:declare
    (common-lisp:ignorable client-token network-site-arn pending-plan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-network-site-plan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'privatenetworks-request aws-sdk/generator/operation::input "PUT"
        :rest-json "/v1/network-sites/plan" "UpdateNetworkSitePlan"
        "2021-12-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-network-site-plan))
