;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/emr-serverless/api
  (:use)
  (:nicknames #:aws/emr-serverless)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/emr-serverless/api)
(common-lisp:progn
 (common-lisp:defclass emr-serverless-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "emr-serverless" :protocol
                        :rest-json))
 (common-lisp:export 'emr-serverless-request))
(common-lisp:progn
 (common-lisp:define-condition emr-serverless-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'emr-serverless-error))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass application common-lisp:nil
                       ((worker-type-specifications :initarg
                         :|workerTypeSpecifications| :type
                         (common-lisp:or worker-type-specification-map
                                         common-lisp:null)
                         :accessor %application-worker-type-specifications
                         :initform common-lisp:nil)
                        (image-configuration :initarg :|imageConfiguration|
                         :type
                         (common-lisp:or image-configuration common-lisp:null)
                         :accessor %application-image-configuration :initform
                         common-lisp:nil)
                        (architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %application-architecture :initform
                         common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor %application-network-configuration :initform
                         common-lisp:nil)
                        (auto-stop-configuration :initarg
                         :|autoStopConfiguration| :type
                         (common-lisp:or auto-stop-config common-lisp:null)
                         :accessor %application-auto-stop-configuration
                         :initform common-lisp:nil)
                        (auto-start-configuration :initarg
                         :|autoStartConfiguration| :type
                         (common-lisp:or auto-start-config common-lisp:null)
                         :accessor %application-auto-start-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %application-tags :initform common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %application-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %application-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (maximum-capacity :initarg :|maximumCapacity| :type
                         (common-lisp:or maximum-allowed-resources
                                         common-lisp:null)
                         :accessor %application-maximum-capacity :initform
                         common-lisp:nil)
                        (initial-capacity :initarg :|initialCapacity| :type
                         (common-lisp:or initial-capacity-config-map
                                         common-lisp:null)
                         :accessor %application-initial-capacity :initform
                         common-lisp:nil)
                        (state-details :initarg :|stateDetails| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %application-state-details :initform common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or application-state common-lisp:null)
                         :accessor %application-state :initform
                         (common-lisp:error ":state is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or engine-type common-lisp:null)
                         :accessor %application-type :initform
                         (common-lisp:error ":type is required"))
                        (release-label :initarg :|releaseLabel| :type
                         (common-lisp:or release-label common-lisp:null)
                         :accessor %application-release-label :initform
                         (common-lisp:error ":releaselabel is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or application-arn common-lisp:null)
                         :accessor %application-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %application-name :initform common-lisp:nil)
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %application-application-id :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export (common-lisp:list 'application 'make-application))
 (common-lisp:defun make-application
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key worker-type-specifications
                     image-configuration architecture network-configuration
                     auto-stop-configuration auto-start-configuration tags
                     updated-at created-at maximum-capacity initial-capacity
                     state-details state type release-label arn name
                     application-id)
   (common-lisp:apply #'common-lisp:make-instance 'application
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-details))
      (common-lisp:list
       (common-lisp:cons "stateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-capacity))
      (common-lisp:list
       (common-lisp:cons "initialCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-capacity))
      (common-lisp:list
       (common-lisp:cons "maximumCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-start-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-stop-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStopConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-type-specifications))
      (common-lisp:list
       (common-lisp:cons "workerTypeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application))
   common-lisp:nil))
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:deftype application-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-list ()
   '(trivial-types:proper-list application-summary))
 (common-lisp:defun |make-application-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:deftype application-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-state-set ()
   '(trivial-types:proper-list application-state))
 (common-lisp:defun |make-application-state-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-summary common-lisp:nil
                       ((architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %application-summary-architecture :initform
                         common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %application-summary-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %application-summary-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (state-details :initarg :|stateDetails| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %application-summary-state-details :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or application-state common-lisp:null)
                         :accessor %application-summary-state :initform
                         (common-lisp:error ":state is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or engine-type common-lisp:null)
                         :accessor %application-summary-type :initform
                         (common-lisp:error ":type is required"))
                        (release-label :initarg :|releaseLabel| :type
                         (common-lisp:or release-label common-lisp:null)
                         :accessor %application-summary-release-label :initform
                         (common-lisp:error ":releaselabel is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or application-arn common-lisp:null)
                         :accessor %application-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %application-summary-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %application-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'application-summary 'make-application-summary))
 (common-lisp:defun make-application-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key architecture updated-at created-at
                     state-details state type release-label arn name id)
   (common-lisp:apply #'common-lisp:make-instance 'application-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-details))
      (common-lisp:list
       (common-lisp:cons "stateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-summary))
   common-lisp:nil))
(common-lisp:deftype architecture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-start-config common-lisp:nil
                       ((enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %auto-start-config-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-start-config 'make-auto-start-config))
 (common-lisp:defun make-auto-start-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'auto-start-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-start-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-start-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-start-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-stop-config common-lisp:nil
                       ((idle-timeout-minutes :initarg :|idleTimeoutMinutes|
                         :type
                         (common-lisp:or
                          auto-stop-config-idle-timeout-minutes-integer
                          common-lisp:null)
                         :accessor %auto-stop-config-idle-timeout-minutes
                         :initform common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %auto-stop-config-enabled :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-stop-config 'make-auto-stop-config))
 (common-lisp:defun make-auto-stop-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idle-timeout-minutes enabled)
   (common-lisp:apply #'common-lisp:make-instance 'auto-stop-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-stop-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-stop-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "idleTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-stop-config))
   common-lisp:nil))
(common-lisp:deftype auto-stop-config-idle-timeout-minutes-integer ()
  'common-lisp:integer)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-job-run-request common-lisp:nil
                       ((job-run-id :initarg :|jobRunId| :type
                         (common-lisp:or job-run-id common-lisp:null) :accessor
                         %cancel-job-run-request-job-run-id :initform
                         (common-lisp:error ":jobrunid is required"))
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %cancel-job-run-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-job-run-request 'make-cancel-job-run-request))
 (common-lisp:defun make-cancel-job-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-run-id application-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-run-response common-lisp:nil
                       ((job-run-id :initarg :|jobRunId| :type
                         (common-lisp:or job-run-id common-lisp:null) :accessor
                         %cancel-job-run-response-job-run-id :initform
                         (common-lisp:error ":jobrunid is required"))
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %cancel-job-run-response-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-job-run-response 'make-cancel-job-run-response))
 (common-lisp:defun make-cancel-job-run-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-run-id application-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "jobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-response))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration common-lisp:nil
                       ((configurations :initarg :|configurations| :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor %configuration-configurations :initform
                         common-lisp:nil)
                        (properties :initarg :|properties| :type
                         (common-lisp:or sensitive-properties-map
                                         common-lisp:null)
                         :accessor %configuration-properties :initform
                         common-lisp:nil)
                        (classification :initarg :|classification| :type
                         (common-lisp:or string1024 common-lisp:null) :accessor
                         %configuration-classification :initform
                         (common-lisp:error ":classification is required"))))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defun make-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configurations properties classification)
   (common-lisp:apply #'common-lisp:make-instance 'configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-list ()
   '(trivial-types:proper-list configuration))
 (common-lisp:defun |make-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass configuration-overrides common-lisp:nil
                       ((monitoring-configuration :initarg
                         :|monitoringConfiguration| :type
                         (common-lisp:or monitoring-configuration
                                         common-lisp:null)
                         :accessor
                         %configuration-overrides-monitoring-configuration
                         :initform common-lisp:nil)
                        (application-configuration :initarg
                         :|applicationConfiguration| :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor
                         %configuration-overrides-application-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configuration-overrides 'make-configuration-overrides))
 (common-lisp:defun make-configuration-overrides
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monitoring-configuration
                     application-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-overrides
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-overrides))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-overrides))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration))
      (common-lisp:list
       (common-lisp:cons "applicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "monitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-overrides))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (emr-serverless-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype cpu-size () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-application-request common-lisp:nil
                       ((worker-type-specifications :initarg
                         :|workerTypeSpecifications| :type
                         (common-lisp:or worker-type-specification-input-map
                                         common-lisp:null)
                         :accessor
                         %create-application-request-worker-type-specifications
                         :initform common-lisp:nil)
                        (image-configuration :initarg :|imageConfiguration|
                         :type
                         (common-lisp:or image-configuration-input
                                         common-lisp:null)
                         :accessor
                         %create-application-request-image-configuration
                         :initform common-lisp:nil)
                        (architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %create-application-request-architecture
                         :initform common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         %create-application-request-network-configuration
                         :initform common-lisp:nil)
                        (auto-stop-configuration :initarg
                         :|autoStopConfiguration| :type
                         (common-lisp:or auto-stop-config common-lisp:null)
                         :accessor
                         %create-application-request-auto-stop-configuration
                         :initform common-lisp:nil)
                        (auto-start-configuration :initarg
                         :|autoStartConfiguration| :type
                         (common-lisp:or auto-start-config common-lisp:null)
                         :accessor
                         %create-application-request-auto-start-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-application-request-tags :initform
                         common-lisp:nil)
                        (maximum-capacity :initarg :|maximumCapacity| :type
                         (common-lisp:or maximum-allowed-resources
                                         common-lisp:null)
                         :accessor %create-application-request-maximum-capacity
                         :initform common-lisp:nil)
                        (initial-capacity :initarg :|initialCapacity| :type
                         (common-lisp:or initial-capacity-config-map
                                         common-lisp:null)
                         :accessor %create-application-request-initial-capacity
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-application-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or engine-type common-lisp:null)
                         :accessor %create-application-request-type :initform
                         (common-lisp:error ":type is required"))
                        (release-label :initarg :|releaseLabel| :type
                         (common-lisp:or release-label common-lisp:null)
                         :accessor %create-application-request-release-label
                         :initform
                         (common-lisp:error ":releaselabel is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %create-application-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defun make-create-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key worker-type-specifications
                     image-configuration architecture network-configuration
                     auto-stop-configuration auto-start-configuration tags
                     maximum-capacity initial-capacity client-token type
                     release-label name)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-capacity))
      (common-lisp:list
       (common-lisp:cons "initialCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-capacity))
      (common-lisp:list
       (common-lisp:cons "maximumCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-start-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-stop-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStopConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-type-specifications))
      (common-lisp:list
       (common-lisp:cons "workerTypeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or application-arn common-lisp:null)
                         :accessor %create-application-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %create-application-response-name :initform
                         common-lisp:nil)
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %create-application-response-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defun make-create-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name application-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-application-request common-lisp:nil
                       ((application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %delete-application-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defun make-delete-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defun make-delete-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:deftype disk-size () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype duration () 'common-lisp:integer)
(common-lisp:deftype encryption-key-arn () 'common-lisp:string)
(common-lisp:deftype engine-type () 'common-lisp:string)
(common-lisp:deftype entry-point-argument () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype entry-point-arguments ()
   '(trivial-types:proper-list entry-point-argument))
 (common-lisp:defun |make-entry-point-arguments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entry-point-argument))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entry-point-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-application-request common-lisp:nil
                       ((application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %get-application-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-application-request 'make-get-application-request))
 (common-lisp:defun make-get-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-response common-lisp:nil
                       ((application :initarg :|application| :type
                         (common-lisp:or application common-lisp:null)
                         :accessor %get-application-response-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'get-application-response 'make-get-application-response))
 (common-lisp:defun make-get-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application)
   (common-lisp:apply #'common-lisp:make-instance 'get-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dashboard-for-job-run-request common-lisp:nil
                       ((job-run-id :initarg :|jobRunId| :type
                         (common-lisp:or job-run-id common-lisp:null) :accessor
                         %get-dashboard-for-job-run-request-job-run-id
                         :initform (common-lisp:error ":jobrunid is required"))
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         %get-dashboard-for-job-run-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-dashboard-for-job-run-request
                    'make-get-dashboard-for-job-run-request))
 (common-lisp:defun make-get-dashboard-for-job-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-run-id application-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dashboard-for-job-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dashboard-for-job-run-response common-lisp:nil
                       ((url :initarg :|url| :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %get-dashboard-for-job-run-response-url :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-dashboard-for-job-run-response
                    'make-get-dashboard-for-job-run-response))
 (common-lisp:defun make-get-dashboard-for-job-run-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dashboard-for-job-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-run-request common-lisp:nil
                       ((job-run-id :initarg :|jobRunId| :type
                         (common-lisp:or job-run-id common-lisp:null) :accessor
                         %get-job-run-request-job-run-id :initform
                         (common-lisp:error ":jobrunid is required"))
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %get-job-run-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-job-run-request 'make-get-job-run-request))
 (common-lisp:defun make-get-job-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-run-id application-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-run-response common-lisp:nil
                       ((job-run :initarg :|jobRun| :type
                         (common-lisp:or job-run common-lisp:null) :accessor
                         %get-job-run-response-job-run :initform
                         (common-lisp:error ":jobrun is required"))))
 (common-lisp:export
  (common-lisp:list 'get-job-run-response 'make-get-job-run-response))
 (common-lisp:defun make-get-job-run-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-run)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run))
      (common-lisp:list
       (common-lisp:cons "jobRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass hive common-lisp:nil
                       ((parameters :initarg :|parameters| :type
                         (common-lisp:or hive-cli-parameters common-lisp:null)
                         :accessor %hive-parameters :initform common-lisp:nil)
                        (init-query-file :initarg :|initQueryFile| :type
                         (common-lisp:or init-script-path common-lisp:null)
                         :accessor %hive-init-query-file :initform
                         common-lisp:nil)
                        (query :initarg :|query| :type
                         (common-lisp:or query common-lisp:null) :accessor
                         %hive-query :initform
                         (common-lisp:error ":query is required"))))
 (common-lisp:export (common-lisp:list 'hive 'make-hive))
 (common-lisp:defun make-hive
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters init-query-file query)
   (common-lisp:apply #'common-lisp:make-instance 'hive
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hive))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hive))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'init-query-file))
      (common-lisp:list
       (common-lisp:cons "initQueryFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hive))
   common-lisp:nil))
(common-lisp:deftype hive-cli-parameters () 'common-lisp:string)
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-configuration common-lisp:nil
                       ((resolved-image-digest :initarg :|resolvedImageDigest|
                         :type (common-lisp:or image-digest common-lisp:null)
                         :accessor %image-configuration-resolved-image-digest
                         :initform common-lisp:nil)
                        (image-uri :initarg :|imageUri| :type
                         (common-lisp:or image-uri common-lisp:null) :accessor
                         %image-configuration-image-uri :initform
                         (common-lisp:error ":imageuri is required"))))
 (common-lisp:export
  (common-lisp:list 'image-configuration 'make-image-configuration))
 (common-lisp:defun make-image-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resolved-image-digest image-uri)
   (common-lisp:apply #'common-lisp:make-instance 'image-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "imageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolved-image-digest))
      (common-lisp:list
       (common-lisp:cons "resolvedImageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-configuration-input common-lisp:nil
                       ((image-uri :initarg :|imageUri| :type
                         (common-lisp:or image-uri common-lisp:null) :accessor
                         %image-configuration-input-image-uri :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-configuration-input
                    'make-image-configuration-input))
 (common-lisp:defun make-image-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-uri)
   (common-lisp:apply #'common-lisp:make-instance 'image-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "imageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-configuration-input))
   common-lisp:nil))
(common-lisp:deftype image-digest () 'common-lisp:string)
(common-lisp:deftype image-uri () 'common-lisp:string)
(common-lisp:deftype init-script-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass initial-capacity-config common-lisp:nil
                       ((worker-configuration :initarg :|workerConfiguration|
                         :type
                         (common-lisp:or worker-resource-config
                                         common-lisp:null)
                         :accessor
                         %initial-capacity-config-worker-configuration
                         :initform common-lisp:nil)
                        (worker-count :initarg :|workerCount| :type
                         (common-lisp:or worker-counts common-lisp:null)
                         :accessor %initial-capacity-config-worker-count
                         :initform
                         (common-lisp:error ":workercount is required"))))
 (common-lisp:export
  (common-lisp:list 'initial-capacity-config 'make-initial-capacity-config))
 (common-lisp:defun make-initial-capacity-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key worker-configuration worker-count)
   (common-lisp:apply #'common-lisp:make-instance 'initial-capacity-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initial-capacity-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initial-capacity-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-count))
      (common-lisp:list
       (common-lisp:cons "workerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration))
      (common-lisp:list
       (common-lisp:cons "workerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initial-capacity-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype initial-capacity-config-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-initial-capacity-config-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (emr-serverless-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-driver common-lisp:nil
                       ((hive :initarg :|hive| :type
                         (common-lisp:or hive common-lisp:null) :accessor
                         %job-driver-hive :initform common-lisp:nil)
                        (spark-submit :initarg :|sparkSubmit| :type
                         (common-lisp:or spark-submit common-lisp:null)
                         :accessor %job-driver-spark-submit :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-driver 'make-job-driver))
 (common-lisp:defun make-job-driver
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hive spark-submit)
   (common-lisp:apply #'common-lisp:make-instance 'job-driver
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-driver))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-driver))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spark-submit))
      (common-lisp:list
       (common-lisp:cons "sparkSubmit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hive))
      (common-lisp:list
       (common-lisp:cons "hive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-driver))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-run common-lisp:nil
                       ((billed-resource-utilization :initarg
                         :|billedResourceUtilization| :type
                         (common-lisp:or resource-utilization common-lisp:null)
                         :accessor %job-run-billed-resource-utilization
                         :initform common-lisp:nil)
                        (execution-timeout-minutes :initarg
                         :|executionTimeoutMinutes| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %job-run-execution-timeout-minutes :initform
                         common-lisp:nil)
                        (total-execution-duration-seconds :initarg
                         :|totalExecutionDurationSeconds| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %job-run-total-execution-duration-seconds :initform
                         common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor %job-run-network-configuration :initform
                         common-lisp:nil)
                        (total-resource-utilization :initarg
                         :|totalResourceUtilization| :type
                         (common-lisp:or total-resource-utilization
                                         common-lisp:null)
                         :accessor %job-run-total-resource-utilization
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %job-run-tags :initform common-lisp:nil)
                        (job-driver :initarg :|jobDriver| :type
                         (common-lisp:or job-driver common-lisp:null) :accessor
                         %job-run-job-driver :initform
                         (common-lisp:error ":jobdriver is required"))
                        (configuration-overrides :initarg
                         :|configurationOverrides| :type
                         (common-lisp:or configuration-overrides
                                         common-lisp:null)
                         :accessor %job-run-configuration-overrides :initform
                         common-lisp:nil)
                        (release-label :initarg :|releaseLabel| :type
                         (common-lisp:or release-label common-lisp:null)
                         :accessor %job-run-release-label :initform
                         (common-lisp:error ":releaselabel is required"))
                        (state-details :initarg :|stateDetails| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %job-run-state-details :initform
                         (common-lisp:error ":statedetails is required"))
                        (state :initarg :|state| :type
                         (common-lisp:or job-run-state common-lisp:null)
                         :accessor %job-run-state :initform
                         (common-lisp:error ":state is required"))
                        (execution-role :initarg :|executionRole| :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %job-run-execution-role :initform
                         (common-lisp:error ":executionrole is required"))
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %job-run-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %job-run-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (created-by :initarg :|createdBy| :type
                         (common-lisp:or request-identity-user-arn
                                         common-lisp:null)
                         :accessor %job-run-created-by :initform
                         (common-lisp:error ":createdby is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %job-run-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %job-run-name :initform common-lisp:nil)
                        (job-run-id :initarg :|jobRunId| :type
                         (common-lisp:or job-run-id common-lisp:null) :accessor
                         %job-run-job-run-id :initform
                         (common-lisp:error ":jobrunid is required"))
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %job-run-application-id :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export (common-lisp:list 'job-run 'make-job-run))
 (common-lisp:defun make-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key billed-resource-utilization
                     execution-timeout-minutes total-execution-duration-seconds
                     network-configuration total-resource-utilization tags
                     job-driver configuration-overrides release-label
                     state-details state execution-role updated-at created-at
                     created-by arn name job-run-id application-id)
   (common-lisp:apply #'common-lisp:make-instance 'job-run
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "jobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "executionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-details))
      (common-lisp:list
       (common-lisp:cons "stateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-overrides))
      (common-lisp:list
       (common-lisp:cons "configurationOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-driver))
      (common-lisp:list
       (common-lisp:cons "jobDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "totalResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-execution-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "totalExecutionDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "executionTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billed-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "billedResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-run))
   common-lisp:nil))
(common-lisp:deftype job-run-id () 'common-lisp:string)
(common-lisp:deftype job-run-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-run-state-set ()
   '(trivial-types:proper-list job-run-state))
 (common-lisp:defun |make-job-run-state-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-run-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-run-summary common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or job-run-type common-lisp:null)
                         :accessor %job-run-summary-type :initform
                         common-lisp:nil)
                        (release-label :initarg :|releaseLabel| :type
                         (common-lisp:or release-label common-lisp:null)
                         :accessor %job-run-summary-release-label :initform
                         (common-lisp:error ":releaselabel is required"))
                        (state-details :initarg :|stateDetails| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %job-run-summary-state-details :initform
                         (common-lisp:error ":statedetails is required"))
                        (state :initarg :|state| :type
                         (common-lisp:or job-run-state common-lisp:null)
                         :accessor %job-run-summary-state :initform
                         (common-lisp:error ":state is required"))
                        (execution-role :initarg :|executionRole| :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %job-run-summary-execution-role :initform
                         (common-lisp:error ":executionrole is required"))
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %job-run-summary-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %job-run-summary-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (created-by :initarg :|createdBy| :type
                         (common-lisp:or request-identity-user-arn
                                         common-lisp:null)
                         :accessor %job-run-summary-created-by :initform
                         (common-lisp:error ":createdby is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %job-run-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %job-run-summary-name :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or job-run-id common-lisp:null) :accessor
                         %job-run-summary-id :initform
                         (common-lisp:error ":id is required"))
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %job-run-summary-application-id :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export (common-lisp:list 'job-run-summary 'make-job-run-summary))
 (common-lisp:defun make-job-run-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type release-label state-details state
                     execution-role updated-at created-at created-by arn name
                     id application-id)
   (common-lisp:apply #'common-lisp:make-instance 'job-run-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-run-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-run-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "executionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-details))
      (common-lisp:list
       (common-lisp:cons "stateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-run-summary))
   common-lisp:nil))
(common-lisp:deftype job-run-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-runs () '(trivial-types:proper-list job-run-summary))
 (common-lisp:defun |make-job-runs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-run-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-applications-request common-lisp:nil
                       ((states :initarg :|states| :type
                         (common-lisp:or application-state-set
                                         common-lisp:null)
                         :accessor %list-applications-request-states :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-applications-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-applications-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-applications-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defun make-list-applications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key states max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:deftype list-applications-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-applications-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-applications-response-next-token :initform
                         common-lisp:nil)
                        (applications :initarg :|applications| :type
                         (common-lisp:or application-list common-lisp:null)
                         :accessor %list-applications-response-applications
                         :initform
                         (common-lisp:error ":applications is required"))))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defun make-list-applications-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token applications)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-job-runs-request common-lisp:nil
                       ((states :initarg :|states| :type
                         (common-lisp:or job-run-state-set common-lisp:null)
                         :accessor %list-job-runs-request-states :initform
                         common-lisp:nil)
                        (created-at-before :initarg :|createdAtBefore| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %list-job-runs-request-created-at-before :initform
                         common-lisp:nil)
                        (created-at-after :initarg :|createdAtAfter| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %list-job-runs-request-created-at-after :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-job-runs-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-job-runs-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-job-runs-request-next-token :initform
                         common-lisp:nil)
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %list-job-runs-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-job-runs-request 'make-list-job-runs-request))
 (common-lisp:defun make-list-job-runs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key states created-at-before created-at-after
                     max-results next-token application-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-job-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-request))
   common-lisp:nil))
(common-lisp:deftype list-job-runs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-job-runs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-job-runs-response-next-token :initform
                         common-lisp:nil)
                        (job-runs :initarg :|jobRuns| :type
                         (common-lisp:or job-runs common-lisp:null) :accessor
                         %list-job-runs-response-job-runs :initform
                         (common-lisp:error ":jobruns is required"))))
 (common-lisp:export
  (common-lisp:list 'list-job-runs-response 'make-list-job-runs-response))
 (common-lisp:defun make-list-job-runs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token job-runs)
   (common-lisp:apply #'common-lisp:make-instance 'list-job-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-runs))
      (common-lisp:list
       (common-lisp:cons "jobRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass managed-persistence-monitoring-configuration
                       common-lisp:nil
                       ((encryption-key-arn :initarg :|encryptionKeyArn| :type
                         (common-lisp:or encryption-key-arn common-lisp:null)
                         :accessor
                         %managed-persistence-monitoring-configuration-encryption-key-arn
                         :initform common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %managed-persistence-monitoring-configuration-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'managed-persistence-monitoring-configuration
                    'make-managed-persistence-monitoring-configuration))
 (common-lisp:defun make-managed-persistence-monitoring-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-key-arn enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'managed-persistence-monitoring-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-persistence-monitoring-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-persistence-monitoring-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "encryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-persistence-monitoring-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass maximum-allowed-resources common-lisp:nil
                       ((disk :initarg :|disk| :type
                         (common-lisp:or disk-size common-lisp:null) :accessor
                         %maximum-allowed-resources-disk :initform
                         common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or memory-size common-lisp:null)
                         :accessor %maximum-allowed-resources-memory :initform
                         (common-lisp:error ":memory is required"))
                        (cpu :initarg :|cpu| :type
                         (common-lisp:or cpu-size common-lisp:null) :accessor
                         %maximum-allowed-resources-cpu :initform
                         (common-lisp:error ":cpu is required"))))
 (common-lisp:export
  (common-lisp:list 'maximum-allowed-resources
                    'make-maximum-allowed-resources))
 (common-lisp:defun make-maximum-allowed-resources
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disk memory cpu)
   (common-lisp:apply #'common-lisp:make-instance 'maximum-allowed-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maximum-allowed-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maximum-allowed-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk))
      (common-lisp:list
       (common-lisp:cons "disk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maximum-allowed-resources))
   common-lisp:nil))
(common-lisp:deftype memory-size () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass monitoring-configuration common-lisp:nil
                       ((managed-persistence-monitoring-configuration :initarg
                         :|managedPersistenceMonitoringConfiguration| :type
                         (common-lisp:or
                          managed-persistence-monitoring-configuration
                          common-lisp:null)
                         :accessor
                         %monitoring-configuration-managed-persistence-monitoring-configuration
                         :initform common-lisp:nil)
                        (s3monitoring-configuration :initarg
                         :|s3MonitoringConfiguration| :type
                         (common-lisp:or s3monitoring-configuration
                                         common-lisp:null)
                         :accessor
                         %monitoring-configuration-s3monitoring-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'monitoring-configuration 'make-monitoring-configuration))
 (common-lisp:defun make-monitoring-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     managed-persistence-monitoring-configuration
                     s3monitoring-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'monitoring-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "s3MonitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-persistence-monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "managedPersistenceMonitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-configuration common-lisp:nil
                       ((security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor %network-configuration-security-group-ids
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %network-configuration-subnet-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defun make-network-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids subnet-ids)
   (common-lisp:apply #'common-lisp:make-instance 'network-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype query () 'common-lisp:string)
(common-lisp:deftype release-label () 'common-lisp:string)
(common-lisp:deftype request-identity-user-arn () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (emr-serverless-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-utilization common-lisp:nil
                       ((storage-gbhour :initarg :|storageGBHour| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %resource-utilization-storage-gbhour :initform
                         common-lisp:nil)
                        (memory-gbhour :initarg :|memoryGBHour| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %resource-utilization-memory-gbhour :initform
                         common-lisp:nil)
                        (v-cpuhour :initarg :|vCPUHour| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %resource-utilization-v-cpuhour :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-utilization 'make-resource-utilization))
 (common-lisp:defun make-resource-utilization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-gbhour memory-gbhour v-cpuhour)
   (common-lisp:apply #'common-lisp:make-instance 'resource-utilization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v-cpuhour))
      (common-lisp:list
       (common-lisp:cons "vCPUHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-gbhour))
      (common-lisp:list
       (common-lisp:cons "memoryGBHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-gbhour))
      (common-lisp:list
       (common-lisp:cons "storageGBHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3monitoring-configuration common-lisp:nil
                       ((encryption-key-arn :initarg :|encryptionKeyArn| :type
                         (common-lisp:or encryption-key-arn common-lisp:null)
                         :accessor
                         %s3monitoring-configuration-encryption-key-arn
                         :initform common-lisp:nil)
                        (log-uri :initarg :|logUri| :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         %s3monitoring-configuration-log-uri :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3monitoring-configuration
                    'make-s3monitoring-configuration))
 (common-lisp:defun make-s3monitoring-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-key-arn log-uri)
   (common-lisp:apply #'common-lisp:make-instance 's3monitoring-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3monitoring-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3monitoring-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "logUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "encryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3monitoring-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-string))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sensitive-properties-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-sensitive-properties-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (emr-serverless-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass spark-submit common-lisp:nil
                       ((spark-submit-parameters :initarg
                         :|sparkSubmitParameters| :type
                         (common-lisp:or spark-submit-parameters
                                         common-lisp:null)
                         :accessor %spark-submit-spark-submit-parameters
                         :initform common-lisp:nil)
                        (entry-point-arguments :initarg :|entryPointArguments|
                         :type
                         (common-lisp:or entry-point-arguments
                                         common-lisp:null)
                         :accessor %spark-submit-entry-point-arguments
                         :initform common-lisp:nil)
                        (entry-point :initarg :|entryPoint| :type
                         (common-lisp:or entry-point-path common-lisp:null)
                         :accessor %spark-submit-entry-point :initform
                         (common-lisp:error ":entrypoint is required"))))
 (common-lisp:export (common-lisp:list 'spark-submit 'make-spark-submit))
 (common-lisp:defun make-spark-submit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key spark-submit-parameters
                     entry-point-arguments entry-point)
   (common-lisp:apply #'common-lisp:make-instance 'spark-submit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spark-submit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spark-submit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "entryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entry-point-arguments))
      (common-lisp:list
       (common-lisp:cons "entryPointArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spark-submit-parameters))
      (common-lisp:list
       (common-lisp:cons "sparkSubmitParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spark-submit))
   common-lisp:nil))
(common-lisp:deftype spark-submit-parameters () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-application-request common-lisp:nil
                       ((application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %start-application-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-application-request
                    'make-start-application-request))
 (common-lisp:defun make-start-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-application-response
                    'make-start-application-response))
 (common-lisp:defun make-start-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'start-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-job-run-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %start-job-run-request-name :initform common-lisp:nil)
                        (execution-timeout-minutes :initarg
                         :|executionTimeoutMinutes| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %start-job-run-request-execution-timeout-minutes
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %start-job-run-request-tags :initform common-lisp:nil)
                        (configuration-overrides :initarg
                         :|configurationOverrides| :type
                         (common-lisp:or configuration-overrides
                                         common-lisp:null)
                         :accessor
                         %start-job-run-request-configuration-overrides
                         :initform common-lisp:nil)
                        (job-driver :initarg :|jobDriver| :type
                         (common-lisp:or job-driver common-lisp:null) :accessor
                         %start-job-run-request-job-driver :initform
                         common-lisp:nil)
                        (execution-role-arn :initarg :|executionRoleArn| :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %start-job-run-request-execution-role-arn
                         :initform
                         (common-lisp:error ":executionrolearn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %start-job-run-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %start-job-run-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-job-run-request 'make-start-job-run-request))
 (common-lisp:defun make-start-job-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name execution-timeout-minutes tags
                     configuration-overrides job-driver execution-role-arn
                     client-token application-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-job-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-driver))
      (common-lisp:list
       (common-lisp:cons "jobDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-overrides))
      (common-lisp:list
       (common-lisp:cons "configurationOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "executionTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-job-run-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %start-job-run-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (job-run-id :initarg :|jobRunId| :type
                         (common-lisp:or job-run-id common-lisp:null) :accessor
                         %start-job-run-response-job-run-id :initform
                         (common-lisp:error ":jobrunid is required"))
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %start-job-run-response-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-job-run-response 'make-start-job-run-response))
 (common-lisp:defun make-start-job-run-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn job-run-id application-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-job-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "jobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-application-request common-lisp:nil
                       ((application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %stop-application-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-application-request 'make-stop-application-request))
 (common-lisp:defun make-stop-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-application-response
                    'make-stop-application-response))
 (common-lisp:defun make-stop-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   common-lisp:nil))
(common-lisp:deftype string1024 () 'common-lisp:string)
(common-lisp:deftype string256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-string))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass total-resource-utilization common-lisp:nil
                       ((storage-gbhour :initarg :|storageGBHour| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %total-resource-utilization-storage-gbhour :initform
                         common-lisp:nil)
                        (memory-gbhour :initarg :|memoryGBHour| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %total-resource-utilization-memory-gbhour :initform
                         common-lisp:nil)
                        (v-cpuhour :initarg :|vCPUHour| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %total-resource-utilization-v-cpuhour :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'total-resource-utilization
                    'make-total-resource-utilization))
 (common-lisp:defun make-total-resource-utilization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-gbhour memory-gbhour v-cpuhour)
   (common-lisp:apply #'common-lisp:make-instance 'total-resource-utilization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          total-resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          total-resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v-cpuhour))
      (common-lisp:list
       (common-lisp:cons "vCPUHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-gbhour))
      (common-lisp:list
       (common-lisp:cons "memoryGBHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-gbhour))
      (common-lisp:list
       (common-lisp:cons "storageGBHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          total-resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-request common-lisp:nil
                       ((worker-type-specifications :initarg
                         :|workerTypeSpecifications| :type
                         (common-lisp:or worker-type-specification-input-map
                                         common-lisp:null)
                         :accessor
                         %update-application-request-worker-type-specifications
                         :initform common-lisp:nil)
                        (image-configuration :initarg :|imageConfiguration|
                         :type
                         (common-lisp:or image-configuration-input
                                         common-lisp:null)
                         :accessor
                         %update-application-request-image-configuration
                         :initform common-lisp:nil)
                        (architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %update-application-request-architecture
                         :initform common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         %update-application-request-network-configuration
                         :initform common-lisp:nil)
                        (auto-stop-configuration :initarg
                         :|autoStopConfiguration| :type
                         (common-lisp:or auto-stop-config common-lisp:null)
                         :accessor
                         %update-application-request-auto-stop-configuration
                         :initform common-lisp:nil)
                        (auto-start-configuration :initarg
                         :|autoStartConfiguration| :type
                         (common-lisp:or auto-start-config common-lisp:null)
                         :accessor
                         %update-application-request-auto-start-configuration
                         :initform common-lisp:nil)
                        (maximum-capacity :initarg :|maximumCapacity| :type
                         (common-lisp:or maximum-allowed-resources
                                         common-lisp:null)
                         :accessor %update-application-request-maximum-capacity
                         :initform common-lisp:nil)
                        (initial-capacity :initarg :|initialCapacity| :type
                         (common-lisp:or initial-capacity-config-map
                                         common-lisp:null)
                         :accessor %update-application-request-initial-capacity
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-application-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %update-application-request-application-id
                         :initform
                         (common-lisp:error ":applicationid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defun make-update-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key worker-type-specifications
                     image-configuration architecture network-configuration
                     auto-stop-configuration auto-start-configuration
                     maximum-capacity initial-capacity client-token
                     application-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-capacity))
      (common-lisp:list
       (common-lisp:cons "initialCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-capacity))
      (common-lisp:list
       (common-lisp:cons "maximumCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-start-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-stop-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStopConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-type-specifications))
      (common-lisp:list
       (common-lisp:cons "workerTypeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-response common-lisp:nil
                       ((application :initarg :|application| :type
                         (common-lisp:or application common-lisp:null)
                         :accessor %update-application-response-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defun make-update-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:deftype uri-string () 'common-lisp:string)
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (emr-serverless-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype worker-counts () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass worker-resource-config common-lisp:nil
                       ((disk :initarg :|disk| :type
                         (common-lisp:or disk-size common-lisp:null) :accessor
                         %worker-resource-config-disk :initform
                         common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or memory-size common-lisp:null)
                         :accessor %worker-resource-config-memory :initform
                         (common-lisp:error ":memory is required"))
                        (cpu :initarg :|cpu| :type
                         (common-lisp:or cpu-size common-lisp:null) :accessor
                         %worker-resource-config-cpu :initform
                         (common-lisp:error ":cpu is required"))))
 (common-lisp:export
  (common-lisp:list 'worker-resource-config 'make-worker-resource-config))
 (common-lisp:defun make-worker-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disk memory cpu)
   (common-lisp:apply #'common-lisp:make-instance 'worker-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk))
      (common-lisp:list
       (common-lisp:cons "disk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass worker-type-specification common-lisp:nil
                       ((image-configuration :initarg :|imageConfiguration|
                         :type
                         (common-lisp:or image-configuration common-lisp:null)
                         :accessor
                         %worker-type-specification-image-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'worker-type-specification
                    'make-worker-type-specification))
 (common-lisp:defun make-worker-type-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'worker-type-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass worker-type-specification-input common-lisp:nil
                       ((image-configuration :initarg :|imageConfiguration|
                         :type
                         (common-lisp:or image-configuration-input
                                         common-lisp:null)
                         :accessor
                         %worker-type-specification-input-image-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'worker-type-specification-input
                    'make-worker-type-specification-input))
 (common-lisp:defun make-worker-type-specification-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'worker-type-specification-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype worker-type-specification-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-worker-type-specification-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype worker-type-specification-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-worker-type-specification-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype worker-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id job-run-id)
   (common-lisp:declare (common-lisp:ignorable application-id job-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-run-id))))
                                                        "CancelJobRun"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job-run))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name release-label type client-token
                     initial-capacity maximum-capacity tags
                     auto-start-configuration auto-stop-configuration
                     network-configuration architecture image-configuration
                     worker-type-specifications)
   (common-lisp:declare
    (common-lisp:ignorable name release-label type client-token
     initial-capacity maximum-capacity tags auto-start-configuration
     auto-stop-configuration network-configuration architecture
     image-configuration worker-type-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/applications"
                                                        "CreateApplication"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApplication"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun get-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApplication"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application))
(common-lisp:progn
 (common-lisp:defun get-dashboard-for-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id job-run-id)
   (common-lisp:declare (common-lisp:ignorable application-id job-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-dashboard-for-job-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns/~A/dashboard"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-run-id))))
                                                        "GetDashboardForJobRun"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dashboard-for-job-run))
(common-lisp:progn
 (common-lisp:defun get-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id job-run-id)
   (common-lisp:declare (common-lisp:ignorable application-id job-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-run-id))))
                                                        "GetJobRun"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-run))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results states)
   (common-lisp:declare (common-lisp:ignorable next-token max-results states))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/applications"
                                                        "ListApplications"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-job-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id next-token max-results
                     created-at-after created-at-before states)
   (common-lisp:declare
    (common-lisp:ignorable application-id next-token max-results
     created-at-after created-at-before states))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-job-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListJobRuns"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-job-runs))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "StartApplication"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-application))
(common-lisp:progn
 (common-lisp:defun start-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token
                     execution-role-arn job-driver configuration-overrides tags
                     execution-timeout-minutes name)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token execution-role-arn
     job-driver configuration-overrides tags execution-timeout-minutes name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "StartJobRun"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-job-run))
(common-lisp:progn
 (common-lisp:defun stop-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "StopApplication"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-application))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token
                     initial-capacity maximum-capacity auto-start-configuration
                     auto-stop-configuration network-configuration architecture
                     image-configuration worker-type-specifications)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token initial-capacity
     maximum-capacity auto-start-configuration auto-stop-configuration
     network-configuration architecture image-configuration
     worker-type-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApplication"
                                                        "2021-07-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
