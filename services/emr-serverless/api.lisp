;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/emr-serverless/api
  (:use)
  (:nicknames #:aws/emr-serverless)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/emr-serverless/api)
(common-lisp:progn
 (common-lisp:define-condition emr-serverless-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'emr-serverless-error))
(common-lisp:progn
 (common-lisp:defclass emr-serverless-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "emr-serverless"
                        :api-version "2021-07-13" :host-prefix "emr-serverless"
                        :signing-name "emr-serverless" :global-host
                        common-lisp:nil))
 (common-lisp:export 'emr-serverless-request))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (application (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or application-arn common-lisp:null))
   (release-label (common-lisp:error ":releaselabel is required") :type
    (common-lisp:or release-label common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or application-state common-lisp:null))
   (state-details common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (initial-capacity common-lisp:nil :type
    (common-lisp:or initial-capacity-config-map common-lisp:null))
   (maximum-capacity common-lisp:nil :type
    (common-lisp:or maximum-allowed-resources common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (auto-start-configuration common-lisp:nil :type
    (common-lisp:or auto-start-config common-lisp:null))
   (auto-stop-configuration common-lisp:nil :type
    (common-lisp:or auto-stop-config common-lisp:null))
   (network-configuration common-lisp:nil :type
    (common-lisp:or network-configuration common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or architecture common-lisp:null))
   (image-configuration common-lisp:nil :type
    (common-lisp:or image-configuration common-lisp:null))
   (worker-type-specifications common-lisp:nil :type
    (common-lisp:or worker-type-specification-map common-lisp:null))
   (runtime-configuration common-lisp:nil :type
    (common-lisp:or configuration-list common-lisp:null))
   (monitoring-configuration common-lisp:nil :type
    (common-lisp:or monitoring-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'application 'make-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-details))
      (common-lisp:list
       (common-lisp:cons "stateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-capacity))
      (common-lisp:list
       (common-lisp:cons "initialCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-capacity))
      (common-lisp:list
       (common-lisp:cons "maximumCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-start-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-stop-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStopConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-type-specifications))
      (common-lisp:list
       (common-lisp:cons "workerTypeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "runtimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "monitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application))
   common-lisp:nil))
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:deftype application-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-list ()
   '(trivial-types:proper-list application-summary))
 (common-lisp:defun make-application-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:deftype application-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-state-set ()
   '(trivial-types:proper-list application-state))
 (common-lisp:defun make-application-state-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or application-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or application-arn common-lisp:null))
   (release-label (common-lisp:error ":releaselabel is required") :type
    (common-lisp:or release-label common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or application-state common-lisp:null))
   (state-details common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or architecture common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-summary 'make-application-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-details))
      (common-lisp:list
       (common-lisp:cons "stateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-summary))
   common-lisp:nil))
(common-lisp:deftype architecture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-start-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-start-config-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-start-config 'make-auto-start-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-start-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-start-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-start-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-stop-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-stop-config-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (idle-timeout-minutes common-lisp:nil :type
    (common-lisp:or auto-stop-config-idle-timeout-minutes-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-stop-config 'make-auto-stop-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-stop-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-stop-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "idleTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-stop-config))
   common-lisp:nil))
(common-lisp:deftype auto-stop-config-idle-timeout-minutes-integer ()
  'common-lisp:integer)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-run-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (job-run-id (common-lisp:error ":jobrunid is required") :type
    (common-lisp:or job-run-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-job-run-request 'make-cancel-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-run-response-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (job-run-id (common-lisp:error ":jobrunid is required") :type
    (common-lisp:or job-run-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-job-run-response 'make-cancel-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "jobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-run-response))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logging-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logging-configuration-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or boolean common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (log-stream-name-prefix common-lisp:nil :type
    (common-lisp:or log-stream-name-prefix common-lisp:null))
   (encryption-key-arn common-lisp:nil :type
    (common-lisp:or encryption-key-arn common-lisp:null))
   (log-types common-lisp:nil :type
    (common-lisp:or log-type-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-configuration
                    'make-cloud-watch-logging-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-name-prefix))
      (common-lisp:list
       (common-lisp:cons "logStreamNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "encryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-types))
      (common-lisp:list
       (common-lisp:cons "logTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-"))
   (classification (common-lisp:error ":classification is required") :type
    (common-lisp:or string1024 common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or sensitive-properties-map common-lisp:null))
   (configurations common-lisp:nil :type
    (common-lisp:or configuration-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-list ()
   '(trivial-types:proper-list configuration))
 (common-lisp:defun make-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-overrides (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-overrides-"))
   (application-configuration common-lisp:nil :type
    (common-lisp:or configuration-list common-lisp:null))
   (monitoring-configuration common-lisp:nil :type
    (common-lisp:or monitoring-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-overrides 'make-configuration-overrides))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-overrides))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-overrides))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration))
      (common-lisp:list
       (common-lisp:cons "applicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "monitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-overrides))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (emr-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype cpu-size () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-request-"))
   (name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (release-label (common-lisp:error ":releaselabel is required") :type
    (common-lisp:or release-label common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or engine-type common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (initial-capacity common-lisp:nil :type
    (common-lisp:or initial-capacity-config-map common-lisp:null))
   (maximum-capacity common-lisp:nil :type
    (common-lisp:or maximum-allowed-resources common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (auto-start-configuration common-lisp:nil :type
    (common-lisp:or auto-start-config common-lisp:null))
   (auto-stop-configuration common-lisp:nil :type
    (common-lisp:or auto-stop-config common-lisp:null))
   (network-configuration common-lisp:nil :type
    (common-lisp:or network-configuration common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or architecture common-lisp:null))
   (image-configuration common-lisp:nil :type
    (common-lisp:or image-configuration-input common-lisp:null))
   (worker-type-specifications common-lisp:nil :type
    (common-lisp:or worker-type-specification-input-map common-lisp:null))
   (runtime-configuration common-lisp:nil :type
    (common-lisp:or configuration-list common-lisp:null))
   (monitoring-configuration common-lisp:nil :type
    (common-lisp:or monitoring-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-capacity))
      (common-lisp:list
       (common-lisp:cons "initialCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-capacity))
      (common-lisp:list
       (common-lisp:cons "maximumCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-start-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-stop-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStopConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-type-specifications))
      (common-lisp:list
       (common-lisp:cons "workerTypeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "runtimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "monitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-response-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or application-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:deftype disk-size () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype duration () 'common-lisp:integer)
(common-lisp:deftype encryption-key-arn () 'common-lisp:string)
(common-lisp:deftype engine-type () 'common-lisp:string)
(common-lisp:deftype entry-point-argument () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype entry-point-arguments ()
   '(trivial-types:proper-list entry-point-argument))
 (common-lisp:defun make-entry-point-arguments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entry-point-argument))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entry-point-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-request 'make-get-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-response-"))
   (application (common-lisp:error ":application is required") :type
    (common-lisp:or application common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-response 'make-get-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dashboard-for-job-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dashboard-for-job-run-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (job-run-id (common-lisp:error ":jobrunid is required") :type
    (common-lisp:or job-run-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dashboard-for-job-run-request
                    'make-get-dashboard-for-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dashboard-for-job-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dashboard-for-job-run-response-"))
   (url common-lisp:nil :type (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dashboard-for-job-run-response
                    'make-get-dashboard-for-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-for-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-run-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (job-run-id (common-lisp:error ":jobrunid is required") :type
    (common-lisp:or job-run-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-run-request 'make-get-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-run-response-"))
   (job-run (common-lisp:error ":jobrun is required") :type
    (common-lisp:or job-run common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-run-response 'make-get-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run))
      (common-lisp:list
       (common-lisp:cons "jobRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hive (:copier common-lisp:nil) (:conc-name "struct-shape-hive-"))
   (query (common-lisp:error ":query is required") :type
    (common-lisp:or query common-lisp:null))
   (init-query-file common-lisp:nil :type
    (common-lisp:or init-script-path common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or hive-cli-parameters common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hive 'make-hive))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hive))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hive))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'init-query-file))
      (common-lisp:list
       (common-lisp:cons "initQueryFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hive))
   common-lisp:nil))
(common-lisp:deftype hive-cli-parameters () 'common-lisp:string)
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-configuration-"))
   (image-uri (common-lisp:error ":imageuri is required") :type
    (common-lisp:or image-uri common-lisp:null))
   (resolved-image-digest common-lisp:nil :type
    (common-lisp:or image-digest common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-configuration 'make-image-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "imageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolved-image-digest))
      (common-lisp:list
       (common-lisp:cons "resolvedImageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (image-configuration-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-configuration-input-"))
   (image-uri common-lisp:nil :type
    (common-lisp:or image-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-configuration-input
                    'make-image-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "imageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-configuration-input))
   common-lisp:nil))
(common-lisp:deftype image-digest () 'common-lisp:string)
(common-lisp:deftype image-uri () 'common-lisp:string)
(common-lisp:deftype init-script-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (initial-capacity-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-initial-capacity-config-"))
   (worker-count (common-lisp:error ":workercount is required") :type
    (common-lisp:or worker-counts common-lisp:null))
   (worker-configuration common-lisp:nil :type
    (common-lisp:or worker-resource-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'initial-capacity-config 'make-initial-capacity-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initial-capacity-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initial-capacity-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-count))
      (common-lisp:list
       (common-lisp:cons "workerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration))
      (common-lisp:list
       (common-lisp:cons "workerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initial-capacity-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype initial-capacity-config-map () 'common-lisp:hash-table)
 (common-lisp:defun make-initial-capacity-config-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (emr-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-driver (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-driver-"))
   (spark-submit common-lisp:nil :type
    (common-lisp:or spark-submit common-lisp:null))
   (hive common-lisp:nil :type (common-lisp:or hive common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-driver 'make-job-driver))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-driver))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-driver))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spark-submit))
      (common-lisp:list
       (common-lisp:cons "sparkSubmit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hive))
      (common-lisp:list
       (common-lisp:cons "hive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-driver))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-run (:copier common-lisp:nil) (:conc-name "struct-shape-job-run-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (job-run-id (common-lisp:error ":jobrunid is required") :type
    (common-lisp:or job-run-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string256 common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or job-arn common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or request-identity-user-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date common-lisp:null))
   (execution-role (common-lisp:error ":executionrole is required") :type
    (common-lisp:or iamrole-arn common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or job-run-state common-lisp:null))
   (state-details (common-lisp:error ":statedetails is required") :type
    (common-lisp:or string256 common-lisp:null))
   (release-label (common-lisp:error ":releaselabel is required") :type
    (common-lisp:or release-label common-lisp:null))
   (configuration-overrides common-lisp:nil :type
    (common-lisp:or configuration-overrides common-lisp:null))
   (job-driver (common-lisp:error ":jobdriver is required") :type
    (common-lisp:or job-driver common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (total-resource-utilization common-lisp:nil :type
    (common-lisp:or total-resource-utilization common-lisp:null))
   (network-configuration common-lisp:nil :type
    (common-lisp:or network-configuration common-lisp:null))
   (total-execution-duration-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (execution-timeout-minutes common-lisp:nil :type
    (common-lisp:or duration common-lisp:null))
   (billed-resource-utilization common-lisp:nil :type
    (common-lisp:or resource-utilization common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-run 'make-job-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "jobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "executionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-details))
      (common-lisp:list
       (common-lisp:cons "stateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-overrides))
      (common-lisp:list
       (common-lisp:cons "configurationOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-driver))
      (common-lisp:list
       (common-lisp:cons "jobDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "totalResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-execution-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "totalExecutionDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "executionTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billed-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "billedResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-run))
   common-lisp:nil))
(common-lisp:deftype job-run-id () 'common-lisp:string)
(common-lisp:deftype job-run-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-run-state-set ()
   '(trivial-types:proper-list job-run-state))
 (common-lisp:defun make-job-run-state-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-run-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-run-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-run-summary-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or job-run-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string256 common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or job-arn common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or request-identity-user-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date common-lisp:null))
   (execution-role (common-lisp:error ":executionrole is required") :type
    (common-lisp:or iamrole-arn common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or job-run-state common-lisp:null))
   (state-details (common-lisp:error ":statedetails is required") :type
    (common-lisp:or string256 common-lisp:null))
   (release-label (common-lisp:error ":releaselabel is required") :type
    (common-lisp:or release-label common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or job-run-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-run-summary 'make-job-run-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-run-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-run-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "executionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-details))
      (common-lisp:list
       (common-lisp:cons "stateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-run-summary))
   common-lisp:nil))
(common-lisp:deftype job-run-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-runs () '(trivial-types:proper-list job-run-summary))
 (common-lisp:defun make-job-runs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-run-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-applications-request-max-results-integer
                    common-lisp:null))
   (states common-lisp:nil :type
    (common-lisp:or application-state-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:deftype list-applications-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-response-"))
   (applications (common-lisp:error ":applications is required") :type
    (common-lisp:or application-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-job-runs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-job-runs-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-job-runs-request-max-results-integer
                    common-lisp:null))
   (created-at-after common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (created-at-before common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (states common-lisp:nil :type
    (common-lisp:or job-run-state-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-job-runs-request 'make-list-job-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-request))
   common-lisp:nil))
(common-lisp:deftype list-job-runs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-job-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-job-runs-response-"))
   (job-runs (common-lisp:error ":jobruns is required") :type
    (common-lisp:or job-runs common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-job-runs-response 'make-list-job-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-runs))
      (common-lisp:list
       (common-lisp:cons "jobRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:deftype log-stream-name-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-type-list ()
   '(trivial-types:proper-list log-type-string))
 (common-lisp:defun make-log-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-type-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype log-type-map () 'common-lisp:hash-table)
 (common-lisp:defun make-log-type-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype log-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (managed-persistence-monitoring-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-managed-persistence-monitoring-configuration-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (encryption-key-arn common-lisp:nil :type
    (common-lisp:or encryption-key-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-persistence-monitoring-configuration
                    'make-managed-persistence-monitoring-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-persistence-monitoring-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-persistence-monitoring-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "encryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-persistence-monitoring-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (maximum-allowed-resources (:copier common-lisp:nil)
      (:conc-name "struct-shape-maximum-allowed-resources-"))
   (cpu (common-lisp:error ":cpu is required") :type
    (common-lisp:or cpu-size common-lisp:null))
   (memory (common-lisp:error ":memory is required") :type
    (common-lisp:or memory-size common-lisp:null))
   (disk common-lisp:nil :type (common-lisp:or disk-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'maximum-allowed-resources
                    'make-maximum-allowed-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maximum-allowed-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maximum-allowed-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk))
      (common-lisp:list
       (common-lisp:cons "disk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maximum-allowed-resources))
   common-lisp:nil))
(common-lisp:deftype memory-size () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-configuration-"))
   (s3monitoring-configuration common-lisp:nil :type
    (common-lisp:or s3monitoring-configuration common-lisp:null))
   (managed-persistence-monitoring-configuration common-lisp:nil :type
    (common-lisp:or managed-persistence-monitoring-configuration
                    common-lisp:null))
   (cloud-watch-logging-configuration common-lisp:nil :type
    (common-lisp:or cloud-watch-logging-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-configuration 'make-monitoring-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "s3MonitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-persistence-monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "managedPersistenceMonitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-configuration))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-configuration-"))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-ids common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype query () 'common-lisp:string)
(common-lisp:deftype release-label () 'common-lisp:string)
(common-lisp:deftype request-identity-user-arn () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (emr-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-utilization (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-utilization-"))
   (v-cpuhour common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (memory-gbhour common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (storage-gbhour common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-utilization 'make-resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v-cpuhour))
      (common-lisp:list
       (common-lisp:cons "vCPUHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-gbhour))
      (common-lisp:list
       (common-lisp:cons "memoryGBHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-gbhour))
      (common-lisp:list
       (common-lisp:cons "storageGBHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3monitoring-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3monitoring-configuration-"))
   (log-uri common-lisp:nil :type (common-lisp:or uri-string common-lisp:null))
   (encryption-key-arn common-lisp:nil :type
    (common-lisp:or encryption-key-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3monitoring-configuration
                    'make-s3monitoring-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3monitoring-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3monitoring-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "logUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "encryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3monitoring-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-string))
 (common-lisp:defun make-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sensitive-properties-map () 'common-lisp:hash-table)
 (common-lisp:defun make-sensitive-properties-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (emr-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (spark-submit (:copier common-lisp:nil)
      (:conc-name "struct-shape-spark-submit-"))
   (entry-point (common-lisp:error ":entrypoint is required") :type
    (common-lisp:or entry-point-path common-lisp:null))
   (entry-point-arguments common-lisp:nil :type
    (common-lisp:or entry-point-arguments common-lisp:null))
   (spark-submit-parameters common-lisp:nil :type
    (common-lisp:or spark-submit-parameters common-lisp:null)))
 (common-lisp:export (common-lisp:list 'spark-submit 'make-spark-submit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spark-submit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spark-submit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "entryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entry-point-arguments))
      (common-lisp:list
       (common-lisp:cons "entryPointArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spark-submit-parameters))
      (common-lisp:list
       (common-lisp:cons "sparkSubmitParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spark-submit))
   common-lisp:nil))
(common-lisp:deftype spark-submit-parameters () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-application-request
                    'make-start-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-application-response-")))
 (common-lisp:export
  (common-lisp:list 'start-application-response
                    'make-start-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-job-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-job-run-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (execution-role-arn (common-lisp:error ":executionrolearn is required")
    :type (common-lisp:or iamrole-arn common-lisp:null))
   (job-driver common-lisp:nil :type
    (common-lisp:or job-driver common-lisp:null))
   (configuration-overrides common-lisp:nil :type
    (common-lisp:or configuration-overrides common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (execution-timeout-minutes common-lisp:nil :type
    (common-lisp:or duration common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-job-run-request 'make-start-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-driver))
      (common-lisp:list
       (common-lisp:cons "jobDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-overrides))
      (common-lisp:list
       (common-lisp:cons "configurationOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "executionTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-job-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-job-run-response-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (job-run-id (common-lisp:error ":jobrunid is required") :type
    (common-lisp:or job-run-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-job-run-response 'make-start-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "jobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-application-request 'make-stop-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-application-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-application-response
                    'make-stop-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   common-lisp:nil))
(common-lisp:deftype string1024 () 'common-lisp:string)
(common-lisp:deftype string256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-string))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (total-resource-utilization (:copier common-lisp:nil)
      (:conc-name "struct-shape-total-resource-utilization-"))
   (v-cpuhour common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (memory-gbhour common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (storage-gbhour common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'total-resource-utilization
                    'make-total-resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          total-resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          total-resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v-cpuhour))
      (common-lisp:list
       (common-lisp:cons "vCPUHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-gbhour))
      (common-lisp:list
       (common-lisp:cons "memoryGBHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-gbhour))
      (common-lisp:list
       (common-lisp:cons "storageGBHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          total-resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-request-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (initial-capacity common-lisp:nil :type
    (common-lisp:or initial-capacity-config-map common-lisp:null))
   (maximum-capacity common-lisp:nil :type
    (common-lisp:or maximum-allowed-resources common-lisp:null))
   (auto-start-configuration common-lisp:nil :type
    (common-lisp:or auto-start-config common-lisp:null))
   (auto-stop-configuration common-lisp:nil :type
    (common-lisp:or auto-stop-config common-lisp:null))
   (network-configuration common-lisp:nil :type
    (common-lisp:or network-configuration common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or architecture common-lisp:null))
   (image-configuration common-lisp:nil :type
    (common-lisp:or image-configuration-input common-lisp:null))
   (worker-type-specifications common-lisp:nil :type
    (common-lisp:or worker-type-specification-input-map common-lisp:null))
   (release-label common-lisp:nil :type
    (common-lisp:or release-label common-lisp:null))
   (runtime-configuration common-lisp:nil :type
    (common-lisp:or configuration-list common-lisp:null))
   (monitoring-configuration common-lisp:nil :type
    (common-lisp:or monitoring-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-capacity))
      (common-lisp:list
       (common-lisp:cons "initialCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-capacity))
      (common-lisp:list
       (common-lisp:cons "maximumCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-start-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-stop-configuration))
      (common-lisp:list
       (common-lisp:cons "autoStopConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-type-specifications))
      (common-lisp:list
       (common-lisp:cons "workerTypeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "runtimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "monitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-response-"))
   (application (common-lisp:error ":application is required") :type
    (common-lisp:or application common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:deftype uri-string () 'common-lisp:string)
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (emr-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype worker-counts () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (worker-resource-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-resource-config-"))
   (cpu (common-lisp:error ":cpu is required") :type
    (common-lisp:or cpu-size common-lisp:null))
   (memory (common-lisp:error ":memory is required") :type
    (common-lisp:or memory-size common-lisp:null))
   (disk common-lisp:nil :type (common-lisp:or disk-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-resource-config 'make-worker-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk))
      (common-lisp:list
       (common-lisp:cons "disk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (worker-type-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-type-specification-"))
   (image-configuration common-lisp:nil :type
    (common-lisp:or image-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-type-specification
                    'make-worker-type-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (worker-type-specification-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-type-specification-input-"))
   (image-configuration common-lisp:nil :type
    (common-lisp:or image-configuration-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-type-specification-input
                    'make-worker-type-specification-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "imageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-type-specification-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype worker-type-specification-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-worker-type-specification-input-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype worker-type-specification-map () 'common-lisp:hash-table)
 (common-lisp:defun make-worker-type-specification-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype worker-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id job-run-id)
   (common-lisp:declare (common-lisp:ignorable application-id job-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-run-id))))
                                                        "CancelJobRun"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job-run))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name release-label type client-token
                     initial-capacity maximum-capacity tags
                     auto-start-configuration auto-stop-configuration
                     network-configuration architecture image-configuration
                     worker-type-specifications runtime-configuration
                     monitoring-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name release-label type client-token
     initial-capacity maximum-capacity tags auto-start-configuration
     auto-stop-configuration network-configuration architecture
     image-configuration worker-type-specifications runtime-configuration
     monitoring-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/applications"
                                                        "CreateApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun get-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application))
(common-lisp:progn
 (common-lisp:defun get-dashboard-for-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id job-run-id)
   (common-lisp:declare (common-lisp:ignorable application-id job-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-dashboard-for-job-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns/~A/dashboard"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-run-id))))
                                                        "GetDashboardForJobRun"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dashboard-for-job-run))
(common-lisp:progn
 (common-lisp:defun get-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id job-run-id)
   (common-lisp:declare (common-lisp:ignorable application-id job-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-run-id))))
                                                        "GetJobRun"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-run))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results states)
   (common-lisp:declare (common-lisp:ignorable next-token max-results states))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/applications"
                                                        "ListApplications"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-job-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id next-token max-results
                     created-at-after created-at-before states)
   (common-lisp:declare
    (common-lisp:ignorable application-id next-token max-results
     created-at-after created-at-before states))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-job-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListJobRuns"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-job-runs))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "StartApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-application))
(common-lisp:progn
 (common-lisp:defun start-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token
                     execution-role-arn job-driver configuration-overrides tags
                     execution-timeout-minutes name)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token execution-role-arn
     job-driver configuration-overrides tags execution-timeout-minutes name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/jobruns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "StartJobRun"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-job-run))
(common-lisp:progn
 (common-lisp:defun stop-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "StopApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-application))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id client-token
                     initial-capacity maximum-capacity auto-start-configuration
                     auto-stop-configuration network-configuration architecture
                     image-configuration worker-type-specifications
                     release-label runtime-configuration
                     monitoring-configuration)
   (common-lisp:declare
    (common-lisp:ignorable application-id client-token initial-capacity
     maximum-capacity auto-start-configuration auto-stop-configuration
     network-configuration architecture image-configuration
     worker-type-specifications release-label runtime-configuration
     monitoring-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'emr-serverless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
