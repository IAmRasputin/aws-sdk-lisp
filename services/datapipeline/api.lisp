;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/datapipeline/api
  (:use)
  (:nicknames #:aws/datapipeline)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/datapipeline/api)
(common-lisp:progn
 (common-lisp:defclass datapipeline-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "datapipeline" :protocol
                        :json))
 (common-lisp:export 'datapipeline-request))
(common-lisp:progn
 (common-lisp:define-condition datapipeline-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'datapipeline-error))
(common-lisp:defvar *error-map*
  '(("InternalServiceError" . internal-service-error)
    ("InvalidRequestException" . invalid-request-exception)
    ("PipelineDeletedException" . pipeline-deleted-exception)
    ("PipelineNotFoundException" . pipeline-not-found-exception)
    ("TaskNotFoundException" . task-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass activate-pipeline-input common-lisp:nil
                       ((start-timestamp :initarg :|startTimestamp| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %activate-pipeline-input-start-timestamp
                         :initform common-lisp:nil)
                        (parameter-values :initarg :|parameterValues| :type
                         (common-lisp:or parameter-value-list common-lisp:null)
                         :accessor %activate-pipeline-input-parameter-values
                         :initform common-lisp:nil)
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %activate-pipeline-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'activate-pipeline-input 'make-activate-pipeline-input))
 (common-lisp:defun make-activate-pipeline-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-timestamp parameter-values
                     pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'activate-pipeline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-values))
      (common-lisp:list
       (common-lisp:cons "parameterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "startTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-pipeline-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'activate-pipeline-output 'make-activate-pipeline-output))
 (common-lisp:defun make-activate-pipeline-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'activate-pipeline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-pipeline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %add-tags-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %add-tags-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defun make-add-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-output common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defun make-add-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pipeline-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %create-pipeline-input-tags :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-pipeline-input-description :initform
                         common-lisp:nil)
                        (unique-id :initarg :|uniqueId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %create-pipeline-input-unique-id :initform
                         (common-lisp:error ":uniqueid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %create-pipeline-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-input 'make-create-pipeline-input))
 (common-lisp:defun make-create-pipeline-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description unique-id name)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipeline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-id))
      (common-lisp:list
       (common-lisp:cons "uniqueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pipeline-output common-lisp:nil
                       ((pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %create-pipeline-output-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-output 'make-create-pipeline-output))
 (common-lisp:defun make-create-pipeline-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipeline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deactivate-pipeline-input common-lisp:nil
                       ((cancel-active :initarg :|cancelActive| :type
                         (common-lisp:or |cancelActive| common-lisp:null)
                         :accessor %deactivate-pipeline-input-cancel-active
                         :initform common-lisp:nil)
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %deactivate-pipeline-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'deactivate-pipeline-input
                    'make-deactivate-pipeline-input))
 (common-lisp:defun make-deactivate-pipeline-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cancel-active pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'deactivate-pipeline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancel-active))
      (common-lisp:list
       (common-lisp:cons "cancelActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deactivate-pipeline-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deactivate-pipeline-output
                    'make-deactivate-pipeline-output))
 (common-lisp:defun make-deactivate-pipeline-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'deactivate-pipeline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-pipeline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pipeline-input common-lisp:nil
                       ((pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %delete-pipeline-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-input 'make-delete-pipeline-input))
 (common-lisp:defun make-delete-pipeline-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-pipeline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-objects-input common-lisp:nil
                       ((marker :initarg :|marker| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-objects-input-marker :initform
                         common-lisp:nil)
                        (evaluate-expressions :initarg :|evaluateExpressions|
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %describe-objects-input-evaluate-expressions
                         :initform common-lisp:nil)
                        (object-ids :initarg :|objectIds| :type
                         (common-lisp:or |idList| common-lisp:null) :accessor
                         %describe-objects-input-object-ids :initform
                         (common-lisp:error ":objectids is required"))
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %describe-objects-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-objects-input 'make-describe-objects-input))
 (common-lisp:defun make-describe-objects-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker evaluate-expressions object-ids
                     pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-objects-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-objects-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-objects-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-ids))
      (common-lisp:list
       (common-lisp:cons "objectIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluate-expressions))
      (common-lisp:list
       (common-lisp:cons "evaluateExpressions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-objects-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-objects-output common-lisp:nil
                       ((has-more-results :initarg :|hasMoreResults| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %describe-objects-output-has-more-results
                         :initform common-lisp:nil)
                        (marker :initarg :|marker| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-objects-output-marker :initform
                         common-lisp:nil)
                        (pipeline-objects :initarg :|pipelineObjects| :type
                         (common-lisp:or pipeline-object-list common-lisp:null)
                         :accessor %describe-objects-output-pipeline-objects
                         :initform
                         (common-lisp:error ":pipelineobjects is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-objects-output 'make-describe-objects-output))
 (common-lisp:defun make-describe-objects-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key has-more-results marker pipeline-objects)
   (common-lisp:apply #'common-lisp:make-instance 'describe-objects-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-objects-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-objects))
      (common-lisp:list
       (common-lisp:cons "pipelineObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-more-results))
      (common-lisp:list
       (common-lisp:cons "hasMoreResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-objects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pipelines-input common-lisp:nil
                       ((pipeline-ids :initarg :|pipelineIds| :type
                         (common-lisp:or |idList| common-lisp:null) :accessor
                         %describe-pipelines-input-pipeline-ids :initform
                         (common-lisp:error ":pipelineids is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-pipelines-input 'make-describe-pipelines-input))
 (common-lisp:defun make-describe-pipelines-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-pipelines-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipelines-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipelines-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-ids))
      (common-lisp:list
       (common-lisp:cons "pipelineIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipelines-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pipelines-output common-lisp:nil
                       ((pipeline-description-list :initarg
                         :|pipelineDescriptionList| :type
                         (common-lisp:or pipeline-description-list
                                         common-lisp:null)
                         :accessor
                         %describe-pipelines-output-pipeline-description-list
                         :initform
                         (common-lisp:error
                          ":pipelinedescriptionlist is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-pipelines-output
                    'make-describe-pipelines-output))
 (common-lisp:defun make-describe-pipelines-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-description-list)
   (common-lisp:apply #'common-lisp:make-instance 'describe-pipelines-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipelines-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipelines-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-description-list))
      (common-lisp:list
       (common-lisp:cons "pipelineDescriptionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipelines-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-expression-input common-lisp:nil
                       ((expression :initarg :|expression| :type
                         (common-lisp:or |longString| common-lisp:null)
                         :accessor %evaluate-expression-input-expression
                         :initform
                         (common-lisp:error ":expression is required"))
                        (object-id :initarg :|objectId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %evaluate-expression-input-object-id :initform
                         (common-lisp:error ":objectid is required"))
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %evaluate-expression-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'evaluate-expression-input
                    'make-evaluate-expression-input))
 (common-lisp:defun make-evaluate-expression-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression object-id pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-expression-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-expression-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-expression-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-id))
      (common-lisp:list
       (common-lisp:cons "objectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-expression-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-expression-output common-lisp:nil
                       ((evaluated-expression :initarg :|evaluatedExpression|
                         :type (common-lisp:or |longString| common-lisp:null)
                         :accessor
                         %evaluate-expression-output-evaluated-expression
                         :initform
                         (common-lisp:error
                          ":evaluatedexpression is required"))))
 (common-lisp:export
  (common-lisp:list 'evaluate-expression-output
                    'make-evaluate-expression-output))
 (common-lisp:defun make-evaluate-expression-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluated-expression)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-expression-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-expression-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-expression-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluated-expression))
      (common-lisp:list
       (common-lisp:cons "evaluatedExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-expression-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field common-lisp:nil
                       ((ref-value :initarg :|refValue| :type
                         (common-lisp:or |fieldNameString| common-lisp:null)
                         :accessor %field-ref-value :initform common-lisp:nil)
                        (string-value :initarg :|stringValue| :type
                         (common-lisp:or |fieldStringValue| common-lisp:null)
                         :accessor %field-string-value :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or |fieldNameString| common-lisp:null)
                         :accessor %field-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'field 'make-field))
 (common-lisp:defun make-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ref-value string-value key)
   (common-lisp:apply #'common-lisp:make-instance 'field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ref-value))
      (common-lisp:list
       (common-lisp:cons "refValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pipeline-definition-input common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-pipeline-definition-input-version
                         :initform common-lisp:nil)
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %get-pipeline-definition-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-definition-input
                    'make-get-pipeline-definition-input))
 (common-lisp:defun make-get-pipeline-definition-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-pipeline-definition-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-definition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-definition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-definition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pipeline-definition-output common-lisp:nil
                       ((parameter-values :initarg :|parameterValues| :type
                         (common-lisp:or parameter-value-list common-lisp:null)
                         :accessor
                         %get-pipeline-definition-output-parameter-values
                         :initform common-lisp:nil)
                        (parameter-objects :initarg :|parameterObjects| :type
                         (common-lisp:or parameter-object-list
                                         common-lisp:null)
                         :accessor
                         %get-pipeline-definition-output-parameter-objects
                         :initform common-lisp:nil)
                        (pipeline-objects :initarg :|pipelineObjects| :type
                         (common-lisp:or pipeline-object-list common-lisp:null)
                         :accessor
                         %get-pipeline-definition-output-pipeline-objects
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-definition-output
                    'make-get-pipeline-definition-output))
 (common-lisp:defun make-get-pipeline-definition-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-values parameter-objects
                     pipeline-objects)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-pipeline-definition-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-definition-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-definition-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-objects))
      (common-lisp:list
       (common-lisp:cons "pipelineObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-objects))
      (common-lisp:list
       (common-lisp:cons "parameterObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-values))
      (common-lisp:list
       (common-lisp:cons "parameterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-definition-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-identity common-lisp:nil
                       ((signature :initarg :|signature| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %instance-identity-signature :initform
                         common-lisp:nil)
                        (document :initarg :|document| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %instance-identity-document :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-identity 'make-instance-identity))
 (common-lisp:defun make-instance-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signature document)
   (common-lisp:apply #'common-lisp:make-instance 'instance-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-service-error
     (datapipeline-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-service-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error 'internal-service-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (datapipeline-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-pipelines-input common-lisp:nil
                       ((marker :initarg :|marker| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-pipelines-input-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-input 'make-list-pipelines-input))
 (common-lisp:defun make-list-pipelines-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipelines-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-pipelines-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-pipelines-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-pipelines-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipelines-output common-lisp:nil
                       ((has-more-results :initarg :|hasMoreResults| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %list-pipelines-output-has-more-results
                         :initform common-lisp:nil)
                        (marker :initarg :|marker| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-pipelines-output-marker :initform
                         common-lisp:nil)
                        (pipeline-id-list :initarg :|pipelineIdList| :type
                         (common-lisp:or |pipelineList| common-lisp:null)
                         :accessor %list-pipelines-output-pipeline-id-list
                         :initform
                         (common-lisp:error ":pipelineidlist is required"))))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-output 'make-list-pipelines-output))
 (common-lisp:defun make-list-pipelines-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key has-more-results marker pipeline-id-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipelines-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id-list))
      (common-lisp:list
       (common-lisp:cons "pipelineIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-more-results))
      (common-lisp:list
       (common-lisp:cons "hasMoreResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass operator common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or |stringList| common-lisp:null)
                         :accessor %operator-values :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or operator-type common-lisp:null)
                         :accessor %operator-type :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'operator 'make-operator))
 (common-lisp:defun make-operator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values type)
   (common-lisp:apply #'common-lisp:make-instance 'operator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operator))
   common-lisp:nil))
(common-lisp:deftype operator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter-attribute common-lisp:nil
                       ((string-value :initarg :|stringValue| :type
                         (common-lisp:or |attributeValueString|
                                         common-lisp:null)
                         :accessor %parameter-attribute-string-value :initform
                         (common-lisp:error ":stringvalue is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or |attributeNameString|
                                         common-lisp:null)
                         :accessor %parameter-attribute-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-attribute 'make-parameter-attribute))
 (common-lisp:defun make-parameter-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key string-value key)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-attribute-list ()
   '(trivial-types:proper-list parameter-attribute))
 (common-lisp:defun |make-parameter-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter-object common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or parameter-attribute-list
                                         common-lisp:null)
                         :accessor %parameter-object-attributes :initform
                         (common-lisp:error ":attributes is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or |fieldNameString| common-lisp:null)
                         :accessor %parameter-object-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-object 'make-parameter-object))
 (common-lisp:defun make-parameter-object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes id)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-object-list ()
   '(trivial-types:proper-list parameter-object))
 (common-lisp:defun |make-parameter-object-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter-value common-lisp:nil
                       ((string-value :initarg :|stringValue| :type
                         (common-lisp:or |fieldStringValue| common-lisp:null)
                         :accessor %parameter-value-string-value :initform
                         (common-lisp:error ":stringvalue is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or |fieldNameString| common-lisp:null)
                         :accessor %parameter-value-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'parameter-value 'make-parameter-value))
 (common-lisp:defun make-parameter-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key string-value id)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-value-list ()
   '(trivial-types:proper-list parameter-value))
 (common-lisp:defun |make-parameter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition pipeline-deleted-exception
     (datapipeline-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       pipeline-deleted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'pipeline-deleted-exception
                    'pipeline-deleted-exception-message)))
(common-lisp:progn
 (common-lisp:defclass pipeline-description common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or |tagList| common-lisp:null) :accessor
                         %pipeline-description-tags :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %pipeline-description-description :initform
                         common-lisp:nil)
                        (fields :initarg :|fields| :type
                         (common-lisp:or |fieldList| common-lisp:null)
                         :accessor %pipeline-description-fields :initform
                         (common-lisp:error ":fields is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %pipeline-description-name :initform
                         (common-lisp:error ":name is required"))
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %pipeline-description-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'pipeline-description 'make-pipeline-description))
 (common-lisp:defun make-pipeline-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description fields name pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-description-list ()
   '(trivial-types:proper-list pipeline-description))
 (common-lisp:defun |make-pipeline-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pipeline-id-name common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %pipeline-id-name-name :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %pipeline-id-name-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipeline-id-name 'make-pipeline-id-name))
 (common-lisp:defun make-pipeline-id-name
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-id-name
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-id-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-id-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-id-name))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition pipeline-not-found-exception
     (datapipeline-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       pipeline-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'pipeline-not-found-exception
                    'pipeline-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass pipeline-object common-lisp:nil
                       ((fields :initarg :|fields| :type
                         (common-lisp:or |fieldList| common-lisp:null)
                         :accessor %pipeline-object-fields :initform
                         (common-lisp:error ":fields is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %pipeline-object-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %pipeline-object-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'pipeline-object 'make-pipeline-object))
 (common-lisp:defun make-pipeline-object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fields name id)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-object-list ()
   '(trivial-types:proper-list pipeline-object))
 (common-lisp:defun |make-pipeline-object-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pipeline-object-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-pipeline-object-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass poll-for-task-input common-lisp:nil
                       ((instance-identity :initarg :|instanceIdentity| :type
                         (common-lisp:or instance-identity common-lisp:null)
                         :accessor %poll-for-task-input-instance-identity
                         :initform common-lisp:nil)
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %poll-for-task-input-hostname :initform
                         common-lisp:nil)
                        (worker-group :initarg :|workerGroup| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %poll-for-task-input-worker-group :initform
                         (common-lisp:error ":workergroup is required"))))
 (common-lisp:export
  (common-lisp:list 'poll-for-task-input 'make-poll-for-task-input))
 (common-lisp:defun make-poll-for-task-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-identity hostname worker-group)
   (common-lisp:apply #'common-lisp:make-instance 'poll-for-task-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input poll-for-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input poll-for-task-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-group))
      (common-lisp:list
       (common-lisp:cons "workerGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-identity))
      (common-lisp:list
       (common-lisp:cons "instanceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input poll-for-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass poll-for-task-output common-lisp:nil
                       ((task-object :initarg :|taskObject| :type
                         (common-lisp:or task-object common-lisp:null)
                         :accessor %poll-for-task-output-task-object :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'poll-for-task-output 'make-poll-for-task-output))
 (common-lisp:defun make-poll-for-task-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-object)
   (common-lisp:apply #'common-lisp:make-instance 'poll-for-task-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input poll-for-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input poll-for-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-object))
      (common-lisp:list
       (common-lisp:cons "taskObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input poll-for-task-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-pipeline-definition-input common-lisp:nil
                       ((parameter-values :initarg :|parameterValues| :type
                         (common-lisp:or parameter-value-list common-lisp:null)
                         :accessor
                         %put-pipeline-definition-input-parameter-values
                         :initform common-lisp:nil)
                        (parameter-objects :initarg :|parameterObjects| :type
                         (common-lisp:or parameter-object-list
                                         common-lisp:null)
                         :accessor
                         %put-pipeline-definition-input-parameter-objects
                         :initform common-lisp:nil)
                        (pipeline-objects :initarg :|pipelineObjects| :type
                         (common-lisp:or pipeline-object-list common-lisp:null)
                         :accessor
                         %put-pipeline-definition-input-pipeline-objects
                         :initform
                         (common-lisp:error ":pipelineobjects is required"))
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %put-pipeline-definition-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'put-pipeline-definition-input
                    'make-put-pipeline-definition-input))
 (common-lisp:defun make-put-pipeline-definition-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-values parameter-objects
                     pipeline-objects pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-pipeline-definition-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-pipeline-definition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-pipeline-definition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-objects))
      (common-lisp:list
       (common-lisp:cons "pipelineObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-objects))
      (common-lisp:list
       (common-lisp:cons "parameterObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-values))
      (common-lisp:list
       (common-lisp:cons "parameterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-pipeline-definition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-pipeline-definition-output common-lisp:nil
                       ((errored :initarg :|errored| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %put-pipeline-definition-output-errored
                         :initform (common-lisp:error ":errored is required"))
                        (validation-warnings :initarg :|validationWarnings|
                         :type
                         (common-lisp:or validation-warnings common-lisp:null)
                         :accessor
                         %put-pipeline-definition-output-validation-warnings
                         :initform common-lisp:nil)
                        (validation-errors :initarg :|validationErrors| :type
                         (common-lisp:or validation-errors common-lisp:null)
                         :accessor
                         %put-pipeline-definition-output-validation-errors
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-pipeline-definition-output
                    'make-put-pipeline-definition-output))
 (common-lisp:defun make-put-pipeline-definition-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errored validation-warnings
                     validation-errors)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-pipeline-definition-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-pipeline-definition-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-pipeline-definition-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "validationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-warnings))
      (common-lisp:list
       (common-lisp:cons "validationWarnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errored))
      (common-lisp:list
       (common-lisp:cons "errored"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-pipeline-definition-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query common-lisp:nil
                       ((selectors :initarg :|selectors| :type
                         (common-lisp:or selector-list common-lisp:null)
                         :accessor %query-selectors :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'query 'make-query))
 (common-lisp:defun make-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selectors)
   (common-lisp:apply #'common-lisp:make-instance 'query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectors))
      (common-lisp:list
       (common-lisp:cons "selectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-objects-input common-lisp:nil
                       ((limit :initarg :|limit| :type
                         (common-lisp:or |int| common-lisp:null) :accessor
                         %query-objects-input-limit :initform common-lisp:nil)
                        (marker :initarg :|marker| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %query-objects-input-marker :initform
                         common-lisp:nil)
                        (sphere :initarg :|sphere| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %query-objects-input-sphere :initform
                         (common-lisp:error ":sphere is required"))
                        (query :initarg :|query| :type
                         (common-lisp:or query common-lisp:null) :accessor
                         %query-objects-input-query :initform common-lisp:nil)
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %query-objects-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'query-objects-input 'make-query-objects-input))
 (common-lisp:defun make-query-objects-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit marker sphere query pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'query-objects-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-objects-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-objects-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sphere))
      (common-lisp:list
       (common-lisp:cons "sphere"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-objects-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-objects-output common-lisp:nil
                       ((has-more-results :initarg :|hasMoreResults| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %query-objects-output-has-more-results
                         :initform common-lisp:nil)
                        (marker :initarg :|marker| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %query-objects-output-marker :initform
                         common-lisp:nil)
                        (ids :initarg :|ids| :type
                         (common-lisp:or |idList| common-lisp:null) :accessor
                         %query-objects-output-ids :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-objects-output 'make-query-objects-output))
 (common-lisp:defun make-query-objects-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key has-more-results marker ids)
   (common-lisp:apply #'common-lisp:make-instance 'query-objects-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-objects-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-more-results))
      (common-lisp:list
       (common-lisp:cons "hasMoreResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-objects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-input common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or |stringList| common-lisp:null)
                         :accessor %remove-tags-input-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %remove-tags-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-tags-input 'make-remove-tags-input))
 (common-lisp:defun make-remove-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'remove-tags-output 'make-remove-tags-output))
 (common-lisp:defun make-remove-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass report-task-progress-input common-lisp:nil
                       ((fields :initarg :|fields| :type
                         (common-lisp:or |fieldList| common-lisp:null)
                         :accessor %report-task-progress-input-fields :initform
                         common-lisp:nil)
                        (task-id :initarg :|taskId| :type
                         (common-lisp:or |taskId| common-lisp:null) :accessor
                         %report-task-progress-input-task-id :initform
                         (common-lisp:error ":taskid is required"))))
 (common-lisp:export
  (common-lisp:list 'report-task-progress-input
                    'make-report-task-progress-input))
 (common-lisp:defun make-report-task-progress-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fields task-id)
   (common-lisp:apply #'common-lisp:make-instance 'report-task-progress-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          report-task-progress-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          report-task-progress-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          report-task-progress-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass report-task-progress-output common-lisp:nil
                       ((canceled :initarg :|canceled| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %report-task-progress-output-canceled
                         :initform
                         (common-lisp:error ":canceled is required"))))
 (common-lisp:export
  (common-lisp:list 'report-task-progress-output
                    'make-report-task-progress-output))
 (common-lisp:defun make-report-task-progress-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canceled)
   (common-lisp:apply #'common-lisp:make-instance 'report-task-progress-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          report-task-progress-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          report-task-progress-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canceled))
      (common-lisp:list
       (common-lisp:cons "canceled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          report-task-progress-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass report-task-runner-heartbeat-input common-lisp:nil
                       ((hostname :initarg :|hostname| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %report-task-runner-heartbeat-input-hostname :initform
                         common-lisp:nil)
                        (worker-group :initarg :|workerGroup| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %report-task-runner-heartbeat-input-worker-group
                         :initform common-lisp:nil)
                        (taskrunner-id :initarg :|taskrunnerId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %report-task-runner-heartbeat-input-taskrunner-id
                         :initform
                         (common-lisp:error ":taskrunnerid is required"))))
 (common-lisp:export
  (common-lisp:list 'report-task-runner-heartbeat-input
                    'make-report-task-runner-heartbeat-input))
 (common-lisp:defun make-report-task-runner-heartbeat-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hostname worker-group taskrunner-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'report-task-runner-heartbeat-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          report-task-runner-heartbeat-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          report-task-runner-heartbeat-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taskrunner-id))
      (common-lisp:list
       (common-lisp:cons "taskrunnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-group))
      (common-lisp:list
       (common-lisp:cons "workerGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          report-task-runner-heartbeat-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass report-task-runner-heartbeat-output common-lisp:nil
                       ((terminate :initarg :|terminate| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %report-task-runner-heartbeat-output-terminate
                         :initform
                         (common-lisp:error ":terminate is required"))))
 (common-lisp:export
  (common-lisp:list 'report-task-runner-heartbeat-output
                    'make-report-task-runner-heartbeat-output))
 (common-lisp:defun make-report-task-runner-heartbeat-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key terminate)
   (common-lisp:apply #'common-lisp:make-instance
                      'report-task-runner-heartbeat-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          report-task-runner-heartbeat-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          report-task-runner-heartbeat-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate))
      (common-lisp:list
       (common-lisp:cons "terminate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          report-task-runner-heartbeat-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass selector common-lisp:nil
                       ((operator :initarg :|operator| :type
                         (common-lisp:or operator common-lisp:null) :accessor
                         %selector-operator :initform common-lisp:nil)
                        (field-name :initarg :|fieldName| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %selector-field-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'selector 'make-selector))
 (common-lisp:defun make-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator field-name)
   (common-lisp:apply #'common-lisp:make-instance 'selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype selector-list () '(trivial-types:proper-list selector))
 (common-lisp:defun |make-selector-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass set-status-input common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %set-status-input-status :initform
                         (common-lisp:error ":status is required"))
                        (object-ids :initarg :|objectIds| :type
                         (common-lisp:or |idList| common-lisp:null) :accessor
                         %set-status-input-object-ids :initform
                         (common-lisp:error ":objectids is required"))
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %set-status-input-pipeline-id :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'set-status-input 'make-set-status-input))
 (common-lisp:defun make-set-status-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status object-ids pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'set-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input set-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input set-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-ids))
      (common-lisp:list
       (common-lisp:cons "objectIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input set-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-task-status-input common-lisp:nil
                       ((error-stack-trace :initarg :|errorStackTrace| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %set-task-status-input-error-stack-trace
                         :initform common-lisp:nil)
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or |errorMessage| common-lisp:null)
                         :accessor %set-task-status-input-error-message
                         :initform common-lisp:nil)
                        (error-id :initarg :|errorId| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %set-task-status-input-error-id :initform
                         common-lisp:nil)
                        (task-status :initarg :|taskStatus| :type
                         (common-lisp:or task-status common-lisp:null)
                         :accessor %set-task-status-input-task-status :initform
                         (common-lisp:error ":taskstatus is required"))
                        (task-id :initarg :|taskId| :type
                         (common-lisp:or |taskId| common-lisp:null) :accessor
                         %set-task-status-input-task-id :initform
                         (common-lisp:error ":taskid is required"))))
 (common-lisp:export
  (common-lisp:list 'set-task-status-input 'make-set-task-status-input))
 (common-lisp:defun make-set-task-status-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-stack-trace error-message error-id
                     task-status task-id)
   (common-lisp:apply #'common-lisp:make-instance 'set-task-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-task-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-task-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-id))
      (common-lisp:list
       (common-lisp:cons "errorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-stack-trace))
      (common-lisp:list
       (common-lisp:cons "errorStackTrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-task-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-task-status-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'set-task-status-output 'make-set-task-status-output))
 (common-lisp:defun make-set-task-status-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'set-task-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-task-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-task-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-task-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or |tagValue| common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or |tagKey| common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition task-not-found-exception
     (datapipeline-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       task-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'task-not-found-exception
                    'task-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass task-object common-lisp:nil
                       ((objects :initarg :|objects| :type
                         (common-lisp:or pipeline-object-map common-lisp:null)
                         :accessor %task-object-objects :initform
                         common-lisp:nil)
                        (attempt-id :initarg :|attemptId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %task-object-attempt-id :initform common-lisp:nil)
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %task-object-pipeline-id :initform common-lisp:nil)
                        (task-id :initarg :|taskId| :type
                         (common-lisp:or |taskId| common-lisp:null) :accessor
                         %task-object-task-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'task-object 'make-task-object))
 (common-lisp:defun make-task-object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key objects attempt-id pipeline-id task-id)
   (common-lisp:apply #'common-lisp:make-instance 'task-object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attempt-id))
      (common-lisp:list
       (common-lisp:cons "attemptId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-object))
   common-lisp:nil))
(common-lisp:deftype task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validate-pipeline-definition-input common-lisp:nil
                       ((parameter-values :initarg :|parameterValues| :type
                         (common-lisp:or parameter-value-list common-lisp:null)
                         :accessor
                         %validate-pipeline-definition-input-parameter-values
                         :initform common-lisp:nil)
                        (parameter-objects :initarg :|parameterObjects| :type
                         (common-lisp:or parameter-object-list
                                         common-lisp:null)
                         :accessor
                         %validate-pipeline-definition-input-parameter-objects
                         :initform common-lisp:nil)
                        (pipeline-objects :initarg :|pipelineObjects| :type
                         (common-lisp:or pipeline-object-list common-lisp:null)
                         :accessor
                         %validate-pipeline-definition-input-pipeline-objects
                         :initform
                         (common-lisp:error ":pipelineobjects is required"))
                        (pipeline-id :initarg :|pipelineId| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %validate-pipeline-definition-input-pipeline-id
                         :initform
                         (common-lisp:error ":pipelineid is required"))))
 (common-lisp:export
  (common-lisp:list 'validate-pipeline-definition-input
                    'make-validate-pipeline-definition-input))
 (common-lisp:defun make-validate-pipeline-definition-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-values parameter-objects
                     pipeline-objects pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-pipeline-definition-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-pipeline-definition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-pipeline-definition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "pipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-objects))
      (common-lisp:list
       (common-lisp:cons "pipelineObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-objects))
      (common-lisp:list
       (common-lisp:cons "parameterObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-values))
      (common-lisp:list
       (common-lisp:cons "parameterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-pipeline-definition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-pipeline-definition-output common-lisp:nil
                       ((errored :initarg :|errored| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %validate-pipeline-definition-output-errored
                         :initform (common-lisp:error ":errored is required"))
                        (validation-warnings :initarg :|validationWarnings|
                         :type
                         (common-lisp:or validation-warnings common-lisp:null)
                         :accessor
                         %validate-pipeline-definition-output-validation-warnings
                         :initform common-lisp:nil)
                        (validation-errors :initarg :|validationErrors| :type
                         (common-lisp:or validation-errors common-lisp:null)
                         :accessor
                         %validate-pipeline-definition-output-validation-errors
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validate-pipeline-definition-output
                    'make-validate-pipeline-definition-output))
 (common-lisp:defun make-validate-pipeline-definition-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errored validation-warnings
                     validation-errors)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-pipeline-definition-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-pipeline-definition-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-pipeline-definition-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "validationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-warnings))
      (common-lisp:list
       (common-lisp:cons "validationWarnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errored))
      (common-lisp:list
       (common-lisp:cons "errored"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-pipeline-definition-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validation-error common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or |validationMessages| common-lisp:null)
                         :accessor %validation-error-errors :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %validation-error-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validation-error 'make-validation-error))
 (common-lisp:defun make-validation-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors id)
   (common-lisp:apply #'common-lisp:make-instance 'validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-errors ()
   '(trivial-types:proper-list validation-error))
 (common-lisp:defun |make-validation-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass validation-warning common-lisp:nil
                       ((warnings :initarg :|warnings| :type
                         (common-lisp:or |validationMessages| common-lisp:null)
                         :accessor %validation-warning-warnings :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |id| common-lisp:null) :accessor
                         %validation-warning-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validation-warning 'make-validation-warning))
 (common-lisp:defun make-validation-warning
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key warnings id)
   (common-lisp:apply #'common-lisp:make-instance 'validation-warning
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-warning))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-warning))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-warning))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-warnings ()
   '(trivial-types:proper-list validation-warning))
 (common-lisp:defun |make-validation-warnings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-warning))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |attributeNameString| () 'common-lisp:string)
(common-lisp:deftype |attributeValueString| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |cancelActive| () 'common-lisp:boolean)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |fieldList| () '(trivial-types:proper-list field))
 (common-lisp:defun |make-fieldlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |fieldNameString| () 'common-lisp:string)
(common-lisp:deftype |fieldStringValue| () 'common-lisp:string)
(common-lisp:deftype |id| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |idList| () '(trivial-types:proper-list |id|))
 (common-lisp:defun |make-idlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |id|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |int| () 'common-lisp:integer)
(common-lisp:deftype |longString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |pipelineList| ()
   '(trivial-types:proper-list pipeline-id-name))
 (common-lisp:defun |make-pipelinelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-id-name))
   aws-sdk/generator/shape::members))
common-lisp:nil
(common-lisp:progn
 (common-lisp:deftype |stringList| ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-stringlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagKey| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagList| () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-taglist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagValue| () 'common-lisp:string)
(common-lisp:deftype |taskId| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |validationMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |validationMessages| ()
   '(trivial-types:proper-list |validationMessage|))
 (common-lisp:defun |make-validationmessages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |validationMessage|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun activate-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id parameter-values
                     start-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id parameter-values start-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ActivatePipeline"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-pipeline))
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id tags)
   (common-lisp:declare (common-lisp:ignorable pipeline-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddTags"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun create-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name unique-id description tags)
   (common-lisp:declare
    (common-lisp:ignorable name unique-id description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePipeline"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-pipeline))
(common-lisp:progn
 (common-lisp:defun deactivate-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id cancel-active)
   (common-lisp:declare (common-lisp:ignorable pipeline-id cancel-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deactivate-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeactivatePipeline"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id)
   (common-lisp:declare (common-lisp:ignorable pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeletePipeline"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-pipeline))
(common-lisp:progn
 (common-lisp:defun describe-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id object-ids
                     evaluate-expressions marker)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id object-ids evaluate-expressions marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-objects-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeObjects"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-objects))
(common-lisp:progn
 (common-lisp:defun describe-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-ids)
   (common-lisp:declare (common-lisp:ignorable pipeline-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-pipelines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePipelines"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-pipelines))
(common-lisp:progn
 (common-lisp:defun evaluate-expression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id object-id expression)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id object-id expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-evaluate-expression-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EvaluateExpression"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'evaluate-expression))
(common-lisp:progn
 (common-lisp:defun get-pipeline-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id version)
   (common-lisp:declare (common-lisp:ignorable pipeline-id version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-definition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetPipelineDefinition"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-pipeline-definition))
(common-lisp:progn
 (common-lisp:defun list-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker)
   (common-lisp:declare (common-lisp:ignorable marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipelines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPipelines"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pipelines))
(common-lisp:progn
 (common-lisp:defun poll-for-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key worker-group hostname instance-identity)
   (common-lisp:declare
    (common-lisp:ignorable worker-group hostname instance-identity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PollForTask"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'poll-for-task))
(common-lisp:progn
 (common-lisp:defun put-pipeline-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id pipeline-objects
                     parameter-objects parameter-values)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id pipeline-objects parameter-objects
     parameter-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-pipeline-definition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutPipelineDefinition"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-pipeline-definition))
(common-lisp:progn
 (common-lisp:defun query-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id query sphere marker limit)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id query sphere marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-query-objects-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "QueryObjects"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'query-objects))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable pipeline-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveTags"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun report-task-progress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id fields)
   (common-lisp:declare (common-lisp:ignorable task-id fields))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-report-task-progress-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ReportTaskProgress"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'report-task-progress))
(common-lisp:progn
 (common-lisp:defun report-task-runner-heartbeat
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key taskrunner-id worker-group hostname)
   (common-lisp:declare
    (common-lisp:ignorable taskrunner-id worker-group hostname))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-report-task-runner-heartbeat-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ReportTaskRunnerHeartbeat"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'report-task-runner-heartbeat))
(common-lisp:progn
 (common-lisp:defun set-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id object-ids status)
   (common-lisp:declare (common-lisp:ignorable pipeline-id object-ids status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SetStatus"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-status))
(common-lisp:progn
 (common-lisp:defun set-task-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id task-status error-id
                     error-message error-stack-trace)
   (common-lisp:declare
    (common-lisp:ignorable task-id task-status error-id error-message
     error-stack-trace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-task-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SetTaskStatus"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-task-status))
(common-lisp:progn
 (common-lisp:defun validate-pipeline-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id pipeline-objects
                     parameter-objects parameter-values)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id pipeline-objects parameter-objects
     parameter-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-pipeline-definition-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datapipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ValidatePipelineDefinition"
                                                        "2012-10-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'validate-pipeline-definition))
