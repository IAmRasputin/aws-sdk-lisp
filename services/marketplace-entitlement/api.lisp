;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/marketplace-entitlement/api
  (:use)
  (:nicknames #:aws/marketplace-entitlement)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/marketplace-entitlement/api)
(common-lisp:progn
 (common-lisp:defclass marketplace-entitlement-request
                       (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "marketplace-entitlement"
                        :protocol :json))
 (common-lisp:export 'marketplace-entitlement-request))
(common-lisp:progn
 (common-lisp:define-condition marketplace-entitlement-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'marketplace-entitlement-error))
(common-lisp:defvar *error-map*
  '(("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass entitlement common-lisp:nil
                       ((expiration-date :initarg :expiration-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %entitlement-expiration-date :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or entitlement-value common-lisp:null)
                         :accessor %entitlement-value :initform
                         common-lisp:nil)
                        (customer-identifier :initarg :customer-identifier
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %entitlement-customer-identifier :initform
                         common-lisp:nil)
                        (dimension :initarg :dimension :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %entitlement-dimension :initform
                         common-lisp:nil)
                        (product-code :initarg :product-code :type
                         (common-lisp:or product-code common-lisp:null)
                         :accessor %entitlement-product-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'entitlement 'make-entitlement))
 (common-lisp:defun make-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration-date value customer-identifier
                     dimension product-code)
   (common-lisp:apply #'common-lisp:make-instance 'entitlement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code))
      (common-lisp:list
       (common-lisp:cons "ProductCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension))
      (common-lisp:list
       (common-lisp:cons "Dimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-identifier))
      (common-lisp:list
       (common-lisp:cons "CustomerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entitlement-list ()
   '(trivial-types:proper-list entitlement))
 (common-lisp:defun |make-entitlement-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass entitlement-value common-lisp:nil
                       ((string-value :initarg :string-value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-value-string-value :initform
                         common-lisp:nil)
                        (boolean-value :initarg :boolean-value :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %entitlement-value-boolean-value :initform
                         common-lisp:nil)
                        (double-value :initarg :double-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %entitlement-value-double-value :initform
                         common-lisp:nil)
                        (integer-value :initarg :integer-value :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %entitlement-value-integer-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'entitlement-value 'make-entitlement-value))
 (common-lisp:defun make-entitlement-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key string-value boolean-value double-value
                     integer-value)
   (common-lisp:apply #'common-lisp:make-instance 'entitlement-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "IntegerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "DoubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "BooleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "StringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement-value))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype get-entitlement-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype get-entitlement-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-get-entitlement-filters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass get-entitlements-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-entitlements-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-entitlements-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or get-entitlement-filters
                                         common-lisp:null)
                         :accessor %get-entitlements-request-filter :initform
                         common-lisp:nil)
                        (product-code :initarg :product-code :type
                         (common-lisp:or product-code common-lisp:null)
                         :accessor %get-entitlements-request-product-code
                         :initform
                         (common-lisp:error ":product-code is required"))))
 (common-lisp:export
  (common-lisp:list 'get-entitlements-request 'make-get-entitlements-request))
 (common-lisp:defun make-get-entitlements-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter
                     product-code)
   (common-lisp:apply #'common-lisp:make-instance 'get-entitlements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-entitlements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-entitlements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code))
      (common-lisp:list
       (common-lisp:cons "ProductCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-entitlements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-entitlements-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-entitlements-result-next-token
                         :initform common-lisp:nil)
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or entitlement-list common-lisp:null)
                         :accessor %get-entitlements-result-entitlements
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-entitlements-result 'make-get-entitlements-result))
 (common-lisp:defun make-get-entitlements-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entitlements)
   (common-lisp:apply #'common-lisp:make-instance 'get-entitlements-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-entitlements-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-entitlements-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-entitlements-result))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (marketplace-entitlement-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-service-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error-exception
                    'internal-service-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (marketplace-entitlement-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype product-code () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (marketplace-entitlement-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun get-entitlements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-code filter next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable product-code filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-entitlements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-entitlement-request aws-sdk/generator/operation::input
        "POST" :json "/" "GetEntitlements" "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-entitlements))
