;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/internetmonitor/api
  (:use)
  (:nicknames #:aws/internetmonitor)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/internetmonitor/api)
(common-lisp:progn
 (common-lisp:define-condition internetmonitor-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'internetmonitor-error))
(common-lisp:progn
 (common-lisp:defclass internetmonitor-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "internetmonitor"
                        :api-version "2021-06-03" :host-prefix
                        "internetmonitor" :signing-name "internetmonitor"
                        :global-host common-lisp:nil))
 (common-lisp:export 'internetmonitor-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("InternalServerException" . internal-server-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (availability-measurement (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-measurement-"))
   (experience-score common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (percent-of-total-traffic-impacted common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (percent-of-client-location-impacted common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-measurement 'make-availability-measurement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          availability-measurement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          availability-measurement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experience-score))
      (common-lisp:list
       (common-lisp:cons "ExperienceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percent-of-total-traffic-impacted))
      (common-lisp:list
       (common-lisp:cons "PercentOfTotalTrafficImpacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percent-of-client-location-impacted))
      (common-lisp:list
       (common-lisp:cons "PercentOfClientLocationImpacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          availability-measurement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-monitor-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-monitor-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or set-of-arns common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (max-city-networks-to-monitor common-lisp:nil :type
    (common-lisp:or max-city-networks-to-monitor common-lisp:null))
   (internet-measurements-log-delivery common-lisp:nil :type
    (common-lisp:or internet-measurements-log-delivery common-lisp:null))
   (traffic-percentage-to-monitor common-lisp:nil :type
    (common-lisp:or traffic-percentage-to-monitor common-lisp:null))
   (health-events-config common-lisp:nil :type
    (common-lisp:or health-events-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-monitor-input 'make-create-monitor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-monitor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-monitor-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-city-networks-to-monitor))
      (common-lisp:list
       (common-lisp:cons "MaxCityNetworksToMonitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internet-measurements-log-delivery))
      (common-lisp:list
       (common-lisp:cons "InternetMeasurementsLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-percentage-to-monitor))
      (common-lisp:list
       (common-lisp:cons "TrafficPercentageToMonitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-events-config))
      (common-lisp:list
       (common-lisp:cons "HealthEventsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-monitor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-monitor-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-monitor-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or monitor-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or monitor-config-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-monitor-output 'make-create-monitor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-monitor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-monitor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-monitor-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-monitor-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-monitor-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-monitor-input 'make-delete-monitor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-monitor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-monitor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-monitor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-monitor-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-monitor-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-monitor-output 'make-delete-monitor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitor-output))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-parameter-"))
   (field common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (operator common-lisp:nil :type (common-lisp:or operator common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-parameter 'make-filter-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-parameters ()
   '(trivial-types:proper-list filter-parameter))
 (common-lisp:defun make-filter-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-event-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-health-event-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (event-id (common-lisp:error ":event-id is required") :type
    (common-lisp:or health-event-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-event-input 'make-get-health-event-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-event-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-event-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-event-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-event-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-health-event-output-"))
   (event-arn (common-lisp:error ":event-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (event-id (common-lisp:error ":event-id is required") :type
    (common-lisp:or health-event-name common-lisp:null))
   (started-at (common-lisp:error ":started-at is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (ended-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (impacted-locations (common-lisp:error ":impacted-locations is required")
    :type (common-lisp:or impacted-locations-list common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or health-event-status common-lisp:null))
   (percent-of-total-traffic-impacted common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (impact-type (common-lisp:error ":impact-type is required") :type
    (common-lisp:or health-event-impact-type common-lisp:null))
   (health-score-threshold common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-event-output 'make-get-health-event-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-event-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-event-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-arn))
      (common-lisp:list
       (common-lisp:cons "EventArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "EndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impacted-locations))
      (common-lisp:list
       (common-lisp:cons "ImpactedLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percent-of-total-traffic-impacted))
      (common-lisp:list
       (common-lisp:cons "PercentOfTotalTrafficImpacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact-type))
      (common-lisp:list
       (common-lisp:cons "ImpactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-score-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-event-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-monitor-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-monitor-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-monitor-input 'make-get-monitor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-monitor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-monitor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-monitor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-monitor-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-monitor-output-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (monitor-arn (common-lisp:error ":monitor-arn is required") :type
    (common-lisp:or monitor-arn common-lisp:null))
   (resources (common-lisp:error ":resources is required") :type
    (common-lisp:or set-of-arns common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or monitor-config-state common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (modified-at (common-lisp:error ":modified-at is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (processing-status common-lisp:nil :type
    (common-lisp:or monitor-processing-status-code common-lisp:null))
   (processing-status-info common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (max-city-networks-to-monitor common-lisp:nil :type
    (common-lisp:or max-city-networks-to-monitor common-lisp:null))
   (internet-measurements-log-delivery common-lisp:nil :type
    (common-lisp:or internet-measurements-log-delivery common-lisp:null))
   (traffic-percentage-to-monitor common-lisp:nil :type
    (common-lisp:or traffic-percentage-to-monitor common-lisp:null))
   (health-events-config common-lisp:nil :type
    (common-lisp:or health-events-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-monitor-output 'make-get-monitor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-monitor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-monitor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "ModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-status))
      (common-lisp:list
       (common-lisp:cons "ProcessingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-status-info))
      (common-lisp:list
       (common-lisp:cons "ProcessingStatusInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-city-networks-to-monitor))
      (common-lisp:list
       (common-lisp:cons "MaxCityNetworksToMonitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internet-measurements-log-delivery))
      (common-lisp:list
       (common-lisp:cons "InternetMeasurementsLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-percentage-to-monitor))
      (common-lisp:list
       (common-lisp:cons "TrafficPercentageToMonitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-events-config))
      (common-lisp:list
       (common-lisp:cons "HealthEventsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-monitor-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-results-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-results-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or query-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-results-input 'make-get-query-results-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-results-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-results-output-"))
   (fields (common-lisp:error ":fields is required") :type
    (common-lisp:or query-fields common-lisp:null))
   (data (common-lisp:error ":data is required") :type
    (common-lisp:or query-data common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-results-output 'make-get-query-results-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-status-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-status-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-status-input 'make-get-query-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-status-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-status-output-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or query-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-status-output 'make-get-query-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (health-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-event-"))
   (event-arn (common-lisp:error ":event-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (event-id (common-lisp:error ":event-id is required") :type
    (common-lisp:or health-event-name common-lisp:null))
   (started-at (common-lisp:error ":started-at is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (ended-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (impacted-locations (common-lisp:error ":impacted-locations is required")
    :type (common-lisp:or impacted-locations-list common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or health-event-status common-lisp:null))
   (percent-of-total-traffic-impacted common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (impact-type (common-lisp:error ":impact-type is required") :type
    (common-lisp:or health-event-impact-type common-lisp:null))
   (health-score-threshold common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null)))
 (common-lisp:export (common-lisp:list 'health-event 'make-health-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-arn))
      (common-lisp:list
       (common-lisp:cons "EventArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "EndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impacted-locations))
      (common-lisp:list
       (common-lisp:cons "ImpactedLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percent-of-total-traffic-impacted))
      (common-lisp:list
       (common-lisp:cons "PercentOfTotalTrafficImpacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact-type))
      (common-lisp:list
       (common-lisp:cons "ImpactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-score-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-event))
   common-lisp:nil))
(common-lisp:deftype health-event-impact-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype health-event-list ()
   '(trivial-types:proper-list health-event))
 (common-lisp:defun make-health-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list health-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype health-event-name () 'common-lisp:string)
(common-lisp:deftype health-event-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (health-events-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-events-config-"))
   (availability-score-threshold common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (performance-score-threshold common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (availability-local-health-events-config common-lisp:nil :type
    (common-lisp:or local-health-events-config common-lisp:null))
   (performance-local-health-events-config common-lisp:nil :type
    (common-lisp:or local-health-events-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-events-config 'make-health-events-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-events-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-events-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-score-threshold))
      (common-lisp:list
       (common-lisp:cons "AvailabilityScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-score-threshold))
      (common-lisp:list
       (common-lisp:cons "PerformanceScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-local-health-events-config))
      (common-lisp:list
       (common-lisp:cons "AvailabilityLocalHealthEventsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-local-health-events-config))
      (common-lisp:list
       (common-lisp:cons "PerformanceLocalHealthEventsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-events-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (impacted-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-impacted-location-"))
   (asname (common-lisp:error ":asname is required") :type
    (common-lisp:or string common-lisp:null))
   (asnumber (common-lisp:error ":asnumber is required") :type
    (common-lisp:or long common-lisp:null))
   (country (common-lisp:error ":country is required") :type
    (common-lisp:or string common-lisp:null))
   (subdivision common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (metro common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (city common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (latitude common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (longitude common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (country-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subdivision-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-location common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or health-event-status common-lisp:null))
   (caused-by common-lisp:nil :type
    (common-lisp:or network-impairment common-lisp:null))
   (internet-health common-lisp:nil :type
    (common-lisp:or internet-health common-lisp:null))
   (ipv4prefixes common-lisp:nil :type
    (common-lisp:or ipv4prefix-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'impacted-location 'make-impacted-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input impacted-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input impacted-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asname))
      (common-lisp:list
       (common-lisp:cons "ASName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asnumber))
      (common-lisp:list
       (common-lisp:cons "ASNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdivision))
      (common-lisp:list
       (common-lisp:cons "Subdivision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metro))
      (common-lisp:list
       (common-lisp:cons "Metro"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latitude))
      (common-lisp:list
       (common-lisp:cons "Latitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'longitude))
      (common-lisp:list
       (common-lisp:cons "Longitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdivision-code))
      (common-lisp:list
       (common-lisp:cons "SubdivisionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-location))
      (common-lisp:list
       (common-lisp:cons "ServiceLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caused-by))
      (common-lisp:list
       (common-lisp:cons "CausedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-health))
      (common-lisp:list
       (common-lisp:cons "InternetHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4prefixes))
      (common-lisp:list
       (common-lisp:cons "Ipv4Prefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input impacted-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype impacted-locations-list ()
   '(trivial-types:proper-list impacted-location))
 (common-lisp:defun make-impacted-locations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list impacted-location))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (internet-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-internet-health-"))
   (availability common-lisp:nil :type
    (common-lisp:or availability-measurement common-lisp:null))
   (performance common-lisp:nil :type
    (common-lisp:or performance-measurement common-lisp:null)))
 (common-lisp:export (common-lisp:list 'internet-health 'make-internet-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input internet-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input internet-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability))
      (common-lisp:list
       (common-lisp:cons "Availability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance))
      (common-lisp:list
       (common-lisp:cons "Performance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input internet-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (internet-measurements-log-delivery (:copier common-lisp:nil)
      (:conc-name "struct-shape-internet-measurements-log-delivery-"))
   (s3config common-lisp:nil :type (common-lisp:or s3config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internet-measurements-log-delivery
                    'make-internet-measurements-log-delivery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internet-measurements-log-delivery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internet-measurements-log-delivery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3config))
      (common-lisp:list
       (common-lisp:cons "S3Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internet-measurements-log-delivery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ipv4prefix-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-ipv4prefix-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-health-events-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-health-events-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (event-status common-lisp:nil :type
    (common-lisp:or health-event-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-health-events-input 'make-list-health-events-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-health-events-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-health-events-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-health-events-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-health-events-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-health-events-output-"))
   (health-events (common-lisp:error ":health-events is required") :type
    (common-lisp:or health-event-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-health-events-output
                    'make-list-health-events-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-health-events-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-health-events-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-events))
      (common-lisp:list
       (common-lisp:cons "HealthEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-health-events-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitors-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitors-input-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (monitor-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitors-input 'make-list-monitors-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-monitors-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-monitors-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-monitors-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitors-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitors-output-"))
   (monitors (common-lisp:error ":monitors is required") :type
    (common-lisp:or monitor-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitors-output 'make-list-monitors-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-monitors-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-monitors-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitors))
      (common-lisp:list
       (common-lisp:cons "Monitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-monitors-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or monitor-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (local-health-events-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-local-health-events-config-"))
   (status common-lisp:nil :type
    (common-lisp:or local-health-events-config-status common-lisp:null))
   (health-score-threshold common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (min-traffic-impact common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'local-health-events-config
                    'make-local-health-events-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          local-health-events-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          local-health-events-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-score-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthScoreThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-traffic-impact))
      (common-lisp:list
       (common-lisp:cons "MinTrafficImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          local-health-events-config))
   common-lisp:nil))
(common-lisp:deftype local-health-events-config-status () 'common-lisp:string)
(common-lisp:deftype log-delivery-status () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-city-networks-to-monitor () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (monitor (:copier common-lisp:nil) (:conc-name "struct-shape-monitor-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (monitor-arn (common-lisp:error ":monitor-arn is required") :type
    (common-lisp:or monitor-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or monitor-config-state common-lisp:null))
   (processing-status common-lisp:nil :type
    (common-lisp:or monitor-processing-status-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'monitor 'make-monitor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-status))
      (common-lisp:list
       (common-lisp:cons "ProcessingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitor))
   common-lisp:nil))
(common-lisp:deftype monitor-arn () 'common-lisp:string)
(common-lisp:deftype monitor-config-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype monitor-list () '(trivial-types:proper-list monitor))
 (common-lisp:defun make-monitor-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list monitor))
   aws-sdk/generator/shape::members))
(common-lisp:deftype monitor-processing-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network (:copier common-lisp:nil) (:conc-name "struct-shape-network-"))
   (asname (common-lisp:error ":asname is required") :type
    (common-lisp:or string common-lisp:null))
   (asnumber (common-lisp:error ":asnumber is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network 'make-network))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asname))
      (common-lisp:list
       (common-lisp:cons "ASName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asnumber))
      (common-lisp:list
       (common-lisp:cons "ASNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-impairment (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-impairment-"))
   (networks (common-lisp:error ":networks is required") :type
    (common-lisp:or network-list common-lisp:null))
   (as-path (common-lisp:error ":as-path is required") :type
    (common-lisp:or network-list common-lisp:null))
   (network-event-type (common-lisp:error ":network-event-type is required")
    :type (common-lisp:or triangulation-event-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-impairment 'make-network-impairment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-impairment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-impairment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networks))
      (common-lisp:list
       (common-lisp:cons "Networks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as-path))
      (common-lisp:list
       (common-lisp:cons "AsPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-event-type))
      (common-lisp:list
       (common-lisp:cons "NetworkEventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-impairment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-list () '(trivial-types:proper-list network))
 (common-lisp:defun make-network-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype operator () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (performance-measurement (:copier common-lisp:nil)
      (:conc-name "struct-shape-performance-measurement-"))
   (experience-score common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (percent-of-total-traffic-impacted common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (percent-of-client-location-impacted common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (round-trip-time common-lisp:nil :type
    (common-lisp:or round-trip-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-measurement 'make-performance-measurement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-measurement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-measurement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experience-score))
      (common-lisp:list
       (common-lisp:cons "ExperienceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percent-of-total-traffic-impacted))
      (common-lisp:list
       (common-lisp:cons "PercentOfTotalTrafficImpacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percent-of-client-location-impacted))
      (common-lisp:list
       (common-lisp:cons "PercentOfClientLocationImpacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'round-trip-time))
      (common-lisp:list
       (common-lisp:cons "RoundTripTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-measurement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-data () '(trivial-types:proper-list query-row))
 (common-lisp:defun make-query-data
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-row))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (query-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-field-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query-field 'make-query-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-fields () '(trivial-types:proper-list query-field))
 (common-lisp:defun make-query-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype query-row () '(trivial-types:proper-list string))
 (common-lisp:defun make-query-row
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-status () 'common-lisp:string)
(common-lisp:deftype query-type () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (round-trip-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-round-trip-time-"))
   (p50 common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (p90 common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (p95 common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'round-trip-time 'make-round-trip-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input round-trip-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input round-trip-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p50))
      (common-lisp:list
       (common-lisp:cons "P50"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p90))
      (common-lisp:list
       (common-lisp:cons "P90"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p95))
      (common-lisp:list
       (common-lisp:cons "P95"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input round-trip-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3config (:copier common-lisp:nil) (:conc-name "struct-shape-s3config-"))
   (bucket-name common-lisp:nil :type
    (common-lisp:or s3config-bucket-name-string common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (log-delivery-status common-lisp:nil :type
    (common-lisp:or log-delivery-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3config 'make-s3config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "BucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-delivery-status))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3config))
   common-lisp:nil))
(common-lisp:deftype s3config-bucket-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype set-of-arns () '(trivial-types:proper-list arn))
 (common-lisp:defun make-set-of-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-query-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-query-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (query-type (common-lisp:error ":query-type is required") :type
    (common-lisp:or query-type common-lisp:null))
   (filter-parameters common-lisp:nil :type
    (common-lisp:or filter-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-query-input 'make-start-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-type))
      (common-lisp:list
       (common-lisp:cons "QueryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-parameters))
      (common-lisp:list
       (common-lisp:cons "FilterParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-query-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-query-output-"))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-query-output 'make-start-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-query-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-query-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-query-input 'make-stop-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-query-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-query-output-")))
 (common-lisp:export
  (common-lisp:list 'stop-query-output 'make-stop-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-query-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or monitor-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:deftype traffic-percentage-to-monitor () 'common-lisp:integer)
(common-lisp:deftype triangulation-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or monitor-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-monitor-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-monitor-input-"))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (resources-to-add common-lisp:nil :type
    (common-lisp:or set-of-arns common-lisp:null))
   (resources-to-remove common-lisp:nil :type
    (common-lisp:or set-of-arns common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or monitor-config-state common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-city-networks-to-monitor common-lisp:nil :type
    (common-lisp:or max-city-networks-to-monitor common-lisp:null))
   (internet-measurements-log-delivery common-lisp:nil :type
    (common-lisp:or internet-measurements-log-delivery common-lisp:null))
   (traffic-percentage-to-monitor common-lisp:nil :type
    (common-lisp:or traffic-percentage-to-monitor common-lisp:null))
   (health-events-config common-lisp:nil :type
    (common-lisp:or health-events-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-monitor-input 'make-update-monitor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-monitor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-monitor-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-to-add))
      (common-lisp:list
       (common-lisp:cons "ResourcesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-to-remove))
      (common-lisp:list
       (common-lisp:cons "ResourcesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-city-networks-to-monitor))
      (common-lisp:list
       (common-lisp:cons "MaxCityNetworksToMonitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internet-measurements-log-delivery))
      (common-lisp:list
       (common-lisp:cons "InternetMeasurementsLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-percentage-to-monitor))
      (common-lisp:list
       (common-lisp:cons "TrafficPercentageToMonitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-events-config))
      (common-lisp:list
       (common-lisp:cons "HealthEventsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-monitor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-monitor-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-monitor-output-"))
   (monitor-arn (common-lisp:error ":monitor-arn is required") :type
    (common-lisp:or monitor-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or monitor-config-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-monitor-output 'make-update-monitor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-monitor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-monitor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-monitor-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (internetmonitor-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun create-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name resources client-token tags
                     max-city-networks-to-monitor
                     internet-measurements-log-delivery
                     traffic-percentage-to-monitor health-events-config)
   (common-lisp:declare
    (common-lisp:ignorable monitor-name resources client-token tags
     max-city-networks-to-monitor internet-measurements-log-delivery
     traffic-percentage-to-monitor health-events-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-monitor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "POST"
        "/v20210603/Monitors" "CreateMonitor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-monitor))
(common-lisp:progn
 (common-lisp:defun delete-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name)
   (common-lisp:declare (common-lisp:ignorable monitor-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-monitor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v20210603/Monitors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'monitor-name))))
        "DeleteMonitor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-monitor))
(common-lisp:progn
 (common-lisp:defun get-health-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name event-id)
   (common-lisp:declare (common-lisp:ignorable monitor-name event-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-health-event-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/v20210603/Monitors/~A/HealthEvents/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'monitor-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'event-id))))
        "GetHealthEvent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-health-event))
(common-lisp:progn
 (common-lisp:defun get-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name)
   (common-lisp:declare (common-lisp:ignorable monitor-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-monitor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v20210603/Monitors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'monitor-name))))
        "GetMonitor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-monitor))
(common-lisp:progn
 (common-lisp:defun get-query-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name query-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable monitor-name query-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-results-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/v20210603/Monitors/~A/Queries/~A/Results"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'monitor-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'query-id))))
        "GetQueryResults"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-results))
(common-lisp:progn
 (common-lisp:defun get-query-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name query-id)
   (common-lisp:declare (common-lisp:ignorable monitor-name query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/v20210603/Monitors/~A/Queries/~A/Status"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'monitor-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'query-id))))
        "GetQueryStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-status))
(common-lisp:progn
 (common-lisp:defun list-health-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name start-time end-time
                     next-token max-results event-status)
   (common-lisp:declare
    (common-lisp:ignorable monitor-name start-time end-time next-token
     max-results event-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-health-events-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/v20210603/Monitors/~A/HealthEvents"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'monitor-name))))
        "ListHealthEvents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-health-events))
(common-lisp:progn
 (common-lisp:defun list-monitors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results monitor-status)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results monitor-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-monitors-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "GET"
        "/v20210603/Monitors" "ListMonitors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-monitors))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name start-time end-time
                     query-type filter-parameters)
   (common-lisp:declare
    (common-lisp:ignorable monitor-name start-time end-time query-type
     filter-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v20210603/Monitors/~A/Queries"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'monitor-name))))
        "StartQuery"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-query))
(common-lisp:progn
 (common-lisp:defun stop-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name query-id)
   (common-lisp:declare (common-lisp:ignorable monitor-name query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/v20210603/Monitors/~A/Queries/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'monitor-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'query-id))))
        "StopQuery"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-query))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name resources-to-add
                     resources-to-remove status client-token
                     max-city-networks-to-monitor
                     internet-measurements-log-delivery
                     traffic-percentage-to-monitor health-events-config)
   (common-lisp:declare
    (common-lisp:ignorable monitor-name resources-to-add resources-to-remove
     status client-token max-city-networks-to-monitor
     internet-measurements-log-delivery traffic-percentage-to-monitor
     health-events-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-monitor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'internetmonitor-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/v20210603/Monitors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'monitor-name))))
        "UpdateMonitor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-monitor))
