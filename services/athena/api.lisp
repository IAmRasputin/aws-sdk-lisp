;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/athena/api
  (:use)
  (:nicknames #:aws/athena)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/athena/api)
(common-lisp:progn
 (common-lisp:defclass athena-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "athena" :protocol :json))
 (common-lisp:export 'athena-request))
(common-lisp:progn
 (common-lisp:define-condition athena-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'athena-error))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("MetadataException" . metadata-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("SessionAlreadyExistsException" . session-already-exists-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:progn
 (common-lisp:defclass acl-configuration common-lisp:nil
                       ((s3acl-option :initarg :s3acl-option :type
                         (common-lisp:or s3acl-option common-lisp:null)
                         :accessor %acl-configuration-s3acl-option :initform
                         (common-lisp:error ":s3acl-option is required"))))
 (common-lisp:export
  (common-lisp:list 'acl-configuration 'make-acl-configuration))
 (common-lisp:defun make-acl-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3acl-option)
   (common-lisp:apply #'common-lisp:make-instance 'acl-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input acl-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input acl-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3acl-option))
      (common-lisp:list
       (common-lisp:cons "S3AclOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input acl-configuration))
   common-lisp:nil))
(common-lisp:deftype age () 'common-lisp:integer)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-dpusizes common-lisp:nil
                       ((supported-dpusizes :initarg :supported-dpusizes :type
                         (common-lisp:or supported-dpusize-list
                                         common-lisp:null)
                         :accessor %application-dpusizes-supported-dpusizes
                         :initform common-lisp:nil)
                        (application-runtime-id :initarg
                         :application-runtime-id :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %application-dpusizes-application-runtime-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-dpusizes 'make-application-dpusizes))
 (common-lisp:defun make-application-dpusizes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supported-dpusizes
                     application-runtime-id)
   (common-lisp:apply #'common-lisp:make-instance 'application-dpusizes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-dpusizes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-dpusizes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-runtime-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationRuntimeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-dpusizes))
      (common-lisp:list
       (common-lisp:cons "SupportedDPUSizes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-dpusizes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-dpusizes-list ()
   '(trivial-types:proper-list application-dpusizes))
 (common-lisp:defun |make-application-dpusizes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-dpusizes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass athena-error common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %athena-error-error-message :initform common-lisp:nil)
                        (retryable :initarg :retryable :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %athena-error-retryable :initform common-lisp:nil)
                        (error-type :initarg :error-type :type
                         (common-lisp:or error-type common-lisp:null) :accessor
                         %athena-error-error-type :initform common-lisp:nil)
                        (error-category :initarg :error-category :type
                         (common-lisp:or error-category common-lisp:null)
                         :accessor %athena-error-error-category :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'athena-error 'make-athena-error))
 (common-lisp:defun make-athena-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message retryable error-type
                     error-category)
   (common-lisp:apply #'common-lisp:make-instance 'athena-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input athena-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input athena-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-category))
      (common-lisp:list
       (common-lisp:cons "ErrorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retryable))
      (common-lisp:list
       (common-lisp:cons "Retryable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input athena-error))
   common-lisp:nil))
(common-lisp:deftype auth-token () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-get-named-query-input common-lisp:nil
                       ((named-query-ids :initarg :named-query-ids :type
                         (common-lisp:or named-query-id-list common-lisp:null)
                         :accessor %batch-get-named-query-input-named-query-ids
                         :initform
                         (common-lisp:error ":named-query-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-named-query-input
                    'make-batch-get-named-query-input))
 (common-lisp:defun make-batch-get-named-query-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key named-query-ids)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-ids))
      (common-lisp:list
       (common-lisp:cons "NamedQueryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-named-query-output common-lisp:nil
                       ((unprocessed-named-query-ids :initarg
                         :unprocessed-named-query-ids :type
                         (common-lisp:or unprocessed-named-query-id-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-named-query-output-unprocessed-named-query-ids
                         :initform common-lisp:nil)
                        (named-queries :initarg :named-queries :type
                         (common-lisp:or named-query-list common-lisp:null)
                         :accessor %batch-get-named-query-output-named-queries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-named-query-output
                    'make-batch-get-named-query-output))
 (common-lisp:defun make-batch-get-named-query-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-named-query-ids
                     named-queries)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-queries))
      (common-lisp:list
       (common-lisp:cons "NamedQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-named-query-ids))
      (common-lisp:list
       (common-lisp:cons "UnprocessedNamedQueryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-prepared-statement-input common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor
                         %batch-get-prepared-statement-input-work-group
                         :initform
                         (common-lisp:error ":work-group is required"))
                        (prepared-statement-names :initarg
                         :prepared-statement-names :type
                         (common-lisp:or prepared-statement-name-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-prepared-statement-input-prepared-statement-names
                         :initform
                         (common-lisp:error
                          ":prepared-statement-names is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-prepared-statement-input
                    'make-batch-get-prepared-statement-input))
 (common-lisp:defun make-batch-get-prepared-statement-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group prepared-statement-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prepared-statement-names))
      (common-lisp:list
       (common-lisp:cons "PreparedStatementNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-prepared-statement-output common-lisp:nil
                       ((unprocessed-prepared-statement-names :initarg
                         :unprocessed-prepared-statement-names :type
                         (common-lisp:or
                          unprocessed-prepared-statement-name-list
                          common-lisp:null)
                         :accessor
                         %batch-get-prepared-statement-output-unprocessed-prepared-statement-names
                         :initform common-lisp:nil)
                        (prepared-statements :initarg :prepared-statements
                         :type
                         (common-lisp:or prepared-statement-details-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-prepared-statement-output-prepared-statements
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-prepared-statement-output
                    'make-batch-get-prepared-statement-output))
 (common-lisp:defun make-batch-get-prepared-statement-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-prepared-statement-names
                     prepared-statements)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prepared-statements))
      (common-lisp:list
       (common-lisp:cons "PreparedStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-prepared-statement-names))
      (common-lisp:list
       (common-lisp:cons "UnprocessedPreparedStatementNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-query-execution-input common-lisp:nil
                       ((query-execution-ids :initarg :query-execution-ids
                         :type
                         (common-lisp:or query-execution-id-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-query-execution-input-query-execution-ids
                         :initform
                         (common-lisp:error
                          ":query-execution-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-query-execution-input
                    'make-batch-get-query-execution-input))
 (common-lisp:defun make-batch-get-query-execution-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-execution-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-query-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-ids))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-query-execution-output common-lisp:nil
                       ((unprocessed-query-execution-ids :initarg
                         :unprocessed-query-execution-ids :type
                         (common-lisp:or unprocessed-query-execution-id-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-query-execution-output-unprocessed-query-execution-ids
                         :initform common-lisp:nil)
                        (query-executions :initarg :query-executions :type
                         (common-lisp:or query-execution-list common-lisp:null)
                         :accessor
                         %batch-get-query-execution-output-query-executions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-query-execution-output
                    'make-batch-get-query-execution-output))
 (common-lisp:defun make-batch-get-query-execution-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-query-execution-ids
                     query-executions)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-query-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-executions))
      (common-lisp:list
       (common-lisp:cons "QueryExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-query-execution-ids))
      (common-lisp:list
       (common-lisp:cons "UnprocessedQueryExecutionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-query-execution-output))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype bytes-scanned-cutoff-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass calculation-configuration common-lisp:nil
                       ((code-block :initarg :code-block :type
                         (common-lisp:or code-block common-lisp:null) :accessor
                         %calculation-configuration-code-block :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'calculation-configuration
                    'make-calculation-configuration))
 (common-lisp:defun make-calculation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-block)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-block))
      (common-lisp:list
       (common-lisp:cons "CodeBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculation-configuration))
   common-lisp:nil))
(common-lisp:deftype calculation-execution-id () 'common-lisp:string)
(common-lisp:deftype calculation-execution-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass calculation-result common-lisp:nil
                       ((result-type :initarg :result-type :type
                         (common-lisp:or calculation-result-type
                                         common-lisp:null)
                         :accessor %calculation-result-result-type :initform
                         common-lisp:nil)
                        (result-s3uri :initarg :result-s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %calculation-result-result-s3uri :initform
                         common-lisp:nil)
                        (std-error-s3uri :initarg :std-error-s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %calculation-result-std-error-s3uri :initform
                         common-lisp:nil)
                        (std-out-s3uri :initarg :std-out-s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %calculation-result-std-out-s3uri :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'calculation-result 'make-calculation-result))
 (common-lisp:defun make-calculation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result-type result-s3uri std-error-s3uri
                     std-out-s3uri)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'std-out-s3uri))
      (common-lisp:list
       (common-lisp:cons "StdOutS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'std-error-s3uri))
      (common-lisp:list
       (common-lisp:cons "StdErrorS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-s3uri))
      (common-lisp:list
       (common-lisp:cons "ResultS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-type))
      (common-lisp:list
       (common-lisp:cons "ResultType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculation-result))
   common-lisp:nil))
(common-lisp:deftype calculation-result-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass calculation-statistics common-lisp:nil
                       ((progress :initarg :progress :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %calculation-statistics-progress :initform
                         common-lisp:nil)
                        (dpu-execution-in-millis :initarg
                         :dpu-execution-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %calculation-statistics-dpu-execution-in-millis
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'calculation-statistics 'make-calculation-statistics))
 (common-lisp:defun make-calculation-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key progress dpu-execution-in-millis)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculation-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculation-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dpu-execution-in-millis))
      (common-lisp:list
       (common-lisp:cons "DpuExecutionInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculation-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass calculation-status common-lisp:nil
                       ((state-change-reason :initarg :state-change-reason
                         :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %calculation-status-state-change-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or calculation-execution-state
                                         common-lisp:null)
                         :accessor %calculation-status-state :initform
                         common-lisp:nil)
                        (completion-date-time :initarg :completion-date-time
                         :type (common-lisp:or date common-lisp:null) :accessor
                         %calculation-status-completion-date-time :initform
                         common-lisp:nil)
                        (submission-date-time :initarg :submission-date-time
                         :type (common-lisp:or date common-lisp:null) :accessor
                         %calculation-status-submission-date-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'calculation-status 'make-calculation-status))
 (common-lisp:defun make-calculation-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state-change-reason state
                     completion-date-time submission-date-time)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculation-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculation-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'submission-date-time))
      (common-lisp:list
       (common-lisp:cons "SubmissionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-date-time))
      (common-lisp:list
       (common-lisp:cons "CompletionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculation-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass calculation-summary common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or calculation-status common-lisp:null)
                         :accessor %calculation-summary-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %calculation-summary-description :initform
                         common-lisp:nil)
                        (calculation-execution-id :initarg
                         :calculation-execution-id :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         %calculation-summary-calculation-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'calculation-summary 'make-calculation-summary))
 (common-lisp:defun make-calculation-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status description
                     calculation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'calculation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype calculations-list ()
   '(trivial-types:proper-list calculation-summary))
 (common-lisp:defun |make-calculations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list calculation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype catalog-name-string () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype code-block () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column common-lisp:nil
                       ((comment :initarg :comment :type
                         (common-lisp:or comment-string common-lisp:null)
                         :accessor %column-comment :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or type-string common-lisp:null)
                         :accessor %column-type :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %column-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'column 'make-column))
 (common-lisp:defun make-column
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment type name)
   (common-lisp:apply #'common-lisp:make-instance 'column
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-info common-lisp:nil
                       ((case-sensitive :initarg :case-sensitive :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %column-info-case-sensitive :initform common-lisp:nil)
                        (nullable :initarg :nullable :type
                         (common-lisp:or column-nullable common-lisp:null)
                         :accessor %column-info-nullable :initform
                         common-lisp:nil)
                        (scale :initarg :scale :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %column-info-scale :initform common-lisp:nil)
                        (precision :initarg :precision :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %column-info-precision :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-info-type :initform
                         (common-lisp:error ":type is required"))
                        (label :initarg :label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-info-label :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-info-name :initform
                         (common-lisp:error ":name is required"))
                        (table-name :initarg :table-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-info-table-name :initform common-lisp:nil)
                        (schema-name :initarg :schema-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-info-schema-name :initform common-lisp:nil)
                        (catalog-name :initarg :catalog-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-info-catalog-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'column-info 'make-column-info))
 (common-lisp:defun make-column-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key case-sensitive nullable scale precision
                     type label name table-name schema-name catalog-name)
   (common-lisp:apply #'common-lisp:make-instance 'column-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "Precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "Scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nullable))
      (common-lisp:list
       (common-lisp:cons "Nullable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-sensitive))
      (common-lisp:list
       (common-lisp:cons "CaseSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-info-list ()
   '(trivial-types:proper-list column-info))
 (common-lisp:defun |make-column-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column))
 (common-lisp:defun |make-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-nullable () 'common-lisp:string)
(common-lisp:deftype comment-string () 'common-lisp:string)
(common-lisp:deftype coordinator-dpu-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-data-catalog-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-data-catalog-input-tags :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor %create-data-catalog-input-parameters
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %create-data-catalog-input-description
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or data-catalog-type common-lisp:null)
                         :accessor %create-data-catalog-input-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %create-data-catalog-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-catalog-input
                    'make-create-data-catalog-input))
 (common-lisp:defun make-create-data-catalog-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags parameters description type name)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-catalog-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-catalog-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-data-catalog-output
                    'make-create-data-catalog-output))
 (common-lisp:defun make-create-data-catalog-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-catalog-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-catalog-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-named-query-input common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %create-named-query-input-work-group
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %create-named-query-input-client-request-token
                         :initform common-lisp:nil)
                        (query-string :initarg :query-string :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %create-named-query-input-query-string
                         :initform
                         (common-lisp:error ":query-string is required"))
                        (database :initarg :database :type
                         (common-lisp:or database-string common-lisp:null)
                         :accessor %create-named-query-input-database :initform
                         (common-lisp:error ":database is required"))
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %create-named-query-input-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %create-named-query-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-named-query-input 'make-create-named-query-input))
 (common-lisp:defun make-create-named-query-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group client-request-token
                     query-string database description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-named-query-output common-lisp:nil
                       ((named-query-id :initarg :named-query-id :type
                         (common-lisp:or named-query-id common-lisp:null)
                         :accessor %create-named-query-output-named-query-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-named-query-output
                    'make-create-named-query-output))
 (common-lisp:defun make-create-named-query-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key named-query-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-notebook-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %create-notebook-input-client-request-token
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor %create-notebook-input-name :initform
                         (common-lisp:error ":name is required"))
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %create-notebook-input-work-group :initform
                         (common-lisp:error ":work-group is required"))))
 (common-lisp:export
  (common-lisp:list 'create-notebook-input 'make-create-notebook-input))
 (common-lisp:defun make-create-notebook-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token name work-group)
   (common-lisp:apply #'common-lisp:make-instance 'create-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-notebook-output common-lisp:nil
                       ((notebook-id :initarg :notebook-id :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor %create-notebook-output-notebook-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-notebook-output 'make-create-notebook-output))
 (common-lisp:defun make-create-notebook-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notebook-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-prepared-statement-input common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %create-prepared-statement-input-description
                         :initform common-lisp:nil)
                        (query-statement :initarg :query-statement :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         %create-prepared-statement-input-query-statement
                         :initform
                         (common-lisp:error ":query-statement is required"))
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %create-prepared-statement-input-work-group
                         :initform
                         (common-lisp:error ":work-group is required"))
                        (statement-name :initarg :statement-name :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         %create-prepared-statement-input-statement-name
                         :initform
                         (common-lisp:error ":statement-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-prepared-statement-input
                    'make-create-prepared-statement-input))
 (common-lisp:defun make-create-prepared-statement-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description query-statement work-group
                     statement-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "QueryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-prepared-statement-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-prepared-statement-output
                    'make-create-prepared-statement-output))
 (common-lisp:defun make-create-prepared-statement-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-presigned-notebook-url-request common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %create-presigned-notebook-url-request-session-id
                         :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-presigned-notebook-url-request
                    'make-create-presigned-notebook-url-request))
 (common-lisp:defun make-create-presigned-notebook-url-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-presigned-notebook-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-presigned-notebook-url-response common-lisp:nil
                       ((auth-token-expiration-time :initarg
                         :auth-token-expiration-time :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %create-presigned-notebook-url-response-auth-token-expiration-time
                         :initform
                         (common-lisp:error
                          ":auth-token-expiration-time is required"))
                        (auth-token :initarg :auth-token :type
                         (common-lisp:or auth-token common-lisp:null) :accessor
                         %create-presigned-notebook-url-response-auth-token
                         :initform
                         (common-lisp:error ":auth-token is required"))
                        (notebook-url :initarg :notebook-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-presigned-notebook-url-response-notebook-url
                         :initform
                         (common-lisp:error ":notebook-url is required"))))
 (common-lisp:export
  (common-lisp:list 'create-presigned-notebook-url-response
                    'make-create-presigned-notebook-url-response))
 (common-lisp:defun make-create-presigned-notebook-url-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auth-token-expiration-time auth-token
                     notebook-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-presigned-notebook-url-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-url))
      (common-lisp:list
       (common-lisp:cons "NotebookUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-token-expiration-time))
      (common-lisp:list
       (common-lisp:cons "AuthTokenExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-work-group-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-work-group-input-tags :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or work-group-description-string
                                         common-lisp:null)
                         :accessor %create-work-group-input-description
                         :initform common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or work-group-configuration
                                         common-lisp:null)
                         :accessor %create-work-group-input-configuration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %create-work-group-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-work-group-input 'make-create-work-group-input))
 (common-lisp:defun make-create-work-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description configuration name)
   (common-lisp:apply #'common-lisp:make-instance 'create-work-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-work-group-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-work-group-output 'make-create-work-group-output))
 (common-lisp:defun make-create-work-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-work-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-work-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-content-encryption-configuration
                       common-lisp:nil
                       ((kms-key :initarg :kms-key :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         %customer-content-encryption-configuration-kms-key
                         :initform
                         (common-lisp:error ":kms-key is required"))))
 (common-lisp:export
  (common-lisp:list 'customer-content-encryption-configuration
                    'make-customer-content-encryption-configuration))
 (common-lisp:defun make-customer-content-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key)
   (common-lisp:apply #'common-lisp:make-instance
                      'customer-content-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-content-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-content-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-content-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-catalog common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor %data-catalog-parameters :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or data-catalog-type common-lisp:null)
                         :accessor %data-catalog-type :initform
                         (common-lisp:error ":type is required"))
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %data-catalog-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %data-catalog-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'data-catalog 'make-data-catalog))
 (common-lisp:defun make-data-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters type description name)
   (common-lisp:apply #'common-lisp:make-instance 'data-catalog
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-catalog))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-catalog))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-catalog))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-catalog-summary common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or data-catalog-type common-lisp:null)
                         :accessor %data-catalog-summary-type :initform
                         common-lisp:nil)
                        (catalog-name :initarg :catalog-name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %data-catalog-summary-catalog-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-catalog-summary 'make-data-catalog-summary))
 (common-lisp:defun make-data-catalog-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type catalog-name)
   (common-lisp:apply #'common-lisp:make-instance 'data-catalog-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-catalog-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-catalog-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-catalog-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-catalog-summary-list ()
   '(trivial-types:proper-list data-catalog-summary))
 (common-lisp:defun |make-data-catalog-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-catalog-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-catalog-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass database common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor %database-parameters :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %database-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %database-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'database 'make-database))
 (common-lisp:defun make-database
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters description name)
   (common-lisp:apply #'common-lisp:make-instance 'database
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype database-list () '(trivial-types:proper-list database))
 (common-lisp:defun |make-database-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list database))
   aws-sdk/generator/shape::members))
(common-lisp:deftype database-string () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datum common-lisp:nil
                       ((var-char-value :initarg :var-char-value :type
                         (common-lisp:or |datumString| common-lisp:null)
                         :accessor %datum-var-char-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'datum 'make-datum))
 (common-lisp:defun make-datum
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key var-char-value)
   (common-lisp:apply #'common-lisp:make-instance 'datum
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'var-char-value))
      (common-lisp:list
       (common-lisp:cons "VarCharValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datum))
   common-lisp:nil))
(common-lisp:deftype default-executor-dpu-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass delete-data-catalog-input common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %delete-data-catalog-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-data-catalog-input
                    'make-delete-data-catalog-input))
 (common-lisp:defun make-delete-data-catalog-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-catalog-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-catalog-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-data-catalog-output
                    'make-delete-data-catalog-output))
 (common-lisp:defun make-delete-data-catalog-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-catalog-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-catalog-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-named-query-input common-lisp:nil
                       ((named-query-id :initarg :named-query-id :type
                         (common-lisp:or named-query-id common-lisp:null)
                         :accessor %delete-named-query-input-named-query-id
                         :initform
                         (common-lisp:error ":named-query-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-named-query-input 'make-delete-named-query-input))
 (common-lisp:defun make-delete-named-query-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key named-query-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-named-query-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-named-query-output
                    'make-delete-named-query-output))
 (common-lisp:defun make-delete-named-query-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-notebook-input common-lisp:nil
                       ((notebook-id :initarg :notebook-id :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor %delete-notebook-input-notebook-id :initform
                         (common-lisp:error ":notebook-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-notebook-input 'make-delete-notebook-input))
 (common-lisp:defun make-delete-notebook-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notebook-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-notebook-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-notebook-output 'make-delete-notebook-output))
 (common-lisp:defun make-delete-notebook-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-prepared-statement-input common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %delete-prepared-statement-input-work-group
                         :initform
                         (common-lisp:error ":work-group is required"))
                        (statement-name :initarg :statement-name :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         %delete-prepared-statement-input-statement-name
                         :initform
                         (common-lisp:error ":statement-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-prepared-statement-input
                    'make-delete-prepared-statement-input))
 (common-lisp:defun make-delete-prepared-statement-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group statement-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-prepared-statement-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-prepared-statement-output
                    'make-delete-prepared-statement-output))
 (common-lisp:defun make-delete-prepared-statement-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-work-group-input common-lisp:nil
                       ((recursive-delete-option :initarg
                         :recursive-delete-option :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %delete-work-group-input-recursive-delete-option
                         :initform common-lisp:nil)
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %delete-work-group-input-work-group
                         :initform
                         (common-lisp:error ":work-group is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-work-group-input 'make-delete-work-group-input))
 (common-lisp:defun make-delete-work-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recursive-delete-option work-group)
   (common-lisp:apply #'common-lisp:make-instance 'delete-work-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recursive-delete-option))
      (common-lisp:list
       (common-lisp:cons "RecursiveDeleteOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-work-group-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-work-group-output 'make-delete-work-group-output))
 (common-lisp:defun make-delete-work-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-work-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-work-group-output))
   common-lisp:nil))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((kms-key :initarg :kms-key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %encryption-configuration-kms-key :initform
                         common-lisp:nil)
                        (encryption-option :initarg :encryption-option :type
                         (common-lisp:or encryption-option common-lisp:null)
                         :accessor %encryption-configuration-encryption-option
                         :initform
                         (common-lisp:error
                          ":encryption-option is required"))))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defun make-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key encryption-option)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-option))
      (common-lisp:list
       (common-lisp:cons "EncryptionOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype encryption-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass engine-configuration common-lisp:nil
                       ((additional-configs :initarg :additional-configs :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor %engine-configuration-additional-configs
                         :initform common-lisp:nil)
                        (default-executor-dpu-size :initarg
                         :default-executor-dpu-size :type
                         (common-lisp:or default-executor-dpu-size
                                         common-lisp:null)
                         :accessor
                         %engine-configuration-default-executor-dpu-size
                         :initform common-lisp:nil)
                        (max-concurrent-dpus :initarg :max-concurrent-dpus
                         :type
                         (common-lisp:or max-concurrent-dpus common-lisp:null)
                         :accessor %engine-configuration-max-concurrent-dpus
                         :initform
                         (common-lisp:error
                          ":max-concurrent-dpus is required"))
                        (coordinator-dpu-size :initarg :coordinator-dpu-size
                         :type
                         (common-lisp:or coordinator-dpu-size common-lisp:null)
                         :accessor %engine-configuration-coordinator-dpu-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'engine-configuration 'make-engine-configuration))
 (common-lisp:defun make-engine-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-configs
                     default-executor-dpu-size max-concurrent-dpus
                     coordinator-dpu-size)
   (common-lisp:apply #'common-lisp:make-instance 'engine-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'coordinator-dpu-size))
      (common-lisp:list
       (common-lisp:cons "CoordinatorDpuSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-dpus))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentDpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-executor-dpu-size))
      (common-lisp:list
       (common-lisp:cons "DefaultExecutorDpuSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-configs))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass engine-version common-lisp:nil
                       ((effective-engine-version :initarg
                         :effective-engine-version :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %engine-version-effective-engine-version
                         :initform common-lisp:nil)
                        (selected-engine-version :initarg
                         :selected-engine-version :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %engine-version-selected-engine-version
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'engine-version 'make-engine-version))
 (common-lisp:defun make-engine-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key effective-engine-version
                     selected-engine-version)
   (common-lisp:apply #'common-lisp:make-instance 'engine-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-engine-version))
      (common-lisp:list
       (common-lisp:cons "SelectedEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'effective-engine-version))
      (common-lisp:list
       (common-lisp:cons "EffectiveEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype engine-versions-list ()
   '(trivial-types:proper-list engine-version))
 (common-lisp:defun |make-engine-versions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list engine-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-category () 'common-lisp:integer)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype error-type () 'common-lisp:integer)
(common-lisp:deftype execution-parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype execution-parameters ()
   '(trivial-types:proper-list execution-parameter))
 (common-lisp:defun |make-execution-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype executor-id () 'common-lisp:string)
(common-lisp:deftype executor-state () 'common-lisp:string)
(common-lisp:deftype executor-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass executors-summary common-lisp:nil
                       ((executor-size :initarg :executor-size :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %executors-summary-executor-size :initform
                         common-lisp:nil)
                        (executor-state :initarg :executor-state :type
                         (common-lisp:or executor-state common-lisp:null)
                         :accessor %executors-summary-executor-state :initform
                         common-lisp:nil)
                        (termination-date-time :initarg :termination-date-time
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %executors-summary-termination-date-time :initform
                         common-lisp:nil)
                        (start-date-time :initarg :start-date-time :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %executors-summary-start-date-time :initform
                         common-lisp:nil)
                        (executor-type :initarg :executor-type :type
                         (common-lisp:or executor-type common-lisp:null)
                         :accessor %executors-summary-executor-type :initform
                         common-lisp:nil)
                        (executor-id :initarg :executor-id :type
                         (common-lisp:or executor-id common-lisp:null)
                         :accessor %executors-summary-executor-id :initform
                         (common-lisp:error ":executor-id is required"))))
 (common-lisp:export
  (common-lisp:list 'executors-summary 'make-executors-summary))
 (common-lisp:defun make-executors-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key executor-size executor-state
                     termination-date-time start-date-time executor-type
                     executor-id)
   (common-lisp:apply #'common-lisp:make-instance 'executors-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input executors-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input executors-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor-id))
      (common-lisp:list
       (common-lisp:cons "ExecutorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor-type))
      (common-lisp:list
       (common-lisp:cons "ExecutorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-date-time))
      (common-lisp:list
       (common-lisp:cons "TerminationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor-state))
      (common-lisp:list
       (common-lisp:cons "ExecutorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor-size))
      (common-lisp:list
       (common-lisp:cons "ExecutorSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input executors-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype executors-summary-list ()
   '(trivial-types:proper-list executors-summary))
 (common-lisp:defun |make-executors-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list executors-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-notebook-input common-lisp:nil
                       ((notebook-id :initarg :notebook-id :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor %export-notebook-input-notebook-id :initform
                         (common-lisp:error ":notebook-id is required"))))
 (common-lisp:export
  (common-lisp:list 'export-notebook-input 'make-export-notebook-input))
 (common-lisp:defun make-export-notebook-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notebook-id)
   (common-lisp:apply #'common-lisp:make-instance 'export-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-notebook-output common-lisp:nil
                       ((payload :initarg :payload :type
                         (common-lisp:or payload common-lisp:null) :accessor
                         %export-notebook-output-payload :initform
                         common-lisp:nil)
                        (notebook-metadata :initarg :notebook-metadata :type
                         (common-lisp:or notebook-metadata common-lisp:null)
                         :accessor %export-notebook-output-notebook-metadata
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-notebook-output 'make-export-notebook-output))
 (common-lisp:defun make-export-notebook-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload notebook-metadata)
   (common-lisp:apply #'common-lisp:make-instance 'export-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-metadata))
      (common-lisp:list
       (common-lisp:cons "NotebookMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-notebook-output))
   common-lisp:nil))
(common-lisp:deftype expression-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-definition common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor %filter-definition-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filter-definition 'make-filter-definition))
 (common-lisp:defun make-filter-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'filter-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-code-request common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-calculation-execution-code-request-calculation-execution-id
                         :initform
                         (common-lisp:error
                          ":calculation-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-code-request
                    'make-get-calculation-execution-code-request))
 (common-lisp:defun make-get-calculation-execution-code-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-code-response common-lisp:nil
                       ((code-block :initarg :code-block :type
                         (common-lisp:or code-block common-lisp:null) :accessor
                         %get-calculation-execution-code-response-code-block
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-code-response
                    'make-get-calculation-execution-code-response))
 (common-lisp:defun make-get-calculation-execution-code-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-block)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-code-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-block))
      (common-lisp:list
       (common-lisp:cons "CodeBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-request common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-calculation-execution-request-calculation-execution-id
                         :initform
                         (common-lisp:error
                          ":calculation-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-request
                    'make-get-calculation-execution-request))
 (common-lisp:defun make-get-calculation-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-response common-lisp:nil
                       ((result :initarg :result :type
                         (common-lisp:or calculation-result common-lisp:null)
                         :accessor %get-calculation-execution-response-result
                         :initform common-lisp:nil)
                        (statistics :initarg :statistics :type
                         (common-lisp:or calculation-statistics
                                         common-lisp:null)
                         :accessor
                         %get-calculation-execution-response-statistics
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or calculation-status common-lisp:null)
                         :accessor %get-calculation-execution-response-status
                         :initform common-lisp:nil)
                        (working-directory :initarg :working-directory :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %get-calculation-execution-response-working-directory
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         %get-calculation-execution-response-description
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %get-calculation-execution-response-session-id
                         :initform common-lisp:nil)
                        (calculation-execution-id :initarg
                         :calculation-execution-id :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-calculation-execution-response-calculation-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-response
                    'make-get-calculation-execution-response))
 (common-lisp:defun make-get-calculation-execution-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result statistics status
                     working-directory description session-id
                     calculation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-status-request common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-calculation-execution-status-request-calculation-execution-id
                         :initform
                         (common-lisp:error
                          ":calculation-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-status-request
                    'make-get-calculation-execution-status-request))
 (common-lisp:defun make-get-calculation-execution-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calculation-execution-status-response
                       common-lisp:nil
                       ((statistics :initarg :statistics :type
                         (common-lisp:or calculation-statistics
                                         common-lisp:null)
                         :accessor
                         %get-calculation-execution-status-response-statistics
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or calculation-status common-lisp:null)
                         :accessor
                         %get-calculation-execution-status-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-calculation-execution-status-response
                    'make-get-calculation-execution-status-response))
 (common-lisp:defun make-get-calculation-execution-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key statistics status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-calculation-execution-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calculation-execution-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-catalog-input common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %get-data-catalog-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-data-catalog-input 'make-get-data-catalog-input))
 (common-lisp:defun make-get-data-catalog-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-catalog-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-catalog-output common-lisp:nil
                       ((data-catalog :initarg :data-catalog :type
                         (common-lisp:or data-catalog common-lisp:null)
                         :accessor %get-data-catalog-output-data-catalog
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-data-catalog-output 'make-get-data-catalog-output))
 (common-lisp:defun make-get-data-catalog-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-catalog)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-catalog-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-catalog))
      (common-lisp:list
       (common-lisp:cons "DataCatalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-database-input common-lisp:nil
                       ((database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-database-input-database-name :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-name :initarg :catalog-name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %get-database-input-catalog-name :initform
                         (common-lisp:error ":catalog-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-database-input 'make-get-database-input))
 (common-lisp:defun make-get-database-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database-name catalog-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-database-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-database-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-database-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-database-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-database-output common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %get-database-output-database :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-database-output 'make-get-database-output))
 (common-lisp:defun make-get-database-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database)
   (common-lisp:apply #'common-lisp:make-instance 'get-database-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-database-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-database-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-database-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-named-query-input common-lisp:nil
                       ((named-query-id :initarg :named-query-id :type
                         (common-lisp:or named-query-id common-lisp:null)
                         :accessor %get-named-query-input-named-query-id
                         :initform
                         (common-lisp:error ":named-query-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-named-query-input 'make-get-named-query-input))
 (common-lisp:defun make-get-named-query-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key named-query-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-named-query-output common-lisp:nil
                       ((named-query :initarg :named-query :type
                         (common-lisp:or named-query common-lisp:null)
                         :accessor %get-named-query-output-named-query
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-named-query-output 'make-get-named-query-output))
 (common-lisp:defun make-get-named-query-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key named-query)
   (common-lisp:apply #'common-lisp:make-instance 'get-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query))
      (common-lisp:list
       (common-lisp:cons "NamedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notebook-metadata-input common-lisp:nil
                       ((notebook-id :initarg :notebook-id :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor %get-notebook-metadata-input-notebook-id
                         :initform
                         (common-lisp:error ":notebook-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-notebook-metadata-input
                    'make-get-notebook-metadata-input))
 (common-lisp:defun make-get-notebook-metadata-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notebook-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-notebook-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notebook-metadata-output common-lisp:nil
                       ((notebook-metadata :initarg :notebook-metadata :type
                         (common-lisp:or notebook-metadata common-lisp:null)
                         :accessor
                         %get-notebook-metadata-output-notebook-metadata
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-notebook-metadata-output
                    'make-get-notebook-metadata-output))
 (common-lisp:defun make-get-notebook-metadata-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notebook-metadata)
   (common-lisp:apply #'common-lisp:make-instance 'get-notebook-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-metadata))
      (common-lisp:list
       (common-lisp:cons "NotebookMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notebook-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-prepared-statement-input common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %get-prepared-statement-input-work-group
                         :initform
                         (common-lisp:error ":work-group is required"))
                        (statement-name :initarg :statement-name :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor %get-prepared-statement-input-statement-name
                         :initform
                         (common-lisp:error ":statement-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-prepared-statement-input
                    'make-get-prepared-statement-input))
 (common-lisp:defun make-get-prepared-statement-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group statement-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-prepared-statement-output common-lisp:nil
                       ((prepared-statement :initarg :prepared-statement :type
                         (common-lisp:or prepared-statement common-lisp:null)
                         :accessor
                         %get-prepared-statement-output-prepared-statement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-prepared-statement-output
                    'make-get-prepared-statement-output))
 (common-lisp:defun make-get-prepared-statement-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prepared-statement)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prepared-statement))
      (common-lisp:list
       (common-lisp:cons "PreparedStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-execution-input common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         %get-query-execution-input-query-execution-id
                         :initform
                         (common-lisp:error
                          ":query-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-query-execution-input
                    'make-get-query-execution-input))
 (common-lisp:defun make-get-query-execution-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-execution-output common-lisp:nil
                       ((query-execution :initarg :query-execution :type
                         (common-lisp:or query-execution common-lisp:null)
                         :accessor %get-query-execution-output-query-execution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-query-execution-output
                    'make-get-query-execution-output))
 (common-lisp:defun make-get-query-execution-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-execution)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution))
      (common-lisp:list
       (common-lisp:cons "QueryExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-results-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-query-results common-lisp:null)
                         :accessor %get-query-results-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %get-query-results-input-next-token :initform
                         common-lisp:nil)
                        (query-execution-id :initarg :query-execution-id :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor %get-query-results-input-query-execution-id
                         :initform
                         (common-lisp:error
                          ":query-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-query-results-input 'make-get-query-results-input))
 (common-lisp:defun make-get-query-results-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     query-execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-results-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-results-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %get-query-results-output-next-token :initform
                         common-lisp:nil)
                        (result-set :initarg :result-set :type
                         (common-lisp:or result-set common-lisp:null) :accessor
                         %get-query-results-output-result-set :initform
                         common-lisp:nil)
                        (update-count :initarg :update-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %get-query-results-output-update-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-query-results-output 'make-get-query-results-output))
 (common-lisp:defun make-get-query-results-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token result-set update-count)
   (common-lisp:apply #'common-lisp:make-instance 'get-query-results-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-count))
      (common-lisp:list
       (common-lisp:cons "UpdateCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-set))
      (common-lisp:list
       (common-lisp:cons "ResultSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-runtime-statistics-input common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         %get-query-runtime-statistics-input-query-execution-id
                         :initform
                         (common-lisp:error
                          ":query-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-query-runtime-statistics-input
                    'make-get-query-runtime-statistics-input))
 (common-lisp:defun make-get-query-runtime-statistics-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-query-runtime-statistics-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-query-runtime-statistics-output common-lisp:nil
                       ((query-runtime-statistics :initarg
                         :query-runtime-statistics :type
                         (common-lisp:or query-runtime-statistics
                                         common-lisp:null)
                         :accessor
                         %get-query-runtime-statistics-output-query-runtime-statistics
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-query-runtime-statistics-output
                    'make-get-query-runtime-statistics-output))
 (common-lisp:defun make-get-query-runtime-statistics-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-runtime-statistics)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-query-runtime-statistics-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-runtime-statistics))
      (common-lisp:list
       (common-lisp:cons "QueryRuntimeStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-runtime-statistics-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-request common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %get-session-request-session-id :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-session-request 'make-get-session-request))
 (common-lisp:defun make-get-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-response common-lisp:nil
                       ((statistics :initarg :statistics :type
                         (common-lisp:or session-statistics common-lisp:null)
                         :accessor %get-session-response-statistics :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or session-status common-lisp:null)
                         :accessor %get-session-response-status :initform
                         common-lisp:nil)
                        (session-configuration :initarg :session-configuration
                         :type
                         (common-lisp:or session-configuration
                                         common-lisp:null)
                         :accessor %get-session-response-session-configuration
                         :initform common-lisp:nil)
                        (notebook-version :initarg :notebook-version :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-session-response-notebook-version
                         :initform common-lisp:nil)
                        (engine-configuration :initarg :engine-configuration
                         :type
                         (common-lisp:or engine-configuration common-lisp:null)
                         :accessor %get-session-response-engine-configuration
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-session-response-engine-version
                         :initform common-lisp:nil)
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %get-session-response-work-group :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %get-session-response-description :initform
                         common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %get-session-response-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-session-response 'make-get-session-response))
 (common-lisp:defun make-get-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key statistics status session-configuration
                     notebook-version engine-configuration engine-version
                     work-group description session-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-configuration))
      (common-lisp:list
       (common-lisp:cons "EngineConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-version))
      (common-lisp:list
       (common-lisp:cons "NotebookVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-configuration))
      (common-lisp:list
       (common-lisp:cons "SessionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-status-request common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %get-session-status-request-session-id :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-session-status-request
                    'make-get-session-status-request))
 (common-lisp:defun make-get-session-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-status-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or session-status common-lisp:null)
                         :accessor %get-session-status-response-status
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %get-session-status-response-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-session-status-response
                    'make-get-session-status-response))
 (common-lisp:defun make-get-session-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status session-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-metadata-input common-lisp:nil
                       ((table-name :initarg :table-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-table-metadata-input-table-name
                         :initform
                         (common-lisp:error ":table-name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-table-metadata-input-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-name :initarg :catalog-name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %get-table-metadata-input-catalog-name
                         :initform
                         (common-lisp:error ":catalog-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-table-metadata-input 'make-get-table-metadata-input))
 (common-lisp:defun make-get-table-metadata-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-name database-name catalog-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-metadata-output common-lisp:nil
                       ((table-metadata :initarg :table-metadata :type
                         (common-lisp:or table-metadata common-lisp:null)
                         :accessor %get-table-metadata-output-table-metadata
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-table-metadata-output
                    'make-get-table-metadata-output))
 (common-lisp:defun make-get-table-metadata-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-metadata)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-metadata))
      (common-lisp:list
       (common-lisp:cons "TableMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-work-group-input common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %get-work-group-input-work-group :initform
                         (common-lisp:error ":work-group is required"))))
 (common-lisp:export
  (common-lisp:list 'get-work-group-input 'make-get-work-group-input))
 (common-lisp:defun make-get-work-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group)
   (common-lisp:apply #'common-lisp:make-instance 'get-work-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-work-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-work-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-work-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-work-group-output common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group common-lisp:null) :accessor
                         %get-work-group-output-work-group :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-work-group-output 'make-get-work-group-output))
 (common-lisp:defun make-get-work-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group)
   (common-lisp:apply #'common-lisp:make-instance 'get-work-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-work-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-work-group-output))
   common-lisp:nil))
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-notebook-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %import-notebook-input-client-request-token
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or notebook-type common-lisp:null)
                         :accessor %import-notebook-input-type :initform
                         (common-lisp:error ":type is required"))
                        (payload :initarg :payload :type
                         (common-lisp:or payload common-lisp:null) :accessor
                         %import-notebook-input-payload :initform
                         (common-lisp:error ":payload is required"))
                        (name :initarg :name :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor %import-notebook-input-name :initform
                         (common-lisp:error ":name is required"))
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %import-notebook-input-work-group :initform
                         (common-lisp:error ":work-group is required"))))
 (common-lisp:export
  (common-lisp:list 'import-notebook-input 'make-import-notebook-input))
 (common-lisp:defun make-import-notebook-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token type payload name
                     work-group)
   (common-lisp:apply #'common-lisp:make-instance 'import-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-notebook-output common-lisp:nil
                       ((notebook-id :initarg :notebook-id :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor %import-notebook-output-notebook-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-notebook-output 'make-import-notebook-output))
 (common-lisp:defun make-import-notebook-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notebook-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-notebook-output))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (athena-error)
     ((athena-error-code :initarg :athena-error-code :initform common-lisp:nil
       :reader invalid-request-exception-athena-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-athena-error-code
                    'invalid-request-exception-message)))
(common-lisp:deftype key-string () 'common-lisp:string)
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-application-dpusizes-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-application-dpusizes-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-application-dpusizes-count
                                         common-lisp:null)
                         :accessor %list-application-dpusizes-input-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-application-dpusizes-input
                    'make-list-application-dpusizes-input))
 (common-lisp:defun make-list-application-dpusizes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-dpusizes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-dpusizes-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-application-dpusizes-output-next-token :initform
                         common-lisp:nil)
                        (application-dpusizes :initarg :application-dpusizes
                         :type
                         (common-lisp:or application-dpusizes-list
                                         common-lisp:null)
                         :accessor
                         %list-application-dpusizes-output-application-dpusizes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-application-dpusizes-output
                    'make-list-application-dpusizes-output))
 (common-lisp:defun make-list-application-dpusizes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token application-dpusizes)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-dpusizes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-dpusizes))
      (common-lisp:list
       (common-lisp:cons "ApplicationDPUSizes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dpusizes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculation-executions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor
                         %list-calculation-executions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-calculations-count
                                         common-lisp:null)
                         :accessor
                         %list-calculation-executions-request-max-results
                         :initform common-lisp:nil)
                        (state-filter :initarg :state-filter :type
                         (common-lisp:or calculation-execution-state
                                         common-lisp:null)
                         :accessor
                         %list-calculation-executions-request-state-filter
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %list-calculation-executions-request-session-id
                         :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-calculation-executions-request
                    'make-list-calculation-executions-request))
 (common-lisp:defun make-list-calculation-executions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results state-filter
                     session-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculation-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-filter))
      (common-lisp:list
       (common-lisp:cons "StateFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-calculation-executions-response common-lisp:nil
                       ((calculations :initarg :calculations :type
                         (common-lisp:or calculations-list common-lisp:null)
                         :accessor
                         %list-calculation-executions-response-calculations
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor
                         %list-calculation-executions-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-calculation-executions-response
                    'make-list-calculation-executions-response))
 (common-lisp:defun make-list-calculation-executions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key calculations next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-calculation-executions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculations))
      (common-lisp:list
       (common-lisp:cons "Calculations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-calculation-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-catalogs-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-data-catalogs-count
                                         common-lisp:null)
                         :accessor %list-data-catalogs-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-data-catalogs-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-catalogs-input 'make-list-data-catalogs-input))
 (common-lisp:defun make-list-data-catalogs-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-catalogs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-catalogs-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-data-catalogs-output-next-token :initform
                         common-lisp:nil)
                        (data-catalogs-summary :initarg :data-catalogs-summary
                         :type
                         (common-lisp:or data-catalog-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-data-catalogs-output-data-catalogs-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-catalogs-output
                    'make-list-data-catalogs-output))
 (common-lisp:defun make-list-data-catalogs-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token data-catalogs-summary)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-catalogs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-catalogs-summary))
      (common-lisp:list
       (common-lisp:cons "DataCatalogsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-catalogs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-databases-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-databases-count common-lisp:null)
                         :accessor %list-databases-input-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-databases-input-next-token :initform
                         common-lisp:nil)
                        (catalog-name :initarg :catalog-name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %list-databases-input-catalog-name :initform
                         (common-lisp:error ":catalog-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-databases-input 'make-list-databases-input))
 (common-lisp:defun make-list-databases-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token catalog-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-databases-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-databases-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-databases-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-databases-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-databases-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-databases-output-next-token :initform
                         common-lisp:nil)
                        (database-list :initarg :database-list :type
                         (common-lisp:or database-list common-lisp:null)
                         :accessor %list-databases-output-database-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-databases-output 'make-list-databases-output))
 (common-lisp:defun make-list-databases-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token database-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-databases-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-list))
      (common-lisp:list
       (common-lisp:cons "DatabaseList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-engine-versions-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-engine-versions-count
                                         common-lisp:null)
                         :accessor %list-engine-versions-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-engine-versions-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-engine-versions-input
                    'make-list-engine-versions-input))
 (common-lisp:defun make-list-engine-versions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-engine-versions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-engine-versions-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-engine-versions-output-next-token :initform
                         common-lisp:nil)
                        (engine-versions :initarg :engine-versions :type
                         (common-lisp:or engine-versions-list common-lisp:null)
                         :accessor %list-engine-versions-output-engine-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-engine-versions-output
                    'make-list-engine-versions-output))
 (common-lisp:defun make-list-engine-versions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token engine-versions)
   (common-lisp:apply #'common-lisp:make-instance 'list-engine-versions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-versions))
      (common-lisp:list
       (common-lisp:cons "EngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engine-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-executors-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor %list-executors-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-list-executors-count
                                         common-lisp:null)
                         :accessor %list-executors-request-max-results
                         :initform common-lisp:nil)
                        (executor-state-filter :initarg :executor-state-filter
                         :type (common-lisp:or executor-state common-lisp:null)
                         :accessor
                         %list-executors-request-executor-state-filter
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %list-executors-request-session-id :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-executors-request 'make-list-executors-request))
 (common-lisp:defun make-list-executors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     executor-state-filter session-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-executors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'executor-state-filter))
      (common-lisp:list
       (common-lisp:cons "ExecutorStateFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-executors-response common-lisp:nil
                       ((executors-summary :initarg :executors-summary :type
                         (common-lisp:or executors-summary-list
                                         common-lisp:null)
                         :accessor %list-executors-response-executors-summary
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor %list-executors-response-next-token
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %list-executors-response-session-id :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-executors-response 'make-list-executors-response))
 (common-lisp:defun make-list-executors-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key executors-summary next-token session-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-executors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executors-summary))
      (common-lisp:list
       (common-lisp:cons "ExecutorsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-named-queries-input common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %list-named-queries-input-work-group
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-named-queries-count
                                         common-lisp:null)
                         :accessor %list-named-queries-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-named-queries-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-named-queries-input 'make-list-named-queries-input))
 (common-lisp:defun make-list-named-queries-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-named-queries-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-named-queries-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-named-queries-output-next-token :initform
                         common-lisp:nil)
                        (named-query-ids :initarg :named-query-ids :type
                         (common-lisp:or named-query-id-list common-lisp:null)
                         :accessor %list-named-queries-output-named-query-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-named-queries-output
                    'make-list-named-queries-output))
 (common-lisp:defun make-list-named-queries-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token named-query-ids)
   (common-lisp:apply #'common-lisp:make-instance 'list-named-queries-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-ids))
      (common-lisp:list
       (common-lisp:cons "NamedQueryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-named-queries-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-metadata-input common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %list-notebook-metadata-input-work-group
                         :initform
                         (common-lisp:error ":work-group is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-notebooks-count common-lisp:null)
                         :accessor %list-notebook-metadata-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-notebook-metadata-input-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-definition common-lisp:null)
                         :accessor %list-notebook-metadata-input-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-notebook-metadata-input
                    'make-list-notebook-metadata-input))
 (common-lisp:defun make-list-notebook-metadata-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group max-results next-token
                     filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-notebook-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-metadata-output common-lisp:nil
                       ((notebook-metadata-list :initarg
                         :notebook-metadata-list :type
                         (common-lisp:or notebook-metadata-array
                                         common-lisp:null)
                         :accessor
                         %list-notebook-metadata-output-notebook-metadata-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-notebook-metadata-output-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-notebook-metadata-output
                    'make-list-notebook-metadata-output))
 (common-lisp:defun make-list-notebook-metadata-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notebook-metadata-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notebook-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-metadata-list))
      (common-lisp:list
       (common-lisp:cons "NotebookMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-sessions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-notebook-sessions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-sessions-count common-lisp:null)
                         :accessor %list-notebook-sessions-request-max-results
                         :initform common-lisp:nil)
                        (notebook-id :initarg :notebook-id :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor %list-notebook-sessions-request-notebook-id
                         :initform
                         (common-lisp:error ":notebook-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-notebook-sessions-request
                    'make-list-notebook-sessions-request))
 (common-lisp:defun make-list-notebook-sessions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results notebook-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notebook-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-sessions-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-notebook-sessions-response-next-token :initform
                         common-lisp:nil)
                        (notebook-sessions-list :initarg
                         :notebook-sessions-list :type
                         (common-lisp:or notebook-sessions-list
                                         common-lisp:null)
                         :accessor
                         %list-notebook-sessions-response-notebook-sessions-list
                         :initform
                         (common-lisp:error
                          ":notebook-sessions-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-notebook-sessions-response
                    'make-list-notebook-sessions-response))
 (common-lisp:defun make-list-notebook-sessions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token notebook-sessions-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notebook-sessions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-sessions-list))
      (common-lisp:list
       (common-lisp:cons "NotebookSessionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-sessions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-prepared-statements-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-prepared-statements-count
                                         common-lisp:null)
                         :accessor %list-prepared-statements-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-prepared-statements-input-next-token :initform
                         common-lisp:nil)
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %list-prepared-statements-input-work-group
                         :initform
                         (common-lisp:error ":work-group is required"))))
 (common-lisp:export
  (common-lisp:list 'list-prepared-statements-input
                    'make-list-prepared-statements-input))
 (common-lisp:defun make-list-prepared-statements-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token work-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-prepared-statements-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-prepared-statements-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-prepared-statements-output-next-token :initform
                         common-lisp:nil)
                        (prepared-statements :initarg :prepared-statements
                         :type
                         (common-lisp:or prepared-statements-list
                                         common-lisp:null)
                         :accessor
                         %list-prepared-statements-output-prepared-statements
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-prepared-statements-output
                    'make-list-prepared-statements-output))
 (common-lisp:defun make-list-prepared-statements-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token prepared-statements)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-prepared-statements-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prepared-statements))
      (common-lisp:list
       (common-lisp:cons "PreparedStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-prepared-statements-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-query-executions-input common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %list-query-executions-input-work-group
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-query-executions-count
                                         common-lisp:null)
                         :accessor %list-query-executions-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-query-executions-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-query-executions-input
                    'make-list-query-executions-input))
 (common-lisp:defun make-list-query-executions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-query-executions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-query-executions-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-query-executions-output-next-token :initform
                         common-lisp:nil)
                        (query-execution-ids :initarg :query-execution-ids
                         :type
                         (common-lisp:or query-execution-id-list
                                         common-lisp:null)
                         :accessor
                         %list-query-executions-output-query-execution-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-query-executions-output
                    'make-list-query-executions-output))
 (common-lisp:defun make-list-query-executions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token query-execution-ids)
   (common-lisp:apply #'common-lisp:make-instance 'list-query-executions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-ids))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-query-executions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sessions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor %list-sessions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-sessions-count common-lisp:null)
                         :accessor %list-sessions-request-max-results :initform
                         common-lisp:nil)
                        (state-filter :initarg :state-filter :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor %list-sessions-request-state-filter
                         :initform common-lisp:nil)
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %list-sessions-request-work-group :initform
                         (common-lisp:error ":work-group is required"))))
 (common-lisp:export
  (common-lisp:list 'list-sessions-request 'make-list-sessions-request))
 (common-lisp:defun make-list-sessions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results state-filter
                     work-group)
   (common-lisp:apply #'common-lisp:make-instance 'list-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-filter))
      (common-lisp:list
       (common-lisp:cons "StateFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sessions-response common-lisp:nil
                       ((sessions :initarg :sessions :type
                         (common-lisp:or sessions-list common-lisp:null)
                         :accessor %list-sessions-response-sessions :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or session-manager-token
                                         common-lisp:null)
                         :accessor %list-sessions-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-sessions-response 'make-list-sessions-response))
 (common-lisp:defun make-list-sessions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sessions next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-sessions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "Sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-table-metadata-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-table-metadata-count
                                         common-lisp:null)
                         :accessor %list-table-metadata-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-table-metadata-input-next-token :initform
                         common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or expression-string common-lisp:null)
                         :accessor %list-table-metadata-input-expression
                         :initform common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %list-table-metadata-input-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))
                        (catalog-name :initarg :catalog-name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %list-table-metadata-input-catalog-name
                         :initform
                         (common-lisp:error ":catalog-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-table-metadata-input
                    'make-list-table-metadata-input))
 (common-lisp:defun make-list-table-metadata-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token expression
                     database-name catalog-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-table-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-name))
      (common-lisp:list
       (common-lisp:cons "CatalogName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-table-metadata-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-table-metadata-output-next-token :initform
                         common-lisp:nil)
                        (table-metadata-list :initarg :table-metadata-list
                         :type
                         (common-lisp:or table-metadata-list common-lisp:null)
                         :accessor
                         %list-table-metadata-output-table-metadata-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-table-metadata-output
                    'make-list-table-metadata-output))
 (common-lisp:defun make-list-table-metadata-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token table-metadata-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-table-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-metadata-list))
      (common-lisp:list
       (common-lisp:cons "TableMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-tags-count common-lisp:null)
                         :accessor %list-tags-for-resource-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-tags-for-resource-input-next-token :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-input-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defun make-list-tags-for-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-tags-for-resource-output-next-token :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-output-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defun make-list-tags-for-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-work-groups-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-work-groups-count
                                         common-lisp:null)
                         :accessor %list-work-groups-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-work-groups-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-work-groups-input 'make-list-work-groups-input))
 (common-lisp:defun make-list-work-groups-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-work-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-work-groups-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-work-groups-output-next-token :initform
                         common-lisp:nil)
                        (work-groups :initarg :work-groups :type
                         (common-lisp:or work-groups-list common-lisp:null)
                         :accessor %list-work-groups-output-work-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-work-groups-output 'make-list-work-groups-output))
 (common-lisp:defun make-list-work-groups-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token work-groups)
   (common-lisp:apply #'common-lisp:make-instance 'list-work-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-groups))
      (common-lisp:list
       (common-lisp:cons "WorkGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-work-groups-output))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-application-dpusizes-count () 'common-lisp:integer)
(common-lisp:deftype max-calculations-count () 'common-lisp:integer)
(common-lisp:deftype max-concurrent-dpus () 'common-lisp:integer)
(common-lisp:deftype max-data-catalogs-count () 'common-lisp:integer)
(common-lisp:deftype max-databases-count () 'common-lisp:integer)
(common-lisp:deftype max-engine-versions-count () 'common-lisp:integer)
(common-lisp:deftype max-list-executors-count () 'common-lisp:integer)
(common-lisp:deftype max-named-queries-count () 'common-lisp:integer)
(common-lisp:deftype max-notebooks-count () 'common-lisp:integer)
(common-lisp:deftype max-prepared-statements-count () 'common-lisp:integer)
(common-lisp:deftype max-query-executions-count () 'common-lisp:integer)
(common-lisp:deftype max-query-results () 'common-lisp:integer)
(common-lisp:deftype max-sessions-count () 'common-lisp:integer)
(common-lisp:deftype max-table-metadata-count () 'common-lisp:integer)
(common-lisp:deftype max-tags-count () 'common-lisp:integer)
(common-lisp:deftype max-work-groups-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition metadata-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       metadata-exception-message)))
 (common-lisp:export
  (common-lisp:list 'metadata-exception 'metadata-exception-message)))
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass named-query common-lisp:nil
                       ((work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %named-query-work-group :initform
                         common-lisp:nil)
                        (named-query-id :initarg :named-query-id :type
                         (common-lisp:or named-query-id common-lisp:null)
                         :accessor %named-query-named-query-id :initform
                         common-lisp:nil)
                        (query-string :initarg :query-string :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %named-query-query-string :initform
                         (common-lisp:error ":query-string is required"))
                        (database :initarg :database :type
                         (common-lisp:or database-string common-lisp:null)
                         :accessor %named-query-database :initform
                         (common-lisp:error ":database is required"))
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %named-query-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %named-query-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'named-query 'make-named-query))
 (common-lisp:defun make-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key work-group named-query-id query-string
                     database description name)
   (common-lisp:apply #'common-lisp:make-instance 'named-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input named-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input named-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input named-query))
   common-lisp:nil))
(common-lisp:deftype named-query-description-string () 'common-lisp:string)
(common-lisp:deftype named-query-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype named-query-id-list ()
   '(trivial-types:proper-list named-query-id))
 (common-lisp:defun |make-named-query-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list named-query-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype named-query-list ()
   '(trivial-types:proper-list named-query))
 (common-lisp:defun |make-named-query-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list named-query))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notebook-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notebook-metadata common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %notebook-metadata-last-modified-time :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or notebook-type common-lisp:null)
                         :accessor %notebook-metadata-type :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %notebook-metadata-creation-time :initform
                         common-lisp:nil)
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %notebook-metadata-work-group :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor %notebook-metadata-name :initform
                         common-lisp:nil)
                        (notebook-id :initarg :notebook-id :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor %notebook-metadata-notebook-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notebook-metadata 'make-notebook-metadata))
 (common-lisp:defun make-notebook-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time type creation-time
                     work-group name notebook-id)
   (common-lisp:apply #'common-lisp:make-instance 'notebook-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notebook-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notebook-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notebook-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notebook-metadata-array ()
   '(trivial-types:proper-list notebook-metadata))
 (common-lisp:defun |make-notebook-metadata-array|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notebook-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notebook-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notebook-session-summary common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %notebook-session-summary-creation-time :initform
                         common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %notebook-session-summary-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notebook-session-summary 'make-notebook-session-summary))
 (common-lisp:defun make-notebook-session-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time session-id)
   (common-lisp:apply #'common-lisp:make-instance 'notebook-session-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notebook-session-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notebook-session-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notebook-session-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notebook-sessions-list ()
   '(trivial-types:proper-list notebook-session-summary))
 (common-lisp:defun |make-notebook-sessions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notebook-session-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notebook-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-parameters-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype parameters-map-value () 'common-lisp:string)
(common-lisp:deftype payload () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass prepared-statement common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %prepared-statement-last-modified-time :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %prepared-statement-description :initform
                         common-lisp:nil)
                        (work-group-name :initarg :work-group-name :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %prepared-statement-work-group-name
                         :initform common-lisp:nil)
                        (query-statement :initarg :query-statement :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %prepared-statement-query-statement
                         :initform common-lisp:nil)
                        (statement-name :initarg :statement-name :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor %prepared-statement-statement-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'prepared-statement 'make-prepared-statement))
 (common-lisp:defun make-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time description
                     work-group-name query-statement statement-name)
   (common-lisp:apply #'common-lisp:make-instance 'prepared-statement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prepared-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prepared-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "QueryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group-name))
      (common-lisp:list
       (common-lisp:cons "WorkGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prepared-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prepared-statement-details-list ()
   '(trivial-types:proper-list prepared-statement))
 (common-lisp:defun |make-prepared-statement-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list prepared-statement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype prepared-statement-name-list ()
   '(trivial-types:proper-list statement-name))
 (common-lisp:defun |make-prepared-statement-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass prepared-statement-summary common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %prepared-statement-summary-last-modified-time
                         :initform common-lisp:nil)
                        (statement-name :initarg :statement-name :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor %prepared-statement-summary-statement-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'prepared-statement-summary
                    'make-prepared-statement-summary))
 (common-lisp:defun make-prepared-statement-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time statement-name)
   (common-lisp:apply #'common-lisp:make-instance 'prepared-statement-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prepared-statement-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prepared-statement-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prepared-statement-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prepared-statements-list ()
   '(trivial-types:proper-list prepared-statement-summary))
 (common-lisp:defun |make-prepared-statements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            prepared-statement-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass query-execution common-lisp:nil
                       ((substatement-type :initarg :substatement-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %query-execution-substatement-type :initform
                         common-lisp:nil)
                        (execution-parameters :initarg :execution-parameters
                         :type
                         (common-lisp:or execution-parameters common-lisp:null)
                         :accessor %query-execution-execution-parameters
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor %query-execution-engine-version :initform
                         common-lisp:nil)
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %query-execution-work-group :initform
                         common-lisp:nil)
                        (statistics :initarg :statistics :type
                         (common-lisp:or query-execution-statistics
                                         common-lisp:null)
                         :accessor %query-execution-statistics :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or query-execution-status
                                         common-lisp:null)
                         :accessor %query-execution-status :initform
                         common-lisp:nil)
                        (query-execution-context :initarg
                         :query-execution-context :type
                         (common-lisp:or query-execution-context
                                         common-lisp:null)
                         :accessor %query-execution-query-execution-context
                         :initform common-lisp:nil)
                        (result-reuse-configuration :initarg
                         :result-reuse-configuration :type
                         (common-lisp:or result-reuse-configuration
                                         common-lisp:null)
                         :accessor %query-execution-result-reuse-configuration
                         :initform common-lisp:nil)
                        (result-configuration :initarg :result-configuration
                         :type
                         (common-lisp:or result-configuration common-lisp:null)
                         :accessor %query-execution-result-configuration
                         :initform common-lisp:nil)
                        (statement-type :initarg :statement-type :type
                         (common-lisp:or statement-type common-lisp:null)
                         :accessor %query-execution-statement-type :initform
                         common-lisp:nil)
                        (query :initarg :query :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %query-execution-query :initform
                         common-lisp:nil)
                        (query-execution-id :initarg :query-execution-id :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor %query-execution-query-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'query-execution 'make-query-execution))
 (common-lisp:defun make-query-execution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key substatement-type execution-parameters
                     engine-version work-group statistics status
                     query-execution-context result-reuse-configuration
                     result-configuration statement-type query
                     query-execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'query-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-type))
      (common-lisp:list
       (common-lisp:cons "StatementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-reuse-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultReuseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-execution-context))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-parameters))
      (common-lisp:list
       (common-lisp:cons "ExecutionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substatement-type))
      (common-lisp:list
       (common-lisp:cons "SubstatementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-execution-context common-lisp:nil
                       ((catalog :initarg :catalog :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %query-execution-context-catalog :initform
                         common-lisp:nil)
                        (database :initarg :database :type
                         (common-lisp:or database-string common-lisp:null)
                         :accessor %query-execution-context-database :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-execution-context 'make-query-execution-context))
 (common-lisp:defun make-query-execution-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key catalog database)
   (common-lisp:apply #'common-lisp:make-instance 'query-execution-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-context))
   common-lisp:nil))
(common-lisp:deftype query-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-execution-id-list ()
   '(trivial-types:proper-list query-execution-id))
 (common-lisp:defun |make-query-execution-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-execution-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype query-execution-list ()
   '(trivial-types:proper-list query-execution))
 (common-lisp:defun |make-query-execution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-execution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-execution-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-execution-statistics common-lisp:nil
                       ((result-reuse-information :initarg
                         :result-reuse-information :type
                         (common-lisp:or result-reuse-information
                                         common-lisp:null)
                         :accessor
                         %query-execution-statistics-result-reuse-information
                         :initform common-lisp:nil)
                        (service-processing-time-in-millis :initarg
                         :service-processing-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-execution-statistics-service-processing-time-in-millis
                         :initform common-lisp:nil)
                        (query-planning-time-in-millis :initarg
                         :query-planning-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-execution-statistics-query-planning-time-in-millis
                         :initform common-lisp:nil)
                        (query-queue-time-in-millis :initarg
                         :query-queue-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-execution-statistics-query-queue-time-in-millis
                         :initform common-lisp:nil)
                        (total-execution-time-in-millis :initarg
                         :total-execution-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-execution-statistics-total-execution-time-in-millis
                         :initform common-lisp:nil)
                        (data-manifest-location :initarg
                         :data-manifest-location :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %query-execution-statistics-data-manifest-location
                         :initform common-lisp:nil)
                        (data-scanned-in-bytes :initarg :data-scanned-in-bytes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %query-execution-statistics-data-scanned-in-bytes
                         :initform common-lisp:nil)
                        (engine-execution-time-in-millis :initarg
                         :engine-execution-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-execution-statistics-engine-execution-time-in-millis
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-execution-statistics
                    'make-query-execution-statistics))
 (common-lisp:defun make-query-execution-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result-reuse-information
                     service-processing-time-in-millis
                     query-planning-time-in-millis query-queue-time-in-millis
                     total-execution-time-in-millis data-manifest-location
                     data-scanned-in-bytes engine-execution-time-in-millis)
   (common-lisp:apply #'common-lisp:make-instance 'query-execution-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "EngineExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-scanned-in-bytes))
      (common-lisp:list
       (common-lisp:cons "DataScannedInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-manifest-location))
      (common-lisp:list
       (common-lisp:cons "DataManifestLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "TotalExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-queue-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "QueryQueueTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-planning-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "QueryPlanningTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-processing-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "ServiceProcessingTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-reuse-information))
      (common-lisp:list
       (common-lisp:cons "ResultReuseInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-execution-status common-lisp:nil
                       ((athena-error :initarg :athena-error :type
                         (common-lisp:or athena-error common-lisp:null)
                         :accessor %query-execution-status-athena-error
                         :initform common-lisp:nil)
                        (completion-date-time :initarg :completion-date-time
                         :type (common-lisp:or date common-lisp:null) :accessor
                         %query-execution-status-completion-date-time :initform
                         common-lisp:nil)
                        (submission-date-time :initarg :submission-date-time
                         :type (common-lisp:or date common-lisp:null) :accessor
                         %query-execution-status-submission-date-time :initform
                         common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %query-execution-status-state-change-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or query-execution-state
                                         common-lisp:null)
                         :accessor %query-execution-status-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-execution-status 'make-query-execution-status))
 (common-lisp:defun make-query-execution-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key athena-error completion-date-time
                     submission-date-time state-change-reason state)
   (common-lisp:apply #'common-lisp:make-instance 'query-execution-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'submission-date-time))
      (common-lisp:list
       (common-lisp:cons "SubmissionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-date-time))
      (common-lisp:list
       (common-lisp:cons "CompletionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'athena-error))
      (common-lisp:list
       (common-lisp:cons "AthenaError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-execution-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-runtime-statistics common-lisp:nil
                       ((output-stage :initarg :output-stage :type
                         (common-lisp:or query-stage common-lisp:null)
                         :accessor %query-runtime-statistics-output-stage
                         :initform common-lisp:nil)
                        (rows :initarg :rows :type
                         (common-lisp:or query-runtime-statistics-rows
                                         common-lisp:null)
                         :accessor %query-runtime-statistics-rows :initform
                         common-lisp:nil)
                        (timeline :initarg :timeline :type
                         (common-lisp:or query-runtime-statistics-timeline
                                         common-lisp:null)
                         :accessor %query-runtime-statistics-timeline :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-runtime-statistics 'make-query-runtime-statistics))
 (common-lisp:defun make-query-runtime-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-stage rows timeline)
   (common-lisp:apply #'common-lisp:make-instance 'query-runtime-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeline))
      (common-lisp:list
       (common-lisp:cons "Timeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-stage))
      (common-lisp:list
       (common-lisp:cons "OutputStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-runtime-statistics-rows common-lisp:nil
                       ((output-rows :initarg :output-rows :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-runtime-statistics-rows-output-rows :initform
                         common-lisp:nil)
                        (output-bytes :initarg :output-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-runtime-statistics-rows-output-bytes :initform
                         common-lisp:nil)
                        (input-bytes :initarg :input-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-runtime-statistics-rows-input-bytes :initform
                         common-lisp:nil)
                        (input-rows :initarg :input-rows :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-runtime-statistics-rows-input-rows :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-runtime-statistics-rows
                    'make-query-runtime-statistics-rows))
 (common-lisp:defun make-query-runtime-statistics-rows
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-rows output-bytes input-bytes
                     input-rows)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-runtime-statistics-rows
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-rows))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-rows))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-rows))
      (common-lisp:list
       (common-lisp:cons "InputRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-bytes))
      (common-lisp:list
       (common-lisp:cons "InputBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bytes))
      (common-lisp:list
       (common-lisp:cons "OutputBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-rows))
      (common-lisp:list
       (common-lisp:cons "OutputRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-rows))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-runtime-statistics-timeline common-lisp:nil
                       ((total-execution-time-in-millis :initarg
                         :total-execution-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-runtime-statistics-timeline-total-execution-time-in-millis
                         :initform common-lisp:nil)
                        (service-processing-time-in-millis :initarg
                         :service-processing-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-runtime-statistics-timeline-service-processing-time-in-millis
                         :initform common-lisp:nil)
                        (engine-execution-time-in-millis :initarg
                         :engine-execution-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-runtime-statistics-timeline-engine-execution-time-in-millis
                         :initform common-lisp:nil)
                        (query-planning-time-in-millis :initarg
                         :query-planning-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-runtime-statistics-timeline-query-planning-time-in-millis
                         :initform common-lisp:nil)
                        (query-queue-time-in-millis :initarg
                         :query-queue-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-runtime-statistics-timeline-query-queue-time-in-millis
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-runtime-statistics-timeline
                    'make-query-runtime-statistics-timeline))
 (common-lisp:defun make-query-runtime-statistics-timeline
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-execution-time-in-millis
                     service-processing-time-in-millis
                     engine-execution-time-in-millis
                     query-planning-time-in-millis query-queue-time-in-millis)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-runtime-statistics-timeline
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-timeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-timeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-queue-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "QueryQueueTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-planning-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "QueryPlanningTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "EngineExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-processing-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "ServiceProcessingTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "TotalExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-runtime-statistics-timeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-stage common-lisp:nil
                       ((sub-stages :initarg :sub-stages :type
                         (common-lisp:or query-stages common-lisp:null)
                         :accessor %query-stage-sub-stages :initform
                         common-lisp:nil)
                        (query-stage-plan :initarg :query-stage-plan :type
                         (common-lisp:or query-stage-plan-node
                                         common-lisp:null)
                         :accessor %query-stage-query-stage-plan :initform
                         common-lisp:nil)
                        (execution-time :initarg :execution-time :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-stage-execution-time :initform common-lisp:nil)
                        (input-rows :initarg :input-rows :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-stage-input-rows :initform common-lisp:nil)
                        (input-bytes :initarg :input-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-stage-input-bytes :initform common-lisp:nil)
                        (output-rows :initarg :output-rows :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-stage-output-rows :initform common-lisp:nil)
                        (output-bytes :initarg :output-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-stage-output-bytes :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %query-stage-state :initform common-lisp:nil)
                        (stage-id :initarg :stage-id :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-stage-stage-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'query-stage 'make-query-stage))
 (common-lisp:defun make-query-stage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sub-stages query-stage-plan
                     execution-time input-rows input-bytes output-rows
                     output-bytes state stage-id)
   (common-lisp:apply #'common-lisp:make-instance 'query-stage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-stage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-stage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-id))
      (common-lisp:list
       (common-lisp:cons "StageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bytes))
      (common-lisp:list
       (common-lisp:cons "OutputBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-rows))
      (common-lisp:list
       (common-lisp:cons "OutputRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-bytes))
      (common-lisp:list
       (common-lisp:cons "InputBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-rows))
      (common-lisp:list
       (common-lisp:cons "InputRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-stage-plan))
      (common-lisp:list
       (common-lisp:cons "QueryStagePlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-stages))
      (common-lisp:list
       (common-lisp:cons "SubStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-stage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-stage-plan-node common-lisp:nil
                       ((remote-sources :initarg :remote-sources :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %query-stage-plan-node-remote-sources
                         :initform common-lisp:nil)
                        (children :initarg :children :type
                         (common-lisp:or query-stage-plan-nodes
                                         common-lisp:null)
                         :accessor %query-stage-plan-node-children :initform
                         common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %query-stage-plan-node-identifier :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %query-stage-plan-node-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-stage-plan-node 'make-query-stage-plan-node))
 (common-lisp:defun make-query-stage-plan-node
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remote-sources children identifier name)
   (common-lisp:apply #'common-lisp:make-instance 'query-stage-plan-node
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-stage-plan-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-stage-plan-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "Children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-sources))
      (common-lisp:list
       (common-lisp:cons "RemoteSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-stage-plan-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-stage-plan-nodes ()
   '(trivial-types:proper-list query-stage-plan-node))
 (common-lisp:defun |make-query-stage-plan-nodes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-stage-plan-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype query-stages () '(trivial-types:proper-list query-stage))
 (common-lisp:defun |make-query-stages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-stage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass result-configuration common-lisp:nil
                       ((acl-configuration :initarg :acl-configuration :type
                         (common-lisp:or acl-configuration common-lisp:null)
                         :accessor %result-configuration-acl-configuration
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %result-configuration-expected-bucket-owner
                         :initform common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %result-configuration-encryption-configuration
                         :initform common-lisp:nil)
                        (output-location :initarg :output-location :type
                         (common-lisp:or result-output-location
                                         common-lisp:null)
                         :accessor %result-configuration-output-location
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'result-configuration 'make-result-configuration))
 (common-lisp:defun make-result-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key acl-configuration expected-bucket-owner
                     encryption-configuration output-location)
   (common-lisp:apply #'common-lisp:make-instance 'result-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "ExpectedBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl-configuration))
      (common-lisp:list
       (common-lisp:cons "AclConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-configuration-updates common-lisp:nil
                       ((remove-acl-configuration :initarg
                         :remove-acl-configuration :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %result-configuration-updates-remove-acl-configuration
                         :initform common-lisp:nil)
                        (acl-configuration :initarg :acl-configuration :type
                         (common-lisp:or acl-configuration common-lisp:null)
                         :accessor
                         %result-configuration-updates-acl-configuration
                         :initform common-lisp:nil)
                        (remove-expected-bucket-owner :initarg
                         :remove-expected-bucket-owner :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %result-configuration-updates-remove-expected-bucket-owner
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %result-configuration-updates-expected-bucket-owner
                         :initform common-lisp:nil)
                        (remove-encryption-configuration :initarg
                         :remove-encryption-configuration :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %result-configuration-updates-remove-encryption-configuration
                         :initform common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %result-configuration-updates-encryption-configuration
                         :initform common-lisp:nil)
                        (remove-output-location :initarg
                         :remove-output-location :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %result-configuration-updates-remove-output-location
                         :initform common-lisp:nil)
                        (output-location :initarg :output-location :type
                         (common-lisp:or result-output-location
                                         common-lisp:null)
                         :accessor
                         %result-configuration-updates-output-location
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'result-configuration-updates
                    'make-result-configuration-updates))
 (common-lisp:defun make-result-configuration-updates
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remove-acl-configuration
                     acl-configuration remove-expected-bucket-owner
                     expected-bucket-owner remove-encryption-configuration
                     encryption-configuration remove-output-location
                     output-location)
   (common-lisp:apply #'common-lisp:make-instance 'result-configuration-updates
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          result-configuration-updates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          result-configuration-updates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-output-location))
      (common-lisp:list
       (common-lisp:cons "RemoveOutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "RemoveEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "ExpectedBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-expected-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "RemoveExpectedBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl-configuration))
      (common-lisp:list
       (common-lisp:cons "AclConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-acl-configuration))
      (common-lisp:list
       (common-lisp:cons "RemoveAclConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          result-configuration-updates))
   common-lisp:nil))
(common-lisp:deftype result-output-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass result-reuse-by-age-configuration common-lisp:nil
                       ((max-age-in-minutes :initarg :max-age-in-minutes :type
                         (common-lisp:or age common-lisp:null) :accessor
                         %result-reuse-by-age-configuration-max-age-in-minutes
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %result-reuse-by-age-configuration-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'result-reuse-by-age-configuration
                    'make-result-reuse-by-age-configuration))
 (common-lisp:defun make-result-reuse-by-age-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-age-in-minutes enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'result-reuse-by-age-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-by-age-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-by-age-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age-in-minutes))
      (common-lisp:list
       (common-lisp:cons "MaxAgeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-by-age-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-reuse-configuration common-lisp:nil
                       ((result-reuse-by-age-configuration :initarg
                         :result-reuse-by-age-configuration :type
                         (common-lisp:or result-reuse-by-age-configuration
                                         common-lisp:null)
                         :accessor
                         %result-reuse-configuration-result-reuse-by-age-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'result-reuse-configuration
                    'make-result-reuse-configuration))
 (common-lisp:defun make-result-reuse-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result-reuse-by-age-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'result-reuse-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-reuse-by-age-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultReuseByAgeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-reuse-information common-lisp:nil
                       ((reused-previous-result :initarg
                         :reused-previous-result :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %result-reuse-information-reused-previous-result
                         :initform
                         (common-lisp:error
                          ":reused-previous-result is required"))))
 (common-lisp:export
  (common-lisp:list 'result-reuse-information 'make-result-reuse-information))
 (common-lisp:defun make-result-reuse-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reused-previous-result)
   (common-lisp:apply #'common-lisp:make-instance 'result-reuse-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reused-previous-result))
      (common-lisp:list
       (common-lisp:cons "ReusedPreviousResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          result-reuse-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-set common-lisp:nil
                       ((result-set-metadata :initarg :result-set-metadata
                         :type
                         (common-lisp:or result-set-metadata common-lisp:null)
                         :accessor %result-set-result-set-metadata :initform
                         common-lisp:nil)
                        (rows :initarg :rows :type
                         (common-lisp:or row-list common-lisp:null) :accessor
                         %result-set-rows :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'result-set 'make-result-set))
 (common-lisp:defun make-result-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result-set-metadata rows)
   (common-lisp:apply #'common-lisp:make-instance 'result-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-set-metadata))
      (common-lisp:list
       (common-lisp:cons "ResultSetMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-set-metadata common-lisp:nil
                       ((column-info :initarg :column-info :type
                         (common-lisp:or column-info-list common-lisp:null)
                         :accessor %result-set-metadata-column-info :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'result-set-metadata 'make-result-set-metadata))
 (common-lisp:defun make-result-set-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-info)
   (common-lisp:apply #'common-lisp:make-instance 'result-set-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-set-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-set-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-info))
      (common-lisp:list
       (common-lisp:cons "ColumnInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-set-metadata))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass row common-lisp:nil
                       ((data :initarg :data :type
                         (common-lisp:or |datumList| common-lisp:null)
                         :accessor %row-data :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'row 'make-row))
 (common-lisp:defun make-row
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data)
   (common-lisp:apply #'common-lisp:make-instance 'row
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row-list () '(trivial-types:proper-list row))
 (common-lisp:defun |make-row-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list row))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3acl-option () 'common-lisp:string)
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition session-already-exists-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       session-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'session-already-exists-exception
                    'session-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass session-configuration common-lisp:nil
                       ((encryption-configuration :initarg
                         :encryption-configuration :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %session-configuration-encryption-configuration
                         :initform common-lisp:nil)
                        (idle-timeout-seconds :initarg :idle-timeout-seconds
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %session-configuration-idle-timeout-seconds :initform
                         common-lisp:nil)
                        (working-directory :initarg :working-directory :type
                         (common-lisp:or result-output-location
                                         common-lisp:null)
                         :accessor %session-configuration-working-directory
                         :initform common-lisp:nil)
                        (execution-role :initarg :execution-role :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %session-configuration-execution-role :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'session-configuration 'make-session-configuration))
 (common-lisp:defun make-session-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-configuration
                     idle-timeout-seconds working-directory execution-role)
   (common-lisp:apply #'common-lisp:make-instance 'session-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "IdleTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-configuration))
   common-lisp:nil))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:deftype session-idle-timeout-in-minutes () 'common-lisp:integer)
(common-lisp:deftype session-manager-token () 'common-lisp:string)
(common-lisp:deftype session-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass session-statistics common-lisp:nil
                       ((dpu-execution-in-millis :initarg
                         :dpu-execution-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %session-statistics-dpu-execution-in-millis :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'session-statistics 'make-session-statistics))
 (common-lisp:defun make-session-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dpu-execution-in-millis)
   (common-lisp:apply #'common-lisp:make-instance 'session-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dpu-execution-in-millis))
      (common-lisp:list
       (common-lisp:cons "DpuExecutionInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-status common-lisp:nil
                       ((state-change-reason :initarg :state-change-reason
                         :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %session-status-state-change-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor %session-status-state :initform
                         common-lisp:nil)
                        (idle-since-date-time :initarg :idle-since-date-time
                         :type (common-lisp:or date common-lisp:null) :accessor
                         %session-status-idle-since-date-time :initform
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %session-status-end-date-time :initform
                         common-lisp:nil)
                        (last-modified-date-time :initarg
                         :last-modified-date-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %session-status-last-modified-date-time :initform
                         common-lisp:nil)
                        (start-date-time :initarg :start-date-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %session-status-start-date-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'session-status 'make-session-status))
 (common-lisp:defun make-session-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state-change-reason state
                     idle-since-date-time end-date-time last-modified-date-time
                     start-date-time)
   (common-lisp:apply #'common-lisp:make-instance 'session-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-date-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-since-date-time))
      (common-lisp:list
       (common-lisp:cons "IdleSinceDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-summary common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or session-status common-lisp:null)
                         :accessor %session-summary-status :initform
                         common-lisp:nil)
                        (notebook-version :initarg :notebook-version :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %session-summary-notebook-version :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor %session-summary-engine-version :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %session-summary-description :initform
                         common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %session-summary-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'session-summary 'make-session-summary))
 (common-lisp:defun make-session-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status notebook-version engine-version
                     description session-id)
   (common-lisp:apply #'common-lisp:make-instance 'session-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-version))
      (common-lisp:list
       (common-lisp:cons "NotebookVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sessions-list ()
   '(trivial-types:proper-list session-summary))
 (common-lisp:defun |make-sessions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-calculation-execution-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %start-calculation-execution-request-client-request-token
                         :initform common-lisp:nil)
                        (code-block :initarg :code-block :type
                         (common-lisp:or code-block common-lisp:null) :accessor
                         %start-calculation-execution-request-code-block
                         :initform common-lisp:nil)
                        (calculation-configuration :initarg
                         :calculation-configuration :type
                         (common-lisp:or calculation-configuration
                                         common-lisp:null)
                         :accessor
                         %start-calculation-execution-request-calculation-configuration
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         %start-calculation-execution-request-description
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %start-calculation-execution-request-session-id
                         :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-calculation-execution-request
                    'make-start-calculation-execution-request))
 (common-lisp:defun make-start-calculation-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token code-block
                     calculation-configuration description session-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-calculation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-configuration))
      (common-lisp:list
       (common-lisp:cons "CalculationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-block))
      (common-lisp:list
       (common-lisp:cons "CodeBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-calculation-execution-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or calculation-execution-state
                                         common-lisp:null)
                         :accessor %start-calculation-execution-response-state
                         :initform common-lisp:nil)
                        (calculation-execution-id :initarg
                         :calculation-execution-id :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         %start-calculation-execution-response-calculation-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-calculation-execution-response
                    'make-start-calculation-execution-response))
 (common-lisp:defun make-start-calculation-execution-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state calculation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-calculation-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-calculation-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-query-execution-input common-lisp:nil
                       ((result-reuse-configuration :initarg
                         :result-reuse-configuration :type
                         (common-lisp:or result-reuse-configuration
                                         common-lisp:null)
                         :accessor
                         %start-query-execution-input-result-reuse-configuration
                         :initform common-lisp:nil)
                        (execution-parameters :initarg :execution-parameters
                         :type
                         (common-lisp:or execution-parameters common-lisp:null)
                         :accessor
                         %start-query-execution-input-execution-parameters
                         :initform common-lisp:nil)
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %start-query-execution-input-work-group
                         :initform common-lisp:nil)
                        (result-configuration :initarg :result-configuration
                         :type
                         (common-lisp:or result-configuration common-lisp:null)
                         :accessor
                         %start-query-execution-input-result-configuration
                         :initform common-lisp:nil)
                        (query-execution-context :initarg
                         :query-execution-context :type
                         (common-lisp:or query-execution-context
                                         common-lisp:null)
                         :accessor
                         %start-query-execution-input-query-execution-context
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %start-query-execution-input-client-request-token
                         :initform common-lisp:nil)
                        (query-string :initarg :query-string :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %start-query-execution-input-query-string
                         :initform
                         (common-lisp:error ":query-string is required"))))
 (common-lisp:export
  (common-lisp:list 'start-query-execution-input
                    'make-start-query-execution-input))
 (common-lisp:defun make-start-query-execution-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result-reuse-configuration
                     execution-parameters work-group result-configuration
                     query-execution-context client-request-token query-string)
   (common-lisp:apply #'common-lisp:make-instance 'start-query-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-execution-context))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-parameters))
      (common-lisp:list
       (common-lisp:cons "ExecutionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-reuse-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultReuseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-query-execution-output common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         %start-query-execution-output-query-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-query-execution-output
                    'make-start-query-execution-output))
 (common-lisp:defun make-start-query-execution-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-query-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-query-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-session-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %start-session-request-client-request-token
                         :initform common-lisp:nil)
                        (session-idle-timeout-in-minutes :initarg
                         :session-idle-timeout-in-minutes :type
                         (common-lisp:or session-idle-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         %start-session-request-session-idle-timeout-in-minutes
                         :initform common-lisp:nil)
                        (notebook-version :initarg :notebook-version :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %start-session-request-notebook-version
                         :initform common-lisp:nil)
                        (engine-configuration :initarg :engine-configuration
                         :type
                         (common-lisp:or engine-configuration common-lisp:null)
                         :accessor %start-session-request-engine-configuration
                         :initform
                         (common-lisp:error
                          ":engine-configuration is required"))
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %start-session-request-work-group :initform
                         (common-lisp:error ":work-group is required"))
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %start-session-request-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-session-request 'make-start-session-request))
 (common-lisp:defun make-start-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token
                     session-idle-timeout-in-minutes notebook-version
                     engine-configuration work-group description)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-configuration))
      (common-lisp:list
       (common-lisp:cons "EngineConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-version))
      (common-lisp:list
       (common-lisp:cons "NotebookVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-idle-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionIdleTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-session-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor %start-session-response-state :initform
                         common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %start-session-response-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-session-response 'make-start-session-response))
 (common-lisp:defun make-start-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state session-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-session-response))
   common-lisp:nil))
(common-lisp:deftype statement-name () 'common-lisp:string)
(common-lisp:deftype statement-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-calculation-execution-request common-lisp:nil
                       ((calculation-execution-id :initarg
                         :calculation-execution-id :type
                         (common-lisp:or calculation-execution-id
                                         common-lisp:null)
                         :accessor
                         %stop-calculation-execution-request-calculation-execution-id
                         :initform
                         (common-lisp:error
                          ":calculation-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-calculation-execution-request
                    'make-stop-calculation-execution-request))
 (common-lisp:defun make-stop-calculation-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-calculation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculation-execution-id))
      (common-lisp:list
       (common-lisp:cons "CalculationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-calculation-execution-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or calculation-execution-state
                                         common-lisp:null)
                         :accessor %stop-calculation-execution-response-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-calculation-execution-response
                    'make-stop-calculation-execution-response))
 (common-lisp:defun make-stop-calculation-execution-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-calculation-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-calculation-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-query-execution-input common-lisp:nil
                       ((query-execution-id :initarg :query-execution-id :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         %stop-query-execution-input-query-execution-id
                         :initform
                         (common-lisp:error
                          ":query-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-query-execution-input
                    'make-stop-query-execution-input))
 (common-lisp:defun make-stop-query-execution-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-query-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-query-execution-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-query-execution-output
                    'make-stop-query-execution-output))
 (common-lisp:defun make-stop-query-execution-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-query-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-query-execution-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype supported-dpusize-list ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun |make-supported-dpusize-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-metadata common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor %table-metadata-parameters :initform
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor %table-metadata-partition-keys :initform
                         common-lisp:nil)
                        (columns :initarg :columns :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor %table-metadata-columns :initform
                         common-lisp:nil)
                        (table-type :initarg :table-type :type
                         (common-lisp:or table-type-string common-lisp:null)
                         :accessor %table-metadata-table-type :initform
                         common-lisp:nil)
                        (last-access-time :initarg :last-access-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %table-metadata-last-access-time :initform
                         common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %table-metadata-create-time :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %table-metadata-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'table-metadata 'make-table-metadata))
 (common-lisp:defun make-table-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters partition-keys columns
                     table-type last-access-time create-time name)
   (common-lisp:apply #'common-lisp:make-instance 'table-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-type))
      (common-lisp:list
       (common-lisp:cons "TableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-metadata-list ()
   '(trivial-types:proper-list table-metadata))
 (common-lisp:defun |make-table-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defun make-tag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defun make-tag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass terminate-session-request common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %terminate-session-request-session-id :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'terminate-session-request
                    'make-terminate-session-request))
 (common-lisp:defun make-terminate-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass terminate-session-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor %terminate-session-response-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'terminate-session-response
                    'make-terminate-session-response))
 (common-lisp:defun make-terminate-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-response))
   common-lisp:nil))
(common-lisp:deftype throttle-reason () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (athena-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       too-many-requests-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message
                    'too-many-requests-exception-reason)))
(common-lisp:deftype type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unprocessed-named-query-id common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %unprocessed-named-query-id-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %unprocessed-named-query-id-error-code :initform
                         common-lisp:nil)
                        (named-query-id :initarg :named-query-id :type
                         (common-lisp:or named-query-id common-lisp:null)
                         :accessor %unprocessed-named-query-id-named-query-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-named-query-id
                    'make-unprocessed-named-query-id))
 (common-lisp:defun make-unprocessed-named-query-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code named-query-id)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-named-query-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-named-query-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-named-query-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-named-query-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-named-query-id-list ()
   '(trivial-types:proper-list unprocessed-named-query-id))
 (common-lisp:defun |make-unprocessed-named-query-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-named-query-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unprocessed-prepared-statement-name common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %unprocessed-prepared-statement-name-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %unprocessed-prepared-statement-name-error-code
                         :initform common-lisp:nil)
                        (statement-name :initarg :statement-name :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         %unprocessed-prepared-statement-name-statement-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-prepared-statement-name
                    'make-unprocessed-prepared-statement-name))
 (common-lisp:defun make-unprocessed-prepared-statement-name
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code statement-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'unprocessed-prepared-statement-name
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-prepared-statement-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-prepared-statement-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-prepared-statement-name))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-prepared-statement-name-list ()
   '(trivial-types:proper-list unprocessed-prepared-statement-name))
 (common-lisp:defun |make-unprocessed-prepared-statement-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-prepared-statement-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unprocessed-query-execution-id common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %unprocessed-query-execution-id-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %unprocessed-query-execution-id-error-code :initform
                         common-lisp:nil)
                        (query-execution-id :initarg :query-execution-id :type
                         (common-lisp:or query-execution-id common-lisp:null)
                         :accessor
                         %unprocessed-query-execution-id-query-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-query-execution-id
                    'make-unprocessed-query-execution-id))
 (common-lisp:defun make-unprocessed-query-execution-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code
                     query-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'unprocessed-query-execution-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-query-execution-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-query-execution-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-execution-id))
      (common-lisp:list
       (common-lisp:cons "QueryExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-query-execution-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-query-execution-id-list ()
   '(trivial-types:proper-list unprocessed-query-execution-id))
 (common-lisp:defun |make-unprocessed-query-execution-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-query-execution-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-input-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defun make-untag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defun make-untag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-catalog-input common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor %update-data-catalog-input-parameters
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %update-data-catalog-input-description
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or data-catalog-type common-lisp:null)
                         :accessor %update-data-catalog-input-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or catalog-name-string common-lisp:null)
                         :accessor %update-data-catalog-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-catalog-input
                    'make-update-data-catalog-input))
 (common-lisp:defun make-update-data-catalog-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters description type name)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-catalog-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-catalog-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-data-catalog-output
                    'make-update-data-catalog-output))
 (common-lisp:defun make-update-data-catalog-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-catalog-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-catalog-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-named-query-input common-lisp:nil
                       ((query-string :initarg :query-string :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %update-named-query-input-query-string
                         :initform
                         (common-lisp:error ":query-string is required"))
                        (description :initarg :description :type
                         (common-lisp:or named-query-description-string
                                         common-lisp:null)
                         :accessor %update-named-query-input-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %update-named-query-input-name :initform
                         (common-lisp:error ":name is required"))
                        (named-query-id :initarg :named-query-id :type
                         (common-lisp:or named-query-id common-lisp:null)
                         :accessor %update-named-query-input-named-query-id
                         :initform
                         (common-lisp:error ":named-query-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-named-query-input 'make-update-named-query-input))
 (common-lisp:defun make-update-named-query-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-string description name
                     named-query-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-named-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-query-id))
      (common-lisp:list
       (common-lisp:cons "NamedQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-named-query-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-named-query-output
                    'make-update-named-query-output))
 (common-lisp:defun make-update-named-query-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-named-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-named-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notebook-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %update-notebook-input-client-request-token
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %update-notebook-input-session-id :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or notebook-type common-lisp:null)
                         :accessor %update-notebook-input-type :initform
                         (common-lisp:error ":type is required"))
                        (payload :initarg :payload :type
                         (common-lisp:or payload common-lisp:null) :accessor
                         %update-notebook-input-payload :initform
                         (common-lisp:error ":payload is required"))
                        (notebook-id :initarg :notebook-id :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor %update-notebook-input-notebook-id :initform
                         (common-lisp:error ":notebook-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-notebook-input 'make-update-notebook-input))
 (common-lisp:defun make-update-notebook-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token session-id type
                     payload notebook-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-notebook-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notebook-metadata-input common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or notebook-name common-lisp:null)
                         :accessor %update-notebook-metadata-input-name
                         :initform (common-lisp:error ":name is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %update-notebook-metadata-input-client-request-token
                         :initform common-lisp:nil)
                        (notebook-id :initarg :notebook-id :type
                         (common-lisp:or notebook-id common-lisp:null)
                         :accessor %update-notebook-metadata-input-notebook-id
                         :initform
                         (common-lisp:error ":notebook-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-notebook-metadata-input
                    'make-update-notebook-metadata-input))
 (common-lisp:defun make-update-notebook-metadata-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name client-request-token notebook-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-notebook-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-id))
      (common-lisp:list
       (common-lisp:cons "NotebookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notebook-metadata-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-notebook-metadata-output
                    'make-update-notebook-metadata-output))
 (common-lisp:defun make-update-notebook-metadata-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-notebook-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-notebook-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-notebook-output 'make-update-notebook-output))
 (common-lisp:defun make-update-notebook-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-notebook-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-prepared-statement-input common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor %update-prepared-statement-input-description
                         :initform common-lisp:nil)
                        (query-statement :initarg :query-statement :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         %update-prepared-statement-input-query-statement
                         :initform
                         (common-lisp:error ":query-statement is required"))
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %update-prepared-statement-input-work-group
                         :initform
                         (common-lisp:error ":work-group is required"))
                        (statement-name :initarg :statement-name :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         %update-prepared-statement-input-statement-name
                         :initform
                         (common-lisp:error ":statement-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-prepared-statement-input
                    'make-update-prepared-statement-input))
 (common-lisp:defun make-update-prepared-statement-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description query-statement work-group
                     statement-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-prepared-statement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "QueryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-prepared-statement-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-prepared-statement-output
                    'make-update-prepared-statement-output))
 (common-lisp:defun make-update-prepared-statement-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-prepared-statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-prepared-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-work-group-input common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or work-group-state common-lisp:null)
                         :accessor %update-work-group-input-state :initform
                         common-lisp:nil)
                        (configuration-updates :initarg :configuration-updates
                         :type
                         (common-lisp:or work-group-configuration-updates
                                         common-lisp:null)
                         :accessor
                         %update-work-group-input-configuration-updates
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or work-group-description-string
                                         common-lisp:null)
                         :accessor %update-work-group-input-description
                         :initform common-lisp:nil)
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %update-work-group-input-work-group
                         :initform
                         (common-lisp:error ":work-group is required"))))
 (common-lisp:export
  (common-lisp:list 'update-work-group-input 'make-update-work-group-input))
 (common-lisp:defun make-update-work-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state configuration-updates description
                     work-group)
   (common-lisp:apply #'common-lisp:make-instance 'update-work-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-updates))
      (common-lisp:list
       (common-lisp:cons "ConfigurationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-work-group-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-work-group-output 'make-update-work-group-output))
 (common-lisp:defun make-update-work-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-work-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-work-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass work-group common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %work-group-creation-time :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or work-group-description-string
                                         common-lisp:null)
                         :accessor %work-group-description :initform
                         common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or work-group-configuration
                                         common-lisp:null)
                         :accessor %work-group-configuration :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or work-group-state common-lisp:null)
                         :accessor %work-group-state :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %work-group-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'work-group 'make-work-group))
 (common-lisp:defun make-work-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time description configuration
                     state name)
   (common-lisp:apply #'common-lisp:make-instance 'work-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input work-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input work-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input work-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass work-group-configuration common-lisp:nil
                       ((enable-minimum-encryption-configuration :initarg
                         :enable-minimum-encryption-configuration :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-enable-minimum-encryption-configuration
                         :initform common-lisp:nil)
                        (customer-content-encryption-configuration :initarg
                         :customer-content-encryption-configuration :type
                         (common-lisp:or
                          customer-content-encryption-configuration
                          common-lisp:null)
                         :accessor
                         %work-group-configuration-customer-content-encryption-configuration
                         :initform common-lisp:nil)
                        (execution-role :initarg :execution-role :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %work-group-configuration-execution-role :initform
                         common-lisp:nil)
                        (additional-configuration :initarg
                         :additional-configuration :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %work-group-configuration-additional-configuration
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor %work-group-configuration-engine-version
                         :initform common-lisp:nil)
                        (requester-pays-enabled :initarg
                         :requester-pays-enabled :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-requester-pays-enabled
                         :initform common-lisp:nil)
                        (bytes-scanned-cutoff-per-query :initarg
                         :bytes-scanned-cutoff-per-query :type
                         (common-lisp:or bytes-scanned-cutoff-value
                                         common-lisp:null)
                         :accessor
                         %work-group-configuration-bytes-scanned-cutoff-per-query
                         :initform common-lisp:nil)
                        (publish-cloud-watch-metrics-enabled :initarg
                         :publish-cloud-watch-metrics-enabled :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-publish-cloud-watch-metrics-enabled
                         :initform common-lisp:nil)
                        (enforce-work-group-configuration :initarg
                         :enforce-work-group-configuration :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-enforce-work-group-configuration
                         :initform common-lisp:nil)
                        (result-configuration :initarg :result-configuration
                         :type
                         (common-lisp:or result-configuration common-lisp:null)
                         :accessor
                         %work-group-configuration-result-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'work-group-configuration 'make-work-group-configuration))
 (common-lisp:defun make-work-group-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-minimum-encryption-configuration
                     customer-content-encryption-configuration execution-role
                     additional-configuration engine-version
                     requester-pays-enabled bytes-scanned-cutoff-per-query
                     publish-cloud-watch-metrics-enabled
                     enforce-work-group-configuration result-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'work-group-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "ResultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-work-group-configuration))
      (common-lisp:list
       (common-lisp:cons "EnforceWorkGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "PublishCloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bytes-scanned-cutoff-per-query))
      (common-lisp:list
       (common-lisp:cons "BytesScannedCutoffPerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-pays-enabled))
      (common-lisp:list
       (common-lisp:cons "RequesterPaysEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-content-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomerContentEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-minimum-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EnableMinimumEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass work-group-configuration-updates common-lisp:nil
                       ((enable-minimum-encryption-configuration :initarg
                         :enable-minimum-encryption-configuration :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-enable-minimum-encryption-configuration
                         :initform common-lisp:nil)
                        (customer-content-encryption-configuration :initarg
                         :customer-content-encryption-configuration :type
                         (common-lisp:or
                          customer-content-encryption-configuration
                          common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-customer-content-encryption-configuration
                         :initform common-lisp:nil)
                        (execution-role :initarg :execution-role :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %work-group-configuration-updates-execution-role
                         :initform common-lisp:nil)
                        (additional-configuration :initarg
                         :additional-configuration :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-additional-configuration
                         :initform common-lisp:nil)
                        (remove-customer-content-encryption-configuration
                         :initarg
                         :remove-customer-content-encryption-configuration
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-remove-customer-content-encryption-configuration
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-engine-version
                         :initform common-lisp:nil)
                        (requester-pays-enabled :initarg
                         :requester-pays-enabled :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-requester-pays-enabled
                         :initform common-lisp:nil)
                        (remove-bytes-scanned-cutoff-per-query :initarg
                         :remove-bytes-scanned-cutoff-per-query :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-remove-bytes-scanned-cutoff-per-query
                         :initform common-lisp:nil)
                        (bytes-scanned-cutoff-per-query :initarg
                         :bytes-scanned-cutoff-per-query :type
                         (common-lisp:or bytes-scanned-cutoff-value
                                         common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-bytes-scanned-cutoff-per-query
                         :initform common-lisp:nil)
                        (publish-cloud-watch-metrics-enabled :initarg
                         :publish-cloud-watch-metrics-enabled :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-publish-cloud-watch-metrics-enabled
                         :initform common-lisp:nil)
                        (result-configuration-updates :initarg
                         :result-configuration-updates :type
                         (common-lisp:or result-configuration-updates
                                         common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-result-configuration-updates
                         :initform common-lisp:nil)
                        (enforce-work-group-configuration :initarg
                         :enforce-work-group-configuration :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %work-group-configuration-updates-enforce-work-group-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'work-group-configuration-updates
                    'make-work-group-configuration-updates))
 (common-lisp:defun make-work-group-configuration-updates
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-minimum-encryption-configuration
                     customer-content-encryption-configuration execution-role
                     additional-configuration
                     remove-customer-content-encryption-configuration
                     engine-version requester-pays-enabled
                     remove-bytes-scanned-cutoff-per-query
                     bytes-scanned-cutoff-per-query
                     publish-cloud-watch-metrics-enabled
                     result-configuration-updates
                     enforce-work-group-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'work-group-configuration-updates
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration-updates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration-updates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-work-group-configuration))
      (common-lisp:list
       (common-lisp:cons "EnforceWorkGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration-updates))
      (common-lisp:list
       (common-lisp:cons "ResultConfigurationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "PublishCloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bytes-scanned-cutoff-per-query))
      (common-lisp:list
       (common-lisp:cons "BytesScannedCutoffPerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-bytes-scanned-cutoff-per-query))
      (common-lisp:list
       (common-lisp:cons "RemoveBytesScannedCutoffPerQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-pays-enabled))
      (common-lisp:list
       (common-lisp:cons "RequesterPaysEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-customer-content-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "RemoveCustomerContentEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-content-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomerContentEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-minimum-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EnableMinimumEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          work-group-configuration-updates))
   common-lisp:nil))
(common-lisp:deftype work-group-description-string () 'common-lisp:string)
(common-lisp:deftype work-group-name () 'common-lisp:string)
(common-lisp:deftype work-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass work-group-summary common-lisp:nil
                       ((engine-version :initarg :engine-version :type
                         (common-lisp:or engine-version common-lisp:null)
                         :accessor %work-group-summary-engine-version :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %work-group-summary-creation-time :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or work-group-description-string
                                         common-lisp:null)
                         :accessor %work-group-summary-description :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or work-group-state common-lisp:null)
                         :accessor %work-group-summary-state :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or work-group-name common-lisp:null)
                         :accessor %work-group-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'work-group-summary 'make-work-group-summary))
 (common-lisp:defun make-work-group-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engine-version creation-time description
                     state name)
   (common-lisp:apply #'common-lisp:make-instance 'work-group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input work-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input work-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input work-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype work-groups-list ()
   '(trivial-types:proper-list work-group-summary))
 (common-lisp:defun |make-work-groups-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list work-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |datumList| () '(trivial-types:proper-list datum))
 (common-lisp:defun |make-datumlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datum))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |datumString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-get-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key named-query-ids)
   (common-lisp:declare (common-lisp:ignorable named-query-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetNamedQuery"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-named-query))
(common-lisp:progn
 (common-lisp:defun batch-get-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key prepared-statement-names work-group)
   (common-lisp:declare
    (common-lisp:ignorable prepared-statement-names work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-prepared-statement-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetPreparedStatement"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-prepared-statement))
(common-lisp:progn
 (common-lisp:defun batch-get-query-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-ids)
   (common-lisp:declare (common-lisp:ignorable query-execution-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-query-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetQueryExecution"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-query-execution))
(common-lisp:progn
 (common-lisp:defun create-data-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name type description parameters tags)
   (common-lisp:declare
    (common-lisp:ignorable name type description parameters tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-catalog-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDataCatalog"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-catalog))
(common-lisp:progn
 (common-lisp:defun create-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description database query-string
                     client-request-token work-group)
   (common-lisp:declare
    (common-lisp:ignorable name description database query-string
     client-request-token work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateNamedQuery"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-named-query))
(common-lisp:progn
 (common-lisp:defun create-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group name client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable work-group name client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateNotebook"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-notebook))
(common-lisp:progn
 (common-lisp:defun create-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-name work-group query-statement
                     description)
   (common-lisp:declare
    (common-lisp:ignorable statement-name work-group query-statement
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-prepared-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePreparedStatement"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-prepared-statement))
(common-lisp:progn
 (common-lisp:defun create-presigned-notebook-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-presigned-notebook-url-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePresignedNotebookUrl"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-presigned-notebook-url))
(common-lisp:progn
 (common-lisp:defun create-work-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name configuration description tags)
   (common-lisp:declare
    (common-lisp:ignorable name configuration description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-work-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateWorkGroup"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-work-group))
(common-lisp:progn
 (common-lisp:defun delete-data-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-catalog-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDataCatalog"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-catalog))
(common-lisp:progn
 (common-lisp:defun delete-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key named-query-id)
   (common-lisp:declare (common-lisp:ignorable named-query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteNamedQuery"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-named-query))
(common-lisp:progn
 (common-lisp:defun delete-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id)
   (common-lisp:declare (common-lisp:ignorable notebook-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteNotebook"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-notebook))
(common-lisp:progn
 (common-lisp:defun delete-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-name work-group)
   (common-lisp:declare (common-lisp:ignorable statement-name work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-prepared-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeletePreparedStatement"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-prepared-statement))
(common-lisp:progn
 (common-lisp:defun delete-work-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group recursive-delete-option)
   (common-lisp:declare
    (common-lisp:ignorable work-group recursive-delete-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-work-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteWorkGroup"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-work-group))
(common-lisp:progn
 (common-lisp:defun export-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id)
   (common-lisp:declare (common-lisp:ignorable notebook-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ExportNotebook"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-notebook))
(common-lisp:progn
 (common-lisp:defun get-calculation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:declare (common-lisp:ignorable calculation-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-calculation-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetCalculationExecution"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-calculation-execution))
(common-lisp:progn
 (common-lisp:defun get-calculation-execution-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:declare (common-lisp:ignorable calculation-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-calculation-execution-code-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetCalculationExecutionCode"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-calculation-execution-code))
(common-lisp:progn
 (common-lisp:defun get-calculation-execution-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:declare (common-lisp:ignorable calculation-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-calculation-execution-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetCalculationExecutionStatus"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-calculation-execution-status))
(common-lisp:progn
 (common-lisp:defun get-data-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-catalog-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDataCatalog"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-catalog))
(common-lisp:progn
 (common-lisp:defun get-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-name database-name)
   (common-lisp:declare (common-lisp:ignorable catalog-name database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-database-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDatabase"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-database))
(common-lisp:progn
 (common-lisp:defun get-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key named-query-id)
   (common-lisp:declare (common-lisp:ignorable named-query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetNamedQuery"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-named-query))
(common-lisp:progn
 (common-lisp:defun get-notebook-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id)
   (common-lisp:declare (common-lisp:ignorable notebook-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-notebook-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetNotebookMetadata"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-notebook-metadata))
(common-lisp:progn
 (common-lisp:defun get-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-name work-group)
   (common-lisp:declare (common-lisp:ignorable statement-name work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-prepared-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetPreparedStatement"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-prepared-statement))
(common-lisp:progn
 (common-lisp:defun get-query-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-id)
   (common-lisp:declare (common-lisp:ignorable query-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetQueryExecution"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-execution))
(common-lisp:progn
 (common-lisp:defun get-query-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable query-execution-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-results-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetQueryResults"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-results))
(common-lisp:progn
 (common-lisp:defun get-query-runtime-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-id)
   (common-lisp:declare (common-lisp:ignorable query-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-query-runtime-statistics-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetQueryRuntimeStatistics"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-runtime-statistics))
(common-lisp:progn
 (common-lisp:defun get-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetSession"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-session))
(common-lisp:progn
 (common-lisp:defun get-session-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetSessionStatus"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-session-status))
(common-lisp:progn
 (common-lisp:defun get-table-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-name database-name table-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-name database-name table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetTableMetadata"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-table-metadata))
(common-lisp:progn
 (common-lisp:defun get-work-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group)
   (common-lisp:declare (common-lisp:ignorable work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-work-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetWorkGroup"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-work-group))
(common-lisp:progn
 (common-lisp:defun import-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group name payload type
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable work-group name payload type client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportNotebook"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-notebook))
(common-lisp:progn
 (common-lisp:defun list-application-dpusizes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-application-dpusizes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListApplicationDPUSizes"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-dpusizes))
(common-lisp:progn
 (common-lisp:defun list-calculation-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id state-filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable session-id state-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-calculation-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListCalculationExecutions"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-calculation-executions))
(common-lisp:progn
 (common-lisp:defun list-data-catalogs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-catalogs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDataCatalogs"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-catalogs))
(common-lisp:progn
 (common-lisp:defun list-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-databases-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDatabases"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-databases))
(common-lisp:progn
 (common-lisp:defun list-engine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-engine-versions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListEngineVersions"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-engine-versions))
(common-lisp:progn
 (common-lisp:defun list-executors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id executor-state-filter
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable session-id executor-state-filter max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-executors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListExecutors"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-executors))
(common-lisp:progn
 (common-lisp:defun list-named-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results work-group)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-named-queries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListNamedQueries"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-named-queries))
(common-lisp:progn
 (common-lisp:defun list-notebook-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results
                     work-group)
   (common-lisp:declare
    (common-lisp:ignorable filters next-token max-results work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notebook-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListNotebookMetadata"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-notebook-metadata))
(common-lisp:progn
 (common-lisp:defun list-notebook-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable notebook-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notebook-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListNotebookSessions"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-notebook-sessions))
(common-lisp:progn
 (common-lisp:defun list-prepared-statements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable work-group next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-prepared-statements-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPreparedStatements"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-prepared-statements))
(common-lisp:progn
 (common-lisp:defun list-query-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results work-group)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results work-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-query-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListQueryExecutions"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-query-executions))
(common-lisp:progn
 (common-lisp:defun list-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group state-filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable work-group state-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListSessions"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sessions))
(common-lisp:progn
 (common-lisp:defun list-table-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-name database-name expression
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-name database-name expression next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-table-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTableMetadata"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-table-metadata))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-work-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-work-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListWorkGroups"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-work-groups))
(common-lisp:progn
 (common-lisp:defun start-calculation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id description
                     calculation-configuration code-block client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable session-id description calculation-configuration
     code-block client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-calculation-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartCalculationExecution"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-calculation-execution))
(common-lisp:progn
 (common-lisp:defun start-query-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-string client-request-token
                     query-execution-context result-configuration work-group
                     execution-parameters result-reuse-configuration)
   (common-lisp:declare
    (common-lisp:ignorable query-string client-request-token
     query-execution-context result-configuration work-group
     execution-parameters result-reuse-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-query-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartQueryExecution"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-query-execution))
(common-lisp:progn
 (common-lisp:defun start-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description work-group
                     engine-configuration notebook-version
                     session-idle-timeout-in-minutes client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable description work-group engine-configuration
     notebook-version session-idle-timeout-in-minutes client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartSession"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-session))
(common-lisp:progn
 (common-lisp:defun stop-calculation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculation-execution-id)
   (common-lisp:declare (common-lisp:ignorable calculation-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-calculation-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopCalculationExecution"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-calculation-execution))
(common-lisp:progn
 (common-lisp:defun stop-query-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-execution-id)
   (common-lisp:declare (common-lisp:ignorable query-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-query-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopQueryExecution"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-query-execution))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun terminate-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TerminateSession"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'terminate-session))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-data-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name type description parameters)
   (common-lisp:declare
    (common-lisp:ignorable name type description parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-catalog-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDataCatalog"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-catalog))
(common-lisp:progn
 (common-lisp:defun update-named-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key named-query-id name description
                     query-string)
   (common-lisp:declare
    (common-lisp:ignorable named-query-id name description query-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-named-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateNamedQuery"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-named-query))
(common-lisp:progn
 (common-lisp:defun update-notebook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id payload type session-id
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable notebook-id payload type session-id
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-notebook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateNotebook"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-notebook))
(common-lisp:progn
 (common-lisp:defun update-notebook-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-id client-request-token name)
   (common-lisp:declare
    (common-lisp:ignorable notebook-id client-request-token name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-notebook-metadata-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateNotebookMetadata"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-notebook-metadata))
(common-lisp:progn
 (common-lisp:defun update-prepared-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-name work-group query-statement
                     description)
   (common-lisp:declare
    (common-lisp:ignorable statement-name work-group query-statement
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-prepared-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdatePreparedStatement"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-prepared-statement))
(common-lisp:progn
 (common-lisp:defun update-work-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key work-group description
                     configuration-updates state)
   (common-lisp:declare
    (common-lisp:ignorable work-group description configuration-updates state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-work-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'athena-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateWorkGroup"
                                                        "2017-05-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-work-group))
