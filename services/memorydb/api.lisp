;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/memorydb/api
  (:use)
  (:nicknames #:aws/memorydb)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/memorydb/api)
(common-lisp:progn
 (common-lisp:defclass memorydb-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "memorydb" :protocol :json))
 (common-lisp:export 'memorydb-request))
(common-lisp:progn
 (common-lisp:define-condition memorydb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'memorydb-error))
(common-lisp:defvar *error-map*
  '(("ACLAlreadyExistsFault" . aclalready-exists-fault)
    ("ACLNotFoundFault" . aclnot-found-fault)
    ("ACLQuotaExceededFault" . aclquota-exceeded-fault)
    ("APICallRateForCustomerExceededFault"
     . apicall-rate-for-customer-exceeded-fault)
    ("ClusterAlreadyExistsFault" . cluster-already-exists-fault)
    ("ClusterNotFoundFault" . cluster-not-found-fault)
    ("ClusterQuotaForCustomerExceededFault"
     . cluster-quota-for-customer-exceeded-fault)
    ("DefaultUserRequired" . default-user-required)
    ("DuplicateUserNameFault" . duplicate-user-name-fault)
    ("InsufficientClusterCapacityFault" . insufficient-cluster-capacity-fault)
    ("InvalidACLStateFault" . invalid-aclstate-fault)
    ("InvalidARNFault" . invalid-arnfault)
    ("InvalidClusterStateFault" . invalid-cluster-state-fault)
    ("InvalidCredentialsException" . invalid-credentials-exception)
    ("InvalidKMSKeyFault" . invalid-kmskey-fault)
    ("InvalidNodeStateFault" . invalid-node-state-fault)
    ("InvalidParameterCombinationException"
     . invalid-parameter-combination-exception)
    ("InvalidParameterGroupStateFault" . invalid-parameter-group-state-fault)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidSnapshotStateFault" . invalid-snapshot-state-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidUserStateFault" . invalid-user-state-fault)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("NoOperationFault" . no-operation-fault)
    ("NodeQuotaForClusterExceededFault"
     . node-quota-for-cluster-exceeded-fault)
    ("NodeQuotaForCustomerExceededFault"
     . node-quota-for-customer-exceeded-fault)
    ("ParameterGroupAlreadyExistsFault" . parameter-group-already-exists-fault)
    ("ParameterGroupNotFoundFault" . parameter-group-not-found-fault)
    ("ParameterGroupQuotaExceededFault" . parameter-group-quota-exceeded-fault)
    ("ReservedNodeAlreadyExistsFault" . reserved-node-already-exists-fault)
    ("ReservedNodeNotFoundFault" . reserved-node-not-found-fault)
    ("ReservedNodeQuotaExceededFault" . reserved-node-quota-exceeded-fault)
    ("ReservedNodesOfferingNotFoundFault"
     . reserved-nodes-offering-not-found-fault)
    ("ServiceLinkedRoleNotFoundFault" . service-linked-role-not-found-fault)
    ("ServiceUpdateNotFoundFault" . service-update-not-found-fault)
    ("ShardNotFoundFault" . shard-not-found-fault)
    ("ShardsPerClusterQuotaExceededFault"
     . shards-per-cluster-quota-exceeded-fault)
    ("SnapshotAlreadyExistsFault" . snapshot-already-exists-fault)
    ("SnapshotNotFoundFault" . snapshot-not-found-fault)
    ("SnapshotQuotaExceededFault" . snapshot-quota-exceeded-fault)
    ("SubnetGroupAlreadyExistsFault" . subnet-group-already-exists-fault)
    ("SubnetGroupInUseFault" . subnet-group-in-use-fault)
    ("SubnetGroupNotFoundFault" . subnet-group-not-found-fault)
    ("SubnetGroupQuotaExceededFault" . subnet-group-quota-exceeded-fault)
    ("SubnetInUse" . subnet-in-use)
    ("SubnetNotAllowedFault" . subnet-not-allowed-fault)
    ("SubnetQuotaExceededFault" . subnet-quota-exceeded-fault)
    ("TagNotFoundFault" . tag-not-found-fault)
    ("TagQuotaPerResourceExceeded" . tag-quota-per-resource-exceeded)
    ("TestFailoverNotAvailableFault" . test-failover-not-available-fault)
    ("UserAlreadyExistsFault" . user-already-exists-fault)
    ("UserNotFoundFault" . user-not-found-fault)
    ("UserQuotaExceededFault" . user-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass acl common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %acl-arn :initform common-lisp:nil)
                        (clusters :initarg :clusters :type
                         (common-lisp:or aclcluster-name-list common-lisp:null)
                         :accessor %acl-clusters :initform common-lisp:nil)
                        (pending-changes :initarg :pending-changes :type
                         (common-lisp:or aclpending-changes common-lisp:null)
                         :accessor %acl-pending-changes :initform
                         common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %acl-minimum-engine-version :initform common-lisp:nil)
                        (user-names :initarg :user-names :type
                         (common-lisp:or user-name-list common-lisp:null)
                         :accessor %acl-user-names :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %acl-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %acl-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'acl 'make-acl))
 (common-lisp:defun make-acl
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn clusters pending-changes
                     minimum-engine-version user-names status name)
   (common-lisp:apply #'common-lisp:make-instance 'acl
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input acl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input acl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-names))
      (common-lisp:list
       (common-lisp:cons "UserNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-changes))
      (common-lisp:list
       (common-lisp:cons "PendingChanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "Clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input acl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition aclalready-exists-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'aclalready-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype aclcluster-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-aclcluster-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype acllist () '(trivial-types:proper-list acl))
 (common-lisp:defun |make-acllist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list acl))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aclname () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aclname-list () '(trivial-types:proper-list aclname))
 (common-lisp:defun |make-aclname-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aclname))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition aclnot-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'aclnot-found-fault)))
(common-lisp:progn
 (common-lisp:defclass aclpending-changes common-lisp:nil
                       ((user-names-to-add :initarg :user-names-to-add :type
                         (common-lisp:or user-name-list common-lisp:null)
                         :accessor %aclpending-changes-user-names-to-add
                         :initform common-lisp:nil)
                        (user-names-to-remove :initarg :user-names-to-remove
                         :type (common-lisp:or user-name-list common-lisp:null)
                         :accessor %aclpending-changes-user-names-to-remove
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aclpending-changes 'make-aclpending-changes))
 (common-lisp:defun make-aclpending-changes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-names-to-add user-names-to-remove)
   (common-lisp:apply #'common-lisp:make-instance 'aclpending-changes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aclpending-changes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aclpending-changes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-names-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserNamesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-names-to-add))
      (common-lisp:list
       (common-lisp:cons "UserNamesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aclpending-changes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition aclquota-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'aclquota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass acls-update-status common-lisp:nil
                       ((aclto-apply :initarg :aclto-apply :type
                         (common-lisp:or aclname common-lisp:null) :accessor
                         %acls-update-status-aclto-apply :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'acls-update-status 'make-acls-update-status))
 (common-lisp:defun make-acls-update-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aclto-apply)
   (common-lisp:apply #'common-lisp:make-instance 'acls-update-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input acls-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input acls-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aclto-apply))
      (common-lisp:list
       (common-lisp:cons "ACLToApply"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input acls-update-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition apicall-rate-for-customer-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'apicall-rate-for-customer-exceeded-fault)))
(common-lisp:deftype azstatus () 'common-lisp:string)
(common-lisp:deftype access-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authentication common-lisp:nil
                       ((password-count :initarg :password-count :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %authentication-password-count :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %authentication-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'authentication 'make-authentication))
 (common-lisp:defun make-authentication
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key password-count type)
   (common-lisp:apply #'common-lisp:make-instance 'authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-count))
      (common-lisp:list
       (common-lisp:cons "PasswordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authentication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authentication-mode common-lisp:nil
                       ((passwords :initarg :passwords :type
                         (common-lisp:or password-list-input common-lisp:null)
                         :accessor %authentication-mode-passwords :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or input-authentication-type
                                         common-lisp:null)
                         :accessor %authentication-mode-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'authentication-mode 'make-authentication-mode))
 (common-lisp:defun make-authentication-mode
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key passwords type)
   (common-lisp:apply #'common-lisp:make-instance 'authentication-mode
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authentication-mode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authentication-mode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passwords))
      (common-lisp:list
       (common-lisp:cons "Passwords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authentication-mode))
   common-lisp:nil))
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %availability-zone-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defun make-availability-zone
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:deftype aws-query-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-update-cluster-request common-lisp:nil
                       ((service-update :initarg :service-update :type
                         (common-lisp:or service-update-request
                                         common-lisp:null)
                         :accessor %batch-update-cluster-request-service-update
                         :initform common-lisp:nil)
                        (cluster-names :initarg :cluster-names :type
                         (common-lisp:or cluster-name-list common-lisp:null)
                         :accessor %batch-update-cluster-request-cluster-names
                         :initform
                         (common-lisp:error ":cluster-names is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-update-cluster-request
                    'make-batch-update-cluster-request))
 (common-lisp:defun make-batch-update-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-update cluster-names)
   (common-lisp:apply #'common-lisp:make-instance 'batch-update-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-names))
      (common-lisp:list
       (common-lisp:cons "ClusterNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-cluster-response common-lisp:nil
                       ((unprocessed-clusters :initarg :unprocessed-clusters
                         :type
                         (common-lisp:or unprocessed-cluster-list
                                         common-lisp:null)
                         :accessor
                         %batch-update-cluster-response-unprocessed-clusters
                         :initform common-lisp:nil)
                        (processed-clusters :initarg :processed-clusters :type
                         (common-lisp:or cluster-list common-lisp:null)
                         :accessor
                         %batch-update-cluster-response-processed-clusters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-update-cluster-response
                    'make-batch-update-cluster-response))
 (common-lisp:defun make-batch-update-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-clusters processed-clusters)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processed-clusters))
      (common-lisp:list
       (common-lisp:cons "ProcessedClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-clusters))
      (common-lisp:list
       (common-lisp:cons "UnprocessedClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-cluster-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((data-tiering :initarg :data-tiering :type
                         (common-lisp:or data-tiering-status common-lisp:null)
                         :accessor %cluster-data-tiering :initform
                         common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %cluster-auto-minor-version-upgrade
                         :initform common-lisp:nil)
                        (aclname :initarg :aclname :type
                         (common-lisp:or aclname common-lisp:null) :accessor
                         %cluster-aclname :initform common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-window :initform common-lisp:nil)
                        (maintenance-window :initarg :maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-maintenance-window :initform common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %cluster-snapshot-retention-limit :initform
                         common-lisp:nil)
                        (sns-topic-status :initarg :sns-topic-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-sns-topic-status :initform common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-sns-topic-arn :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-arn :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-kms-key-id :initform common-lisp:nil)
                        (tlsenabled :initarg :tlsenabled :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %cluster-tlsenabled :initform
                         common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-subnet-group-name :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-group-membership-list
                                         common-lisp:null)
                         :accessor %cluster-security-groups :initform
                         common-lisp:nil)
                        (parameter-group-status :initarg
                         :parameter-group-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-parameter-group-status :initform
                         common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %cluster-parameter-group-name :initform
                         common-lisp:nil)
                        (engine-patch-version :initarg :engine-patch-version
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %cluster-engine-patch-version :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-engine-version :initform common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-node-type :initform common-lisp:nil)
                        (cluster-endpoint :initarg :cluster-endpoint :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         %cluster-cluster-endpoint :initform common-lisp:nil)
                        (availability-mode :initarg :availability-mode :type
                         (common-lisp:or azstatus common-lisp:null) :accessor
                         %cluster-availability-mode :initform common-lisp:nil)
                        (shards :initarg :shards :type
                         (common-lisp:or shard-list common-lisp:null) :accessor
                         %cluster-shards :initform common-lisp:nil)
                        (number-of-shards :initarg :number-of-shards :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %cluster-number-of-shards :initform
                         common-lisp:nil)
                        (pending-updates :initarg :pending-updates :type
                         (common-lisp:or cluster-pending-updates
                                         common-lisp:null)
                         :accessor %cluster-pending-updates :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-status :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-description :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defun make-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-tiering auto-minor-version-upgrade
                     aclname snapshot-window maintenance-window
                     snapshot-retention-limit sns-topic-status sns-topic-arn
                     arn kms-key-id tlsenabled subnet-group-name
                     security-groups parameter-group-status
                     parameter-group-name engine-patch-version engine-version
                     node-type cluster-endpoint availability-mode shards
                     number-of-shards pending-updates status description name)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-updates))
      (common-lisp:list
       (common-lisp:cons "PendingUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-shards))
      (common-lisp:list
       (common-lisp:cons "NumberOfShards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shards))
      (common-lisp:list
       (common-lisp:cons "Shards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-mode))
      (common-lisp:list
       (common-lisp:cons "AvailabilityMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-endpoint))
      (common-lisp:list
       (common-lisp:cons "ClusterEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-patch-version))
      (common-lisp:list
       (common-lisp:cons "EnginePatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlsenabled))
      (common-lisp:list
       (common-lisp:cons "TLSEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-status))
      (common-lisp:list
       (common-lisp:cons "SnsTopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-window))
      (common-lisp:list
       (common-lisp:cons "MaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aclname))
      (common-lisp:list
       (common-lisp:cons "ACLName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-tiering))
      (common-lisp:list
       (common-lisp:cons "DataTiering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-already-exists-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-configuration common-lisp:nil
                       ((shards :initarg :shards :type
                         (common-lisp:or shard-details common-lisp:null)
                         :accessor %cluster-configuration-shards :initform
                         common-lisp:nil)
                        (num-shards :initarg :num-shards :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %cluster-configuration-num-shards :initform
                         common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-configuration-snapshot-window :initform
                         common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %cluster-configuration-snapshot-retention-limit
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-configuration-vpc-id :initform
                         common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-configuration-subnet-group-name :initform
                         common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %cluster-configuration-parameter-group-name
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %cluster-configuration-port :initform
                         common-lisp:nil)
                        (topic-arn :initarg :topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-configuration-topic-arn :initform
                         common-lisp:nil)
                        (maintenance-window :initarg :maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-configuration-maintenance-window :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-configuration-engine-version :initform
                         common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-configuration-node-type :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-configuration-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-configuration-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cluster-configuration 'make-cluster-configuration))
 (common-lisp:defun make-cluster-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shards num-shards snapshot-window
                     snapshot-retention-limit vpc-id subnet-group-name
                     parameter-group-name port topic-arn maintenance-window
                     engine-version node-type description name)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-window))
      (common-lisp:list
       (common-lisp:cons "MaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-shards))
      (common-lisp:list
       (common-lisp:cons "NumShards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shards))
      (common-lisp:list
       (common-lisp:cons "Shards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-list () '(trivial-types:proper-list cluster))
 (common-lisp:defun |make-cluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cluster-name-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-cluster-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-pending-updates common-lisp:nil
                       ((service-updates :initarg :service-updates :type
                         (common-lisp:or pending-modified-service-update-list
                                         common-lisp:null)
                         :accessor %cluster-pending-updates-service-updates
                         :initform common-lisp:nil)
                        (acls :initarg :acls :type
                         (common-lisp:or acls-update-status common-lisp:null)
                         :accessor %cluster-pending-updates-acls :initform
                         common-lisp:nil)
                        (resharding :initarg :resharding :type
                         (common-lisp:or resharding-status common-lisp:null)
                         :accessor %cluster-pending-updates-resharding
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cluster-pending-updates 'make-cluster-pending-updates))
 (common-lisp:defun make-cluster-pending-updates
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-updates acls resharding)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-pending-updates
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-updates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-updates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resharding))
      (common-lisp:list
       (common-lisp:cons "Resharding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acls))
      (common-lisp:list
       (common-lisp:cons "ACLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-updates))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-updates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-quota-for-customer-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass copy-snapshot-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %copy-snapshot-request-tags :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %copy-snapshot-request-kms-key-id :initform
                         common-lisp:nil)
                        (target-bucket :initarg :target-bucket :type
                         (common-lisp:or target-bucket common-lisp:null)
                         :accessor %copy-snapshot-request-target-bucket
                         :initform common-lisp:nil)
                        (target-snapshot-name :initarg :target-snapshot-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %copy-snapshot-request-target-snapshot-name
                         :initform
                         (common-lisp:error
                          ":target-snapshot-name is required"))
                        (source-snapshot-name :initarg :source-snapshot-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %copy-snapshot-request-source-snapshot-name
                         :initform
                         (common-lisp:error
                          ":source-snapshot-name is required"))))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-request 'make-copy-snapshot-request))
 (common-lisp:defun make-copy-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags kms-key-id target-bucket
                     target-snapshot-name source-snapshot-name)
   (common-lisp:apply #'common-lisp:make-instance 'copy-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SourceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "TargetSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bucket))
      (common-lisp:list
       (common-lisp:cons "TargetBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-snapshot-response common-lisp:nil
                       ((snapshot :initarg :snapshot :type
                         (common-lisp:or snapshot common-lisp:null) :accessor
                         %copy-snapshot-response-snapshot :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-response 'make-copy-snapshot-response))
 (common-lisp:defun make-copy-snapshot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot)
   (common-lisp:apply #'common-lisp:make-instance 'copy-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-aclrequest common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-aclrequest-tags :initform common-lisp:nil)
                        (user-names :initarg :user-names :type
                         (common-lisp:or user-name-list-input common-lisp:null)
                         :accessor %create-aclrequest-user-names :initform
                         common-lisp:nil)
                        (aclname :initarg :aclname :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-aclrequest-aclname :initform
                         (common-lisp:error ":aclname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-aclrequest 'make-create-aclrequest))
 (common-lisp:defun make-create-aclrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags user-names aclname)
   (common-lisp:apply #'common-lisp:make-instance 'create-aclrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aclname))
      (common-lisp:list
       (common-lisp:cons "ACLName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-names))
      (common-lisp:list
       (common-lisp:cons "UserNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-aclresponse common-lisp:nil
                       ((acl :initarg :acl :type
                         (common-lisp:or acl common-lisp:null) :accessor
                         %create-aclresponse-acl :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-aclresponse 'make-create-aclresponse))
 (common-lisp:defun make-create-aclresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key acl)
   (common-lisp:apply #'common-lisp:make-instance 'create-aclresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:list
       (common-lisp:cons "ACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((data-tiering :initarg :data-tiering :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %create-cluster-request-data-tiering
                         :initform common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %create-cluster-request-auto-minor-version-upgrade
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-engine-version :initform
                         common-lisp:nil)
                        (aclname :initarg :aclname :type
                         (common-lisp:or aclname common-lisp:null) :accessor
                         %create-cluster-request-aclname :initform
                         (common-lisp:error ":aclname is required"))
                        (snapshot-window :initarg :snapshot-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-snapshot-window :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-cluster-request-tags :initform
                         common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %create-cluster-request-snapshot-retention-limit
                         :initform common-lisp:nil)
                        (snapshot-name :initarg :snapshot-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-snapshot-name :initform
                         common-lisp:nil)
                        (snapshot-arns :initarg :snapshot-arns :type
                         (common-lisp:or snapshot-arns-list common-lisp:null)
                         :accessor %create-cluster-request-snapshot-arns
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-kms-key-id :initform
                         common-lisp:nil)
                        (tlsenabled :initarg :tlsenabled :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %create-cluster-request-tlsenabled :initform
                         common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-sns-topic-arn :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %create-cluster-request-port :initform
                         common-lisp:nil)
                        (maintenance-window :initarg :maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-maintenance-window :initform
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-ids-list
                                         common-lisp:null)
                         :accessor %create-cluster-request-security-group-ids
                         :initform common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-subnet-group-name :initform
                         common-lisp:nil)
                        (num-replicas-per-shard :initarg
                         :num-replicas-per-shard :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %create-cluster-request-num-replicas-per-shard
                         :initform common-lisp:nil)
                        (num-shards :initarg :num-shards :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %create-cluster-request-num-shards :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-description :initform
                         common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %create-cluster-request-parameter-group-name
                         :initform common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-node-type :initform
                         (common-lisp:error ":node-type is required"))
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-cluster-name :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defun make-create-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-tiering auto-minor-version-upgrade
                     engine-version aclname snapshot-window tags
                     snapshot-retention-limit snapshot-name snapshot-arns
                     kms-key-id tlsenabled sns-topic-arn port
                     maintenance-window security-group-ids subnet-group-name
                     num-replicas-per-shard num-shards description
                     parameter-group-name node-type cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-shards))
      (common-lisp:list
       (common-lisp:cons "NumShards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'num-replicas-per-shard))
      (common-lisp:list
       (common-lisp:cons "NumReplicasPerShard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-window))
      (common-lisp:list
       (common-lisp:cons "MaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlsenabled))
      (common-lisp:list
       (common-lisp:cons "TLSEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arns))
      (common-lisp:list
       (common-lisp:cons "SnapshotArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aclname))
      (common-lisp:list
       (common-lisp:cons "ACLName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-tiering))
      (common-lisp:list
       (common-lisp:cons "DataTiering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %create-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defun make-create-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-parameter-group-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-parameter-group-request-tags :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-parameter-group-request-description :initform
                         common-lisp:nil)
                        (family :initarg :family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-parameter-group-request-family :initform
                         (common-lisp:error ":family is required"))
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-parameter-group-request-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-parameter-group-request
                    'make-create-parameter-group-request))
 (common-lisp:defun make-create-parameter-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description family
                     parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-parameter-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-parameter-group-response common-lisp:nil
                       ((parameter-group :initarg :parameter-group :type
                         (common-lisp:or parameter-group common-lisp:null)
                         :accessor
                         %create-parameter-group-response-parameter-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-parameter-group-response
                    'make-create-parameter-group-response))
 (common-lisp:defun make-create-parameter-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-parameter-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-snapshot-request-tags :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-snapshot-request-kms-key-id :initform
                         common-lisp:nil)
                        (snapshot-name :initarg :snapshot-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-snapshot-request-snapshot-name :initform
                         (common-lisp:error ":snapshot-name is required"))
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-snapshot-request-cluster-name :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-request 'make-create-snapshot-request))
 (common-lisp:defun make-create-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags kms-key-id snapshot-name
                     cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-response common-lisp:nil
                       ((snapshot :initarg :snapshot :type
                         (common-lisp:or snapshot common-lisp:null) :accessor
                         %create-snapshot-response-snapshot :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-response 'make-create-snapshot-response))
 (common-lisp:defun make-create-snapshot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot)
   (common-lisp:apply #'common-lisp:make-instance 'create-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subnet-group-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-subnet-group-request-tags :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor %create-subnet-group-request-subnet-ids
                         :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-subnet-group-request-description :initform
                         common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-subnet-group-request-subnet-group-name
                         :initform
                         (common-lisp:error
                          ":subnet-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-subnet-group-request
                    'make-create-subnet-group-request))
 (common-lisp:defun make-create-subnet-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags subnet-ids description
                     subnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-subnet-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subnet-group-response common-lisp:nil
                       ((subnet-group :initarg :subnet-group :type
                         (common-lisp:or subnet-group common-lisp:null)
                         :accessor %create-subnet-group-response-subnet-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-subnet-group-response
                    'make-create-subnet-group-response))
 (common-lisp:defun make-create-subnet-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-group)
   (common-lisp:apply #'common-lisp:make-instance 'create-subnet-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group))
      (common-lisp:list
       (common-lisp:cons "SubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-user-request-tags :initform common-lisp:nil)
                        (access-string :initarg :access-string :type
                         (common-lisp:or access-string common-lisp:null)
                         :accessor %create-user-request-access-string :initform
                         (common-lisp:error ":access-string is required"))
                        (authentication-mode :initarg :authentication-mode
                         :type
                         (common-lisp:or authentication-mode common-lisp:null)
                         :accessor %create-user-request-authentication-mode
                         :initform
                         (common-lisp:error
                          ":authentication-mode is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %create-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defun make-create-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags access-string authentication-mode
                     user-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "AuthenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-string))
      (common-lisp:list
       (common-lisp:cons "AccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-response common-lisp:nil
                       ((user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %create-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defun make-create-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:deftype data-tiering-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition default-user-required
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'default-user-required)))
(common-lisp:progn
 (common-lisp:defclass delete-aclrequest common-lisp:nil
                       ((aclname :initarg :aclname :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-aclrequest-aclname :initform
                         (common-lisp:error ":aclname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-aclrequest 'make-delete-aclrequest))
 (common-lisp:defun make-delete-aclrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aclname)
   (common-lisp:apply #'common-lisp:make-instance 'delete-aclrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aclname))
      (common-lisp:list
       (common-lisp:cons "ACLName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-aclresponse common-lisp:nil
                       ((acl :initarg :acl :type
                         (common-lisp:or acl common-lisp:null) :accessor
                         %delete-aclresponse-acl :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-aclresponse 'make-delete-aclresponse))
 (common-lisp:defun make-delete-aclresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key acl)
   (common-lisp:apply #'common-lisp:make-instance 'delete-aclresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:list
       (common-lisp:cons "ACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-request common-lisp:nil
                       ((final-snapshot-name :initarg :final-snapshot-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %delete-cluster-request-final-snapshot-name
                         :initform common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-cluster-request-cluster-name :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defun make-delete-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-snapshot-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "FinalSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %delete-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defun make-delete-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parameter-group-request common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-parameter-group-request-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-parameter-group-request
                    'make-delete-parameter-group-request))
 (common-lisp:defun make-delete-parameter-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-parameter-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parameter-group-response common-lisp:nil
                       ((parameter-group :initarg :parameter-group :type
                         (common-lisp:or parameter-group common-lisp:null)
                         :accessor
                         %delete-parameter-group-response-parameter-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-parameter-group-response
                    'make-delete-parameter-group-response))
 (common-lisp:defun make-delete-parameter-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-parameter-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-request common-lisp:nil
                       ((snapshot-name :initarg :snapshot-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-snapshot-request-snapshot-name :initform
                         (common-lisp:error ":snapshot-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-request 'make-delete-snapshot-request))
 (common-lisp:defun make-delete-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-response common-lisp:nil
                       ((snapshot :initarg :snapshot :type
                         (common-lisp:or snapshot common-lisp:null) :accessor
                         %delete-snapshot-response-snapshot :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-response 'make-delete-snapshot-response))
 (common-lisp:defun make-delete-snapshot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot)
   (common-lisp:apply #'common-lisp:make-instance 'delete-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subnet-group-request common-lisp:nil
                       ((subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-subnet-group-request-subnet-group-name
                         :initform
                         (common-lisp:error
                          ":subnet-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-subnet-group-request
                    'make-delete-subnet-group-request))
 (common-lisp:defun make-delete-subnet-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-subnet-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subnet-group-response common-lisp:nil
                       ((subnet-group :initarg :subnet-group :type
                         (common-lisp:or subnet-group common-lisp:null)
                         :accessor %delete-subnet-group-response-subnet-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-subnet-group-response
                    'make-delete-subnet-group-response))
 (common-lisp:defun make-delete-subnet-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-group)
   (common-lisp:apply #'common-lisp:make-instance 'delete-subnet-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group))
      (common-lisp:list
       (common-lisp:cons "SubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %delete-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defun make-delete-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-response common-lisp:nil
                       ((user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %delete-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defun make-delete-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-acls-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-acls-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-acls-request-max-results :initform
                         common-lisp:nil)
                        (aclname :initarg :aclname :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-acls-request-aclname :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-acls-request 'make-describe-acls-request))
 (common-lisp:defun make-describe-acls-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results aclname)
   (common-lisp:apply #'common-lisp:make-instance 'describe-acls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-acls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-acls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aclname))
      (common-lisp:list
       (common-lisp:cons "ACLName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-acls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-acls-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-acls-response-next-token :initform
                         common-lisp:nil)
                        (acls :initarg :acls :type
                         (common-lisp:or acllist common-lisp:null) :accessor
                         %describe-acls-response-acls :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-acls-response 'make-describe-acls-response))
 (common-lisp:defun make-describe-acls-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token acls)
   (common-lisp:apply #'common-lisp:make-instance 'describe-acls-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-acls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-acls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acls))
      (common-lisp:list
       (common-lisp:cons "ACLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-acls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-request common-lisp:nil
                       ((show-shard-details :initarg :show-shard-details :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %describe-clusters-request-show-shard-details
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-clusters-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-clusters-request-max-results
                         :initform common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-clusters-request-cluster-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-request
                    'make-describe-clusters-request))
 (common-lisp:defun make-describe-clusters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key show-shard-details next-token max-results
                     cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-shard-details))
      (common-lisp:list
       (common-lisp:cons "ShowShardDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-response common-lisp:nil
                       ((clusters :initarg :clusters :type
                         (common-lisp:or cluster-list common-lisp:null)
                         :accessor %describe-clusters-response-clusters
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-clusters-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-response
                    'make-describe-clusters-response))
 (common-lisp:defun make-describe-clusters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key clusters next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "Clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-versions-request common-lisp:nil
                       ((default-only :initarg :default-only :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-engine-versions-request-default-only
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-engine-versions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-engine-versions-request-max-results
                         :initform common-lisp:nil)
                        (parameter-group-family :initarg
                         :parameter-group-family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-engine-versions-request-parameter-group-family
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-engine-versions-request-engine-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-versions-request
                    'make-describe-engine-versions-request))
 (common-lisp:defun make-describe-engine-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-only next-token max-results
                     parameter-group-family engine-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-only))
      (common-lisp:list
       (common-lisp:cons "DefaultOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-versions-response common-lisp:nil
                       ((engine-versions :initarg :engine-versions :type
                         (common-lisp:or engine-version-info-list
                                         common-lisp:null)
                         :accessor
                         %describe-engine-versions-response-engine-versions
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-engine-versions-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-versions-response
                    'make-describe-engine-versions-response))
 (common-lisp:defun make-describe-engine-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engine-versions next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-versions))
      (common-lisp:list
       (common-lisp:cons "EngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-events-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-events-request-max-results
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-events-request-duration :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %describe-events-request-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %describe-events-request-start-time :initform
                         common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %describe-events-request-source-type
                         :initform common-lisp:nil)
                        (source-name :initarg :source-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-events-request-source-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-events-request 'make-describe-events-request))
 (common-lisp:defun make-describe-events-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results duration end-time
                     start-time source-type source-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-response common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %describe-events-response-events :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-events-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-events-response 'make-describe-events-response))
 (common-lisp:defun make-describe-events-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameter-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-parameter-groups-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-parameter-groups-request-max-results
                         :initform common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-parameter-groups-request-parameter-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-parameter-groups-request
                    'make-describe-parameter-groups-request))
 (common-lisp:defun make-describe-parameter-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-parameter-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameter-groups-response common-lisp:nil
                       ((parameter-groups :initarg :parameter-groups :type
                         (common-lisp:or parameter-group-list common-lisp:null)
                         :accessor
                         %describe-parameter-groups-response-parameter-groups
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-parameter-groups-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-parameter-groups-response
                    'make-describe-parameter-groups-response))
 (common-lisp:defun make-describe-parameter-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-groups next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-parameter-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-groups))
      (common-lisp:list
       (common-lisp:cons "ParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameters-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-parameters-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-parameters-request-max-results
                         :initform common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-parameters-request-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-parameters-request
                    'make-describe-parameters-request))
 (common-lisp:defun make-describe-parameters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameters-response common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor %describe-parameters-response-parameters
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-parameters-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-parameters-response
                    'make-describe-parameters-response))
 (common-lisp:defun make-describe-parameters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-parameters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-nodes-offerings-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-offerings-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-reserved-nodes-offerings-request-max-results
                         :initform common-lisp:nil)
                        (offering-type :initarg :offering-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-offerings-request-offering-type
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-offerings-request-duration
                         :initform common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-offerings-request-node-type
                         :initform common-lisp:nil)
                        (reserved-nodes-offering-id :initarg
                         :reserved-nodes-offering-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-offerings-request-reserved-nodes-offering-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-nodes-offerings-request
                    'make-describe-reserved-nodes-offerings-request))
 (common-lisp:defun make-describe-reserved-nodes-offerings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results offering-type
                     duration node-type reserved-nodes-offering-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-nodes-offerings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-offerings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-nodes-offerings-response
                       common-lisp:nil
                       ((reserved-nodes-offerings :initarg
                         :reserved-nodes-offerings :type
                         (common-lisp:or reserved-nodes-offering-list
                                         common-lisp:null)
                         :accessor
                         %describe-reserved-nodes-offerings-response-reserved-nodes-offerings
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-offerings-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-nodes-offerings-response
                    'make-describe-reserved-nodes-offerings-response))
 (common-lisp:defun make-describe-reserved-nodes-offerings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reserved-nodes-offerings next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-nodes-offerings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-offerings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-offerings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-nodes-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedNodesOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-offerings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-nodes-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-reserved-nodes-request-max-results
                         :initform common-lisp:nil)
                        (offering-type :initarg :offering-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-request-offering-type
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-request-duration :initform
                         common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-request-node-type :initform
                         common-lisp:nil)
                        (reserved-nodes-offering-id :initarg
                         :reserved-nodes-offering-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-request-reserved-nodes-offering-id
                         :initform common-lisp:nil)
                        (reservation-id :initarg :reservation-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-request-reservation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-nodes-request
                    'make-describe-reserved-nodes-request))
 (common-lisp:defun make-describe-reserved-nodes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results offering-type
                     duration node-type reserved-nodes-offering-id
                     reservation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-nodes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-nodes-response common-lisp:nil
                       ((reserved-nodes :initarg :reserved-nodes :type
                         (common-lisp:or reserved-node-list common-lisp:null)
                         :accessor
                         %describe-reserved-nodes-response-reserved-nodes
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-nodes-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-nodes-response
                    'make-describe-reserved-nodes-response))
 (common-lisp:defun make-describe-reserved-nodes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reserved-nodes next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-nodes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-nodes))
      (common-lisp:list
       (common-lisp:cons "ReservedNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-updates-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-service-updates-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-service-updates-request-max-results
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or service-update-status-list
                                         common-lisp:null)
                         :accessor %describe-service-updates-request-status
                         :initform common-lisp:nil)
                        (cluster-names :initarg :cluster-names :type
                         (common-lisp:or cluster-name-list common-lisp:null)
                         :accessor
                         %describe-service-updates-request-cluster-names
                         :initform common-lisp:nil)
                        (service-update-name :initarg :service-update-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-service-updates-request-service-update-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-service-updates-request
                    'make-describe-service-updates-request))
 (common-lisp:defun make-describe-service-updates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results status
                     cluster-names service-update-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-updates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-names))
      (common-lisp:list
       (common-lisp:cons "ClusterNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-updates-response common-lisp:nil
                       ((service-updates :initarg :service-updates :type
                         (common-lisp:or service-update-list common-lisp:null)
                         :accessor
                         %describe-service-updates-response-service-updates
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-service-updates-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-service-updates-response
                    'make-describe-service-updates-response))
 (common-lisp:defun make-describe-service-updates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-updates next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-updates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-updates))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-updates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshots-request common-lisp:nil
                       ((show-detail :initarg :show-detail :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %describe-snapshots-request-show-detail
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-snapshots-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-snapshots-request-next-token :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-snapshots-request-source :initform
                         common-lisp:nil)
                        (snapshot-name :initarg :snapshot-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-snapshots-request-snapshot-name :initform
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-snapshots-request-cluster-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-request
                    'make-describe-snapshots-request))
 (common-lisp:defun make-describe-snapshots-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key show-detail max-results next-token source
                     snapshot-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-detail))
      (common-lisp:list
       (common-lisp:cons "ShowDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshots-response common-lisp:nil
                       ((snapshots :initarg :snapshots :type
                         (common-lisp:or snapshot-list common-lisp:null)
                         :accessor %describe-snapshots-response-snapshots
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-snapshots-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-response
                    'make-describe-snapshots-response))
 (common-lisp:defun make-describe-snapshots-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshots next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-snapshots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "Snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-subnet-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-subnet-groups-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-subnet-groups-request-max-results
                         :initform common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-subnet-groups-request-subnet-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-subnet-groups-request
                    'make-describe-subnet-groups-request))
 (common-lisp:defun make-describe-subnet-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results subnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-subnet-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-subnet-groups-response common-lisp:nil
                       ((subnet-groups :initarg :subnet-groups :type
                         (common-lisp:or subnet-group-list common-lisp:null)
                         :accessor
                         %describe-subnet-groups-response-subnet-groups
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-subnet-groups-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-subnet-groups-response
                    'make-describe-subnet-groups-response))
 (common-lisp:defun make-describe-subnet-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-groups next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-subnet-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-groups))
      (common-lisp:list
       (common-lisp:cons "SubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-users-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-users-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-users-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %describe-users-request-filters :initform
                         common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %describe-users-request-user-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-users-request 'make-describe-users-request))
 (common-lisp:defun make-describe-users-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters user-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-users-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-users-response-next-token :initform
                         common-lisp:nil)
                        (users :initarg :users :type
                         (common-lisp:or user-list common-lisp:null) :accessor
                         %describe-users-response-users :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-users-response 'make-describe-users-response))
 (common-lisp:defun make-describe-users-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token users)
   (common-lisp:apply #'common-lisp:make-instance 'describe-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-response))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:define-condition duplicate-user-name-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-user-name-fault)))
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %endpoint-port :initform common-lisp:nil)
                        (address :initarg :address :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %endpoint-address :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defun make-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port address)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass engine-version-info common-lisp:nil
                       ((parameter-group-family :initarg
                         :parameter-group-family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %engine-version-info-parameter-group-family :initform
                         common-lisp:nil)
                        (engine-patch-version :initarg :engine-patch-version
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %engine-version-info-engine-patch-version
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %engine-version-info-engine-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'engine-version-info 'make-engine-version-info))
 (common-lisp:defun make-engine-version-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group-family
                     engine-patch-version engine-version)
   (common-lisp:apply #'common-lisp:make-instance 'engine-version-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-patch-version))
      (common-lisp:list
       (common-lisp:cons "EnginePatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype engine-version-info-list ()
   '(trivial-types:proper-list engine-version-info))
 (common-lisp:defun |make-engine-version-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list engine-version-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((date :initarg :date :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %event-date :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-message :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %event-source-type :initform
                         common-lisp:nil)
                        (source-name :initarg :source-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-source-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defun make-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date message source-type source-name)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failover-shard-request common-lisp:nil
                       ((shard-name :initarg :shard-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %failover-shard-request-shard-name :initform
                         (common-lisp:error ":shard-name is required"))
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %failover-shard-request-cluster-name :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'failover-shard-request 'make-failover-shard-request))
 (common-lisp:defun make-failover-shard-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shard-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'failover-shard-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-shard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-shard-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-name))
      (common-lisp:list
       (common-lisp:cons "ShardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-shard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-shard-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %failover-shard-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failover-shard-response 'make-failover-shard-response))
 (common-lisp:defun make-failover-shard-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'failover-shard-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-shard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-shard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-shard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor %filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor %filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype input-authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition insufficient-cluster-capacity-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-cluster-capacity-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-aclstate-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-aclstate-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arnfault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-arnfault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-state-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-credentials-exception
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-credentials-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-kmskey-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-kmskey-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-node-state-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-node-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-combination-exception
     (memorydb-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-combination-exception
                    'invalid-parameter-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-group-state-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (memorydb-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-snapshot-state-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-user-state-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-user-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-allowed-node-type-updates-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-allowed-node-type-updates-request-cluster-name
                         :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-allowed-node-type-updates-request
                    'make-list-allowed-node-type-updates-request))
 (common-lisp:defun make-list-allowed-node-type-updates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-allowed-node-type-updates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-updates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-updates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-allowed-node-type-updates-response common-lisp:nil
                       ((scale-down-node-types :initarg :scale-down-node-types
                         :type (common-lisp:or node-type-list common-lisp:null)
                         :accessor
                         %list-allowed-node-type-updates-response-scale-down-node-types
                         :initform common-lisp:nil)
                        (scale-up-node-types :initarg :scale-up-node-types
                         :type (common-lisp:or node-type-list common-lisp:null)
                         :accessor
                         %list-allowed-node-type-updates-response-scale-up-node-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-allowed-node-type-updates-response
                    'make-list-allowed-node-type-updates-response))
 (common-lisp:defun make-list-allowed-node-type-updates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scale-down-node-types
                     scale-up-node-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-allowed-node-type-updates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-updates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-updates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-up-node-types))
      (common-lisp:list
       (common-lisp:cons "ScaleUpNodeTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scale-down-node-types))
      (common-lisp:list
       (common-lisp:cons "ScaleDownNodeTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-allowed-node-type-updates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defun make-list-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-response common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-response-tag-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defun make-list-tags-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition no-operation-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-operation-fault)))
(common-lisp:progn
 (common-lisp:defclass node common-lisp:nil
                       ((endpoint :initarg :endpoint :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         %node-endpoint :initform common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %node-create-time :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %node-availability-zone :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %node-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %node-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defun make-node
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoint create-time availability-zone
                     status name)
   (common-lisp:apply #'common-lisp:make-instance 'node
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-list () '(trivial-types:proper-list node))
 (common-lisp:defun |make-node-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-cluster-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'node-quota-for-cluster-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-customer-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'node-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype node-type-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-node-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((minimum-engine-version :initarg
                         :minimum-engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-minimum-engine-version :initform
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-allowed-values :initform common-lisp:nil)
                        (data-type :initarg :data-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-data-type :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-description :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-value :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defun make-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minimum-engine-version allowed-values
                     data-type description value name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-group common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-group-arn :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-group-description :initform
                         common-lisp:nil)
                        (family :initarg :family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-group-family :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-group-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parameter-group 'make-parameter-group))
 (common-lisp:defun make-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn description family name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition parameter-group-already-exists-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype parameter-group-list ()
   '(trivial-types:proper-list parameter-group))
 (common-lisp:defun |make-parameter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition parameter-group-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition parameter-group-quota-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype parameter-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-parameter-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter-name-value common-lisp:nil
                       ((parameter-value :initarg :parameter-value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-name-value-parameter-value :initform
                         common-lisp:nil)
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-name-value-parameter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-name-value 'make-parameter-name-value))
 (common-lisp:defun make-parameter-name-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-value parameter-name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-name-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-name-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-name-value-list ()
   '(trivial-types:proper-list parameter-name-value))
 (common-lisp:defun |make-parameter-name-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-name-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parameters-list ()
   '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype password-list-input ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-password-list-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pending-modified-service-update common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or service-update-status
                                         common-lisp:null)
                         :accessor %pending-modified-service-update-status
                         :initform common-lisp:nil)
                        (service-update-name :initarg :service-update-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %pending-modified-service-update-service-update-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pending-modified-service-update
                    'make-pending-modified-service-update))
 (common-lisp:defun make-pending-modified-service-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status service-update-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'pending-modified-service-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-service-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-service-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-service-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-modified-service-update-list ()
   '(trivial-types:proper-list pending-modified-service-update))
 (common-lisp:defun |make-pending-modified-service-update-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-modified-service-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-nodes-offering-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %purchase-reserved-nodes-offering-request-tags
                         :initform common-lisp:nil)
                        (node-count :initarg :node-count :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %purchase-reserved-nodes-offering-request-node-count
                         :initform common-lisp:nil)
                        (reservation-id :initarg :reservation-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %purchase-reserved-nodes-offering-request-reservation-id
                         :initform common-lisp:nil)
                        (reserved-nodes-offering-id :initarg
                         :reserved-nodes-offering-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %purchase-reserved-nodes-offering-request-reserved-nodes-offering-id
                         :initform
                         (common-lisp:error
                          ":reserved-nodes-offering-id is required"))))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-nodes-offering-request
                    'make-purchase-reserved-nodes-offering-request))
 (common-lisp:defun make-purchase-reserved-nodes-offering-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags node-count reservation-id
                     reserved-nodes-offering-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-nodes-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-nodes-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-nodes-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-count))
      (common-lisp:list
       (common-lisp:cons "NodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-nodes-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-nodes-offering-response
                       common-lisp:nil
                       ((reserved-node :initarg :reserved-node :type
                         (common-lisp:or reserved-node common-lisp:null)
                         :accessor
                         %purchase-reserved-nodes-offering-response-reserved-node
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-nodes-offering-response
                    'make-purchase-reserved-nodes-offering-response))
 (common-lisp:defun make-purchase-reserved-nodes-offering-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reserved-node)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-nodes-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-nodes-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-nodes-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node))
      (common-lisp:list
       (common-lisp:cons "ReservedNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-nodes-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recurring-charge common-lisp:nil
                       ((recurring-charge-frequency :initarg
                         :recurring-charge-frequency :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %recurring-charge-recurring-charge-frequency :initform
                         common-lisp:nil)
                        (recurring-charge-amount :initarg
                         :recurring-charge-amount :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %recurring-charge-recurring-charge-amount :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defun make-recurring-charge
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recurring-charge-frequency
                     recurring-charge-amount)
   (common-lisp:apply #'common-lisp:make-instance 'recurring-charge
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-amount))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-frequency))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recurring-charge-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun |make-recurring-charge-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replica-configuration-request common-lisp:nil
                       ((replica-count :initarg :replica-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %replica-configuration-request-replica-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replica-configuration-request
                    'make-replica-configuration-request))
 (common-lisp:defun make-replica-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replica-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'replica-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replica-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replica-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-count))
      (common-lisp:list
       (common-lisp:cons "ReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replica-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reserved-node common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-node-arn :initform common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor %reserved-node-recurring-charges :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-node-state :initform common-lisp:nil)
                        (offering-type :initarg :offering-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-node-offering-type :initform
                         common-lisp:nil)
                        (node-count :initarg :node-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %reserved-node-node-count :initform common-lisp:nil)
                        (fixed-price :initarg :fixed-price :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %reserved-node-fixed-price :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %reserved-node-duration :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %reserved-node-start-time :initform common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-node-node-type :initform common-lisp:nil)
                        (reserved-nodes-offering-id :initarg
                         :reserved-nodes-offering-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-node-reserved-nodes-offering-id :initform
                         common-lisp:nil)
                        (reservation-id :initarg :reservation-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-node-reservation-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'reserved-node 'make-reserved-node))
 (common-lisp:defun make-reserved-node
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn recurring-charges state offering-type
                     node-count fixed-price duration start-time node-type
                     reserved-nodes-offering-id reservation-id)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-node
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reserved-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reserved-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-count))
      (common-lisp:list
       (common-lisp:cons "NodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reserved-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-already-exists-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype reserved-node-list ()
   '(trivial-types:proper-list reserved-node))
 (common-lisp:defun |make-reserved-node-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-quota-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass reserved-nodes-offering common-lisp:nil
                       ((recurring-charges :initarg :recurring-charges :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor %reserved-nodes-offering-recurring-charges
                         :initform common-lisp:nil)
                        (offering-type :initarg :offering-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-nodes-offering-offering-type :initform
                         common-lisp:nil)
                        (fixed-price :initarg :fixed-price :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %reserved-nodes-offering-fixed-price :initform
                         common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %reserved-nodes-offering-duration :initform
                         common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-nodes-offering-node-type :initform
                         common-lisp:nil)
                        (reserved-nodes-offering-id :initarg
                         :reserved-nodes-offering-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-nodes-offering-reserved-nodes-offering-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reserved-nodes-offering 'make-reserved-nodes-offering))
 (common-lisp:defun make-reserved-nodes-offering
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recurring-charges offering-type
                     fixed-price duration node-type reserved-nodes-offering-id)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-nodes-offering
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-nodes-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-nodes-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-nodes-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-nodes-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-nodes-offering-list ()
   '(trivial-types:proper-list reserved-nodes-offering))
 (common-lisp:defun |make-reserved-nodes-offering-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-nodes-offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition reserved-nodes-offering-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-nodes-offering-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass reset-parameter-group-request common-lisp:nil
                       ((parameter-names :initarg :parameter-names :type
                         (common-lisp:or parameter-name-list common-lisp:null)
                         :accessor
                         %reset-parameter-group-request-parameter-names
                         :initform common-lisp:nil)
                        (all-parameters :initarg :all-parameters :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %reset-parameter-group-request-all-parameters
                         :initform common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %reset-parameter-group-request-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'reset-parameter-group-request
                    'make-reset-parameter-group-request))
 (common-lisp:defun make-reset-parameter-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-names all-parameters
                     parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-parameter-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-parameters))
      (common-lisp:list
       (common-lisp:cons "AllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-names))
      (common-lisp:list
       (common-lisp:cons "ParameterNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-parameter-group-response common-lisp:nil
                       ((parameter-group :initarg :parameter-group :type
                         (common-lisp:or parameter-group common-lisp:null)
                         :accessor
                         %reset-parameter-group-response-parameter-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reset-parameter-group-response
                    'make-reset-parameter-group-response))
 (common-lisp:defun make-reset-parameter-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-parameter-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resharding-status common-lisp:nil
                       ((slot-migration :initarg :slot-migration :type
                         (common-lisp:or slot-migration common-lisp:null)
                         :accessor %resharding-status-slot-migration :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resharding-status 'make-resharding-status))
 (common-lisp:defun make-resharding-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-migration)
   (common-lisp:apply #'common-lisp:make-instance 'resharding-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resharding-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resharding-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-migration))
      (common-lisp:list
       (common-lisp:cons "SlotMigration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resharding-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-ids-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-security-group-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass security-group-membership common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %security-group-membership-status :initform
                         common-lisp:nil)
                        (security-group-id :initarg :security-group-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %security-group-membership-security-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'security-group-membership
                    'make-security-group-membership))
 (common-lisp:defun make-security-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status security-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'security-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-id))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-membership-list ()
   '(trivial-types:proper-list security-group-membership))
 (common-lisp:defun |make-security-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-linked-role-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-linked-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass service-update common-lisp:nil
                       ((auto-update-start-date :initarg
                         :auto-update-start-date :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %service-update-auto-update-start-date :initform
                         common-lisp:nil)
                        (nodes-updated :initarg :nodes-updated :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-update-nodes-updated :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or service-update-type common-lisp:null)
                         :accessor %service-update-type :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or service-update-status
                                         common-lisp:null)
                         :accessor %service-update-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-update-description :initform common-lisp:nil)
                        (release-date :initarg :release-date :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %service-update-release-date :initform
                         common-lisp:nil)
                        (service-update-name :initarg :service-update-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %service-update-service-update-name
                         :initform common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-update-cluster-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'service-update 'make-service-update))
 (common-lisp:defun make-service-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-update-start-date nodes-updated type
                     status description release-date service-update-name
                     cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'service-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-update-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-date))
      (common-lisp:list
       (common-lisp:cons "ReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-updated))
      (common-lisp:list
       (common-lisp:cons "NodesUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-update-start-date))
      (common-lisp:list
       (common-lisp:cons "AutoUpdateStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-update-list ()
   '(trivial-types:proper-list service-update))
 (common-lisp:defun |make-service-update-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-update-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-update-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass service-update-request common-lisp:nil
                       ((service-update-name-to-apply :initarg
                         :service-update-name-to-apply :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-update-request-service-update-name-to-apply
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'service-update-request 'make-service-update-request))
 (common-lisp:defun make-service-update-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-update-name-to-apply)
   (common-lisp:apply #'common-lisp:make-instance 'service-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-update-name-to-apply))
      (common-lisp:list
       (common-lisp:cons "ServiceUpdateNameToApply"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-update-request))
   common-lisp:nil))
(common-lisp:deftype service-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-update-status-list ()
   '(trivial-types:proper-list service-update-status))
 (common-lisp:defun |make-service-update-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-update-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass shard common-lisp:nil
                       ((number-of-nodes :initarg :number-of-nodes :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %shard-number-of-nodes :initform
                         common-lisp:nil)
                        (nodes :initarg :nodes :type
                         (common-lisp:or node-list common-lisp:null) :accessor
                         %shard-nodes :initform common-lisp:nil)
                        (slots :initarg :slots :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %shard-slots :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %shard-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %shard-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'shard 'make-shard))
 (common-lisp:defun make-shard
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key number-of-nodes nodes slots status name)
   (common-lisp:apply #'common-lisp:make-instance 'shard
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "Slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "Nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass shard-configuration common-lisp:nil
                       ((replica-count :initarg :replica-count :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %shard-configuration-replica-count :initform
                         common-lisp:nil)
                        (slots :initarg :slots :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %shard-configuration-slots :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'shard-configuration 'make-shard-configuration))
 (common-lisp:defun make-shard-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replica-count slots)
   (common-lisp:apply #'common-lisp:make-instance 'shard-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shard-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shard-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "Slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-count))
      (common-lisp:list
       (common-lisp:cons "ReplicaCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shard-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass shard-configuration-request common-lisp:nil
                       ((shard-count :initarg :shard-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %shard-configuration-request-shard-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'shard-configuration-request
                    'make-shard-configuration-request))
 (common-lisp:defun make-shard-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shard-count)
   (common-lisp:apply #'common-lisp:make-instance 'shard-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          shard-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          shard-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-count))
      (common-lisp:list
       (common-lisp:cons "ShardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          shard-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass shard-detail common-lisp:nil
                       ((snapshot-creation-time :initarg
                         :snapshot-creation-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %shard-detail-snapshot-creation-time :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %shard-detail-size :initform common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or shard-configuration common-lisp:null)
                         :accessor %shard-detail-configuration :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %shard-detail-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'shard-detail 'make-shard-detail))
 (common-lisp:defun make-shard-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-creation-time size configuration
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'shard-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shard-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shard-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-creation-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shard-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype shard-details ()
   '(trivial-types:proper-list shard-detail))
 (common-lisp:defun |make-shard-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shard-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype shard-list () '(trivial-types:proper-list shard))
 (common-lisp:defun |make-shard-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition shard-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'shard-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition shards-per-cluster-quota-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'shards-per-cluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass slot-migration common-lisp:nil
                       ((progress-percentage :initarg :progress-percentage
                         :type (common-lisp:or double common-lisp:null)
                         :accessor %slot-migration-progress-percentage
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'slot-migration 'make-slot-migration))
 (common-lisp:defun make-slot-migration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key progress-percentage)
   (common-lisp:apply #'common-lisp:make-instance 'slot-migration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-migration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-migration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percentage))
      (common-lisp:list
       (common-lisp:cons "ProgressPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-migration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snapshot common-lisp:nil
                       ((data-tiering :initarg :data-tiering :type
                         (common-lisp:or data-tiering-status common-lisp:null)
                         :accessor %snapshot-data-tiering :initform
                         common-lisp:nil)
                        (cluster-configuration :initarg :cluster-configuration
                         :type
                         (common-lisp:or cluster-configuration
                                         common-lisp:null)
                         :accessor %snapshot-cluster-configuration :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %snapshot-arn :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %snapshot-kms-key-id :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %snapshot-source :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %snapshot-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %snapshot-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defun make-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-tiering cluster-configuration arn
                     kms-key-id source status name)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-configuration))
      (common-lisp:list
       (common-lisp:cons "ClusterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-tiering))
      (common-lisp:list
       (common-lisp:cons "DataTiering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snapshot-already-exists-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype snapshot-arns-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-snapshot-arns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshot-list () '(trivial-types:proper-list snapshot))
 (common-lisp:defun |make-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition snapshot-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-quota-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-quota-exceeded-fault)))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subnet common-lisp:nil
                       ((availability-zone :initarg :availability-zone :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor %subnet-availability-zone :initform
                         common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-identifier :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defun make-subnet
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zone identifier)
   (common-lisp:apply #'common-lisp:make-instance 'subnet
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subnet-group common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-group-arn :initform common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or subnet-list common-lisp:null)
                         :accessor %subnet-group-subnets :initform
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-group-vpc-id :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-group-description :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-group-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'subnet-group 'make-subnet-group))
 (common-lisp:defun make-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn subnets vpc-id description name)
   (common-lisp:apply #'common-lisp:make-instance 'subnet-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-already-exists-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-in-use-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-in-use-fault)))
(common-lisp:progn
 (common-lisp:deftype subnet-group-list ()
   '(trivial-types:proper-list subnet-group))
 (common-lisp:defun |make-subnet-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-quota-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-in-use
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-not-allowed-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-not-allowed-fault)))
(common-lisp:progn
 (common-lisp:define-condition subnet-quota-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-quota-exceeded-fault)))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition tag-quota-per-resource-exceeded
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-quota-per-resource-exceeded)))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-response-tag-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype target-bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition test-failover-not-available-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'test-failover-not-available-fault)))
(common-lisp:progn
 (common-lisp:defclass unprocessed-cluster common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %unprocessed-cluster-error-message :initform
                         common-lisp:nil)
                        (error-type :initarg :error-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %unprocessed-cluster-error-type :initform
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %unprocessed-cluster-cluster-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-cluster 'make-unprocessed-cluster))
 (common-lisp:defun make-unprocessed-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-type cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unprocessed-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unprocessed-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unprocessed-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-cluster-list ()
   '(trivial-types:proper-list unprocessed-cluster))
 (common-lisp:defun |make-unprocessed-cluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unprocessed-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or key-list common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %untag-resource-response-tag-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-aclrequest common-lisp:nil
                       ((user-names-to-remove :initarg :user-names-to-remove
                         :type
                         (common-lisp:or user-name-list-input common-lisp:null)
                         :accessor %update-aclrequest-user-names-to-remove
                         :initform common-lisp:nil)
                        (user-names-to-add :initarg :user-names-to-add :type
                         (common-lisp:or user-name-list-input common-lisp:null)
                         :accessor %update-aclrequest-user-names-to-add
                         :initform common-lisp:nil)
                        (aclname :initarg :aclname :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-aclrequest-aclname :initform
                         (common-lisp:error ":aclname is required"))))
 (common-lisp:export
  (common-lisp:list 'update-aclrequest 'make-update-aclrequest))
 (common-lisp:defun make-update-aclrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-names-to-remove user-names-to-add
                     aclname)
   (common-lisp:apply #'common-lisp:make-instance 'update-aclrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aclname))
      (common-lisp:list
       (common-lisp:cons "ACLName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-names-to-add))
      (common-lisp:list
       (common-lisp:cons "UserNamesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-names-to-remove))
      (common-lisp:list
       (common-lisp:cons "UserNamesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-aclresponse common-lisp:nil
                       ((acl :initarg :acl :type
                         (common-lisp:or acl common-lisp:null) :accessor
                         %update-aclresponse-acl :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-aclresponse 'make-update-aclresponse))
 (common-lisp:defun make-update-aclresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key acl)
   (common-lisp:apply #'common-lisp:make-instance 'update-aclresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:list
       (common-lisp:cons "ACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-request common-lisp:nil
                       ((aclname :initarg :aclname :type
                         (common-lisp:or aclname common-lisp:null) :accessor
                         %update-cluster-request-aclname :initform
                         common-lisp:nil)
                        (shard-configuration :initarg :shard-configuration
                         :type
                         (common-lisp:or shard-configuration-request
                                         common-lisp:null)
                         :accessor %update-cluster-request-shard-configuration
                         :initform common-lisp:nil)
                        (replica-configuration :initarg :replica-configuration
                         :type
                         (common-lisp:or replica-configuration-request
                                         common-lisp:null)
                         :accessor
                         %update-cluster-request-replica-configuration
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-engine-version :initform
                         common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-node-type :initform
                         common-lisp:nil)
                        (snapshot-retention-limit :initarg
                         :snapshot-retention-limit :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %update-cluster-request-snapshot-retention-limit
                         :initform common-lisp:nil)
                        (snapshot-window :initarg :snapshot-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-snapshot-window :initform
                         common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %update-cluster-request-parameter-group-name
                         :initform common-lisp:nil)
                        (sns-topic-status :initarg :sns-topic-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-sns-topic-status :initform
                         common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-sns-topic-arn :initform
                         common-lisp:nil)
                        (maintenance-window :initarg :maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-maintenance-window :initform
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-ids-list
                                         common-lisp:null)
                         :accessor %update-cluster-request-security-group-ids
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-description :initform
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-cluster-name :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cluster-request 'make-update-cluster-request))
 (common-lisp:defun make-update-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aclname shard-configuration
                     replica-configuration engine-version node-type
                     snapshot-retention-limit snapshot-window
                     parameter-group-name sns-topic-status sns-topic-arn
                     maintenance-window security-group-ids description
                     cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-window))
      (common-lisp:list
       (common-lisp:cons "MaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-status))
      (common-lisp:list
       (common-lisp:cons "SnsTopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-window))
      (common-lisp:list
       (common-lisp:cons "SnapshotWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-limit))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-configuration))
      (common-lisp:list
       (common-lisp:cons "ShardConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aclname))
      (common-lisp:list
       (common-lisp:cons "ACLName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %update-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-response 'make-update-cluster-response))
 (common-lisp:defun make-update-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-parameter-group-request common-lisp:nil
                       ((parameter-name-values :initarg :parameter-name-values
                         :type
                         (common-lisp:or parameter-name-value-list
                                         common-lisp:null)
                         :accessor
                         %update-parameter-group-request-parameter-name-values
                         :initform
                         (common-lisp:error
                          ":parameter-name-values is required"))
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %update-parameter-group-request-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-parameter-group-request
                    'make-update-parameter-group-request))
 (common-lisp:defun make-update-parameter-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-name-values
                     parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-parameter-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-name-values))
      (common-lisp:list
       (common-lisp:cons "ParameterNameValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-parameter-group-response common-lisp:nil
                       ((parameter-group :initarg :parameter-group :type
                         (common-lisp:or parameter-group common-lisp:null)
                         :accessor
                         %update-parameter-group-response-parameter-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-parameter-group-response
                    'make-update-parameter-group-response))
 (common-lisp:defun make-update-parameter-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-parameter-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subnet-group-request common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor %update-subnet-group-request-subnet-ids
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-subnet-group-request-description :initform
                         common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-subnet-group-request-subnet-group-name
                         :initform
                         (common-lisp:error
                          ":subnet-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-subnet-group-request
                    'make-update-subnet-group-request))
 (common-lisp:defun make-update-subnet-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids description subnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-subnet-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subnet-group-response common-lisp:nil
                       ((subnet-group :initarg :subnet-group :type
                         (common-lisp:or subnet-group common-lisp:null)
                         :accessor %update-subnet-group-response-subnet-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-subnet-group-response
                    'make-update-subnet-group-response))
 (common-lisp:defun make-update-subnet-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-group)
   (common-lisp:apply #'common-lisp:make-instance 'update-subnet-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group))
      (common-lisp:list
       (common-lisp:cons "SubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-request common-lisp:nil
                       ((access-string :initarg :access-string :type
                         (common-lisp:or access-string common-lisp:null)
                         :accessor %update-user-request-access-string :initform
                         common-lisp:nil)
                        (authentication-mode :initarg :authentication-mode
                         :type
                         (common-lisp:or authentication-mode common-lisp:null)
                         :accessor %update-user-request-authentication-mode
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %update-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defun make-update-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-string authentication-mode
                     user-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "AuthenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-string))
      (common-lisp:list
       (common-lisp:cons "AccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-response common-lisp:nil
                       ((user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %update-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defun make-update-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-arn :initform common-lisp:nil)
                        (authentication :initarg :authentication :type
                         (common-lisp:or authentication common-lisp:null)
                         :accessor %user-authentication :initform
                         common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-minimum-engine-version :initform
                         common-lisp:nil)
                        (aclnames :initarg :aclnames :type
                         (common-lisp:or aclname-list common-lisp:null)
                         :accessor %user-aclnames :initform common-lisp:nil)
                        (access-string :initarg :access-string :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-access-string :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defun make-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn authentication minimum-engine-version
                     aclnames access-string status name)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-string))
      (common-lisp:list
       (common-lisp:cons "AccessString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aclnames))
      (common-lisp:list
       (common-lisp:cons "ACLNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition user-already-exists-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun |make-user-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-name-list () '(trivial-types:proper-list user-name))
 (common-lisp:defun |make-user-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-name-list-input ()
   '(trivial-types:proper-list user-name))
 (common-lisp:defun |make-user-name-list-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition user-not-found-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition user-quota-exceeded-fault
     (memorydb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defun batch-update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-names service-update)
   (common-lisp:declare (common-lisp:ignorable cluster-names service-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchUpdateCluster"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-cluster))
(common-lisp:progn
 (common-lisp:defun copy-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-snapshot-name target-snapshot-name
                     target-bucket kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable source-snapshot-name target-snapshot-name
     target-bucket kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CopySnapshot"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-snapshot))
(common-lisp:progn
 (common-lisp:defun create-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aclname user-names tags)
   (common-lisp:declare (common-lisp:ignorable aclname user-names tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateACL"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-acl))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name node-type
                     parameter-group-name description num-shards
                     num-replicas-per-shard subnet-group-name
                     security-group-ids maintenance-window port sns-topic-arn
                     tlsenabled kms-key-id snapshot-arns snapshot-name
                     snapshot-retention-limit tags snapshot-window aclname
                     engine-version auto-minor-version-upgrade data-tiering)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name node-type parameter-group-name
     description num-shards num-replicas-per-shard subnet-group-name
     security-group-ids maintenance-window port sns-topic-arn tlsenabled
     kms-key-id snapshot-arns snapshot-name snapshot-retention-limit tags
     snapshot-window aclname engine-version auto-minor-version-upgrade
     data-tiering))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateCluster"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name family description
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name family description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateParameterGroup"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name snapshot-name kms-key-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name snapshot-name kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateSnapshot"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-snapshot))
(common-lisp:progn
 (common-lisp:defun create-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name description subnet-ids
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable subnet-group-name description subnet-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subnet-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateSubnetGroup"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subnet-group))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name authentication-mode
                     access-string tags)
   (common-lisp:declare
    (common-lisp:ignorable user-name authentication-mode access-string tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateUser"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun delete-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aclname)
   (common-lisp:declare (common-lisp:ignorable aclname))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteACL"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-acl))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name final-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name final-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteCluster"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteParameterGroup"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-name)
   (common-lisp:declare (common-lisp:ignorable snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteSnapshot"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name)
   (common-lisp:declare (common-lisp:ignorable subnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subnet-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteSubnetGroup"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subnet-group))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteUser"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun describe-acls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aclname max-results next-token)
   (common-lisp:declare (common-lisp:ignorable aclname max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-acls-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeACLs"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-acls))
(common-lisp:progn
 (common-lisp:defun describe-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token
                     show-shard-details)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token
     show-shard-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeClusters"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-clusters))
(common-lisp:progn
 (common-lisp:defun describe-engine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine-version parameter-group-family
                     max-results next-token default-only)
   (common-lisp:declare
    (common-lisp:ignorable engine-version parameter-group-family max-results
     next-token default-only))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-engine-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEngineVersions"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-engine-versions))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-name source-type start-time
                     end-time duration max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable source-name source-type start-time end-time duration
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEvents"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-parameter-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeParameterGroups"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-parameters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeParameters"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-parameters))
(common-lisp:progn
 (common-lisp:defun describe-reserved-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reservation-id reserved-nodes-offering-id
                     node-type duration offering-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable reservation-id reserved-nodes-offering-id node-type
     duration offering-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-reserved-nodes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeReservedNodes"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-reserved-nodes))
(common-lisp:progn
 (common-lisp:defun describe-reserved-nodes-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-nodes-offering-id node-type
                     duration offering-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable reserved-nodes-offering-id node-type duration
     offering-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-nodes-offerings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeReservedNodesOfferings"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-reserved-nodes-offerings))
(common-lisp:progn
 (common-lisp:defun describe-service-updates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-update-name cluster-names status
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable service-update-name cluster-names status max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-service-updates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeServiceUpdates"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-service-updates))
(common-lisp:progn
 (common-lisp:defun describe-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name snapshot-name source
                     next-token max-results show-detail)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name snapshot-name source next-token
     max-results show-detail))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSnapshots"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-subnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable subnet-group-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-subnet-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSubnetGroups"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-subnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable user-name filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeUsers"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-users))
(common-lisp:progn
 (common-lisp:defun failover-shard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name shard-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name shard-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-failover-shard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "FailoverShard"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'failover-shard))
(common-lisp:progn
 (common-lisp:defun list-allowed-node-type-updates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-allowed-node-type-updates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAllowedNodeTypeUpdates"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-allowed-node-type-updates))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTags"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-nodes-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-nodes-offering-id reservation-id
                     node-count tags)
   (common-lisp:declare
    (common-lisp:ignorable reserved-nodes-offering-id reservation-id node-count
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-nodes-offering-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PurchaseReservedNodesOffering"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'purchase-reserved-nodes-offering))
(common-lisp:progn
 (common-lisp:defun reset-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name all-parameters
                     parameter-names)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name all-parameters
     parameter-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResetParameterGroup"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-parameter-group))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aclname user-names-to-add
                     user-names-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable aclname user-names-to-add user-names-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateACL"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-acl))
(common-lisp:progn
 (common-lisp:defun update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name description
                     security-group-ids maintenance-window sns-topic-arn
                     sns-topic-status parameter-group-name snapshot-window
                     snapshot-retention-limit node-type engine-version
                     replica-configuration shard-configuration aclname)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name description security-group-ids
     maintenance-window sns-topic-arn sns-topic-status parameter-group-name
     snapshot-window snapshot-retention-limit node-type engine-version
     replica-configuration shard-configuration aclname))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateCluster"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster))
(common-lisp:progn
 (common-lisp:defun update-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name
                     parameter-name-values)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name parameter-name-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateParameterGroup"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-parameter-group))
(common-lisp:progn
 (common-lisp:defun update-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable subnet-group-name description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-subnet-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateSubnetGroup"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subnet-group))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name authentication-mode
                     access-string)
   (common-lisp:declare
    (common-lisp:ignorable user-name authentication-mode access-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'memorydb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateUser"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
