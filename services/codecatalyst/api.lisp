;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codecatalyst/api
  (:use)
  (:nicknames #:aws/codecatalyst)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codecatalyst/api)
(common-lisp:progn
 (common-lisp:defclass codecatalyst-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codecatalyst"))
 (common-lisp:export 'codecatalyst-request))
(common-lisp:progn
 (common-lisp:define-condition codecatalyst-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codecatalyst-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (codecatalyst-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-token-id () 'common-lisp:string)
(common-lisp:deftype access-token-name () 'common-lisp:string)
(common-lisp:deftype access-token-secret () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-token-summaries ()
   '(trivial-types:proper-list access-token-summary))
 (common-lisp:defun |make-access-token-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-token-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (access-token-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-token-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-token-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-token-name common-lisp:null))
   (expires-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-token-summary 'make-access-token-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-token-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-token-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-time))
      (common-lisp:list
       (common-lisp:cons "expiresTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-token-summary))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codecatalyst-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-token-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-token-name common-lisp:null))
   (expires-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-token-request
                    'make-create-access-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-time))
      (common-lisp:list
       (common-lisp:cons "expiresTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-token-response-"))
   (secret (common-lisp:error ":secret is required") :type
    (common-lisp:or access-token-secret common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or access-token-name common-lisp:null))
   (expires-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-token-response
                    'make-create-access-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret))
      (common-lisp:list
       (common-lisp:cons "secret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-time))
      (common-lisp:list
       (common-lisp:cons "expiresTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dev-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dev-environment-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (repositories common-lisp:nil :type
    (common-lisp:or repositories-input common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or create-dev-environment-request-alias-string
                    common-lisp:null))
   (ides common-lisp:nil :type
    (common-lisp:or ide-configuration-list common-lisp:null))
   (instance-type (common-lisp:error ":instancetype is required") :type
    (common-lisp:or instance-type common-lisp:null))
   (inactivity-timeout-minutes common-lisp:nil :type
    (common-lisp:or inactivity-timeout-minutes common-lisp:null))
   (persistent-storage (common-lisp:error ":persistentstorage is required")
    :type (common-lisp:or persistent-storage-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dev-environment-request
                    'make-create-dev-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent-storage))
      (common-lisp:list
       (common-lisp:cons "persistentStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-request))
   common-lisp:nil))
(common-lisp:deftype create-dev-environment-request-alias-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-dev-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dev-environment-response-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dev-environment-response
                    'make-create-dev-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or project-display-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or project-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-response-"))
   (space-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-response 'make-create-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-source-repository-branch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-source-repository-branch-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (source-repository-name
    (common-lisp:error ":sourcerepositoryname is required") :type
    (common-lisp:or source-repository-name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or source-repository-branch-string common-lisp:null))
   (head-commit-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-source-repository-branch-request
                    'make-create-source-repository-branch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'head-commit-id))
      (common-lisp:list
       (common-lisp:cons "headCommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-source-repository-branch-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-source-repository-branch-response-"))
   (ref common-lisp:nil :type
    (common-lisp:or source-repository-branch-ref-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or source-repository-branch-string common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (head-commit-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-source-repository-branch-response
                    'make-create-source-repository-branch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ref))
      (common-lisp:list
       (common-lisp:cons "ref"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'head-commit-id))
      (common-lisp:list
       (common-lisp:cons "headCommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-token-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-token-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-token-request
                    'make-delete-access-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-token-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-access-token-response
                    'make-delete-access-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dev-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dev-environment-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dev-environment-request
                    'make-delete-dev-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dev-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dev-environment-response-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dev-environment-response
                    'make-delete-dev-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dev-environment-access-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-dev-environment-access-details-"))
   (stream-url (common-lisp:error ":streamurl is required") :type
    (common-lisp:or sensitive-string common-lisp:null))
   (token-value (common-lisp:error ":tokenvalue is required") :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dev-environment-access-details
                    'make-dev-environment-access-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-access-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-access-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-url))
      (common-lisp:list
       (common-lisp:cons "streamUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-value))
      (common-lisp:list
       (common-lisp:cons "tokenValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-access-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dev-environment-repository-summaries ()
   '(trivial-types:proper-list dev-environment-repository-summary))
 (common-lisp:defun |make-dev-environment-repository-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dev-environment-repository-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dev-environment-repository-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-dev-environment-repository-summary-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or source-repository-name-string common-lisp:null))
   (branch-name common-lisp:nil :type
    (common-lisp:or source-repository-branch-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dev-environment-repository-summary
                    'make-dev-environment-repository-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-repository-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-repository-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-repository-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dev-environment-session-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-dev-environment-session-configuration-"))
   (session-type (common-lisp:error ":sessiontype is required") :type
    (common-lisp:or dev-environment-session-type common-lisp:null))
   (execute-command-session-configuration common-lisp:nil :type
    (common-lisp:or execute-command-session-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dev-environment-session-configuration
                    'make-dev-environment-session-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-session-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-session-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-type))
      (common-lisp:list
       (common-lisp:cons "sessionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execute-command-session-configuration))
      (common-lisp:list
       (common-lisp:cons "executeCommandSessionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-session-configuration))
   common-lisp:nil))
(common-lisp:deftype dev-environment-session-type () 'common-lisp:string)
(common-lisp:deftype dev-environment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dev-environment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-dev-environment-summary-"))
   (space-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (project-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (creator-id (common-lisp:error ":creatorid is required") :type
    (common-lisp:or dev-environment-summary-creator-id-string
                    common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or dev-environment-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or status-reason common-lisp:null))
   (repositories (common-lisp:error ":repositories is required") :type
    (common-lisp:or dev-environment-repository-summaries common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or dev-environment-summary-alias-string common-lisp:null))
   (ides common-lisp:nil :type (common-lisp:or ides common-lisp:null))
   (instance-type (common-lisp:error ":instancetype is required") :type
    (common-lisp:or instance-type common-lisp:null))
   (inactivity-timeout-minutes
    (common-lisp:error ":inactivitytimeoutminutes is required") :type
    (common-lisp:or inactivity-timeout-minutes common-lisp:null))
   (persistent-storage (common-lisp:error ":persistentstorage is required")
    :type (common-lisp:or persistent-storage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dev-environment-summary 'make-dev-environment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "creatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent-storage))
      (common-lisp:list
       (common-lisp:cons "persistentStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-summary))
   common-lisp:nil))
(common-lisp:deftype dev-environment-summary-alias-string ()
  'common-lisp:string)
(common-lisp:deftype dev-environment-summary-creator-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dev-environment-summary-list ()
   '(trivial-types:proper-list dev-environment-summary))
 (common-lisp:defun |make-dev-environment-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dev-environment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (email-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-email-address-"))
   (email common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (verified common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'email-address 'make-email-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input email-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input email-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verified))
      (common-lisp:list
       (common-lisp:cons "verified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input email-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-log-entries ()
   '(trivial-types:proper-list event-log-entry))
 (common-lisp:defun |make-event-log-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-log-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-log-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-log-entry-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null))
   (event-name (common-lisp:error ":eventname is required") :type
    (common-lisp:or string common-lisp:null))
   (event-type (common-lisp:error ":eventtype is required") :type
    (common-lisp:or string common-lisp:null))
   (event-category (common-lisp:error ":eventcategory is required") :type
    (common-lisp:or string common-lisp:null))
   (event-source (common-lisp:error ":eventsource is required") :type
    (common-lisp:or string common-lisp:null))
   (event-time (common-lisp:error ":eventtime is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (operation-type (common-lisp:error ":operationtype is required") :type
    (common-lisp:or operation-type common-lisp:null))
   (user-identity (common-lisp:error ":useridentity is required") :type
    (common-lisp:or user-identity common-lisp:null))
   (project-information common-lisp:nil :type
    (common-lisp:or project-information common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-payload common-lisp:nil :type
    (common-lisp:or event-payload common-lisp:null))
   (response-payload common-lisp:nil :type
    (common-lisp:or event-payload common-lisp:null))
   (error-code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (user-agent common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-log-entry 'make-event-log-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-log-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-log-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-name))
      (common-lisp:list
       (common-lisp:cons "eventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-category))
      (common-lisp:list
       (common-lisp:cons "eventCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "eventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "eventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "operationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identity))
      (common-lisp:list
       (common-lisp:cons "userIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-information))
      (common-lisp:list
       (common-lisp:cons "projectInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payload))
      (common-lisp:list
       (common-lisp:cons "requestPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-payload))
      (common-lisp:list
       (common-lisp:cons "responsePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-address))
      (common-lisp:list
       (common-lisp:cons "sourceIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-agent))
      (common-lisp:list
       (common-lisp:cons "userAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-log-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-payload-"))
   (content-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-payload 'make-event-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (execute-command-session-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-execute-command-session-configuration-"))
   (command (common-lisp:error ":command is required") :type
    (common-lisp:or execute-command-session-configuration-command-string
                    common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or execute-command-session-configuration-arguments
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execute-command-session-configuration
                    'make-execute-command-session-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-session-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-session-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-session-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype execute-command-session-configuration-arguments ()
   '(trivial-types:proper-list
     execute-command-session-configuration-arguments-member-string))
 (common-lisp:defun |make-execute-command-session-configuration-arguments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            execute-command-session-configuration-arguments-member-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype execute-command-session-configuration-arguments-member-string
                     ()
  'common-lisp:string)
(common-lisp:deftype execute-command-session-configuration-command-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or string-list common-lisp:null))
   (comparison-operator common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dev-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dev-environment-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-environment-request
                    'make-get-dev-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dev-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dev-environment-response-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (creator-id (common-lisp:error ":creatorid is required") :type
    (common-lisp:or get-dev-environment-response-creator-id-string
                    common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or dev-environment-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or status-reason common-lisp:null))
   (repositories (common-lisp:error ":repositories is required") :type
    (common-lisp:or dev-environment-repository-summaries common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or get-dev-environment-response-alias-string
                    common-lisp:null))
   (ides common-lisp:nil :type (common-lisp:or ides common-lisp:null))
   (instance-type (common-lisp:error ":instancetype is required") :type
    (common-lisp:or instance-type common-lisp:null))
   (inactivity-timeout-minutes
    (common-lisp:error ":inactivitytimeoutminutes is required") :type
    (common-lisp:or inactivity-timeout-minutes common-lisp:null))
   (persistent-storage (common-lisp:error ":persistentstorage is required")
    :type (common-lisp:or persistent-storage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-environment-response
                    'make-get-dev-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "creatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent-storage))
      (common-lisp:list
       (common-lisp:cons "persistentStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-response))
   common-lisp:nil))
(common-lisp:deftype get-dev-environment-response-alias-string ()
  'common-lisp:string)
(common-lisp:deftype get-dev-environment-response-creator-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-project-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-project-request 'make-get-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-project-response-"))
   (space-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-project-response 'make-get-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-source-repository-clone-urls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-source-repository-clone-urls-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (source-repository-name
    (common-lisp:error ":sourcerepositoryname is required") :type
    (common-lisp:or source-repository-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-source-repository-clone-urls-request
                    'make-get-source-repository-clone-urls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-source-repository-clone-urls-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-source-repository-clone-urls-response-"))
   (https (common-lisp:error ":https is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-source-repository-clone-urls-response
                    'make-get-source-repository-clone-urls-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https))
      (common-lisp:list
       (common-lisp:cons "https"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-space-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-space-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-space-request 'make-get-space-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-space-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-space-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-space-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-space-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-space-response-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (region-name (common-lisp:error ":regionname is required") :type
    (common-lisp:or region-string common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-space-response 'make-get-space-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-space-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-space-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-space-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-request 'make-get-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-response-"))
   (subscription-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (aws-account-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-response
                    'make-get-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-type))
      (common-lisp:list
       (common-lisp:cons "subscriptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-name))
      (common-lisp:list
       (common-lisp:cons "awsAccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-details-request-"))
   (id common-lisp:nil :type
    (common-lisp:or get-user-details-request-id-string common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or get-user-details-request-user-name-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-details-request 'make-get-user-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-request))
   common-lisp:nil))
(common-lisp:deftype get-user-details-request-id-string () 'common-lisp:string)
(common-lisp:deftype get-user-details-request-user-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-details-response-"))
   (user-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (primary-email common-lisp:nil :type
    (common-lisp:or email-address common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-details-response
                    'make-get-user-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-email))
      (common-lisp:list
       (common-lisp:cons "primaryEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ide (:copier common-lisp:nil) (:conc-name "struct-shape-ide-"))
   (runtime common-lisp:nil :type
    (common-lisp:or ide-runtime-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or ide-name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ide 'make-ide))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ide))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ide))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ide))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ide-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ide-configuration-"))
   (runtime common-lisp:nil :type
    (common-lisp:or ide-configuration-runtime-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or ide-configuration-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ide-configuration 'make-ide-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ide-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ide-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ide-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ide-configuration-list ()
   '(trivial-types:proper-list ide-configuration))
 (common-lisp:defun |make-ide-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ide-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ide-configuration-name-string () 'common-lisp:string)
(common-lisp:deftype ide-configuration-runtime-string () 'common-lisp:string)
(common-lisp:deftype ide-name-string () 'common-lisp:string)
(common-lisp:deftype ide-runtime-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ides () '(trivial-types:proper-list ide))
 (common-lisp:defun |make-ides|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ide))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inactivity-timeout-minutes () 'common-lisp:integer)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-tokens-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-tokens-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-access-tokens-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or list-access-tokens-request-next-token-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-tokens-request
                    'make-list-access-tokens-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-request))
   common-lisp:nil))
(common-lisp:deftype list-access-tokens-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-access-tokens-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-tokens-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-tokens-response-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or access-token-summaries common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-tokens-response
                    'make-list-access-tokens-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dev-environments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dev-environments-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or list-dev-environments-request-next-token-string
                    common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-dev-environments-request-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dev-environments-request
                    'make-list-dev-environments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-request))
   common-lisp:nil))
(common-lisp:deftype list-dev-environments-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-dev-environments-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-dev-environments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dev-environments-response-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or dev-environment-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dev-environments-response
                    'make-list-dev-environments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-logs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-logs-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (event-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or list-event-logs-request-next-token-string
                    common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-event-logs-request-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-logs-request 'make-list-event-logs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-name))
      (common-lisp:list
       (common-lisp:cons "eventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-request))
   common-lisp:nil))
(common-lisp:deftype list-event-logs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-event-logs-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-logs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-logs-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or event-log-entries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-logs-response 'make-list-event-logs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or list-projects-request-next-token-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-projects-request-max-results-integer
                    common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or project-list-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:deftype list-projects-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-projects-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or project-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-response 'make-list-projects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-source-repositories-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-source-repositories-item-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or source-repository-id-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or source-repository-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or source-repository-description-string common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-source-repositories-item
                    'make-list-source-repositories-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-source-repositories-items ()
   '(trivial-types:proper-list list-source-repositories-item))
 (common-lisp:defun |make-list-source-repositories-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-source-repositories-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-source-repositories-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-source-repositories-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or list-source-repositories-request-next-token-string
                    common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-source-repositories-request-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-source-repositories-request
                    'make-list-source-repositories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-request))
   common-lisp:nil))
(common-lisp:deftype list-source-repositories-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-source-repositories-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-source-repositories-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-source-repositories-response-"))
   (items common-lisp:nil :type
    (common-lisp:or list-source-repositories-items common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-source-repositories-response
                    'make-list-source-repositories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-source-repository-branches-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-source-repository-branches-item-"))
   (ref common-lisp:nil :type
    (common-lisp:or source-repository-branch-ref-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or source-repository-branch-string common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (head-commit-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-source-repository-branches-item
                    'make-list-source-repository-branches-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ref))
      (common-lisp:list
       (common-lisp:cons "ref"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'head-commit-id))
      (common-lisp:list
       (common-lisp:cons "headCommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-source-repository-branches-items ()
   '(trivial-types:proper-list list-source-repository-branches-item))
 (common-lisp:defun |make-list-source-repository-branches-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-source-repository-branches-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-source-repository-branches-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-source-repository-branches-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (source-repository-name
    (common-lisp:error ":sourcerepositoryname is required") :type
    (common-lisp:or source-repository-name-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or list-source-repository-branches-request-next-token-string
                    common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-source-repository-branches-request-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-source-repository-branches-request
                    'make-list-source-repository-branches-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-request))
   common-lisp:nil))
(common-lisp:deftype list-source-repository-branches-request-max-results-integer
                     ()
  'common-lisp:integer)
(common-lisp:deftype list-source-repository-branches-request-next-token-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-source-repository-branches-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-source-repository-branches-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or list-source-repository-branches-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-source-repository-branches-response
                    'make-list-source-repository-branches-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-spaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-spaces-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or list-spaces-request-next-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-spaces-request 'make-list-spaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-spaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-spaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-spaces-request))
   common-lisp:nil))
(common-lisp:deftype list-spaces-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-spaces-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-spaces-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or space-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-spaces-response 'make-list-spaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-spaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-spaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-spaces-response))
   common-lisp:nil))
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (persistent-storage (:copier common-lisp:nil)
      (:conc-name "struct-shape-persistent-storage-"))
   (size-in-gi-b (common-lisp:error ":sizeingib is required") :type
    (common-lisp:or persistent-storage-size-in-gi-binteger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'persistent-storage 'make-persistent-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input persistent-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input persistent-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gi-b))
      (common-lisp:list
       (common-lisp:cons "sizeInGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input persistent-storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (persistent-storage-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-persistent-storage-configuration-"))
   (size-in-gi-b (common-lisp:error ":sizeingib is required") :type
    (common-lisp:or persistent-storage-configuration-size-in-gi-binteger
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'persistent-storage-configuration
                    'make-persistent-storage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          persistent-storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          persistent-storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gi-b))
      (common-lisp:list
       (common-lisp:cons "sizeInGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          persistent-storage-configuration))
   common-lisp:nil))
(common-lisp:deftype persistent-storage-configuration-size-in-gi-binteger ()
  'common-lisp:integer)
(common-lisp:deftype persistent-storage-size-in-gi-binteger ()
  'common-lisp:integer)
(common-lisp:deftype project-description () 'common-lisp:string)
(common-lisp:deftype project-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (project-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-information-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (project-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'project-information 'make-project-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (project-list-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-list-filter-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or filter-key common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or string-list common-lisp:null))
   (comparison-operator common-lisp:nil :type
    (common-lisp:or comparison-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'project-list-filter 'make-project-list-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-list-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-list-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-list-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-list-filters ()
   '(trivial-types:proper-list project-list-filter))
 (common-lisp:defun |make-project-list-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-list-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype project-summaries ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun |make-project-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (project-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-summary-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:deftype region-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repositories-input ()
   '(trivial-types:proper-list repository-input))
 (common-lisp:defun |make-repositories-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or source-repository-name-string common-lisp:null))
   (branch-name common-lisp:nil :type
    (common-lisp:or source-repository-branch-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-input 'make-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codecatalyst-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (codecatalyst-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype source-repository-branch-ref-string () 'common-lisp:string)
(common-lisp:deftype source-repository-branch-string () 'common-lisp:string)
(common-lisp:deftype source-repository-description-string ()
  'common-lisp:string)
(common-lisp:deftype source-repository-id-string () 'common-lisp:string)
(common-lisp:deftype source-repository-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype space-summaries ()
   '(trivial-types:proper-list space-summary))
 (common-lisp:defun |make-space-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list space-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (space-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-space-summary-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (region-name (common-lisp:error ":regionname is required") :type
    (common-lisp:or region-string common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'space-summary 'make-space-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input space-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input space-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input space-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dev-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dev-environment-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (ides common-lisp:nil :type
    (common-lisp:or ide-configuration-list common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (inactivity-timeout-minutes common-lisp:nil :type
    (common-lisp:or inactivity-timeout-minutes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dev-environment-request
                    'make-start-dev-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dev-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dev-environment-response-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or dev-environment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dev-environment-response
                    'make-start-dev-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dev-environment-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dev-environment-session-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (session-configuration
    (common-lisp:error ":sessionconfiguration is required") :type
    (common-lisp:or dev-environment-session-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dev-environment-session-request
                    'make-start-dev-environment-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-configuration))
      (common-lisp:list
       (common-lisp:cons "sessionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dev-environment-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dev-environment-session-response-"))
   (access-details (common-lisp:error ":accessdetails is required") :type
    (common-lisp:or dev-environment-access-details common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or start-dev-environment-session-response-session-id-string
                    common-lisp:null))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dev-environment-session-response
                    'make-start-dev-environment-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-details))
      (common-lisp:list
       (common-lisp:cons "accessDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-response))
   common-lisp:nil))
(common-lisp:deftype start-dev-environment-session-response-session-id-string
                     ()
  'common-lisp:string)
(common-lisp:deftype status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dev-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-dev-environment-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dev-environment-request
                    'make-stop-dev-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dev-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-dev-environment-response-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or dev-environment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dev-environment-response
                    'make-stop-dev-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codecatalyst-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-dev-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dev-environment-request-"))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or update-dev-environment-request-alias-string
                    common-lisp:null))
   (ides common-lisp:nil :type
    (common-lisp:or ide-configuration-list common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (inactivity-timeout-minutes common-lisp:nil :type
    (common-lisp:or inactivity-timeout-minutes common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dev-environment-request
                    'make-update-dev-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-request))
   common-lisp:nil))
(common-lisp:deftype update-dev-environment-request-alias-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-dev-environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dev-environment-response-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (space-name (common-lisp:error ":spacename is required") :type
    (common-lisp:or name-string common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name-string common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or update-dev-environment-response-alias-string
                    common-lisp:null))
   (ides common-lisp:nil :type
    (common-lisp:or ide-configuration-list common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (inactivity-timeout-minutes common-lisp:nil :type
    (common-lisp:or inactivity-timeout-minutes common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dev-environment-response
                    'make-update-dev-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-response))
   common-lisp:nil))
(common-lisp:deftype update-dev-environment-response-alias-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-identity (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-identity-"))
   (user-type (common-lisp:error ":usertype is required") :type
    (common-lisp:or user-type common-lisp:null))
   (principal-id (common-lisp:error ":principalid is required") :type
    (common-lisp:or string common-lisp:null))
   (user-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-identity 'make-user-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "userType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity))
   common-lisp:nil))
(common-lisp:deftype user-type () 'common-lisp:string)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codecatalyst-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-session-response-"))
   (identity common-lisp:nil :type
    (common-lisp:or verify-session-response-identity-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-session-response 'make-verify-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-session-response))
   common-lisp:nil))
(common-lisp:deftype verify-session-response-identity-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-access-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name expires-time)
   (common-lisp:declare (common-lisp:ignorable name expires-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v1/accessTokens"
                                                        "CreateAccessToken"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-token))
(common-lisp:progn
 (common-lisp:defun create-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name repositories
                     client-token alias ides instance-type
                     inactivity-timeout-minutes persistent-storage)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name repositories client-token
     alias ides instance-type inactivity-timeout-minutes persistent-storage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "CreateDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dev-environment))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name display-name description)
   (common-lisp:declare
    (common-lisp:ignorable space-name display-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))))
                                                        "CreateProject"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun create-source-repository-branch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name
                     source-repository-name name head-commit-id)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name source-repository-name name
     head-commit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-source-repository-branch-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/sourceRepositories/~A/branches/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-repository-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateSourceRepositoryBranch"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-source-repository-branch))
(common-lisp:progn
 (common-lisp:defun delete-access-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/accessTokens/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteAccessToken"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-token))
(common-lisp:progn
 (common-lisp:defun delete-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id)
   (common-lisp:declare (common-lisp:ignorable space-name project-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dev-environment))
(common-lisp:progn
 (common-lisp:defun get-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id)
   (common-lisp:declare (common-lisp:ignorable space-name project-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dev-environment))
(common-lisp:progn
 (common-lisp:defun get-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name name)
   (common-lisp:declare (common-lisp:ignorable space-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetProject"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-project))
(common-lisp:progn
 (common-lisp:defun get-source-repository-clone-urls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name
                     source-repository-name)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name source-repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-source-repository-clone-urls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/sourceRepositories/~A/cloneUrls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-repository-name))))
                                                        "GetSourceRepositoryCloneUrls"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-source-repository-clone-urls))
(common-lisp:progn
 (common-lisp:defun get-space
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-space-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetSpace"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-space))
(common-lisp:progn
 (common-lisp:defun get-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name)
   (common-lisp:declare (common-lisp:ignorable space-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscription-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/subscription"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))))
                                                        "GetSubscription"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-subscription))
(common-lisp:progn
 (common-lisp:defun get-user-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id user-name)
   (common-lisp:declare (common-lisp:ignorable id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/userDetails"
                                                        "GetUserDetails"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user-details))
(common-lisp:progn
 (common-lisp:defun list-access-tokens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-tokens-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/accessTokens"
                                                        "ListAccessTokens"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-tokens))
(common-lisp:progn
 (common-lisp:defun list-dev-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dev-environments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "ListDevEnvironments"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dev-environments))
(common-lisp:progn
 (common-lisp:defun list-event-logs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name start-time end-time event-name
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable space-name start-time end-time event-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-logs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/eventLogs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))))
                                                        "ListEventLogs"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-logs))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name next-token max-results
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable space-name next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))))
                                                        "ListProjects"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-source-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-source-repositories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/sourceRepositories"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "ListSourceRepositories"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-source-repositories))
(common-lisp:progn
 (common-lisp:defun list-source-repository-branches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name
                     source-repository-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name source-repository-name
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-source-repository-branches-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/sourceRepositories/~A/branches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-repository-name))))
                                                        "ListSourceRepositoryBranches"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-source-repository-branches))
(common-lisp:progn
 (common-lisp:defun list-spaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-spaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/spaces"
                                                        "ListSpaces"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-spaces))
(common-lisp:progn
 (common-lisp:defun start-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id ides
                     instance-type inactivity-timeout-minutes)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name id ides instance-type
     inactivity-timeout-minutes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StartDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-dev-environment))
(common-lisp:progn
 (common-lisp:defun start-dev-environment-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id
                     session-configuration)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name id session-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-dev-environment-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A/session"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StartDevEnvironmentSession"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-dev-environment-session))
(common-lisp:progn
 (common-lisp:defun stop-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id)
   (common-lisp:declare (common-lisp:ignorable space-name project-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StopDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-dev-environment))
(common-lisp:progn
 (common-lisp:defun update-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id alias ides
                     instance-type inactivity-timeout-minutes client-token)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name id alias ides instance-type
     inactivity-timeout-minutes client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dev-environment))
(common-lisp:progn
 (common-lisp:defun verify-session ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'codecatalyst-request :method "GET" :path
                                "/session" :params
                                `(("Action" ,@"VerifySession")
                                  ("Version" ,@"2022-09-28"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'verify-session))
