;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codecatalyst/api
  (:use)
  (:nicknames #:aws/codecatalyst)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codecatalyst/api)
(common-lisp:progn
 (common-lisp:defclass codecatalyst-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codecatalyst" :protocol
                        :rest-json))
 (common-lisp:export 'codecatalyst-request))
(common-lisp:progn
 (common-lisp:define-condition codecatalyst-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codecatalyst-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (codecatalyst-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-token-id () 'common-lisp:string)
(common-lisp:deftype access-token-name () 'common-lisp:string)
(common-lisp:deftype access-token-secret () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-token-summaries ()
   '(trivial-types:proper-list access-token-summary))
 (common-lisp:defun |make-access-token-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-token-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass access-token-summary common-lisp:nil
                       ((expires-time :initarg :|expiresTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %access-token-summary-expires-time :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or access-token-name common-lisp:null)
                         :accessor %access-token-summary-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or access-token-id common-lisp:null)
                         :accessor %access-token-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'access-token-summary 'make-access-token-summary))
 (common-lisp:defun make-access-token-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expires-time name id)
   (common-lisp:apply #'common-lisp:make-instance 'access-token-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-token-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-token-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-time))
      (common-lisp:list
       (common-lisp:cons "expiresTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-token-summary))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codecatalyst-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-access-token-request common-lisp:nil
                       ((expires-time :initarg :|expiresTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %create-access-token-request-expires-time
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or access-token-name common-lisp:null)
                         :accessor %create-access-token-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-access-token-request
                    'make-create-access-token-request))
 (common-lisp:defun make-create-access-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expires-time name)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-time))
      (common-lisp:list
       (common-lisp:cons "expiresTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-token-response common-lisp:nil
                       ((access-token-id :initarg :|accessTokenId| :type
                         (common-lisp:or access-token-id common-lisp:null)
                         :accessor
                         %create-access-token-response-access-token-id
                         :initform
                         (common-lisp:error ":accesstokenid is required"))
                        (expires-time :initarg :|expiresTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %create-access-token-response-expires-time
                         :initform
                         (common-lisp:error ":expirestime is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or access-token-name common-lisp:null)
                         :accessor %create-access-token-response-name :initform
                         (common-lisp:error ":name is required"))
                        (secret :initarg :|secret| :type
                         (common-lisp:or access-token-secret common-lisp:null)
                         :accessor %create-access-token-response-secret
                         :initform (common-lisp:error ":secret is required"))))
 (common-lisp:export
  (common-lisp:list 'create-access-token-response
                    'make-create-access-token-response))
 (common-lisp:defun make-create-access-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-token-id expires-time name secret)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret))
      (common-lisp:list
       (common-lisp:cons "secret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-time))
      (common-lisp:list
       (common-lisp:cons "expiresTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token-id))
      (common-lisp:list
       (common-lisp:cons "accessTokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dev-environment-request common-lisp:nil
                       ((persistent-storage :initarg :|persistentStorage| :type
                         (common-lisp:or persistent-storage-configuration
                                         common-lisp:null)
                         :accessor
                         %create-dev-environment-request-persistent-storage
                         :initform
                         (common-lisp:error ":persistentstorage is required"))
                        (inactivity-timeout-minutes :initarg
                         :|inactivityTimeoutMinutes| :type
                         (common-lisp:or inactivity-timeout-minutes
                                         common-lisp:null)
                         :accessor
                         %create-dev-environment-request-inactivity-timeout-minutes
                         :initform common-lisp:nil)
                        (instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         %create-dev-environment-request-instance-type
                         :initform
                         (common-lisp:error ":instancetype is required"))
                        (ides :initarg :|ides| :type
                         (common-lisp:or ide-configuration-list
                                         common-lisp:null)
                         :accessor %create-dev-environment-request-ides
                         :initform common-lisp:nil)
                        (alias :initarg :|alias| :type
                         (common-lisp:or
                          create-dev-environment-request-alias-string
                          common-lisp:null)
                         :accessor %create-dev-environment-request-alias
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-dev-environment-request-client-token
                         :initform common-lisp:nil)
                        (repositories :initarg :|repositories| :type
                         (common-lisp:or repositories-input common-lisp:null)
                         :accessor %create-dev-environment-request-repositories
                         :initform common-lisp:nil)
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %create-dev-environment-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %create-dev-environment-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-dev-environment-request
                    'make-create-dev-environment-request))
 (common-lisp:defun make-create-dev-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key persistent-storage
                     inactivity-timeout-minutes instance-type ides alias
                     client-token repositories project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dev-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent-storage))
      (common-lisp:list
       (common-lisp:cons "persistentStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-request))
   common-lisp:nil))
(common-lisp:deftype create-dev-environment-request-alias-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-dev-environment-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %create-dev-environment-response-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %create-dev-environment-response-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %create-dev-environment-response-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-dev-environment-response
                    'make-create-dev-environment-response))
 (common-lisp:defun make-create-dev-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dev-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-request common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or project-description common-lisp:null)
                         :accessor %create-project-request-description
                         :initform common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or project-display-name common-lisp:null)
                         :accessor %create-project-request-display-name
                         :initform
                         (common-lisp:error ":displayname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %create-project-request-space-name :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defun make-create-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description display-name space-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-response common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-project-response-description :initform
                         common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-project-response-display-name :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %create-project-response-name :initform
                         (common-lisp:error ":name is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %create-project-response-space-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-project-response 'make-create-project-response))
 (common-lisp:defun make-create-project-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description display-name name space-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-source-repository-branch-request common-lisp:nil
                       ((head-commit-id :initarg :|headCommitId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-source-repository-branch-request-head-commit-id
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or source-repository-branch-string
                                         common-lisp:null)
                         :accessor
                         %create-source-repository-branch-request-name
                         :initform (common-lisp:error ":name is required"))
                        (source-repository-name :initarg
                         :|sourceRepositoryName| :type
                         (common-lisp:or source-repository-name-string
                                         common-lisp:null)
                         :accessor
                         %create-source-repository-branch-request-source-repository-name
                         :initform
                         (common-lisp:error
                          ":sourcerepositoryname is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %create-source-repository-branch-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %create-source-repository-branch-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-source-repository-branch-request
                    'make-create-source-repository-branch-request))
 (common-lisp:defun make-create-source-repository-branch-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key head-commit-id name
                     source-repository-name project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-source-repository-branch-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'head-commit-id))
      (common-lisp:list
       (common-lisp:cons "headCommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-source-repository-branch-response common-lisp:nil
                       ((head-commit-id :initarg :|headCommitId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-source-repository-branch-response-head-commit-id
                         :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %create-source-repository-branch-response-last-updated-time
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or source-repository-branch-string
                                         common-lisp:null)
                         :accessor
                         %create-source-repository-branch-response-name
                         :initform common-lisp:nil)
                        (ref :initarg :|ref| :type
                         (common-lisp:or source-repository-branch-ref-string
                                         common-lisp:null)
                         :accessor
                         %create-source-repository-branch-response-ref
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-source-repository-branch-response
                    'make-create-source-repository-branch-response))
 (common-lisp:defun make-create-source-repository-branch-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key head-commit-id last-updated-time name
                     ref)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-source-repository-branch-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ref))
      (common-lisp:list
       (common-lisp:cons "ref"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'head-commit-id))
      (common-lisp:list
       (common-lisp:cons "headCommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-source-repository-branch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-token-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or access-token-id common-lisp:null)
                         :accessor %delete-access-token-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-access-token-request
                    'make-delete-access-token-request))
 (common-lisp:defun make-delete-access-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-token-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-access-token-response
                    'make-delete-access-token-response))
 (common-lisp:defun make-delete-access-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dev-environment-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-dev-environment-request-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %delete-dev-environment-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %delete-dev-environment-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dev-environment-request
                    'make-delete-dev-environment-request))
 (common-lisp:defun make-delete-dev-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dev-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dev-environment-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-dev-environment-response-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %delete-dev-environment-response-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %delete-dev-environment-response-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dev-environment-response
                    'make-delete-dev-environment-response))
 (common-lisp:defun make-delete-dev-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dev-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dev-environment-access-details common-lisp:nil
                       ((token-value :initarg :|tokenValue| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %dev-environment-access-details-token-value
                         :initform
                         (common-lisp:error ":tokenvalue is required"))
                        (stream-url :initarg :|streamUrl| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %dev-environment-access-details-stream-url
                         :initform
                         (common-lisp:error ":streamurl is required"))))
 (common-lisp:export
  (common-lisp:list 'dev-environment-access-details
                    'make-dev-environment-access-details))
 (common-lisp:defun make-dev-environment-access-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token-value stream-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'dev-environment-access-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-access-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-access-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-url))
      (common-lisp:list
       (common-lisp:cons "streamUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-value))
      (common-lisp:list
       (common-lisp:cons "tokenValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-access-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dev-environment-repository-summaries ()
   '(trivial-types:proper-list dev-environment-repository-summary))
 (common-lisp:defun |make-dev-environment-repository-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dev-environment-repository-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dev-environment-repository-summary common-lisp:nil
                       ((branch-name :initarg :|branchName| :type
                         (common-lisp:or source-repository-branch-string
                                         common-lisp:null)
                         :accessor
                         %dev-environment-repository-summary-branch-name
                         :initform common-lisp:nil)
                        (repository-name :initarg :|repositoryName| :type
                         (common-lisp:or source-repository-name-string
                                         common-lisp:null)
                         :accessor
                         %dev-environment-repository-summary-repository-name
                         :initform
                         (common-lisp:error ":repositoryname is required"))))
 (common-lisp:export
  (common-lisp:list 'dev-environment-repository-summary
                    'make-dev-environment-repository-summary))
 (common-lisp:defun make-dev-environment-repository-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key branch-name repository-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'dev-environment-repository-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-repository-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-repository-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-repository-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dev-environment-session-configuration common-lisp:nil
                       ((execute-command-session-configuration :initarg
                         :|executeCommandSessionConfiguration| :type
                         (common-lisp:or execute-command-session-configuration
                                         common-lisp:null)
                         :accessor
                         %dev-environment-session-configuration-execute-command-session-configuration
                         :initform common-lisp:nil)
                        (session-type :initarg :|sessionType| :type
                         (common-lisp:or dev-environment-session-type
                                         common-lisp:null)
                         :accessor
                         %dev-environment-session-configuration-session-type
                         :initform
                         (common-lisp:error ":sessiontype is required"))))
 (common-lisp:export
  (common-lisp:list 'dev-environment-session-configuration
                    'make-dev-environment-session-configuration))
 (common-lisp:defun make-dev-environment-session-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key execute-command-session-configuration
                     session-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'dev-environment-session-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-session-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-session-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-type))
      (common-lisp:list
       (common-lisp:cons "sessionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execute-command-session-configuration))
      (common-lisp:list
       (common-lisp:cons "executeCommandSessionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-session-configuration))
   common-lisp:nil))
(common-lisp:deftype dev-environment-session-type () 'common-lisp:string)
(common-lisp:deftype dev-environment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dev-environment-summary common-lisp:nil
                       ((persistent-storage :initarg :|persistentStorage| :type
                         (common-lisp:or persistent-storage common-lisp:null)
                         :accessor %dev-environment-summary-persistent-storage
                         :initform
                         (common-lisp:error ":persistentstorage is required"))
                        (inactivity-timeout-minutes :initarg
                         :|inactivityTimeoutMinutes| :type
                         (common-lisp:or inactivity-timeout-minutes
                                         common-lisp:null)
                         :accessor
                         %dev-environment-summary-inactivity-timeout-minutes
                         :initform
                         (common-lisp:error
                          ":inactivitytimeoutminutes is required"))
                        (instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor %dev-environment-summary-instance-type
                         :initform
                         (common-lisp:error ":instancetype is required"))
                        (ides :initarg :|ides| :type
                         (common-lisp:or ides common-lisp:null) :accessor
                         %dev-environment-summary-ides :initform
                         common-lisp:nil)
                        (alias :initarg :|alias| :type
                         (common-lisp:or dev-environment-summary-alias-string
                                         common-lisp:null)
                         :accessor %dev-environment-summary-alias :initform
                         common-lisp:nil)
                        (repositories :initarg :|repositories| :type
                         (common-lisp:or dev-environment-repository-summaries
                                         common-lisp:null)
                         :accessor %dev-environment-summary-repositories
                         :initform
                         (common-lisp:error ":repositories is required"))
                        (status-reason :initarg :|statusReason| :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor %dev-environment-summary-status-reason
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or dev-environment-status
                                         common-lisp:null)
                         :accessor %dev-environment-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (creator-id :initarg :|creatorId| :type
                         (common-lisp:or
                          dev-environment-summary-creator-id-string
                          common-lisp:null)
                         :accessor %dev-environment-summary-creator-id
                         :initform
                         (common-lisp:error ":creatorid is required"))
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %dev-environment-summary-last-updated-time
                         :initform
                         (common-lisp:error ":lastupdatedtime is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %dev-environment-summary-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %dev-environment-summary-project-name
                         :initform common-lisp:nil)
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %dev-environment-summary-space-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dev-environment-summary 'make-dev-environment-summary))
 (common-lisp:defun make-dev-environment-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key persistent-storage
                     inactivity-timeout-minutes instance-type ides alias
                     repositories status-reason status creator-id
                     last-updated-time id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance 'dev-environment-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "creatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent-storage))
      (common-lisp:list
       (common-lisp:cons "persistentStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-environment-summary))
   common-lisp:nil))
(common-lisp:deftype dev-environment-summary-alias-string ()
  'common-lisp:string)
(common-lisp:deftype dev-environment-summary-creator-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dev-environment-summary-list ()
   '(trivial-types:proper-list dev-environment-summary))
 (common-lisp:defun |make-dev-environment-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dev-environment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass email-address common-lisp:nil
                       ((verified :initarg :|verified| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %email-address-verified :initform common-lisp:nil)
                        (email :initarg :|email| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %email-address-email :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'email-address 'make-email-address))
 (common-lisp:defun make-email-address
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key verified email)
   (common-lisp:apply #'common-lisp:make-instance 'email-address
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input email-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input email-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verified))
      (common-lisp:list
       (common-lisp:cons "verified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input email-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-log-entries ()
   '(trivial-types:proper-list event-log-entry))
 (common-lisp:defun |make-event-log-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-log-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-log-entry common-lisp:nil
                       ((user-agent :initarg :|userAgent| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-log-entry-user-agent :initform common-lisp:nil)
                        (source-ip-address :initarg :|sourceIpAddress| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-log-entry-source-ip-address :initform
                         common-lisp:nil)
                        (error-code :initarg :|errorCode| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-log-entry-error-code :initform common-lisp:nil)
                        (response-payload :initarg :|responsePayload| :type
                         (common-lisp:or event-payload common-lisp:null)
                         :accessor %event-log-entry-response-payload :initform
                         common-lisp:nil)
                        (request-payload :initarg :|requestPayload| :type
                         (common-lisp:or event-payload common-lisp:null)
                         :accessor %event-log-entry-request-payload :initform
                         common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-log-entry-request-id :initform common-lisp:nil)
                        (project-information :initarg :|projectInformation|
                         :type
                         (common-lisp:or project-information common-lisp:null)
                         :accessor %event-log-entry-project-information
                         :initform common-lisp:nil)
                        (user-identity :initarg :|userIdentity| :type
                         (common-lisp:or user-identity common-lisp:null)
                         :accessor %event-log-entry-user-identity :initform
                         (common-lisp:error ":useridentity is required"))
                        (operation-type :initarg :|operationType| :type
                         (common-lisp:or operation-type common-lisp:null)
                         :accessor %event-log-entry-operation-type :initform
                         (common-lisp:error ":operationtype is required"))
                        (event-time :initarg :|eventTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %event-log-entry-event-time :initform
                         (common-lisp:error ":eventtime is required"))
                        (event-source :initarg :|eventSource| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-log-entry-event-source :initform
                         (common-lisp:error ":eventsource is required"))
                        (event-category :initarg :|eventCategory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-log-entry-event-category :initform
                         (common-lisp:error ":eventcategory is required"))
                        (event-type :initarg :|eventType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-log-entry-event-type :initform
                         (common-lisp:error ":eventtype is required"))
                        (event-name :initarg :|eventName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-log-entry-event-name :initform
                         (common-lisp:error ":eventname is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-log-entry-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'event-log-entry 'make-event-log-entry))
 (common-lisp:defun make-event-log-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-agent source-ip-address error-code
                     response-payload request-payload request-id
                     project-information user-identity operation-type
                     event-time event-source event-category event-type
                     event-name id)
   (common-lisp:apply #'common-lisp:make-instance 'event-log-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-log-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-log-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-name))
      (common-lisp:list
       (common-lisp:cons "eventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-category))
      (common-lisp:list
       (common-lisp:cons "eventCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "eventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "eventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "operationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identity))
      (common-lisp:list
       (common-lisp:cons "userIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-information))
      (common-lisp:list
       (common-lisp:cons "projectInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payload))
      (common-lisp:list
       (common-lisp:cons "requestPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-payload))
      (common-lisp:list
       (common-lisp:cons "responsePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-address))
      (common-lisp:list
       (common-lisp:cons "sourceIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-agent))
      (common-lisp:list
       (common-lisp:cons "userAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-log-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-payload common-lisp:nil
                       ((data :initarg :|data| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-payload-data :initform common-lisp:nil)
                        (content-type :initarg :|contentType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-payload-content-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event-payload 'make-event-payload))
 (common-lisp:defun make-event-payload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data content-type)
   (common-lisp:apply #'common-lisp:make-instance 'event-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-command-session-configuration common-lisp:nil
                       ((arguments :initarg :|arguments| :type
                         (common-lisp:or
                          execute-command-session-configuration-arguments
                          common-lisp:null)
                         :accessor
                         %execute-command-session-configuration-arguments
                         :initform common-lisp:nil)
                        (command :initarg :|command| :type
                         (common-lisp:or
                          execute-command-session-configuration-command-string
                          common-lisp:null)
                         :accessor
                         %execute-command-session-configuration-command
                         :initform
                         (common-lisp:error ":command is required"))))
 (common-lisp:export
  (common-lisp:list 'execute-command-session-configuration
                    'make-execute-command-session-configuration))
 (common-lisp:defun make-execute-command-session-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arguments command)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-command-session-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-session-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-session-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-session-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype execute-command-session-configuration-arguments ()
   '(trivial-types:proper-list
     execute-command-session-configuration-arguments-member-string))
 (common-lisp:defun |make-execute-command-session-configuration-arguments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            execute-command-session-configuration-arguments-member-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype execute-command-session-configuration-arguments-member-string
                     ()
  'common-lisp:string)
(common-lisp:deftype execute-command-session-configuration-command-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((comparison-operator :initarg :|comparisonOperator|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %filter-comparison-operator :initform
                         common-lisp:nil)
                        (values :initarg :|values| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comparison-operator values key)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-dev-environment-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-dev-environment-request-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-dev-environment-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-dev-environment-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'get-dev-environment-request
                    'make-get-dev-environment-request))
 (common-lisp:defun make-get-dev-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-dev-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dev-environment-response common-lisp:nil
                       ((persistent-storage :initarg :|persistentStorage| :type
                         (common-lisp:or persistent-storage common-lisp:null)
                         :accessor
                         %get-dev-environment-response-persistent-storage
                         :initform
                         (common-lisp:error ":persistentstorage is required"))
                        (inactivity-timeout-minutes :initarg
                         :|inactivityTimeoutMinutes| :type
                         (common-lisp:or inactivity-timeout-minutes
                                         common-lisp:null)
                         :accessor
                         %get-dev-environment-response-inactivity-timeout-minutes
                         :initform
                         (common-lisp:error
                          ":inactivitytimeoutminutes is required"))
                        (instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor %get-dev-environment-response-instance-type
                         :initform
                         (common-lisp:error ":instancetype is required"))
                        (ides :initarg :|ides| :type
                         (common-lisp:or ides common-lisp:null) :accessor
                         %get-dev-environment-response-ides :initform
                         common-lisp:nil)
                        (alias :initarg :|alias| :type
                         (common-lisp:or
                          get-dev-environment-response-alias-string
                          common-lisp:null)
                         :accessor %get-dev-environment-response-alias
                         :initform common-lisp:nil)
                        (repositories :initarg :|repositories| :type
                         (common-lisp:or dev-environment-repository-summaries
                                         common-lisp:null)
                         :accessor %get-dev-environment-response-repositories
                         :initform
                         (common-lisp:error ":repositories is required"))
                        (status-reason :initarg :|statusReason| :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor %get-dev-environment-response-status-reason
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or dev-environment-status
                                         common-lisp:null)
                         :accessor %get-dev-environment-response-status
                         :initform (common-lisp:error ":status is required"))
                        (creator-id :initarg :|creatorId| :type
                         (common-lisp:or
                          get-dev-environment-response-creator-id-string
                          common-lisp:null)
                         :accessor %get-dev-environment-response-creator-id
                         :initform
                         (common-lisp:error ":creatorid is required"))
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-dev-environment-response-last-updated-time
                         :initform
                         (common-lisp:error ":lastupdatedtime is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-dev-environment-response-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-dev-environment-response-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-dev-environment-response-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'get-dev-environment-response
                    'make-get-dev-environment-response))
 (common-lisp:defun make-get-dev-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key persistent-storage
                     inactivity-timeout-minutes instance-type ides alias
                     repositories status-reason status creator-id
                     last-updated-time id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-dev-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "creatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent-storage))
      (common-lisp:list
       (common-lisp:cons "persistentStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-environment-response))
   common-lisp:nil))
(common-lisp:deftype get-dev-environment-response-alias-string ()
  'common-lisp:string)
(common-lisp:deftype get-dev-environment-response-creator-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-project-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-project-request-name :initform
                         (common-lisp:error ":name is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-project-request-space-name :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'get-project-request 'make-get-project-request))
 (common-lisp:defun make-get-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name space-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-project-response common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-project-response-description :initform
                         common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-project-response-display-name :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-project-response-name :initform
                         (common-lisp:error ":name is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-project-response-space-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-project-response 'make-get-project-response))
 (common-lisp:defun make-get-project-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description display-name name space-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-source-repository-clone-urls-request common-lisp:nil
                       ((source-repository-name :initarg
                         :|sourceRepositoryName| :type
                         (common-lisp:or source-repository-name-string
                                         common-lisp:null)
                         :accessor
                         %get-source-repository-clone-urls-request-source-repository-name
                         :initform
                         (common-lisp:error
                          ":sourcerepositoryname is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %get-source-repository-clone-urls-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %get-source-repository-clone-urls-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'get-source-repository-clone-urls-request
                    'make-get-source-repository-clone-urls-request))
 (common-lisp:defun make-get-source-repository-clone-urls-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-repository-name project-name
                     space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-source-repository-clone-urls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-source-repository-clone-urls-response
                       common-lisp:nil
                       ((https :initarg :|https| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-source-repository-clone-urls-response-https
                         :initform (common-lisp:error ":https is required"))))
 (common-lisp:export
  (common-lisp:list 'get-source-repository-clone-urls-response
                    'make-get-source-repository-clone-urls-response))
 (common-lisp:defun make-get-source-repository-clone-urls-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key https)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-source-repository-clone-urls-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https))
      (common-lisp:list
       (common-lisp:cons "https"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-source-repository-clone-urls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-space-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-space-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-space-request 'make-get-space-request))
 (common-lisp:defun make-get-space-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-space-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-space-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-space-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-space-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-space-response common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-space-response-description :initform
                         common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-space-response-display-name :initform
                         common-lisp:nil)
                        (region-name :initarg :|regionName| :type
                         (common-lisp:or region-string common-lisp:null)
                         :accessor %get-space-response-region-name :initform
                         (common-lisp:error ":regionname is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-space-response-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-space-response 'make-get-space-response))
 (common-lisp:defun make-get-space-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description display-name region-name
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'get-space-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-space-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-space-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-space-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscription-request common-lisp:nil
                       ((space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-subscription-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'get-subscription-request 'make-get-subscription-request))
 (common-lisp:defun make-get-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key space-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscription-response common-lisp:nil
                       ((aws-account-name :initarg :|awsAccountName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %get-subscription-response-aws-account-name
                         :initform common-lisp:nil)
                        (subscription-type :initarg :|subscriptionType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-subscription-response-subscription-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-response
                    'make-get-subscription-response))
 (common-lisp:defun make-get-subscription-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-account-name subscription-type)
   (common-lisp:apply #'common-lisp:make-instance 'get-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-type))
      (common-lisp:list
       (common-lisp:cons "subscriptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-name))
      (common-lisp:list
       (common-lisp:cons "awsAccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-details-request common-lisp:nil
                       ((user-name :initarg :|userName| :type
                         (common-lisp:or
                          get-user-details-request-user-name-string
                          common-lisp:null)
                         :accessor %get-user-details-request-user-name
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or get-user-details-request-id-string
                                         common-lisp:null)
                         :accessor %get-user-details-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-user-details-request 'make-get-user-details-request))
 (common-lisp:defun make-get-user-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name id)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-request))
   common-lisp:nil))
(common-lisp:deftype get-user-details-request-id-string () 'common-lisp:string)
(common-lisp:deftype get-user-details-request-user-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-user-details-response common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-user-details-response-version :initform
                         common-lisp:nil)
                        (primary-email :initarg :|primaryEmail| :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor %get-user-details-response-primary-email
                         :initform common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-user-details-response-display-name :initform
                         common-lisp:nil)
                        (user-name :initarg :|userName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-user-details-response-user-name :initform
                         common-lisp:nil)
                        (user-id :initarg :|userId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-user-details-response-user-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-user-details-response
                    'make-get-user-details-response))
 (common-lisp:defun make-get-user-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version primary-email display-name
                     user-name user-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-email))
      (common-lisp:list
       (common-lisp:cons "primaryEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ide common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or ide-name-string common-lisp:null)
                         :accessor %ide-name :initform common-lisp:nil)
                        (runtime :initarg :|runtime| :type
                         (common-lisp:or ide-runtime-string common-lisp:null)
                         :accessor %ide-runtime :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ide 'make-ide))
 (common-lisp:defun make-ide
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name runtime)
   (common-lisp:apply #'common-lisp:make-instance 'ide
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ide))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ide))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ide))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ide-configuration common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or ide-configuration-name-string
                                         common-lisp:null)
                         :accessor %ide-configuration-name :initform
                         common-lisp:nil)
                        (runtime :initarg :|runtime| :type
                         (common-lisp:or ide-configuration-runtime-string
                                         common-lisp:null)
                         :accessor %ide-configuration-runtime :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ide-configuration 'make-ide-configuration))
 (common-lisp:defun make-ide-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name runtime)
   (common-lisp:apply #'common-lisp:make-instance 'ide-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ide-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ide-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ide-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ide-configuration-list ()
   '(trivial-types:proper-list ide-configuration))
 (common-lisp:defun |make-ide-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ide-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ide-configuration-name-string () 'common-lisp:string)
(common-lisp:deftype ide-configuration-runtime-string () 'common-lisp:string)
(common-lisp:deftype ide-name-string () 'common-lisp:string)
(common-lisp:deftype ide-runtime-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ides () '(trivial-types:proper-list ide))
 (common-lisp:defun |make-ides|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ide))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inactivity-timeout-minutes () 'common-lisp:integer)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-access-tokens-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-access-tokens-request-next-token-string
                          common-lisp:null)
                         :accessor %list-access-tokens-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-access-tokens-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-access-tokens-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-access-tokens-request
                    'make-list-access-tokens-request))
 (common-lisp:defun make-list-access-tokens-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-tokens-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-request))
   common-lisp:nil))
(common-lisp:deftype list-access-tokens-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-access-tokens-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-access-tokens-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-access-tokens-response-next-token :initform
                         common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or access-token-summaries
                                         common-lisp:null)
                         :accessor %list-access-tokens-response-items :initform
                         (common-lisp:error ":items is required"))))
 (common-lisp:export
  (common-lisp:list 'list-access-tokens-response
                    'make-list-access-tokens-response))
 (common-lisp:defun make-list-access-tokens-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-tokens-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-tokens-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dev-environments-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-dev-environments-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-dev-environments-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-dev-environments-request-next-token-string
                          common-lisp:null)
                         :accessor %list-dev-environments-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-dev-environments-request-filters :initform
                         common-lisp:nil)
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %list-dev-environments-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %list-dev-environments-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'list-dev-environments-request
                    'make-list-dev-environments-request))
 (common-lisp:defun make-list-dev-environments-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dev-environments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-request))
   common-lisp:nil))
(common-lisp:deftype list-dev-environments-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-dev-environments-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-dev-environments-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-dev-environments-response-next-token :initform
                         common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or dev-environment-summary-list
                                         common-lisp:null)
                         :accessor %list-dev-environments-response-items
                         :initform (common-lisp:error ":items is required"))))
 (common-lisp:export
  (common-lisp:list 'list-dev-environments-response
                    'make-list-dev-environments-response))
 (common-lisp:defun make-list-dev-environments-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dev-environments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-environments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-logs-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-event-logs-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-event-logs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-event-logs-request-next-token-string
                          common-lisp:null)
                         :accessor %list-event-logs-request-next-token
                         :initform common-lisp:nil)
                        (event-name :initarg :|eventName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-event-logs-request-event-name :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %list-event-logs-request-end-time :initform
                         (common-lisp:error ":endtime is required"))
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %list-event-logs-request-start-time
                         :initform
                         (common-lisp:error ":starttime is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %list-event-logs-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'list-event-logs-request 'make-list-event-logs-request))
 (common-lisp:defun make-list-event-logs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token event-name
                     end-time start-time space-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-logs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-name))
      (common-lisp:list
       (common-lisp:cons "eventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-request))
   common-lisp:nil))
(common-lisp:deftype list-event-logs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-event-logs-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-event-logs-response common-lisp:nil
                       ((items :initarg :|items| :type
                         (common-lisp:or event-log-entries common-lisp:null)
                         :accessor %list-event-logs-response-items :initform
                         (common-lisp:error ":items is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-event-logs-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-logs-response 'make-list-event-logs-response))
 (common-lisp:defun make-list-event-logs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-logs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-logs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or project-list-filters common-lisp:null)
                         :accessor %list-projects-request-filters :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-projects-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-projects-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-projects-request-next-token-string
                          common-lisp:null)
                         :accessor %list-projects-request-next-token :initform
                         common-lisp:nil)
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %list-projects-request-space-name :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defun make-list-projects-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token
                     space-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:deftype list-projects-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-projects-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-projects-response common-lisp:nil
                       ((items :initarg :|items| :type
                         (common-lisp:or project-summaries common-lisp:null)
                         :accessor %list-projects-response-items :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-projects-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-projects-response 'make-list-projects-response))
 (common-lisp:defun make-list-projects-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-source-repositories-item common-lisp:nil
                       ((created-time :initarg :|createdTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-source-repositories-item-created-time :initform
                         (common-lisp:error ":createdtime is required"))
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-source-repositories-item-last-updated-time
                         :initform
                         (common-lisp:error ":lastupdatedtime is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or source-repository-description-string
                                         common-lisp:null)
                         :accessor %list-source-repositories-item-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or source-repository-name-string
                                         common-lisp:null)
                         :accessor %list-source-repositories-item-name
                         :initform (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or source-repository-id-string
                                         common-lisp:null)
                         :accessor %list-source-repositories-item-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-source-repositories-item
                    'make-list-source-repositories-item))
 (common-lisp:defun make-list-source-repositories-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-time last-updated-time
                     description name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-repositories-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-source-repositories-items ()
   '(trivial-types:proper-list list-source-repositories-item))
 (common-lisp:defun |make-list-source-repositories-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-source-repositories-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-source-repositories-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-source-repositories-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         %list-source-repositories-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-source-repositories-request-next-token-string
                          common-lisp:null)
                         :accessor %list-source-repositories-request-next-token
                         :initform common-lisp:nil)
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %list-source-repositories-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %list-source-repositories-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'list-source-repositories-request
                    'make-list-source-repositories-request))
 (common-lisp:defun make-list-source-repositories-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token project-name
                     space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-repositories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-request))
   common-lisp:nil))
(common-lisp:deftype list-source-repositories-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-source-repositories-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-source-repositories-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-source-repositories-response-next-token
                         :initform common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or list-source-repositories-items
                                         common-lisp:null)
                         :accessor %list-source-repositories-response-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-source-repositories-response
                    'make-list-source-repositories-response))
 (common-lisp:defun make-list-source-repositories-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-repositories-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repositories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-source-repository-branches-item common-lisp:nil
                       ((head-commit-id :initarg :|headCommitId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-source-repository-branches-item-head-commit-id
                         :initform common-lisp:nil)
                        (last-updated-time :initarg :|lastUpdatedTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %list-source-repository-branches-item-last-updated-time
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or source-repository-branch-string
                                         common-lisp:null)
                         :accessor %list-source-repository-branches-item-name
                         :initform common-lisp:nil)
                        (ref :initarg :|ref| :type
                         (common-lisp:or source-repository-branch-ref-string
                                         common-lisp:null)
                         :accessor %list-source-repository-branches-item-ref
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-source-repository-branches-item
                    'make-list-source-repository-branches-item))
 (common-lisp:defun make-list-source-repository-branches-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key head-commit-id last-updated-time name
                     ref)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-repository-branches-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ref))
      (common-lisp:list
       (common-lisp:cons "ref"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'head-commit-id))
      (common-lisp:list
       (common-lisp:cons "headCommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-source-repository-branches-items ()
   '(trivial-types:proper-list list-source-repository-branches-item))
 (common-lisp:defun |make-list-source-repository-branches-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-source-repository-branches-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-source-repository-branches-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-source-repository-branches-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         %list-source-repository-branches-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-source-repository-branches-request-next-token-string
                          common-lisp:null)
                         :accessor
                         %list-source-repository-branches-request-next-token
                         :initform common-lisp:nil)
                        (source-repository-name :initarg
                         :|sourceRepositoryName| :type
                         (common-lisp:or source-repository-name-string
                                         common-lisp:null)
                         :accessor
                         %list-source-repository-branches-request-source-repository-name
                         :initform
                         (common-lisp:error
                          ":sourcerepositoryname is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %list-source-repository-branches-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %list-source-repository-branches-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'list-source-repository-branches-request
                    'make-list-source-repository-branches-request))
 (common-lisp:defun make-list-source-repository-branches-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     source-repository-name project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-repository-branches-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-request))
   common-lisp:nil))
(common-lisp:deftype list-source-repository-branches-request-max-results-integer
                     ()
  'common-lisp:integer)
(common-lisp:deftype list-source-repository-branches-request-next-token-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-source-repository-branches-response common-lisp:nil
                       ((items :initarg :|items| :type
                         (common-lisp:or list-source-repository-branches-items
                                         common-lisp:null)
                         :accessor
                         %list-source-repository-branches-response-items
                         :initform (common-lisp:error ":items is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-source-repository-branches-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-source-repository-branches-response
                    'make-list-source-repository-branches-response))
 (common-lisp:defun make-list-source-repository-branches-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-repository-branches-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-repository-branches-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-spaces-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or list-spaces-request-next-token-string
                                         common-lisp:null)
                         :accessor %list-spaces-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-spaces-request 'make-list-spaces-request))
 (common-lisp:defun make-list-spaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-spaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-spaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-spaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-spaces-request))
   common-lisp:nil))
(common-lisp:deftype list-spaces-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-spaces-response common-lisp:nil
                       ((items :initarg :|items| :type
                         (common-lisp:or space-summaries common-lisp:null)
                         :accessor %list-spaces-response-items :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-spaces-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-spaces-response 'make-list-spaces-response))
 (common-lisp:defun make-list-spaces-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-spaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-spaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-spaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-spaces-response))
   common-lisp:nil))
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass persistent-storage common-lisp:nil
                       ((size-in-gi-b :initarg :|sizeInGiB| :type
                         (common-lisp:or persistent-storage-size-in-gi-binteger
                                         common-lisp:null)
                         :accessor %persistent-storage-size-in-gi-b :initform
                         (common-lisp:error ":sizeingib is required"))))
 (common-lisp:export
  (common-lisp:list 'persistent-storage 'make-persistent-storage))
 (common-lisp:defun make-persistent-storage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size-in-gi-b)
   (common-lisp:apply #'common-lisp:make-instance 'persistent-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input persistent-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input persistent-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gi-b))
      (common-lisp:list
       (common-lisp:cons "sizeInGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input persistent-storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass persistent-storage-configuration common-lisp:nil
                       ((size-in-gi-b :initarg :|sizeInGiB| :type
                         (common-lisp:or
                          persistent-storage-configuration-size-in-gi-binteger
                          common-lisp:null)
                         :accessor
                         %persistent-storage-configuration-size-in-gi-b
                         :initform
                         (common-lisp:error ":sizeingib is required"))))
 (common-lisp:export
  (common-lisp:list 'persistent-storage-configuration
                    'make-persistent-storage-configuration))
 (common-lisp:defun make-persistent-storage-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size-in-gi-b)
   (common-lisp:apply #'common-lisp:make-instance
                      'persistent-storage-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          persistent-storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          persistent-storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gi-b))
      (common-lisp:list
       (common-lisp:cons "sizeInGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          persistent-storage-configuration))
   common-lisp:nil))
(common-lisp:deftype persistent-storage-configuration-size-in-gi-binteger ()
  'common-lisp:integer)
(common-lisp:deftype persistent-storage-size-in-gi-binteger ()
  'common-lisp:integer)
(common-lisp:deftype project-description () 'common-lisp:string)
(common-lisp:deftype project-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass project-information common-lisp:nil
                       ((project-id :initarg :|projectId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %project-information-project-id :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %project-information-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'project-information 'make-project-information))
 (common-lisp:defun make-project-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key project-id name)
   (common-lisp:apply #'common-lisp:make-instance 'project-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass project-list-filter common-lisp:nil
                       ((comparison-operator :initarg :|comparisonOperator|
                         :type
                         (common-lisp:or comparison-operator common-lisp:null)
                         :accessor %project-list-filter-comparison-operator
                         :initform common-lisp:nil)
                        (values :initarg :|values| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %project-list-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or filter-key common-lisp:null) :accessor
                         %project-list-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'project-list-filter 'make-project-list-filter))
 (common-lisp:defun make-project-list-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comparison-operator values key)
   (common-lisp:apply #'common-lisp:make-instance 'project-list-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-list-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-list-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-list-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-list-filters ()
   '(trivial-types:proper-list project-list-filter))
 (common-lisp:defun |make-project-list-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-list-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype project-summaries ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun |make-project-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass project-summary common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %project-summary-description :initform
                         common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %project-summary-display-name :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %project-summary-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defun make-project-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description display-name name)
   (common-lisp:apply #'common-lisp:make-instance 'project-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:deftype region-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repositories-input ()
   '(trivial-types:proper-list repository-input))
 (common-lisp:defun |make-repositories-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass repository-input common-lisp:nil
                       ((branch-name :initarg :|branchName| :type
                         (common-lisp:or source-repository-branch-string
                                         common-lisp:null)
                         :accessor %repository-input-branch-name :initform
                         common-lisp:nil)
                        (repository-name :initarg :|repositoryName| :type
                         (common-lisp:or source-repository-name-string
                                         common-lisp:null)
                         :accessor %repository-input-repository-name :initform
                         (common-lisp:error ":repositoryname is required"))))
 (common-lisp:export
  (common-lisp:list 'repository-input 'make-repository-input))
 (common-lisp:defun make-repository-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key branch-name repository-name)
   (common-lisp:apply #'common-lisp:make-instance 'repository-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codecatalyst-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (codecatalyst-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype source-repository-branch-ref-string () 'common-lisp:string)
(common-lisp:deftype source-repository-branch-string () 'common-lisp:string)
(common-lisp:deftype source-repository-description-string ()
  'common-lisp:string)
(common-lisp:deftype source-repository-id-string () 'common-lisp:string)
(common-lisp:deftype source-repository-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype space-summaries ()
   '(trivial-types:proper-list space-summary))
 (common-lisp:defun |make-space-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list space-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass space-summary common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %space-summary-description :initform common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %space-summary-display-name :initform common-lisp:nil)
                        (region-name :initarg :|regionName| :type
                         (common-lisp:or region-string common-lisp:null)
                         :accessor %space-summary-region-name :initform
                         (common-lisp:error ":regionname is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %space-summary-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'space-summary 'make-space-summary))
 (common-lisp:defun make-space-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description display-name region-name
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'space-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input space-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input space-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input space-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dev-environment-request common-lisp:nil
                       ((inactivity-timeout-minutes :initarg
                         :|inactivityTimeoutMinutes| :type
                         (common-lisp:or inactivity-timeout-minutes
                                         common-lisp:null)
                         :accessor
                         %start-dev-environment-request-inactivity-timeout-minutes
                         :initform common-lisp:nil)
                        (instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor %start-dev-environment-request-instance-type
                         :initform common-lisp:nil)
                        (ides :initarg :|ides| :type
                         (common-lisp:or ide-configuration-list
                                         common-lisp:null)
                         :accessor %start-dev-environment-request-ides
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %start-dev-environment-request-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %start-dev-environment-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %start-dev-environment-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'start-dev-environment-request
                    'make-start-dev-environment-request))
 (common-lisp:defun make-start-dev-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key inactivity-timeout-minutes instance-type
                     ides id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-dev-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dev-environment-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or dev-environment-status
                                         common-lisp:null)
                         :accessor %start-dev-environment-response-status
                         :initform (common-lisp:error ":status is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %start-dev-environment-response-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %start-dev-environment-response-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %start-dev-environment-response-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'start-dev-environment-response
                    'make-start-dev-environment-response))
 (common-lisp:defun make-start-dev-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-dev-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dev-environment-session-request common-lisp:nil
                       ((session-configuration :initarg :|sessionConfiguration|
                         :type
                         (common-lisp:or dev-environment-session-configuration
                                         common-lisp:null)
                         :accessor
                         %start-dev-environment-session-request-session-configuration
                         :initform
                         (common-lisp:error
                          ":sessionconfiguration is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %start-dev-environment-session-request-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %start-dev-environment-session-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %start-dev-environment-session-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'start-dev-environment-session-request
                    'make-start-dev-environment-session-request))
 (common-lisp:defun make-start-dev-environment-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-configuration id project-name
                     space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-dev-environment-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-configuration))
      (common-lisp:list
       (common-lisp:cons "sessionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dev-environment-session-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %start-dev-environment-session-response-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %start-dev-environment-session-response-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %start-dev-environment-session-response-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or
                          start-dev-environment-session-response-session-id-string
                          common-lisp:null)
                         :accessor
                         %start-dev-environment-session-response-session-id
                         :initform common-lisp:nil)
                        (access-details :initarg :|accessDetails| :type
                         (common-lisp:or dev-environment-access-details
                                         common-lisp:null)
                         :accessor
                         %start-dev-environment-session-response-access-details
                         :initform
                         (common-lisp:error ":accessdetails is required"))))
 (common-lisp:export
  (common-lisp:list 'start-dev-environment-session-response
                    'make-start-dev-environment-session-response))
 (common-lisp:defun make-start-dev-environment-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id project-name space-name session-id
                     access-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-dev-environment-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-details))
      (common-lisp:list
       (common-lisp:cons "accessDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dev-environment-session-response))
   common-lisp:nil))
(common-lisp:deftype start-dev-environment-session-response-session-id-string
                     ()
  'common-lisp:string)
(common-lisp:deftype status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-dev-environment-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %stop-dev-environment-request-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %stop-dev-environment-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %stop-dev-environment-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-dev-environment-request
                    'make-stop-dev-environment-request))
 (common-lisp:defun make-stop-dev-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance 'stop-dev-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dev-environment-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or dev-environment-status
                                         common-lisp:null)
                         :accessor %stop-dev-environment-response-status
                         :initform (common-lisp:error ":status is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %stop-dev-environment-response-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %stop-dev-environment-response-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %stop-dev-environment-response-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-dev-environment-response
                    'make-stop-dev-environment-response))
 (common-lisp:defun make-stop-dev-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-dev-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dev-environment-session-request common-lisp:nil
                       ((session-id :initarg :|sessionId| :type
                         (common-lisp:or
                          stop-dev-environment-session-request-session-id-string
                          common-lisp:null)
                         :accessor
                         %stop-dev-environment-session-request-session-id
                         :initform
                         (common-lisp:error ":sessionid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %stop-dev-environment-session-request-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %stop-dev-environment-session-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %stop-dev-environment-session-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-dev-environment-session-request
                    'make-stop-dev-environment-session-request))
 (common-lisp:defun make-stop-dev-environment-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-dev-environment-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-session-request))
   common-lisp:nil))
(common-lisp:deftype stop-dev-environment-session-request-session-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-dev-environment-session-response common-lisp:nil
                       ((session-id :initarg :|sessionId| :type
                         (common-lisp:or
                          stop-dev-environment-session-response-session-id-string
                          common-lisp:null)
                         :accessor
                         %stop-dev-environment-session-response-session-id
                         :initform
                         (common-lisp:error ":sessionid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %stop-dev-environment-session-response-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %stop-dev-environment-session-response-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %stop-dev-environment-session-response-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-dev-environment-session-response
                    'make-stop-dev-environment-session-response))
 (common-lisp:defun make-stop-dev-environment-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-dev-environment-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dev-environment-session-response))
   common-lisp:nil))
(common-lisp:deftype stop-dev-environment-session-response-session-id-string ()
  'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codecatalyst-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-dev-environment-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-dev-environment-request-client-token
                         :initform common-lisp:nil)
                        (inactivity-timeout-minutes :initarg
                         :|inactivityTimeoutMinutes| :type
                         (common-lisp:or inactivity-timeout-minutes
                                         common-lisp:null)
                         :accessor
                         %update-dev-environment-request-inactivity-timeout-minutes
                         :initform common-lisp:nil)
                        (instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         %update-dev-environment-request-instance-type
                         :initform common-lisp:nil)
                        (ides :initarg :|ides| :type
                         (common-lisp:or ide-configuration-list
                                         common-lisp:null)
                         :accessor %update-dev-environment-request-ides
                         :initform common-lisp:nil)
                        (alias :initarg :|alias| :type
                         (common-lisp:or
                          update-dev-environment-request-alias-string
                          common-lisp:null)
                         :accessor %update-dev-environment-request-alias
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-dev-environment-request-id :initform
                         (common-lisp:error ":id is required"))
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %update-dev-environment-request-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %update-dev-environment-request-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))))
 (common-lisp:export
  (common-lisp:list 'update-dev-environment-request
                    'make-update-dev-environment-request))
 (common-lisp:defun make-update-dev-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token inactivity-timeout-minutes
                     instance-type ides alias id project-name space-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dev-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-request))
   common-lisp:nil))
(common-lisp:deftype update-dev-environment-request-alias-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-dev-environment-response common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-dev-environment-response-client-token
                         :initform common-lisp:nil)
                        (inactivity-timeout-minutes :initarg
                         :|inactivityTimeoutMinutes| :type
                         (common-lisp:or inactivity-timeout-minutes
                                         common-lisp:null)
                         :accessor
                         %update-dev-environment-response-inactivity-timeout-minutes
                         :initform common-lisp:nil)
                        (instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         %update-dev-environment-response-instance-type
                         :initform common-lisp:nil)
                        (ides :initarg :|ides| :type
                         (common-lisp:or ide-configuration-list
                                         common-lisp:null)
                         :accessor %update-dev-environment-response-ides
                         :initform common-lisp:nil)
                        (alias :initarg :|alias| :type
                         (common-lisp:or
                          update-dev-environment-response-alias-string
                          common-lisp:null)
                         :accessor %update-dev-environment-response-alias
                         :initform common-lisp:nil)
                        (project-name :initarg :|projectName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         %update-dev-environment-response-project-name
                         :initform
                         (common-lisp:error ":projectname is required"))
                        (space-name :initarg :|spaceName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %update-dev-environment-response-space-name
                         :initform
                         (common-lisp:error ":spacename is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-dev-environment-response-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-dev-environment-response
                    'make-update-dev-environment-response))
 (common-lisp:defun make-update-dev-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token inactivity-timeout-minutes
                     instance-type ides alias project-name space-name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dev-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "spaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ides))
      (common-lisp:list
       (common-lisp:cons "ides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inactivity-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "inactivityTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-environment-response))
   common-lisp:nil))
(common-lisp:deftype update-dev-environment-response-alias-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-identity common-lisp:nil
                       ((aws-account-id :initarg :|awsAccountId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-identity-aws-account-id :initform
                         common-lisp:nil)
                        (user-name :initarg :|userName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-identity-user-name :initform common-lisp:nil)
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-identity-principal-id :initform
                         (common-lisp:error ":principalid is required"))
                        (user-type :initarg :|userType| :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         %user-identity-user-type :initform
                         (common-lisp:error ":usertype is required"))))
 (common-lisp:export (common-lisp:list 'user-identity 'make-user-identity))
 (common-lisp:defun make-user-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-account-id user-name principal-id
                     user-type)
   (common-lisp:apply #'common-lisp:make-instance 'user-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "userType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity))
   common-lisp:nil))
(common-lisp:deftype user-type () 'common-lisp:string)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codecatalyst-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass verify-session-response common-lisp:nil
                       ((identity :initarg :|identity| :type
                         (common-lisp:or
                          verify-session-response-identity-string
                          common-lisp:null)
                         :accessor %verify-session-response-identity :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'verify-session-response 'make-verify-session-response))
 (common-lisp:defun make-verify-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity)
   (common-lisp:apply #'common-lisp:make-instance 'verify-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-session-response))
   common-lisp:nil))
(common-lisp:deftype verify-session-response-identity-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-access-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name expires-time)
   (common-lisp:declare (common-lisp:ignorable name expires-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v1/accessTokens"
                                                        "CreateAccessToken"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-token))
(common-lisp:progn
 (common-lisp:defun create-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name repositories
                     client-token alias ides instance-type
                     inactivity-timeout-minutes persistent-storage)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name repositories client-token
     alias ides instance-type inactivity-timeout-minutes persistent-storage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "CreateDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dev-environment))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name display-name description)
   (common-lisp:declare
    (common-lisp:ignorable space-name display-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))))
                                                        "CreateProject"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun create-source-repository-branch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name
                     source-repository-name name head-commit-id)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name source-repository-name name
     head-commit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-source-repository-branch-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/sourceRepositories/~A/branches/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-repository-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateSourceRepositoryBranch"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-source-repository-branch))
(common-lisp:progn
 (common-lisp:defun delete-access-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/accessTokens/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteAccessToken"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-token))
(common-lisp:progn
 (common-lisp:defun delete-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id)
   (common-lisp:declare (common-lisp:ignorable space-name project-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dev-environment))
(common-lisp:progn
 (common-lisp:defun get-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id)
   (common-lisp:declare (common-lisp:ignorable space-name project-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dev-environment))
(common-lisp:progn
 (common-lisp:defun get-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name name)
   (common-lisp:declare (common-lisp:ignorable space-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetProject"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-project))
(common-lisp:progn
 (common-lisp:defun get-source-repository-clone-urls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name
                     source-repository-name)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name source-repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-source-repository-clone-urls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/sourceRepositories/~A/cloneUrls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-repository-name))))
                                                        "GetSourceRepositoryCloneUrls"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-source-repository-clone-urls))
(common-lisp:progn
 (common-lisp:defun get-space
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-space-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetSpace"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-space))
(common-lisp:progn
 (common-lisp:defun get-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name)
   (common-lisp:declare (common-lisp:ignorable space-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscription-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/subscription"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))))
                                                        "GetSubscription"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-subscription))
(common-lisp:progn
 (common-lisp:defun get-user-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id user-name)
   (common-lisp:declare (common-lisp:ignorable id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/userDetails"
                                                        "GetUserDetails"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user-details))
(common-lisp:progn
 (common-lisp:defun list-access-tokens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-tokens-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/accessTokens"
                                                        "ListAccessTokens"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-tokens))
(common-lisp:progn
 (common-lisp:defun list-dev-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dev-environments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "ListDevEnvironments"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dev-environments))
(common-lisp:progn
 (common-lisp:defun list-event-logs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name start-time end-time event-name
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable space-name start-time end-time event-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-logs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/eventLogs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))))
                                                        "ListEventLogs"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-logs))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name next-token max-results
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable space-name next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))))
                                                        "ListProjects"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-source-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-source-repositories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/sourceRepositories"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "ListSourceRepositories"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-source-repositories))
(common-lisp:progn
 (common-lisp:defun list-source-repository-branches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name
                     source-repository-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name source-repository-name
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-source-repository-branches-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/sourceRepositories/~A/branches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-repository-name))))
                                                        "ListSourceRepositoryBranches"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-source-repository-branches))
(common-lisp:progn
 (common-lisp:defun list-spaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-spaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/spaces"
                                                        "ListSpaces"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-spaces))
(common-lisp:progn
 (common-lisp:defun start-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id ides
                     instance-type inactivity-timeout-minutes)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name id ides instance-type
     inactivity-timeout-minutes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StartDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-dev-environment))
(common-lisp:progn
 (common-lisp:defun start-dev-environment-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id
                     session-configuration)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name id session-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-dev-environment-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A/session"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StartDevEnvironmentSession"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-dev-environment-session))
(common-lisp:progn
 (common-lisp:defun stop-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id)
   (common-lisp:declare (common-lisp:ignorable space-name project-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StopDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-dev-environment))
(common-lisp:progn
 (common-lisp:defun stop-dev-environment-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id session-id)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-dev-environment-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A/session/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "StopDevEnvironmentSession"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-dev-environment-session))
(common-lisp:progn
 (common-lisp:defun update-dev-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key space-name project-name id alias ides
                     instance-type inactivity-timeout-minutes client-token)
   (common-lisp:declare
    (common-lisp:ignorable space-name project-name id alias ides instance-type
     inactivity-timeout-minutes client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dev-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecatalyst-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/spaces/~A/projects/~A/devEnvironments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'space-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateDevEnvironment"
                                                        "2022-09-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dev-environment))
(common-lisp:progn
 (common-lisp:defun verify-session ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'codecatalyst-request :method "GET" :path
                                "/session" :protocol :rest-json :operation
                                "VerifySession" :params
                                `(("Action" ,@"VerifySession")
                                  ("Version" ,@"2022-09-28"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'verify-session))
