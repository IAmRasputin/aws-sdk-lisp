;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/location/api
  (:use)
  (:nicknames #:aws/location)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/location/api)
(common-lisp:progn
 (common-lisp:define-condition location-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'location-error))
(common-lisp:progn
 (common-lisp:defclass location-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "location" :api-version
                        "2020-11-19" :host-prefix "geo" :signing-name "geo"
                        :global-host common-lisp:nil))
 (common-lisp:export 'location-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (location-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype api-key () 'common-lisp:string)
(common-lisp:deftype api-key-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (api-key-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-api-key-filter-"))
   (key-status common-lisp:nil :type (common-lisp:or status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'api-key-filter 'make-api-key-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-key-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-key-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-status))
      (common-lisp:list
       (common-lisp:cons "KeyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-key-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (api-key-restrictions (:copier common-lisp:nil)
      (:conc-name "struct-shape-api-key-restrictions-"))
   (allow-actions (common-lisp:error ":allow-actions is required") :type
    (common-lisp:or api-key-restrictions-allow-actions-list common-lisp:null))
   (allow-referers common-lisp:nil :type
    (common-lisp:or api-key-restrictions-allow-referers-list common-lisp:null))
   (allow-resources (common-lisp:error ":allow-resources is required") :type
    (common-lisp:or api-key-restrictions-allow-resources-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'api-key-restrictions 'make-api-key-restrictions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-key-restrictions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-key-restrictions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-actions))
      (common-lisp:list
       (common-lisp:cons "AllowActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-referers))
      (common-lisp:list
       (common-lisp:cons "AllowReferers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-resources))
      (common-lisp:list
       (common-lisp:cons "AllowResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-key-restrictions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype api-key-restrictions-allow-actions-list ()
   '(trivial-types:proper-list api-key-action))
 (common-lisp:defun make-api-key-restrictions-allow-actions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list api-key-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype api-key-restrictions-allow-referers-list ()
   '(trivial-types:proper-list referer-pattern))
 (common-lisp:defun make-api-key-restrictions-allow-referers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list referer-pattern))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype api-key-restrictions-allow-resources-list ()
   '(trivial-types:proper-list geo-arn))
 (common-lisp:defun make-api-key-restrictions-allow-resources-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list geo-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun make-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-tracker-consumer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-tracker-consumer-request-"))
   (consumer-arn (common-lisp:error ":consumer-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-tracker-consumer-request
                    'make-associate-tracker-consumer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-tracker-consumer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-tracker-consumer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arn))
      (common-lisp:list
       (common-lisp:cons "ConsumerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-tracker-consumer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-tracker-consumer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-tracker-consumer-response-")))
 (common-lisp:export
  (common-lisp:list 'associate-tracker-consumer-response
                    'make-associate-tracker-consumer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-tracker-consumer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-tracker-consumer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-tracker-consumer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-device-position-history-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-device-position-history-error-"))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or id common-lisp:null))
   (error (common-lisp:error ":error is required") :type
    (common-lisp:or batch-item-error common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-device-position-history-error
                    'make-batch-delete-device-position-history-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-device-position-history-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-device-position-history-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-device-position-history-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-device-position-history-error-list ()
   '(trivial-types:proper-list batch-delete-device-position-history-error))
 (common-lisp:defun make-batch-delete-device-position-history-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-delete-device-position-history-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-device-position-history-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-delete-device-position-history-request-"))
   (device-ids (common-lisp:error ":device-ids is required") :type
    (common-lisp:or
     batch-delete-device-position-history-request-device-ids-list
     common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-device-position-history-request
                    'make-batch-delete-device-position-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-device-position-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-device-position-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-ids))
      (common-lisp:list
       (common-lisp:cons "DeviceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-device-position-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-device-position-history-request-device-ids-list
                      ()
   '(trivial-types:proper-list id))
 (common-lisp:defun make-batch-delete-device-position-history-request-device-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-device-position-history-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-delete-device-position-history-response-"))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or batch-delete-device-position-history-error-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-device-position-history-response
                    'make-batch-delete-device-position-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-device-position-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-device-position-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-device-position-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-geofence-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-geofence-error-"))
   (error (common-lisp:error ":error is required") :type
    (common-lisp:or batch-item-error common-lisp:null))
   (geofence-id (common-lisp:error ":geofence-id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-geofence-error
                    'make-batch-delete-geofence-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-geofence-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-geofence-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-id))
      (common-lisp:list
       (common-lisp:cons "GeofenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-geofence-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-geofence-error-list ()
   '(trivial-types:proper-list batch-delete-geofence-error))
 (common-lisp:defun make-batch-delete-geofence-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-delete-geofence-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-geofence-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-geofence-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (geofence-ids (common-lisp:error ":geofence-ids is required") :type
    (common-lisp:or batch-delete-geofence-request-geofence-ids-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-geofence-request
                    'make-batch-delete-geofence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-geofence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-geofence-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-ids))
      (common-lisp:list
       (common-lisp:cons "GeofenceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-geofence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-geofence-request-geofence-ids-list ()
   '(trivial-types:proper-list id))
 (common-lisp:defun make-batch-delete-geofence-request-geofence-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-geofence-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-geofence-response-"))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or batch-delete-geofence-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-geofence-response
                    'make-batch-delete-geofence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-geofence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-geofence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-geofence-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-evaluate-geofences-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-evaluate-geofences-error-"))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or id common-lisp:null))
   (error (common-lisp:error ":error is required") :type
    (common-lisp:or batch-item-error common-lisp:null))
   (sample-time (common-lisp:error ":sample-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-evaluate-geofences-error
                    'make-batch-evaluate-geofences-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-geofences-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-geofences-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-time))
      (common-lisp:list
       (common-lisp:cons "SampleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-geofences-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-evaluate-geofences-error-list ()
   '(trivial-types:proper-list batch-evaluate-geofences-error))
 (common-lisp:defun make-batch-evaluate-geofences-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-evaluate-geofences-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-evaluate-geofences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-evaluate-geofences-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (device-position-updates
    (common-lisp:error ":device-position-updates is required") :type
    (common-lisp:or
     batch-evaluate-geofences-request-device-position-updates-list
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-evaluate-geofences-request
                    'make-batch-evaluate-geofences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-geofences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-geofences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-position-updates))
      (common-lisp:list
       (common-lisp:cons "DevicePositionUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-geofences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-evaluate-geofences-request-device-position-updates-list
                      ()
   '(trivial-types:proper-list device-position-update))
 (common-lisp:defun make-batch-evaluate-geofences-request-device-position-updates-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-position-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-evaluate-geofences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-evaluate-geofences-response-"))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or batch-evaluate-geofences-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-evaluate-geofences-response
                    'make-batch-evaluate-geofences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-geofences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-geofences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-geofences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-device-position-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-device-position-error-"))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or id common-lisp:null))
   (error (common-lisp:error ":error is required") :type
    (common-lisp:or batch-item-error common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-device-position-error
                    'make-batch-get-device-position-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-device-position-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-device-position-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-device-position-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-device-position-error-list ()
   '(trivial-types:proper-list batch-get-device-position-error))
 (common-lisp:defun make-batch-get-device-position-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-device-position-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-device-position-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-device-position-request-"))
   (device-ids (common-lisp:error ":device-ids is required") :type
    (common-lisp:or batch-get-device-position-request-device-ids-list
                    common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or batch-get-device-position-request-tracker-name-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-device-position-request
                    'make-batch-get-device-position-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-device-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-device-position-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-ids))
      (common-lisp:list
       (common-lisp:cons "DeviceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-device-position-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-device-position-request-device-ids-list ()
   '(trivial-types:proper-list id))
 (common-lisp:defun make-batch-get-device-position-request-device-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype batch-get-device-position-request-tracker-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-device-position-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-device-position-response-"))
   (device-positions (common-lisp:error ":device-positions is required") :type
    (common-lisp:or device-position-list common-lisp:null))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or batch-get-device-position-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-device-position-response
                    'make-batch-get-device-position-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-device-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-device-position-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-positions))
      (common-lisp:list
       (common-lisp:cons "DevicePositions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-device-position-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-item-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-item-error-"))
   (code common-lisp:nil :type
    (common-lisp:or batch-item-error-code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-item-error 'make-batch-item-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-item-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-item-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-item-error))
   common-lisp:nil))
(common-lisp:deftype batch-item-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-geofence-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-geofence-error-"))
   (error (common-lisp:error ":error is required") :type
    (common-lisp:or batch-item-error common-lisp:null))
   (geofence-id (common-lisp:error ":geofence-id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-geofence-error 'make-batch-put-geofence-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-id))
      (common-lisp:list
       (common-lisp:cons "GeofenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-geofence-error-list ()
   '(trivial-types:proper-list batch-put-geofence-error))
 (common-lisp:defun make-batch-put-geofence-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-geofence-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-geofence-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-geofence-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or batch-put-geofence-request-entries-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-geofence-request
                    'make-batch-put-geofence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-geofence-request-entries-list ()
   '(trivial-types:proper-list batch-put-geofence-request-entry))
 (common-lisp:defun make-batch-put-geofence-request-entries-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-geofence-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-geofence-request-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-geofence-request-entry-"))
   (geofence-id (common-lisp:error ":geofence-id is required") :type
    (common-lisp:or id common-lisp:null))
   (geofence-properties common-lisp:nil :type
    (common-lisp:or property-map common-lisp:null))
   (geometry (common-lisp:error ":geometry is required") :type
    (common-lisp:or geofence-geometry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-geofence-request-entry
                    'make-batch-put-geofence-request-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-id))
      (common-lisp:list
       (common-lisp:cons "GeofenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-properties))
      (common-lisp:list
       (common-lisp:cons "GeofenceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-geofence-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-geofence-response-"))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or batch-put-geofence-error-list common-lisp:null))
   (successes (common-lisp:error ":successes is required") :type
    (common-lisp:or batch-put-geofence-success-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-geofence-response
                    'make-batch-put-geofence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successes))
      (common-lisp:list
       (common-lisp:cons "Successes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-geofence-success (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-geofence-success-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (geofence-id (common-lisp:error ":geofence-id is required") :type
    (common-lisp:or id common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-geofence-success
                    'make-batch-put-geofence-success))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-success))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-success))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-id))
      (common-lisp:list
       (common-lisp:cons "GeofenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-geofence-success))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-geofence-success-list ()
   '(trivial-types:proper-list batch-put-geofence-success))
 (common-lisp:defun make-batch-put-geofence-success-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-geofence-success))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-device-position-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-device-position-error-"))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or id common-lisp:null))
   (error (common-lisp:error ":error is required") :type
    (common-lisp:or batch-item-error common-lisp:null))
   (sample-time (common-lisp:error ":sample-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-device-position-error
                    'make-batch-update-device-position-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-device-position-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-device-position-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-time))
      (common-lisp:list
       (common-lisp:cons "SampleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-device-position-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-update-device-position-error-list ()
   '(trivial-types:proper-list batch-update-device-position-error))
 (common-lisp:defun make-batch-update-device-position-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-update-device-position-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-device-position-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-device-position-request-"))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or batch-update-device-position-request-updates-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-device-position-request
                    'make-batch-update-device-position-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-device-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-device-position-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-device-position-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-update-device-position-request-updates-list ()
   '(trivial-types:proper-list device-position-update))
 (common-lisp:defun make-batch-update-device-position-request-updates-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-position-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-device-position-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-device-position-response-"))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or batch-update-device-position-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-device-position-response
                    'make-batch-update-device-position-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-device-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-device-position-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-device-position-response))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype bounding-box () '(trivial-types:proper-list double))
 (common-lisp:defun make-bounding-box
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list double))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (calculate-route-car-mode-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculate-route-car-mode-options-"))
   (avoid-ferries common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (avoid-tolls common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculate-route-car-mode-options
                    'make-calculate-route-car-mode-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-car-mode-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-car-mode-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avoid-ferries))
      (common-lisp:list
       (common-lisp:cons "AvoidFerries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avoid-tolls))
      (common-lisp:list
       (common-lisp:cons "AvoidTolls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-car-mode-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (calculate-route-matrix-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculate-route-matrix-request-"))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (car-mode-options common-lisp:nil :type
    (common-lisp:or calculate-route-car-mode-options common-lisp:null))
   (depart-now common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (departure-positions (common-lisp:error ":departure-positions is required")
    :type
    (common-lisp:or calculate-route-matrix-request-departure-positions-list
                    common-lisp:null))
   (departure-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (destination-positions
    (common-lisp:error ":destination-positions is required") :type
    (common-lisp:or calculate-route-matrix-request-destination-positions-list
                    common-lisp:null))
   (distance-unit common-lisp:nil :type
    (common-lisp:or distance-unit common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (travel-mode common-lisp:nil :type
    (common-lisp:or travel-mode common-lisp:null))
   (truck-mode-options common-lisp:nil :type
    (common-lisp:or calculate-route-truck-mode-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculate-route-matrix-request
                    'make-calculate-route-matrix-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-matrix-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-matrix-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'car-mode-options))
      (common-lisp:list
       (common-lisp:cons "CarModeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'depart-now))
      (common-lisp:list
       (common-lisp:cons "DepartNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'departure-positions))
      (common-lisp:list
       (common-lisp:cons "DeparturePositions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'departure-time))
      (common-lisp:list
       (common-lisp:cons "DepartureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-positions))
      (common-lisp:list
       (common-lisp:cons "DestinationPositions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance-unit))
      (common-lisp:list
       (common-lisp:cons "DistanceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'travel-mode))
      (common-lisp:list
       (common-lisp:cons "TravelMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truck-mode-options))
      (common-lisp:list
       (common-lisp:cons "TruckModeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-matrix-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype calculate-route-matrix-request-departure-positions-list
                      ()
   '(trivial-types:proper-list position))
 (common-lisp:defun make-calculate-route-matrix-request-departure-positions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype calculate-route-matrix-request-destination-positions-list
                      ()
   '(trivial-types:proper-list position))
 (common-lisp:defun make-calculate-route-matrix-request-destination-positions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (calculate-route-matrix-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculate-route-matrix-response-"))
   (route-matrix (common-lisp:error ":route-matrix is required") :type
    (common-lisp:or route-matrix common-lisp:null))
   (snapped-departure-positions common-lisp:nil :type
    (common-lisp:or
     calculate-route-matrix-response-snapped-departure-positions-list
     common-lisp:null))
   (snapped-destination-positions common-lisp:nil :type
    (common-lisp:or
     calculate-route-matrix-response-snapped-destination-positions-list
     common-lisp:null))
   (summary (common-lisp:error ":summary is required") :type
    (common-lisp:or calculate-route-matrix-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculate-route-matrix-response
                    'make-calculate-route-matrix-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-matrix-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-matrix-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-matrix))
      (common-lisp:list
       (common-lisp:cons "RouteMatrix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapped-departure-positions))
      (common-lisp:list
       (common-lisp:cons "SnappedDeparturePositions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapped-destination-positions))
      (common-lisp:list
       (common-lisp:cons "SnappedDestinationPositions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-matrix-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype calculate-route-matrix-response-snapped-departure-positions-list
                      ()
   '(trivial-types:proper-list position))
 (common-lisp:defun make-calculate-route-matrix-response-snapped-departure-positions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype calculate-route-matrix-response-snapped-destination-positions-list
                      ()
   '(trivial-types:proper-list position))
 (common-lisp:defun make-calculate-route-matrix-response-snapped-destination-positions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (calculate-route-matrix-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculate-route-matrix-summary-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (distance-unit (common-lisp:error ":distance-unit is required") :type
    (common-lisp:or distance-unit common-lisp:null))
   (error-count (common-lisp:error ":error-count is required") :type
    (common-lisp:or calculate-route-matrix-summary-error-count-integer
                    common-lisp:null))
   (route-count (common-lisp:error ":route-count is required") :type
    (common-lisp:or calculate-route-matrix-summary-route-count-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculate-route-matrix-summary
                    'make-calculate-route-matrix-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-matrix-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-matrix-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance-unit))
      (common-lisp:list
       (common-lisp:cons "DistanceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-count))
      (common-lisp:list
       (common-lisp:cons "ErrorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-count))
      (common-lisp:list
       (common-lisp:cons "RouteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-matrix-summary))
   common-lisp:nil))
(common-lisp:deftype calculate-route-matrix-summary-error-count-integer ()
  'common-lisp:integer)
(common-lisp:deftype calculate-route-matrix-summary-route-count-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (calculate-route-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculate-route-request-"))
   (arrival-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (car-mode-options common-lisp:nil :type
    (common-lisp:or calculate-route-car-mode-options common-lisp:null))
   (depart-now common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (departure-position (common-lisp:error ":departure-position is required")
    :type (common-lisp:or position common-lisp:null))
   (departure-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (destination-position
    (common-lisp:error ":destination-position is required") :type
    (common-lisp:or position common-lisp:null))
   (distance-unit common-lisp:nil :type
    (common-lisp:or distance-unit common-lisp:null))
   (include-leg-geometry common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (optimize-for common-lisp:nil :type
    (common-lisp:or optimization-mode common-lisp:null))
   (travel-mode common-lisp:nil :type
    (common-lisp:or travel-mode common-lisp:null))
   (truck-mode-options common-lisp:nil :type
    (common-lisp:or calculate-route-truck-mode-options common-lisp:null))
   (waypoint-positions common-lisp:nil :type
    (common-lisp:or calculate-route-request-waypoint-positions-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculate-route-request 'make-calculate-route-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arrival-time))
      (common-lisp:list
       (common-lisp:cons "ArrivalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'car-mode-options))
      (common-lisp:list
       (common-lisp:cons "CarModeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'depart-now))
      (common-lisp:list
       (common-lisp:cons "DepartNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'departure-position))
      (common-lisp:list
       (common-lisp:cons "DeparturePosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'departure-time))
      (common-lisp:list
       (common-lisp:cons "DepartureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-position))
      (common-lisp:list
       (common-lisp:cons "DestinationPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance-unit))
      (common-lisp:list
       (common-lisp:cons "DistanceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-leg-geometry))
      (common-lisp:list
       (common-lisp:cons "IncludeLegGeometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optimize-for))
      (common-lisp:list
       (common-lisp:cons "OptimizeFor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'travel-mode))
      (common-lisp:list
       (common-lisp:cons "TravelMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truck-mode-options))
      (common-lisp:list
       (common-lisp:cons "TruckModeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waypoint-positions))
      (common-lisp:list
       (common-lisp:cons "WaypointPositions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype calculate-route-request-waypoint-positions-list ()
   '(trivial-types:proper-list position))
 (common-lisp:defun make-calculate-route-request-waypoint-positions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (calculate-route-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculate-route-response-"))
   (legs (common-lisp:error ":legs is required") :type
    (common-lisp:or leg-list common-lisp:null))
   (summary (common-lisp:error ":summary is required") :type
    (common-lisp:or calculate-route-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculate-route-response 'make-calculate-route-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legs))
      (common-lisp:list
       (common-lisp:cons "Legs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (calculate-route-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculate-route-summary-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (distance (common-lisp:error ":distance is required") :type
    (common-lisp:or calculate-route-summary-distance-double common-lisp:null))
   (distance-unit (common-lisp:error ":distance-unit is required") :type
    (common-lisp:or distance-unit common-lisp:null))
   (duration-seconds (common-lisp:error ":duration-seconds is required") :type
    (common-lisp:or calculate-route-summary-duration-seconds-double
                    common-lisp:null))
   (route-bbox (common-lisp:error ":route-bbox is required") :type
    (common-lisp:or bounding-box common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculate-route-summary 'make-calculate-route-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance))
      (common-lisp:list
       (common-lisp:cons "Distance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance-unit))
      (common-lisp:list
       (common-lisp:cons "DistanceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-bbox))
      (common-lisp:list
       (common-lisp:cons "RouteBBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-summary))
   common-lisp:nil))
(common-lisp:deftype calculate-route-summary-distance-double ()
  'common-lisp:double-float)
(common-lisp:deftype calculate-route-summary-duration-seconds-double ()
  'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (calculate-route-truck-mode-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculate-route-truck-mode-options-"))
   (avoid-ferries common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (avoid-tolls common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or truck-dimensions common-lisp:null))
   (weight common-lisp:nil :type
    (common-lisp:or truck-weight common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculate-route-truck-mode-options
                    'make-calculate-route-truck-mode-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-truck-mode-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-truck-mode-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avoid-ferries))
      (common-lisp:list
       (common-lisp:cons "AvoidFerries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avoid-tolls))
      (common-lisp:list
       (common-lisp:cons "AvoidTolls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculate-route-truck-mode-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (circle (:copier common-lisp:nil) (:conc-name "struct-shape-circle-"))
   (center (common-lisp:error ":center is required") :type
    (common-lisp:or position common-lisp:null))
   (radius (common-lisp:error ":radius is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'circle 'make-circle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input circle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input circle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'center))
      (common-lisp:list
       (common-lisp:cons "Center"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius))
      (common-lisp:list
       (common-lisp:cons "Radius"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input circle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (location-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype country-code () 'common-lisp:string)
(common-lisp:deftype country-code3 () 'common-lisp:string)
(common-lisp:deftype country-code3or-empty () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype country-code-list ()
   '(trivial-types:proper-list country-code))
 (common-lisp:defun make-country-code-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list country-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-geofence-collection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-geofence-collection-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (pricing-plan-data-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-geofence-collection-request
                    'make-create-geofence-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-geofence-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-geofence-collection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-name))
      (common-lisp:list
       (common-lisp:cons "CollectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pricing-plan-data-source))
      (common-lisp:list
       (common-lisp:cons "PricingPlanDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-geofence-collection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-geofence-collection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-geofence-collection-response-"))
   (collection-arn (common-lisp:error ":collection-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-geofence-collection-response
                    'make-create-geofence-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-geofence-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-geofence-collection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-arn))
      (common-lisp:list
       (common-lisp:cons "CollectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-name))
      (common-lisp:list
       (common-lisp:cons "CollectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-geofence-collection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-key-request-"))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (expire-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (no-expiry common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (restrictions (common-lisp:error ":restrictions is required") :type
    (common-lisp:or api-key-restrictions common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-key-request 'make-create-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expire-time))
      (common-lisp:list
       (common-lisp:cons "ExpireTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-expiry))
      (common-lisp:list
       (common-lisp:cons "NoExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "Restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-key-response-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or api-key common-lisp:null))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-key-response 'make-create-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-map-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-map-request-"))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or map-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-map-request 'make-create-map-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-map-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-map-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-name))
      (common-lisp:list
       (common-lisp:cons "MapName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-map-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-map-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-map-response-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (map-arn (common-lisp:error ":map-arn is required") :type
    (common-lisp:or geo-arn common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-map-response 'make-create-map-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-map-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-map-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-arn))
      (common-lisp:list
       (common-lisp:cons "MapArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-name))
      (common-lisp:list
       (common-lisp:cons "MapName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-map-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-place-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-place-index-request-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (data-source-configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-place-index-request
                    'make-create-place-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-place-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-place-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-place-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-place-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-place-index-response-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (index-arn (common-lisp:error ":index-arn is required") :type
    (common-lisp:or geo-arn common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-place-index-response
                    'make-create-place-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-place-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-place-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "IndexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-place-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-route-calculator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-route-calculator-request-"))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-route-calculator-request
                    'make-create-route-calculator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-route-calculator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-route-calculator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculator-name))
      (common-lisp:list
       (common-lisp:cons "CalculatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-route-calculator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-route-calculator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-route-calculator-response-"))
   (calculator-arn (common-lisp:error ":calculator-arn is required") :type
    (common-lisp:or geo-arn common-lisp:null))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-route-calculator-response
                    'make-create-route-calculator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-route-calculator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-route-calculator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculator-arn))
      (common-lisp:list
       (common-lisp:cons "CalculatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculator-name))
      (common-lisp:list
       (common-lisp:cons "CalculatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-route-calculator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-tracker-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-tracker-request-"))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (event-bridge-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-enable-geospatial-queries common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (position-filtering common-lisp:nil :type
    (common-lisp:or position-filtering common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (pricing-plan-data-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-tracker-request 'make-create-tracker-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-tracker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-tracker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-bridge-enabled))
      (common-lisp:list
       (common-lisp:cons "EventBridgeEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-key-enable-geospatial-queries))
      (common-lisp:list
       (common-lisp:cons "KmsKeyEnableGeospatialQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position-filtering))
      (common-lisp:list
       (common-lisp:cons "PositionFiltering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pricing-plan-data-source))
      (common-lisp:list
       (common-lisp:cons "PricingPlanDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-name))
      (common-lisp:list
       (common-lisp:cons "TrackerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-tracker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-tracker-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-tracker-response-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (tracker-arn (common-lisp:error ":tracker-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-tracker-response 'make-create-tracker-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-tracker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-tracker-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-arn))
      (common-lisp:list
       (common-lisp:cons "TrackerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-name))
      (common-lisp:list
       (common-lisp:cons "TrackerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-tracker-response))
   common-lisp:nil))
(common-lisp:deftype custom-layer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-layer-list ()
   '(trivial-types:proper-list custom-layer))
 (common-lisp:defun make-custom-layer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-layer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-configuration-"))
   (intended-use common-lisp:nil :type
    (common-lisp:or intended-use common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-configuration
                    'make-data-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intended-use))
      (common-lisp:list
       (common-lisp:cons "IntendedUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-geofence-collection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-geofence-collection-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-geofence-collection-request
                    'make-delete-geofence-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-geofence-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-geofence-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-geofence-collection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-geofence-collection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-geofence-collection-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-geofence-collection-response
                    'make-delete-geofence-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-geofence-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-geofence-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-geofence-collection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-key-request-"))
   (force-delete common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-key-request 'make-delete-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-key-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-key-response 'make-delete-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-map-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-map-request-"))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-map-request 'make-delete-map-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-map-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-map-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-map-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-map-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-map-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-map-response 'make-delete-map-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-map-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-map-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-map-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-place-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-place-index-request-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-place-index-request
                    'make-delete-place-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-place-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-place-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-place-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-place-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-place-index-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-place-index-response
                    'make-delete-place-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-place-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-place-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-place-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-route-calculator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-route-calculator-request-"))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-route-calculator-request
                    'make-delete-route-calculator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-route-calculator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-route-calculator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-route-calculator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-route-calculator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-route-calculator-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-route-calculator-response
                    'make-delete-route-calculator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-route-calculator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-route-calculator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-route-calculator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tracker-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tracker-request-"))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tracker-request 'make-delete-tracker-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-tracker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-tracker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-tracker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tracker-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tracker-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-tracker-response 'make-delete-tracker-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-tracker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-tracker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-tracker-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-geofence-collection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-geofence-collection-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-geofence-collection-request
                    'make-describe-geofence-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-geofence-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-geofence-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-geofence-collection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-geofence-collection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-geofence-collection-response-"))
   (collection-arn (common-lisp:error ":collection-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (geofence-count common-lisp:nil :type
    (common-lisp:or
     describe-geofence-collection-response-geofence-count-integer
     common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (pricing-plan-data-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-geofence-collection-response
                    'make-describe-geofence-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-geofence-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-geofence-collection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-arn))
      (common-lisp:list
       (common-lisp:cons "CollectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-name))
      (common-lisp:list
       (common-lisp:cons "CollectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-count))
      (common-lisp:list
       (common-lisp:cons "GeofenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pricing-plan-data-source))
      (common-lisp:list
       (common-lisp:cons "PricingPlanDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-geofence-collection-response))
   common-lisp:nil))
(common-lisp:deftype describe-geofence-collection-response-geofence-count-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-key-request-"))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-key-request 'make-describe-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-key-response-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (expire-time (common-lisp:error ":expire-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or api-key common-lisp:null))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (restrictions (common-lisp:error ":restrictions is required") :type
    (common-lisp:or api-key-restrictions common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-key-response 'make-describe-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expire-time))
      (common-lisp:list
       (common-lisp:cons "ExpireTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "Restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-map-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-map-request-"))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-map-request 'make-describe-map-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-map-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-map-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-map-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-map-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-map-response-"))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or map-configuration common-lisp:null))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (map-arn (common-lisp:error ":map-arn is required") :type
    (common-lisp:or geo-arn common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-map-response 'make-describe-map-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-map-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-map-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-arn))
      (common-lisp:list
       (common-lisp:cons "MapArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-name))
      (common-lisp:list
       (common-lisp:cons "MapName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-map-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-place-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-place-index-request-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-place-index-request
                    'make-describe-place-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-place-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-place-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-place-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-place-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-place-index-response-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (data-source-configuration
    (common-lisp:error ":data-source-configuration is required") :type
    (common-lisp:or data-source-configuration common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (index-arn (common-lisp:error ":index-arn is required") :type
    (common-lisp:or geo-arn common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-place-index-response
                    'make-describe-place-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-place-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-place-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "IndexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-place-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-route-calculator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-route-calculator-request-"))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-route-calculator-request
                    'make-describe-route-calculator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-calculator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-calculator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-calculator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-route-calculator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-route-calculator-response-"))
   (calculator-arn (common-lisp:error ":calculator-arn is required") :type
    (common-lisp:or geo-arn common-lisp:null))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-route-calculator-response
                    'make-describe-route-calculator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-calculator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-calculator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculator-arn))
      (common-lisp:list
       (common-lisp:cons "CalculatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculator-name))
      (common-lisp:list
       (common-lisp:cons "CalculatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-calculator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tracker-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tracker-request-"))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tracker-request 'make-describe-tracker-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tracker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tracker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tracker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tracker-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tracker-response-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (event-bridge-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-enable-geospatial-queries common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (position-filtering common-lisp:nil :type
    (common-lisp:or position-filtering common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (pricing-plan-data-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (tracker-arn (common-lisp:error ":tracker-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tracker-response
                    'make-describe-tracker-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tracker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tracker-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-bridge-enabled))
      (common-lisp:list
       (common-lisp:cons "EventBridgeEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-key-enable-geospatial-queries))
      (common-lisp:list
       (common-lisp:cons "KmsKeyEnableGeospatialQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position-filtering))
      (common-lisp:list
       (common-lisp:cons "PositionFiltering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pricing-plan-data-source))
      (common-lisp:list
       (common-lisp:cons "PricingPlanDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-arn))
      (common-lisp:list
       (common-lisp:cons "TrackerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-name))
      (common-lisp:list
       (common-lisp:cons "TrackerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tracker-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (device-position (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-position-"))
   (accuracy common-lisp:nil :type
    (common-lisp:or positional-accuracy common-lisp:null))
   (device-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (position (common-lisp:error ":position is required") :type
    (common-lisp:or position common-lisp:null))
   (position-properties common-lisp:nil :type
    (common-lisp:or property-map common-lisp:null))
   (received-time (common-lisp:error ":received-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (sample-time (common-lisp:error ":sample-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'device-position 'make-device-position))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accuracy))
      (common-lisp:list
       (common-lisp:cons "Accuracy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position-properties))
      (common-lisp:list
       (common-lisp:cons "PositionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'received-time))
      (common-lisp:list
       (common-lisp:cons "ReceivedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-time))
      (common-lisp:list
       (common-lisp:cons "SampleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-position))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-position-list ()
   '(trivial-types:proper-list device-position))
 (common-lisp:defun make-device-position-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (device-position-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-position-update-"))
   (accuracy common-lisp:nil :type
    (common-lisp:or positional-accuracy common-lisp:null))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or id common-lisp:null))
   (position (common-lisp:error ":position is required") :type
    (common-lisp:or position common-lisp:null))
   (position-properties common-lisp:nil :type
    (common-lisp:or property-map common-lisp:null))
   (sample-time (common-lisp:error ":sample-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'device-position-update 'make-device-position-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-position-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-position-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accuracy))
      (common-lisp:list
       (common-lisp:cons "Accuracy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position-properties))
      (common-lisp:list
       (common-lisp:cons "PositionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-time))
      (common-lisp:list
       (common-lisp:cons "SampleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-position-update))
   common-lisp:nil))
(common-lisp:deftype dimension-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-tracker-consumer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-tracker-consumer-request-"))
   (consumer-arn (common-lisp:error ":consumer-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-tracker-consumer-request
                    'make-disassociate-tracker-consumer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tracker-consumer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tracker-consumer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tracker-consumer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-tracker-consumer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-tracker-consumer-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-tracker-consumer-response
                    'make-disassociate-tracker-consumer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tracker-consumer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tracker-consumer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tracker-consumer-response))
   common-lisp:nil))
(common-lisp:deftype distance-unit () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype filter-place-category-list ()
   '(trivial-types:proper-list place-category))
 (common-lisp:defun make-filter-place-category-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list place-category))
   aws-sdk/generator/shape::members))
(common-lisp:deftype geo-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (geofence-geometry (:copier common-lisp:nil)
      (:conc-name "struct-shape-geofence-geometry-"))
   (circle common-lisp:nil :type (common-lisp:or circle common-lisp:null))
   (polygon common-lisp:nil :type
    (common-lisp:or linear-rings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geofence-geometry 'make-geofence-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geofence-geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geofence-geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'circle))
      (common-lisp:list
       (common-lisp:cons "Circle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polygon))
      (common-lisp:list
       (common-lisp:cons "Polygon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geofence-geometry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-device-position-history-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-device-position-history-request-"))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or id common-lisp:null))
   (end-time-exclusive common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or get-device-position-history-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (start-time-inclusive common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-device-position-history-request
                    'make-get-device-position-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time-exclusive))
      (common-lisp:list
       (common-lisp:cons "EndTimeExclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-time-inclusive))
      (common-lisp:list
       (common-lisp:cons "StartTimeInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-history-request))
   common-lisp:nil))
(common-lisp:deftype get-device-position-history-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-device-position-history-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-device-position-history-response-"))
   (device-positions (common-lisp:error ":device-positions is required") :type
    (common-lisp:or device-position-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-device-position-history-response
                    'make-get-device-position-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-positions))
      (common-lisp:list
       (common-lisp:cons "DevicePositions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-device-position-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-device-position-request-"))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or id common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-device-position-request
                    'make-get-device-position-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-device-position-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-device-position-response-"))
   (accuracy common-lisp:nil :type
    (common-lisp:or positional-accuracy common-lisp:null))
   (device-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (position (common-lisp:error ":position is required") :type
    (common-lisp:or position common-lisp:null))
   (position-properties common-lisp:nil :type
    (common-lisp:or property-map common-lisp:null))
   (received-time (common-lisp:error ":received-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (sample-time (common-lisp:error ":sample-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-device-position-response
                    'make-get-device-position-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accuracy))
      (common-lisp:list
       (common-lisp:cons "Accuracy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position-properties))
      (common-lisp:list
       (common-lisp:cons "PositionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'received-time))
      (common-lisp:list
       (common-lisp:cons "ReceivedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-time))
      (common-lisp:list
       (common-lisp:cons "SampleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-position-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-geofence-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-geofence-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (geofence-id (common-lisp:error ":geofence-id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-geofence-request 'make-get-geofence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-geofence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-geofence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-geofence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-geofence-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-geofence-response-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (geofence-id (common-lisp:error ":geofence-id is required") :type
    (common-lisp:or id common-lisp:null))
   (geofence-properties common-lisp:nil :type
    (common-lisp:or property-map common-lisp:null))
   (geometry (common-lisp:error ":geometry is required") :type
    (common-lisp:or geofence-geometry common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or string common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-geofence-response 'make-get-geofence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-geofence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-geofence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-id))
      (common-lisp:list
       (common-lisp:cons "GeofenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-properties))
      (common-lisp:list
       (common-lisp:cons "GeofenceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-geofence-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-map-glyphs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-map-glyphs-request-"))
   (font-stack (common-lisp:error ":font-stack is required") :type
    (common-lisp:or string common-lisp:null))
   (font-unicode-range (common-lisp:error ":font-unicode-range is required")
    :type
    (common-lisp:or get-map-glyphs-request-font-unicode-range-string
                    common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-map-glyphs-request 'make-get-map-glyphs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-map-glyphs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-map-glyphs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-map-glyphs-request))
   common-lisp:nil))
(common-lisp:deftype get-map-glyphs-request-font-unicode-range-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-map-glyphs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-map-glyphs-response-"))
   (blob common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-map-glyphs-response 'make-get-map-glyphs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-map-glyphs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-map-glyphs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob))
      (common-lisp:list
       (common-lisp:cons "Blob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-map-glyphs-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'blob)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-map-sprites-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-map-sprites-request-"))
   (file-name (common-lisp:error ":file-name is required") :type
    (common-lisp:or get-map-sprites-request-file-name-string common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-map-sprites-request 'make-get-map-sprites-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-map-sprites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-map-sprites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-map-sprites-request))
   common-lisp:nil))
(common-lisp:deftype get-map-sprites-request-file-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-map-sprites-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-map-sprites-response-"))
   (blob common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-map-sprites-response 'make-get-map-sprites-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-map-sprites-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-map-sprites-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob))
      (common-lisp:list
       (common-lisp:cons "Blob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-map-sprites-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'blob)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-map-style-descriptor-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-map-style-descriptor-request-"))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-map-style-descriptor-request
                    'make-get-map-style-descriptor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-map-style-descriptor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-map-style-descriptor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-map-style-descriptor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-map-style-descriptor-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-map-style-descriptor-response-"))
   (blob common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-map-style-descriptor-response
                    'make-get-map-style-descriptor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-map-style-descriptor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-map-style-descriptor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob))
      (common-lisp:list
       (common-lisp:cons "Blob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-map-style-descriptor-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'blob)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-map-tile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-map-tile-request-"))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (x (common-lisp:error ":x is required") :type
    (common-lisp:or get-map-tile-request-xstring common-lisp:null))
   (y (common-lisp:error ":y is required") :type
    (common-lisp:or get-map-tile-request-ystring common-lisp:null))
   (z (common-lisp:error ":z is required") :type
    (common-lisp:or get-map-tile-request-zstring common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-map-tile-request 'make-get-map-tile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-map-tile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-map-tile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-map-tile-request))
   common-lisp:nil))
(common-lisp:deftype get-map-tile-request-xstring () 'common-lisp:string)
(common-lisp:deftype get-map-tile-request-ystring () 'common-lisp:string)
(common-lisp:deftype get-map-tile-request-zstring () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-map-tile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-map-tile-response-"))
   (blob common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-map-tile-response 'make-get-map-tile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-map-tile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-map-tile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob))
      (common-lisp:list
       (common-lisp:cons "Blob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-map-tile-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'blob)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-place-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-place-request-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-tag common-lisp:null))
   (place-id (common-lisp:error ":place-id is required") :type
    (common-lisp:or place-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-place-request 'make-get-place-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-place-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-place-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-place-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-place-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-place-response-"))
   (place (common-lisp:error ":place is required") :type
    (common-lisp:or place common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-place-response 'make-get-place-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-place-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-place-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'place))
      (common-lisp:list
       (common-lisp:cons "Place"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-place-response))
   common-lisp:nil))
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype intended-use () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (location-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:deftype language-tag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (leg (:copier common-lisp:nil) (:conc-name "struct-shape-leg-"))
   (distance (common-lisp:error ":distance is required") :type
    (common-lisp:or leg-distance-double common-lisp:null))
   (duration-seconds (common-lisp:error ":duration-seconds is required") :type
    (common-lisp:or leg-duration-seconds-double common-lisp:null))
   (end-position (common-lisp:error ":end-position is required") :type
    (common-lisp:or position common-lisp:null))
   (geometry common-lisp:nil :type
    (common-lisp:or leg-geometry common-lisp:null))
   (start-position (common-lisp:error ":start-position is required") :type
    (common-lisp:or position common-lisp:null))
   (steps (common-lisp:error ":steps is required") :type
    (common-lisp:or step-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'leg 'make-leg))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input leg))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input leg))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance))
      (common-lisp:list
       (common-lisp:cons "Distance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-position))
      (common-lisp:list
       (common-lisp:cons "EndPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-position))
      (common-lisp:list
       (common-lisp:cons "StartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input leg))
   common-lisp:nil))
(common-lisp:deftype leg-distance-double () 'common-lisp:double-float)
(common-lisp:deftype leg-duration-seconds-double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (leg-geometry (:copier common-lisp:nil)
      (:conc-name "struct-shape-leg-geometry-"))
   (line-string common-lisp:nil :type
    (common-lisp:or line-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'leg-geometry 'make-leg-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input leg-geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input leg-geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-string))
      (common-lisp:list
       (common-lisp:cons "LineString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input leg-geometry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype leg-list () '(trivial-types:proper-list leg))
 (common-lisp:defun make-leg-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list leg))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype line-string () '(trivial-types:proper-list position))
 (common-lisp:defun make-line-string
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype linear-ring () '(trivial-types:proper-list position))
 (common-lisp:defun make-linear-ring
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype linear-rings () '(trivial-types:proper-list linear-ring))
 (common-lisp:defun make-linear-rings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list linear-ring))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-device-positions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-device-positions-request-"))
   (filter-geometry common-lisp:nil :type
    (common-lisp:or tracking-filter-geometry common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-device-positions-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-device-positions-request
                    'make-list-device-positions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-positions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-positions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-geometry))
      (common-lisp:list
       (common-lisp:cons "FilterGeometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-positions-request))
   common-lisp:nil))
(common-lisp:deftype list-device-positions-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-device-positions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-device-positions-response-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or list-device-positions-response-entry-list
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-device-positions-response
                    'make-list-device-positions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-positions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-positions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-positions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-device-positions-response-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-device-positions-response-entry-"))
   (accuracy common-lisp:nil :type
    (common-lisp:or positional-accuracy common-lisp:null))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or id common-lisp:null))
   (position (common-lisp:error ":position is required") :type
    (common-lisp:or position common-lisp:null))
   (position-properties common-lisp:nil :type
    (common-lisp:or property-map common-lisp:null))
   (sample-time (common-lisp:error ":sample-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-device-positions-response-entry
                    'make-list-device-positions-response-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-positions-response-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-positions-response-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accuracy))
      (common-lisp:list
       (common-lisp:cons "Accuracy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position-properties))
      (common-lisp:list
       (common-lisp:cons "PositionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-time))
      (common-lisp:list
       (common-lisp:cons "SampleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-positions-response-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-device-positions-response-entry-list ()
   '(trivial-types:proper-list list-device-positions-response-entry))
 (common-lisp:defun make-list-device-positions-response-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-device-positions-response-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-geofence-collections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geofence-collections-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-geofence-collections-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geofence-collections-request
                    'make-list-geofence-collections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-collections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-collections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-collections-request))
   common-lisp:nil))
(common-lisp:deftype list-geofence-collections-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-geofence-collections-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geofence-collections-response-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or list-geofence-collections-response-entry-list
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geofence-collections-response
                    'make-list-geofence-collections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-collections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-collections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-collections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-geofence-collections-response-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geofence-collections-response-entry-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (pricing-plan-data-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geofence-collections-response-entry
                    'make-list-geofence-collections-response-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-collections-response-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-collections-response-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-name))
      (common-lisp:list
       (common-lisp:cons "CollectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pricing-plan-data-source))
      (common-lisp:list
       (common-lisp:cons "PricingPlanDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-collections-response-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-geofence-collections-response-entry-list ()
   '(trivial-types:proper-list list-geofence-collections-response-entry))
 (common-lisp:defun make-list-geofence-collections-response-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-geofence-collections-response-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-geofence-response-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geofence-response-entry-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (geofence-id (common-lisp:error ":geofence-id is required") :type
    (common-lisp:or id common-lisp:null))
   (geofence-properties common-lisp:nil :type
    (common-lisp:or property-map common-lisp:null))
   (geometry (common-lisp:error ":geometry is required") :type
    (common-lisp:or geofence-geometry common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or string common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geofence-response-entry
                    'make-list-geofence-response-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-response-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-response-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-id))
      (common-lisp:list
       (common-lisp:cons "GeofenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-properties))
      (common-lisp:list
       (common-lisp:cons "GeofenceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geofence-response-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-geofence-response-entry-list ()
   '(trivial-types:proper-list list-geofence-response-entry))
 (common-lisp:defun make-list-geofence-response-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-geofence-response-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-geofences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geofences-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-geofences-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geofences-request 'make-list-geofences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geofences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geofences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geofences-request))
   common-lisp:nil))
(common-lisp:deftype list-geofences-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-geofences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geofences-response-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or list-geofence-response-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geofences-response 'make-list-geofences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geofences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geofences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geofences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-keys-request-"))
   (filter common-lisp:nil :type
    (common-lisp:or api-key-filter common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-keys-request-max-results-integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-keys-request 'make-list-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-keys-request))
   common-lisp:nil))
(common-lisp:deftype list-keys-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-keys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-keys-response-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or list-keys-response-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-keys-response 'make-list-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-keys-response-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-keys-response-entry-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (expire-time (common-lisp:error ":expire-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (restrictions (common-lisp:error ":restrictions is required") :type
    (common-lisp:or api-key-restrictions common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-keys-response-entry 'make-list-keys-response-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-keys-response-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-keys-response-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expire-time))
      (common-lisp:list
       (common-lisp:cons "ExpireTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "Restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-keys-response-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-keys-response-entry-list ()
   '(trivial-types:proper-list list-keys-response-entry))
 (common-lisp:defun make-list-keys-response-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-keys-response-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-maps-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-maps-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-maps-request-max-results-integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-maps-request 'make-list-maps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-maps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-maps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-maps-request))
   common-lisp:nil))
(common-lisp:deftype list-maps-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-maps-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-maps-response-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or list-maps-response-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-maps-response 'make-list-maps-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-maps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-maps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-maps-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-maps-response-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-maps-response-entry-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-maps-response-entry 'make-list-maps-response-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-maps-response-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-maps-response-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-name))
      (common-lisp:list
       (common-lisp:cons "MapName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-maps-response-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-maps-response-entry-list ()
   '(trivial-types:proper-list list-maps-response-entry))
 (common-lisp:defun make-list-maps-response-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-maps-response-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-place-indexes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-place-indexes-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-place-indexes-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-place-indexes-request
                    'make-list-place-indexes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-place-indexes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-place-indexes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-place-indexes-request))
   common-lisp:nil))
(common-lisp:deftype list-place-indexes-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-place-indexes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-place-indexes-response-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or list-place-indexes-response-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-place-indexes-response
                    'make-list-place-indexes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-place-indexes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-place-indexes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-place-indexes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-place-indexes-response-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-place-indexes-response-entry-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-place-indexes-response-entry
                    'make-list-place-indexes-response-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-place-indexes-response-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-place-indexes-response-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-place-indexes-response-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-place-indexes-response-entry-list ()
   '(trivial-types:proper-list list-place-indexes-response-entry))
 (common-lisp:defun make-list-place-indexes-response-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-place-indexes-response-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-route-calculators-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-route-calculators-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-route-calculators-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-route-calculators-request
                    'make-list-route-calculators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-route-calculators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-route-calculators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-route-calculators-request))
   common-lisp:nil))
(common-lisp:deftype list-route-calculators-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-route-calculators-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-route-calculators-response-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or list-route-calculators-response-entry-list
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-route-calculators-response
                    'make-list-route-calculators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-route-calculators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-route-calculators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-route-calculators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-route-calculators-response-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-route-calculators-response-entry-"))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-route-calculators-response-entry
                    'make-list-route-calculators-response-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-route-calculators-response-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-route-calculators-response-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculator-name))
      (common-lisp:list
       (common-lisp:cons "CalculatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-route-calculators-response-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-route-calculators-response-entry-list ()
   '(trivial-types:proper-list list-route-calculators-response-entry))
 (common-lisp:defun make-list-route-calculators-response-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-route-calculators-response-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tracker-consumers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tracker-consumers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-tracker-consumers-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tracker-consumers-request
                    'make-list-tracker-consumers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tracker-consumers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tracker-consumers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tracker-consumers-request))
   common-lisp:nil))
(common-lisp:deftype list-tracker-consumers-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-tracker-consumers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tracker-consumers-response-"))
   (consumer-arns (common-lisp:error ":consumer-arns is required") :type
    (common-lisp:or arn-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tracker-consumers-response
                    'make-list-tracker-consumers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tracker-consumers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tracker-consumers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arns))
      (common-lisp:list
       (common-lisp:cons "ConsumerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tracker-consumers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-trackers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-trackers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-trackers-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-trackers-request 'make-list-trackers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trackers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trackers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trackers-request))
   common-lisp:nil))
(common-lisp:deftype list-trackers-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-trackers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-trackers-response-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or list-trackers-response-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-trackers-response 'make-list-trackers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trackers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trackers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trackers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-trackers-response-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-trackers-response-entry-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (pricing-plan-data-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-trackers-response-entry
                    'make-list-trackers-response-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trackers-response-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trackers-response-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pricing-plan-data-source))
      (common-lisp:list
       (common-lisp:cons "PricingPlanDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-name))
      (common-lisp:list
       (common-lisp:cons "TrackerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trackers-response-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-trackers-response-entry-list ()
   '(trivial-types:proper-list list-trackers-response-entry))
 (common-lisp:defun make-list-trackers-response-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-trackers-response-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (map-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-map-configuration-"))
   (custom-layers common-lisp:nil :type
    (common-lisp:or custom-layer-list common-lisp:null))
   (political-view common-lisp:nil :type
    (common-lisp:or country-code3 common-lisp:null))
   (style (common-lisp:error ":style is required") :type
    (common-lisp:or map-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'map-configuration 'make-map-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input map-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input map-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-layers))
      (common-lisp:list
       (common-lisp:cons "CustomLayers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'political-view))
      (common-lisp:list
       (common-lisp:cons "PoliticalView"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "Style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input map-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (map-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-map-configuration-update-"))
   (custom-layers common-lisp:nil :type
    (common-lisp:or custom-layer-list common-lisp:null))
   (political-view common-lisp:nil :type
    (common-lisp:or country-code3or-empty common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'map-configuration-update 'make-map-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          map-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          map-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-layers))
      (common-lisp:list
       (common-lisp:cons "CustomLayers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'political-view))
      (common-lisp:list
       (common-lisp:cons "PoliticalView"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          map-configuration-update))
   common-lisp:nil))
(common-lisp:deftype map-style () 'common-lisp:string)
(common-lisp:deftype optimization-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (place (:copier common-lisp:nil) (:conc-name "struct-shape-place-"))
   (address-number common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (categories common-lisp:nil :type
    (common-lisp:or place-category-list common-lisp:null))
   (country common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (geometry (common-lisp:error ":geometry is required") :type
    (common-lisp:or place-geometry common-lisp:null))
   (interpolated common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (municipality common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (neighborhood common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (postal-code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (street common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sub-municipality common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sub-region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (supplemental-categories common-lisp:nil :type
    (common-lisp:or place-supplemental-category-list common-lisp:null))
   (time-zone common-lisp:nil :type
    (common-lisp:or time-zone common-lisp:null))
   (unit-number common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (unit-type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'place 'make-place))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input place))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input place))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-number))
      (common-lisp:list
       (common-lisp:cons "AddressNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpolated))
      (common-lisp:list
       (common-lisp:cons "Interpolated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'municipality))
      (common-lisp:list
       (common-lisp:cons "Municipality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neighborhood))
      (common-lisp:list
       (common-lisp:cons "Neighborhood"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street))
      (common-lisp:list
       (common-lisp:cons "Street"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-municipality))
      (common-lisp:list
       (common-lisp:cons "SubMunicipality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-region))
      (common-lisp:list
       (common-lisp:cons "SubRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supplemental-categories))
      (common-lisp:list
       (common-lisp:cons "SupplementalCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-number))
      (common-lisp:list
       (common-lisp:cons "UnitNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-type))
      (common-lisp:list
       (common-lisp:cons "UnitType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input place))
   common-lisp:nil))
(common-lisp:deftype place-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype place-category-list ()
   '(trivial-types:proper-list place-category))
 (common-lisp:defun make-place-category-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list place-category))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (place-geometry (:copier common-lisp:nil)
      (:conc-name "struct-shape-place-geometry-"))
   (point common-lisp:nil :type (common-lisp:or position common-lisp:null)))
 (common-lisp:export (common-lisp:list 'place-geometry 'make-place-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input place-geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input place-geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'point))
      (common-lisp:list
       (common-lisp:cons "Point"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input place-geometry))
   common-lisp:nil))
(common-lisp:deftype place-id () 'common-lisp:string)
(common-lisp:deftype place-index-search-result-limit () 'common-lisp:integer)
(common-lisp:deftype place-supplemental-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype place-supplemental-category-list ()
   '(trivial-types:proper-list place-supplemental-category))
 (common-lisp:defun make-place-supplemental-category-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            place-supplemental-category))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype position () '(trivial-types:proper-list double))
 (common-lisp:defun make-position
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list double))
   aws-sdk/generator/shape::members))
(common-lisp:deftype position-filtering () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (positional-accuracy (:copier common-lisp:nil)
      (:conc-name "struct-shape-positional-accuracy-"))
   (horizontal (common-lisp:error ":horizontal is required") :type
    (common-lisp:or positional-accuracy-horizontal-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'positional-accuracy 'make-positional-accuracy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input positional-accuracy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input positional-accuracy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horizontal))
      (common-lisp:list
       (common-lisp:cons "Horizontal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input positional-accuracy))
   common-lisp:nil))
(common-lisp:deftype positional-accuracy-horizontal-double ()
  'common-lisp:double-float)
(common-lisp:deftype pricing-plan () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype property-map () 'common-lisp:hash-table)
 (common-lisp:defun make-property-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype property-map-key-string () 'common-lisp:string)
(common-lisp:deftype property-map-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-geofence-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-geofence-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (geofence-id (common-lisp:error ":geofence-id is required") :type
    (common-lisp:or id common-lisp:null))
   (geofence-properties common-lisp:nil :type
    (common-lisp:or property-map common-lisp:null))
   (geometry (common-lisp:error ":geometry is required") :type
    (common-lisp:or geofence-geometry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-geofence-request 'make-put-geofence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-geofence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-geofence-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-properties))
      (common-lisp:list
       (common-lisp:cons "GeofenceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-geofence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-geofence-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-geofence-response-"))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (geofence-id (common-lisp:error ":geofence-id is required") :type
    (common-lisp:or id common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-geofence-response 'make-put-geofence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-geofence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-geofence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geofence-id))
      (common-lisp:list
       (common-lisp:cons "GeofenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-geofence-response))
   common-lisp:nil))
(common-lisp:deftype referer-pattern () 'common-lisp:string)
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (location-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype route-matrix ()
   '(trivial-types:proper-list route-matrix-row))
 (common-lisp:defun make-route-matrix
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-matrix-row))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (route-matrix-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-matrix-entry-"))
   (distance common-lisp:nil :type
    (common-lisp:or route-matrix-entry-distance-double common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or route-matrix-entry-duration-seconds-double
                    common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or route-matrix-entry-error common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'route-matrix-entry 'make-route-matrix-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-matrix-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-matrix-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance))
      (common-lisp:list
       (common-lisp:cons "Distance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-matrix-entry))
   common-lisp:nil))
(common-lisp:deftype route-matrix-entry-distance-double ()
  'common-lisp:double-float)
(common-lisp:deftype route-matrix-entry-duration-seconds-double ()
  'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (route-matrix-entry-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-matrix-entry-error-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or route-matrix-error-code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'route-matrix-entry-error 'make-route-matrix-entry-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          route-matrix-entry-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          route-matrix-entry-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          route-matrix-entry-error))
   common-lisp:nil))
(common-lisp:deftype route-matrix-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype route-matrix-row ()
   '(trivial-types:proper-list route-matrix-entry))
 (common-lisp:defun make-route-matrix-row
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-matrix-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-for-position-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-for-position-result-"))
   (distance (common-lisp:error ":distance is required") :type
    (common-lisp:or search-for-position-result-distance-double
                    common-lisp:null))
   (place (common-lisp:error ":place is required") :type
    (common-lisp:or place common-lisp:null))
   (place-id common-lisp:nil :type (common-lisp:or place-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-for-position-result
                    'make-search-for-position-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-for-position-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-for-position-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance))
      (common-lisp:list
       (common-lisp:cons "Distance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'place))
      (common-lisp:list
       (common-lisp:cons "Place"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'place-id))
      (common-lisp:list
       (common-lisp:cons "PlaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-for-position-result))
   common-lisp:nil))
(common-lisp:deftype search-for-position-result-distance-double ()
  'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype search-for-position-result-list ()
   '(trivial-types:proper-list search-for-position-result))
 (common-lisp:defun make-search-for-position-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-for-position-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-for-suggestions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-for-suggestions-result-"))
   (categories common-lisp:nil :type
    (common-lisp:or place-category-list common-lisp:null))
   (place-id common-lisp:nil :type (common-lisp:or place-id common-lisp:null))
   (supplemental-categories common-lisp:nil :type
    (common-lisp:or place-supplemental-category-list common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-for-suggestions-result
                    'make-search-for-suggestions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-for-suggestions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-for-suggestions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'place-id))
      (common-lisp:list
       (common-lisp:cons "PlaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supplemental-categories))
      (common-lisp:list
       (common-lisp:cons "SupplementalCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-for-suggestions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-for-suggestions-result-list ()
   '(trivial-types:proper-list search-for-suggestions-result))
 (common-lisp:defun make-search-for-suggestions-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-for-suggestions-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-for-text-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-for-text-result-"))
   (distance common-lisp:nil :type
    (common-lisp:or search-for-text-result-distance-double common-lisp:null))
   (place (common-lisp:error ":place is required") :type
    (common-lisp:or place common-lisp:null))
   (place-id common-lisp:nil :type (common-lisp:or place-id common-lisp:null))
   (relevance common-lisp:nil :type
    (common-lisp:or search-for-text-result-relevance-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-for-text-result 'make-search-for-text-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-for-text-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-for-text-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance))
      (common-lisp:list
       (common-lisp:cons "Distance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'place))
      (common-lisp:list
       (common-lisp:cons "Place"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'place-id))
      (common-lisp:list
       (common-lisp:cons "PlaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance))
      (common-lisp:list
       (common-lisp:cons "Relevance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-for-text-result))
   common-lisp:nil))
(common-lisp:deftype search-for-text-result-distance-double ()
  'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype search-for-text-result-list ()
   '(trivial-types:proper-list search-for-text-result))
 (common-lisp:defun make-search-for-text-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-for-text-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-for-text-result-relevance-double ()
  'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (search-place-index-for-position-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-place-index-for-position-request-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-tag common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or place-index-search-result-limit common-lisp:null))
   (position (common-lisp:error ":position is required") :type
    (common-lisp:or position common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-place-index-for-position-request
                    'make-search-place-index-for-position-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-position-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-position-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-place-index-for-position-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-place-index-for-position-response-"))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or search-for-position-result-list common-lisp:null))
   (summary (common-lisp:error ":summary is required") :type
    (common-lisp:or search-place-index-for-position-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-place-index-for-position-response
                    'make-search-place-index-for-position-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-position-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-position-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-place-index-for-position-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-place-index-for-position-summary-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-tag common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or place-index-search-result-limit common-lisp:null))
   (position (common-lisp:error ":position is required") :type
    (common-lisp:or position common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-place-index-for-position-summary
                    'make-search-place-index-for-position-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-position-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-position-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-position-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-place-index-for-suggestions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-place-index-for-suggestions-request-"))
   (bias-position common-lisp:nil :type
    (common-lisp:or position common-lisp:null))
   (filter-bbox common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (filter-categories common-lisp:nil :type
    (common-lisp:or filter-place-category-list common-lisp:null))
   (filter-countries common-lisp:nil :type
    (common-lisp:or country-code-list common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-tag common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or
     search-place-index-for-suggestions-request-max-results-integer
     common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or search-place-index-for-suggestions-request-text-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-place-index-for-suggestions-request
                    'make-search-place-index-for-suggestions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-suggestions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-suggestions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bias-position))
      (common-lisp:list
       (common-lisp:cons "BiasPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-bbox))
      (common-lisp:list
       (common-lisp:cons "FilterBBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-categories))
      (common-lisp:list
       (common-lisp:cons "FilterCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-countries))
      (common-lisp:list
       (common-lisp:cons "FilterCountries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-suggestions-request))
   common-lisp:nil))
(common-lisp:deftype search-place-index-for-suggestions-request-max-results-integer
                     ()
  'common-lisp:integer)
(common-lisp:deftype search-place-index-for-suggestions-request-text-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-place-index-for-suggestions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-place-index-for-suggestions-response-"))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or search-for-suggestions-result-list common-lisp:null))
   (summary (common-lisp:error ":summary is required") :type
    (common-lisp:or search-place-index-for-suggestions-summary
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-place-index-for-suggestions-response
                    'make-search-place-index-for-suggestions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-suggestions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-suggestions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-suggestions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-place-index-for-suggestions-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-place-index-for-suggestions-summary-"))
   (bias-position common-lisp:nil :type
    (common-lisp:or position common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (filter-bbox common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (filter-categories common-lisp:nil :type
    (common-lisp:or filter-place-category-list common-lisp:null))
   (filter-countries common-lisp:nil :type
    (common-lisp:or country-code-list common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-tag common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-place-index-for-suggestions-summary
                    'make-search-place-index-for-suggestions-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-suggestions-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-suggestions-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bias-position))
      (common-lisp:list
       (common-lisp:cons "BiasPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-bbox))
      (common-lisp:list
       (common-lisp:cons "FilterBBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-categories))
      (common-lisp:list
       (common-lisp:cons "FilterCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-countries))
      (common-lisp:list
       (common-lisp:cons "FilterCountries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-suggestions-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-place-index-for-text-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-place-index-for-text-request-"))
   (bias-position common-lisp:nil :type
    (common-lisp:or position common-lisp:null))
   (filter-bbox common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (filter-categories common-lisp:nil :type
    (common-lisp:or filter-place-category-list common-lisp:null))
   (filter-countries common-lisp:nil :type
    (common-lisp:or country-code-list common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or api-key common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-tag common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or place-index-search-result-limit common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or search-place-index-for-text-request-text-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-place-index-for-text-request
                    'make-search-place-index-for-text-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-text-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-text-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bias-position))
      (common-lisp:list
       (common-lisp:cons "BiasPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-bbox))
      (common-lisp:list
       (common-lisp:cons "FilterBBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-categories))
      (common-lisp:list
       (common-lisp:cons "FilterCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-countries))
      (common-lisp:list
       (common-lisp:cons "FilterCountries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-text-request))
   common-lisp:nil))
(common-lisp:deftype search-place-index-for-text-request-text-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-place-index-for-text-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-place-index-for-text-response-"))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or search-for-text-result-list common-lisp:null))
   (summary (common-lisp:error ":summary is required") :type
    (common-lisp:or search-place-index-for-text-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-place-index-for-text-response
                    'make-search-place-index-for-text-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-text-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-text-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-text-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-place-index-for-text-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-place-index-for-text-summary-"))
   (bias-position common-lisp:nil :type
    (common-lisp:or position common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or string common-lisp:null))
   (filter-bbox common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (filter-categories common-lisp:nil :type
    (common-lisp:or filter-place-category-list common-lisp:null))
   (filter-countries common-lisp:nil :type
    (common-lisp:or country-code-list common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-tag common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or place-index-search-result-limit common-lisp:null))
   (result-bbox common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-place-index-for-text-summary
                    'make-search-place-index-for-text-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-text-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-text-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bias-position))
      (common-lisp:list
       (common-lisp:cons "BiasPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-bbox))
      (common-lisp:list
       (common-lisp:cons "FilterBBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-categories))
      (common-lisp:list
       (common-lisp:cons "FilterCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-countries))
      (common-lisp:list
       (common-lisp:cons "FilterCountries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-bbox))
      (common-lisp:list
       (common-lisp:cons "ResultBBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-place-index-for-text-summary))
   common-lisp:nil))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (location-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (step (:copier common-lisp:nil) (:conc-name "struct-shape-step-"))
   (distance (common-lisp:error ":distance is required") :type
    (common-lisp:or step-distance-double common-lisp:null))
   (duration-seconds (common-lisp:error ":duration-seconds is required") :type
    (common-lisp:or step-duration-seconds-double common-lisp:null))
   (end-position (common-lisp:error ":end-position is required") :type
    (common-lisp:or position common-lisp:null))
   (geometry-offset common-lisp:nil :type
    (common-lisp:or step-geometry-offset-integer common-lisp:null))
   (start-position (common-lisp:error ":start-position is required") :type
    (common-lisp:or position common-lisp:null)))
 (common-lisp:export (common-lisp:list 'step 'make-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance))
      (common-lisp:list
       (common-lisp:cons "Distance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-position))
      (common-lisp:list
       (common-lisp:cons "EndPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry-offset))
      (common-lisp:list
       (common-lisp:cons "GeometryOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-position))
      (common-lisp:list
       (common-lisp:cons "StartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step))
   common-lisp:nil))
(common-lisp:deftype step-distance-double () 'common-lisp:double-float)
(common-lisp:deftype step-duration-seconds-double () 'common-lisp:double-float)
(common-lisp:deftype step-geometry-offset-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype step-list () '(trivial-types:proper-list step))
 (common-lisp:defun make-step-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (location-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (time-zone (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-zone-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (offset common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-zone 'make-time-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "Offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-zone))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tracking-filter-geometry (:copier common-lisp:nil)
      (:conc-name "struct-shape-tracking-filter-geometry-"))
   (polygon common-lisp:nil :type
    (common-lisp:or linear-rings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tracking-filter-geometry 'make-tracking-filter-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tracking-filter-geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tracking-filter-geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polygon))
      (common-lisp:list
       (common-lisp:cons "Polygon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tracking-filter-geometry))
   common-lisp:nil))
(common-lisp:deftype travel-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (truck-dimensions (:copier common-lisp:nil)
      (:conc-name "struct-shape-truck-dimensions-"))
   (height common-lisp:nil :type
    (common-lisp:or truck-dimensions-height-double common-lisp:null))
   (length common-lisp:nil :type
    (common-lisp:or truck-dimensions-length-double common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or dimension-unit common-lisp:null))
   (width common-lisp:nil :type
    (common-lisp:or truck-dimensions-width-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'truck-dimensions 'make-truck-dimensions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input truck-dimensions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input truck-dimensions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "Length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input truck-dimensions))
   common-lisp:nil))
(common-lisp:deftype truck-dimensions-height-double ()
  'common-lisp:double-float)
(common-lisp:deftype truck-dimensions-length-double ()
  'common-lisp:double-float)
(common-lisp:deftype truck-dimensions-width-double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (truck-weight (:copier common-lisp:nil)
      (:conc-name "struct-shape-truck-weight-"))
   (total common-lisp:nil :type
    (common-lisp:or truck-weight-total-double common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or vehicle-weight-unit common-lisp:null)))
 (common-lisp:export (common-lisp:list 'truck-weight 'make-truck-weight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input truck-weight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input truck-weight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input truck-weight))
   common-lisp:nil))
(common-lisp:deftype truck-weight-total-double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-geofence-collection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-geofence-collection-request-"))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (pricing-plan-data-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-geofence-collection-request
                    'make-update-geofence-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-geofence-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-geofence-collection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pricing-plan-data-source))
      (common-lisp:list
       (common-lisp:cons "PricingPlanDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-geofence-collection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-geofence-collection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-geofence-collection-response-"))
   (collection-arn (common-lisp:error ":collection-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (collection-name (common-lisp:error ":collection-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-geofence-collection-response
                    'make-update-geofence-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-geofence-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-geofence-collection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-arn))
      (common-lisp:list
       (common-lisp:cons "CollectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-name))
      (common-lisp:list
       (common-lisp:cons "CollectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-geofence-collection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-key-request-"))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (expire-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (force-update common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (no-expiry common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (restrictions common-lisp:nil :type
    (common-lisp:or api-key-restrictions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-key-request 'make-update-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expire-time))
      (common-lisp:list
       (common-lisp:cons "ExpireTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-update))
      (common-lisp:list
       (common-lisp:cons "ForceUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-expiry))
      (common-lisp:list
       (common-lisp:cons "NoExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "Restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-key-response-"))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-key-response 'make-update-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-map-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-map-request-"))
   (configuration-update common-lisp:nil :type
    (common-lisp:or map-configuration-update common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-map-request 'make-update-map-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-map-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-map-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-update))
      (common-lisp:list
       (common-lisp:cons "ConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-map-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-map-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-map-response-"))
   (map-arn (common-lisp:error ":map-arn is required") :type
    (common-lisp:or geo-arn common-lisp:null))
   (map-name (common-lisp:error ":map-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-map-response 'make-update-map-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-map-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-map-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-arn))
      (common-lisp:list
       (common-lisp:cons "MapArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-name))
      (common-lisp:list
       (common-lisp:cons "MapName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-map-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-place-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-place-index-request-"))
   (data-source-configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-place-index-request
                    'make-update-place-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-place-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-place-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-place-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-place-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-place-index-response-"))
   (index-arn (common-lisp:error ":index-arn is required") :type
    (common-lisp:or geo-arn common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-place-index-response
                    'make-update-place-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-place-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-place-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "IndexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-place-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-route-calculator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-route-calculator-request-"))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-route-calculator-request
                    'make-update-route-calculator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-route-calculator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-route-calculator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-route-calculator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-route-calculator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-route-calculator-response-"))
   (calculator-arn (common-lisp:error ":calculator-arn is required") :type
    (common-lisp:or geo-arn common-lisp:null))
   (calculator-name (common-lisp:error ":calculator-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-route-calculator-response
                    'make-update-route-calculator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-route-calculator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-route-calculator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculator-arn))
      (common-lisp:list
       (common-lisp:cons "CalculatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculator-name))
      (common-lisp:list
       (common-lisp:cons "CalculatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-route-calculator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-tracker-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-tracker-request-"))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (event-bridge-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-enable-geospatial-queries common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (position-filtering common-lisp:nil :type
    (common-lisp:or position-filtering common-lisp:null))
   (pricing-plan common-lisp:nil :type
    (common-lisp:or pricing-plan common-lisp:null))
   (pricing-plan-data-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-tracker-request 'make-update-tracker-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-tracker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-tracker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-bridge-enabled))
      (common-lisp:list
       (common-lisp:cons "EventBridgeEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-key-enable-geospatial-queries))
      (common-lisp:list
       (common-lisp:cons "KmsKeyEnableGeospatialQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position-filtering))
      (common-lisp:list
       (common-lisp:cons "PositionFiltering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pricing-plan-data-source))
      (common-lisp:list
       (common-lisp:cons "PricingPlanDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-tracker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-tracker-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-tracker-response-"))
   (tracker-arn (common-lisp:error ":tracker-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tracker-name (common-lisp:error ":tracker-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-tracker-response 'make-update-tracker-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-tracker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-tracker-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-arn))
      (common-lisp:list
       (common-lisp:cons "TrackerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-name))
      (common-lisp:list
       (common-lisp:cons "TrackerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-tracker-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (location-error)
     ((field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype vehicle-weight-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-tracker-consumer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key consumer-arn tracker-name)
   (common-lisp:declare (common-lisp:ignorable consumer-arn tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-tracker-consumer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A/consumers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))))
                                                        "AssociateTrackerConsumer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-tracker-consumer))
(common-lisp:progn
 (common-lisp:defun batch-delete-device-position-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-ids tracker-name)
   (common-lisp:declare (common-lisp:ignorable device-ids tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-device-position-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A/delete-positions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))))
                                                        "BatchDeleteDevicePositionHistory"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-device-position-history))
(common-lisp:progn
 (common-lisp:defun batch-delete-geofence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name geofence-ids)
   (common-lisp:declare (common-lisp:ignorable collection-name geofence-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-geofence-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/geofencing/v0/collections/~A/delete-geofences"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collection-name))))
                                                        "BatchDeleteGeofence"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-geofence))
(common-lisp:progn
 (common-lisp:defun batch-evaluate-geofences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name device-position-updates)
   (common-lisp:declare
    (common-lisp:ignorable collection-name device-position-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-evaluate-geofences-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/geofencing/v0/collections/~A/positions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collection-name))))
                                                        "BatchEvaluateGeofences"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-evaluate-geofences))
(common-lisp:progn
 (common-lisp:defun batch-get-device-position
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-ids tracker-name)
   (common-lisp:declare (common-lisp:ignorable device-ids tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-device-position-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A/get-positions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))))
                                                        "BatchGetDevicePosition"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-device-position))
(common-lisp:progn
 (common-lisp:defun batch-put-geofence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name entries)
   (common-lisp:declare (common-lisp:ignorable collection-name entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-put-geofence-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/geofencing/v0/collections/~A/put-geofences"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collection-name))))
                                                        "BatchPutGeofence"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-put-geofence))
(common-lisp:progn
 (common-lisp:defun batch-update-device-position
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tracker-name updates)
   (common-lisp:declare (common-lisp:ignorable tracker-name updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-update-device-position-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A/positions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))))
                                                        "BatchUpdateDevicePosition"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-device-position))
(common-lisp:progn
 (common-lisp:defun calculate-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arrival-time calculator-name
                     car-mode-options depart-now departure-position
                     departure-time destination-position distance-unit
                     include-leg-geometry key optimize-for travel-mode
                     truck-mode-options waypoint-positions)
   (common-lisp:declare
    (common-lisp:ignorable arrival-time calculator-name car-mode-options
     depart-now departure-position departure-time destination-position
     distance-unit include-leg-geometry key optimize-for travel-mode
     truck-mode-options waypoint-positions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-calculate-route-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routes/v0/calculators/~A/calculate/route"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'calculator-name))))
                                                        "CalculateRoute"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'calculate-route))
(common-lisp:progn
 (common-lisp:defun calculate-route-matrix
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculator-name car-mode-options
                     depart-now departure-positions departure-time
                     destination-positions distance-unit key travel-mode
                     truck-mode-options)
   (common-lisp:declare
    (common-lisp:ignorable calculator-name car-mode-options depart-now
     departure-positions departure-time destination-positions distance-unit key
     travel-mode truck-mode-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-calculate-route-matrix-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routes/v0/calculators/~A/calculate/route-matrix"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'calculator-name))))
                                                        "CalculateRouteMatrix"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'calculate-route-matrix))
(common-lisp:progn
 (common-lisp:defun create-geofence-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name description kms-key-id
                     pricing-plan pricing-plan-data-source tags)
   (common-lisp:declare
    (common-lisp:ignorable collection-name description kms-key-id pricing-plan
     pricing-plan-data-source tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-geofence-collection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/geofencing/v0/collections"
                                                        "CreateGeofenceCollection"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-geofence-collection))
(common-lisp:progn
 (common-lisp:defun create-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description expire-time key-name
                     no-expiry restrictions tags)
   (common-lisp:declare
    (common-lisp:ignorable description expire-time key-name no-expiry
     restrictions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/metadata/v0/keys"
                                                        "CreateKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-key))
(common-lisp:progn
 (common-lisp:defun create-map
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration description map-name
                     pricing-plan tags)
   (common-lisp:declare
    (common-lisp:ignorable configuration description map-name pricing-plan
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-map-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/maps/v0/maps"
                                                        "CreateMap"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-map))
(common-lisp:progn
 (common-lisp:defun create-place-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source data-source-configuration
                     description index-name pricing-plan tags)
   (common-lisp:declare
    (common-lisp:ignorable data-source data-source-configuration description
     index-name pricing-plan tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-place-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/places/v0/indexes"
                                                        "CreatePlaceIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-place-index))
(common-lisp:progn
 (common-lisp:defun create-route-calculator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculator-name data-source description
                     pricing-plan tags)
   (common-lisp:declare
    (common-lisp:ignorable calculator-name data-source description pricing-plan
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-route-calculator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/routes/v0/calculators"
                                                        "CreateRouteCalculator"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-route-calculator))
(common-lisp:progn
 (common-lisp:defun create-tracker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description event-bridge-enabled
                     kms-key-enable-geospatial-queries kms-key-id
                     position-filtering pricing-plan pricing-plan-data-source
                     tags tracker-name)
   (common-lisp:declare
    (common-lisp:ignorable description event-bridge-enabled
     kms-key-enable-geospatial-queries kms-key-id position-filtering
     pricing-plan pricing-plan-data-source tags tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tracker-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/tracking/v0/trackers"
                                                        "CreateTracker"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-tracker))
(common-lisp:progn
 (common-lisp:defun delete-geofence-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name)
   (common-lisp:declare (common-lisp:ignorable collection-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-geofence-collection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/geofencing/v0/collections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collection-name))))
                                                        "DeleteGeofenceCollection"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-geofence-collection))
(common-lisp:progn
 (common-lisp:defun delete-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force-delete key-name)
   (common-lisp:declare (common-lisp:ignorable force-delete key-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/metadata/v0/keys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'key-name))))
                                                        "DeleteKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-key))
(common-lisp:progn
 (common-lisp:defun delete-map
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key map-name)
   (common-lisp:declare (common-lisp:ignorable map-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-map-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/maps/v0/maps/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'map-name))))
                                                        "DeleteMap"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-map))
(common-lisp:progn
 (common-lisp:defun delete-place-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name)
   (common-lisp:declare (common-lisp:ignorable index-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-place-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/places/v0/indexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-name))))
                                                        "DeletePlaceIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-place-index))
(common-lisp:progn
 (common-lisp:defun delete-route-calculator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculator-name)
   (common-lisp:declare (common-lisp:ignorable calculator-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-route-calculator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routes/v0/calculators/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'calculator-name))))
                                                        "DeleteRouteCalculator"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-route-calculator))
(common-lisp:progn
 (common-lisp:defun delete-tracker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tracker-name)
   (common-lisp:declare (common-lisp:ignorable tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tracker-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))))
                                                        "DeleteTracker"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tracker))
(common-lisp:progn
 (common-lisp:defun describe-geofence-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name)
   (common-lisp:declare (common-lisp:ignorable collection-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-geofence-collection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/geofencing/v0/collections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collection-name))))
                                                        "DescribeGeofenceCollection"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-geofence-collection))
(common-lisp:progn
 (common-lisp:defun describe-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-name)
   (common-lisp:declare (common-lisp:ignorable key-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/metadata/v0/keys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'key-name))))
                                                        "DescribeKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-key))
(common-lisp:progn
 (common-lisp:defun describe-map
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key map-name)
   (common-lisp:declare (common-lisp:ignorable map-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-map-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/maps/v0/maps/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'map-name))))
                                                        "DescribeMap"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-map))
(common-lisp:progn
 (common-lisp:defun describe-place-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name)
   (common-lisp:declare (common-lisp:ignorable index-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-place-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/places/v0/indexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-name))))
                                                        "DescribePlaceIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-place-index))
(common-lisp:progn
 (common-lisp:defun describe-route-calculator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculator-name)
   (common-lisp:declare (common-lisp:ignorable calculator-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-route-calculator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routes/v0/calculators/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'calculator-name))))
                                                        "DescribeRouteCalculator"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-route-calculator))
(common-lisp:progn
 (common-lisp:defun describe-tracker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tracker-name)
   (common-lisp:declare (common-lisp:ignorable tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tracker-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))))
                                                        "DescribeTracker"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-tracker))
(common-lisp:progn
 (common-lisp:defun disassociate-tracker-consumer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key consumer-arn tracker-name)
   (common-lisp:declare (common-lisp:ignorable consumer-arn tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-tracker-consumer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A/consumers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'consumer-arn))))
                                                        "DisassociateTrackerConsumer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-tracker-consumer))
(common-lisp:progn
 (common-lisp:defun get-device-position
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id tracker-name)
   (common-lisp:declare (common-lisp:ignorable device-id tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-position-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A/devices/~A/positions/latest"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "GetDevicePosition"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-device-position))
(common-lisp:progn
 (common-lisp:defun get-device-position-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id end-time-exclusive max-results
                     next-token start-time-inclusive tracker-name)
   (common-lisp:declare
    (common-lisp:ignorable device-id end-time-exclusive max-results next-token
     start-time-inclusive tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-device-position-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A/devices/~A/list-positions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "GetDevicePositionHistory"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-device-position-history))
(common-lisp:progn
 (common-lisp:defun get-geofence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name geofence-id)
   (common-lisp:declare (common-lisp:ignorable collection-name geofence-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-geofence-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/geofencing/v0/collections/~A/geofences/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collection-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'geofence-id))))
                                                        "GetGeofence"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-geofence))
(common-lisp:progn
 (common-lisp:defun get-map-glyphs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key font-stack font-unicode-range key
                     map-name)
   (common-lisp:declare
    (common-lisp:ignorable font-stack font-unicode-range key map-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-map-glyphs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/maps/v0/maps/~A/glyphs/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'map-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'font-stack))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'font-unicode-range))))
                                                        "GetMapGlyphs")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-map-glyphs))
(common-lisp:progn
 (common-lisp:defun get-map-sprites
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-name key map-name)
   (common-lisp:declare (common-lisp:ignorable file-name key map-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-map-sprites-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/maps/v0/maps/~A/sprites/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'map-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-name))))
                                                        "GetMapSprites")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-map-sprites))
(common-lisp:progn
 (common-lisp:defun get-map-style-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key map-name)
   (common-lisp:declare (common-lisp:ignorable key map-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-map-style-descriptor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/maps/v0/maps/~A/style-descriptor"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'map-name))))
                                                        "GetMapStyleDescriptor")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-map-style-descriptor))
(common-lisp:progn
 (common-lisp:defun get-map-tile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key map-name x y z)
   (common-lisp:declare (common-lisp:ignorable key map-name x y z))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-map-tile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/maps/v0/maps/~A/tiles/~A/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'map-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'z))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'x))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'y))))
                                                        "GetMapTile")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-map-tile))
(common-lisp:progn
 (common-lisp:defun get-place
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name key language place-id)
   (common-lisp:declare
    (common-lisp:ignorable index-name key language place-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-place-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/places/v0/indexes/~A/places/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'place-id))))
                                                        "GetPlace"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-place))
(common-lisp:progn
 (common-lisp:defun list-device-positions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-geometry max-results next-token
                     tracker-name)
   (common-lisp:declare
    (common-lisp:ignorable filter-geometry max-results next-token
     tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-device-positions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A/list-positions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))))
                                                        "ListDevicePositions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-device-positions))
(common-lisp:progn
 (common-lisp:defun list-geofence-collections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-geofence-collections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/geofencing/v0/list-collections"
                                                        "ListGeofenceCollections"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-geofence-collections))
(common-lisp:progn
 (common-lisp:defun list-geofences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable collection-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-geofences-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/geofencing/v0/collections/~A/list-geofences"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collection-name))))
                                                        "ListGeofences"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-geofences))
(common-lisp:progn
 (common-lisp:defun list-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/metadata/v0/list-keys"
                                                        "ListKeys"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-keys))
(common-lisp:progn
 (common-lisp:defun list-maps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-maps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/maps/v0/list-maps"
                                                        "ListMaps"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-maps))
(common-lisp:progn
 (common-lisp:defun list-place-indexes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-place-indexes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/places/v0/list-indexes"
                                                        "ListPlaceIndexes"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-place-indexes))
(common-lisp:progn
 (common-lisp:defun list-route-calculators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-route-calculators-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/routes/v0/list-calculators"
                                                        "ListRouteCalculators"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-route-calculators))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-tracker-consumers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token tracker-name)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tracker-consumers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A/list-consumers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))))
                                                        "ListTrackerConsumers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tracker-consumers))
(common-lisp:progn
 (common-lisp:defun list-trackers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-trackers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/tracking/v0/list-trackers"
                                                        "ListTrackers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-trackers))
(common-lisp:progn
 (common-lisp:defun put-geofence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name geofence-id
                     geofence-properties geometry)
   (common-lisp:declare
    (common-lisp:ignorable collection-name geofence-id geofence-properties
     geometry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-geofence-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/geofencing/v0/collections/~A/geofences/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collection-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'geofence-id))))
                                                        "PutGeofence"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-geofence))
(common-lisp:progn
 (common-lisp:defun search-place-index-for-position
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name key language max-results
                     position)
   (common-lisp:declare
    (common-lisp:ignorable index-name key language max-results position))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-place-index-for-position-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/places/v0/indexes/~A/search/position"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-name))))
                                                        "SearchPlaceIndexForPosition"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-place-index-for-position))
(common-lisp:progn
 (common-lisp:defun search-place-index-for-suggestions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bias-position filter-bbox
                     filter-categories filter-countries index-name key language
                     max-results text)
   (common-lisp:declare
    (common-lisp:ignorable bias-position filter-bbox filter-categories
     filter-countries index-name key language max-results text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-place-index-for-suggestions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/places/v0/indexes/~A/search/suggestions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-name))))
                                                        "SearchPlaceIndexForSuggestions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-place-index-for-suggestions))
(common-lisp:progn
 (common-lisp:defun search-place-index-for-text
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bias-position filter-bbox
                     filter-categories filter-countries index-name key language
                     max-results text)
   (common-lisp:declare
    (common-lisp:ignorable bias-position filter-bbox filter-categories
     filter-countries index-name key language max-results text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-place-index-for-text-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/places/v0/indexes/~A/search/text"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-name))))
                                                        "SearchPlaceIndexForText"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-place-index-for-text))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-geofence-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-name description pricing-plan
                     pricing-plan-data-source)
   (common-lisp:declare
    (common-lisp:ignorable collection-name description pricing-plan
     pricing-plan-data-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-geofence-collection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/geofencing/v0/collections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collection-name))))
                                                        "UpdateGeofenceCollection"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-geofence-collection))
(common-lisp:progn
 (common-lisp:defun update-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description expire-time force-update
                     key-name no-expiry restrictions)
   (common-lisp:declare
    (common-lisp:ignorable description expire-time force-update key-name
     no-expiry restrictions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/metadata/v0/keys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'key-name))))
                                                        "UpdateKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-key))
(common-lisp:progn
 (common-lisp:defun update-map
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-update description map-name
                     pricing-plan)
   (common-lisp:declare
    (common-lisp:ignorable configuration-update description map-name
     pricing-plan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-map-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/maps/v0/maps/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'map-name))))
                                                        "UpdateMap"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-map))
(common-lisp:progn
 (common-lisp:defun update-place-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-configuration description
                     index-name pricing-plan)
   (common-lisp:declare
    (common-lisp:ignorable data-source-configuration description index-name
     pricing-plan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-place-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/places/v0/indexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-name))))
                                                        "UpdatePlaceIndex"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-place-index))
(common-lisp:progn
 (common-lisp:defun update-route-calculator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calculator-name description pricing-plan)
   (common-lisp:declare
    (common-lisp:ignorable calculator-name description pricing-plan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-route-calculator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routes/v0/calculators/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'calculator-name))))
                                                        "UpdateRouteCalculator"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-route-calculator))
(common-lisp:progn
 (common-lisp:defun update-tracker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description event-bridge-enabled
                     kms-key-enable-geospatial-queries position-filtering
                     pricing-plan pricing-plan-data-source tracker-name)
   (common-lisp:declare
    (common-lisp:ignorable description event-bridge-enabled
     kms-key-enable-geospatial-queries position-filtering pricing-plan
     pricing-plan-data-source tracker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-tracker-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'location-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tracking/v0/trackers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'tracker-name))))
                                                        "UpdateTracker"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-tracker))
