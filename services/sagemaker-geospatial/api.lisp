;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/sagemaker-geospatial/api
  (:use)
  (:nicknames #:aws/sagemaker-geospatial)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/sagemaker-geospatial/api)
(common-lisp:progn
 (common-lisp:defclass sagemaker-geospatial-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "sagemaker-geospatial"
                        :protocol :rest-json))
 (common-lisp:export 'sagemaker-geospatial-request))
(common-lisp:progn
 (common-lisp:define-condition sagemaker-geospatial-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'sagemaker-geospatial-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype algorithm-name-cloud-removal () 'common-lisp:string)
(common-lisp:deftype algorithm-name-geo-mosaic () 'common-lisp:string)
(common-lisp:deftype algorithm-name-resampling () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (area-of-interest (:copier common-lisp:nil)
      (:conc-name "struct-shape-area-of-interest-"))
   (area-of-interest-geometry common-lisp:nil :type
    (common-lisp:or area-of-interest-geometry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'area-of-interest 'make-area-of-interest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input area-of-interest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input area-of-interest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'area-of-interest-geometry))
      (common-lisp:list
       (common-lisp:cons "AreaOfInterestGeometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input area-of-interest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (area-of-interest-geometry (:copier common-lisp:nil)
      (:conc-name "struct-shape-area-of-interest-geometry-"))
   (multi-polygon-geometry common-lisp:nil :type
    (common-lisp:or multi-polygon-geometry-input common-lisp:null))
   (polygon-geometry common-lisp:nil :type
    (common-lisp:or polygon-geometry-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'area-of-interest-geometry
                    'make-area-of-interest-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          area-of-interest-geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          area-of-interest-geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-polygon-geometry))
      (common-lisp:list
       (common-lisp:cons "MultiPolygonGeometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polygon-geometry))
      (common-lisp:list
       (common-lisp:cons "PolygonGeometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          area-of-interest-geometry))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-value-"))
   (href common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-value 'make-asset-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'href))
      (common-lisp:list
       (common-lisp:cons "Href"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assets-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-assets-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (band-math-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-band-math-config-input-"))
   (custom-indices common-lisp:nil :type
    (common-lisp:or custom-indices-input common-lisp:null))
   (predefined-indices common-lisp:nil :type
    (common-lisp:or string-list-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'band-math-config-input 'make-band-math-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          band-math-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          band-math-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-indices))
      (common-lisp:list
       (common-lisp:cons "CustomIndices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predefined-indices))
      (common-lisp:list
       (common-lisp:cons "PredefinedIndices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          band-math-config-input))
   common-lisp:nil))
(common-lisp:deftype binary-file ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-masking-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-masking-config-input-")))
 (common-lisp:export
  (common-lisp:list 'cloud-masking-config-input
                    'make-cloud-masking-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-masking-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-masking-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-masking-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-removal-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-removal-config-input-"))
   (algorithm-name common-lisp:nil :type
    (common-lisp:or algorithm-name-cloud-removal common-lisp:null))
   (interpolation-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-bands common-lisp:nil :type
    (common-lisp:or string-list-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-removal-config-input
                    'make-cloud-removal-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-removal-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-removal-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpolation-value))
      (common-lisp:list
       (common-lisp:cons "InterpolationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-removal-config-input))
   common-lisp:nil))
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-indices-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-indices-input-"))
   (operations common-lisp:nil :type
    (common-lisp:or operations-list-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-indices-input 'make-custom-indices-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-indices-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-indices-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-indices-input))
   common-lisp:nil))
(common-lisp:deftype data-collection-arn () 'common-lisp:string)
(common-lisp:deftype data-collection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-collections-list ()
   '(trivial-types:proper-list raster-data-collection-metadata))
 (common-lisp:defun |make-data-collections-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            raster-data-collection-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-earth-observation-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-earth-observation-job-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or earth-observation-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-earth-observation-job-input
                    'make-delete-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-earth-observation-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-earth-observation-job-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-earth-observation-job-output
                    'make-delete-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vector-enrichment-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vector-enrichment-job-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vector-enrichment-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vector-enrichment-job-input
                    'make-delete-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vector-enrichment-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vector-enrichment-job-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-vector-enrichment-job-output
                    'make-delete-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype earth-observation-job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (earth-observation-job-error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-earth-observation-job-error-details-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or earth-observation-job-error-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'earth-observation-job-error-details
                    'make-earth-observation-job-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          earth-observation-job-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          earth-observation-job-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          earth-observation-job-error-details))
   common-lisp:nil))
(common-lisp:deftype earth-observation-job-error-type () 'common-lisp:string)
(common-lisp:deftype earth-observation-job-export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype earth-observation-job-list ()
   '(trivial-types:proper-list list-earth-observation-job-output-config))
 (common-lisp:defun |make-earth-observation-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-earth-observation-job-output-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype earth-observation-job-output-bands ()
   '(trivial-types:proper-list output-band))
 (common-lisp:defun |make-earth-observation-job-output-bands|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-band))
   aws-sdk/generator/shape::members))
(common-lisp:deftype earth-observation-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (eo-cloud-cover-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-eo-cloud-cover-input-"))
   (lower-bound (common-lisp:error ":lower-bound is required") :type
    (common-lisp:or float common-lisp:null))
   (upper-bound (common-lisp:error ":upper-bound is required") :type
    (common-lisp:or float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'eo-cloud-cover-input 'make-eo-cloud-cover-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eo-cloud-cover-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eo-cloud-cover-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eo-cloud-cover-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (eoj-data-source-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-eoj-data-source-config-input-"))
   (s3data common-lisp:nil :type
    (common-lisp:or s3data-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'eoj-data-source-config-input
                    'make-eoj-data-source-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          eoj-data-source-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          eoj-data-source-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data))
      (common-lisp:list
       (common-lisp:cons "S3Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          eoj-data-source-config-input))
   common-lisp:nil))
(common-lisp:deftype execution-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-earth-observation-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-earth-observation-job-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or earth-observation-job-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or export-earth-observation-job-input-client-token-string
                    common-lisp:null))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or execution-role-arn common-lisp:null))
   (export-source-images common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or output-config-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-earth-observation-job-input
                    'make-export-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-source-images))
      (common-lisp:list
       (common-lisp:cons "ExportSourceImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:deftype export-earth-observation-job-input-client-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-earth-observation-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-earth-observation-job-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or earth-observation-job-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or execution-role-arn common-lisp:null))
   (export-source-images common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (export-status (common-lisp:error ":export-status is required") :type
    (common-lisp:or earth-observation-job-export-status common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or output-config-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-earth-observation-job-output
                    'make-export-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-source-images))
      (common-lisp:list
       (common-lisp:cons "ExportSourceImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "ExportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-error-details-"))
   (export-results common-lisp:nil :type
    (common-lisp:or export-error-details-output common-lisp:null))
   (export-source-images common-lisp:nil :type
    (common-lisp:or export-error-details-output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-error-details 'make-export-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-results))
      (common-lisp:list
       (common-lisp:cons "ExportResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-source-images))
      (common-lisp:list
       (common-lisp:cons "ExportSourceImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-error-details-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-error-details-output-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or export-error-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-error-details-output
                    'make-export-error-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-error-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-error-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-error-details-output))
   common-lisp:nil))
(common-lisp:deftype export-error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-s3data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-s3data-input-"))
   (kms-key-id common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-s3data-input 'make-export-s3data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-s3data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-s3data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-s3data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-vector-enrichment-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-vector-enrichment-job-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vector-enrichment-job-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or export-vector-enrichment-job-input-client-token-string
                    common-lisp:null))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or execution-role-arn common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or export-vector-enrichment-job-output-config
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-vector-enrichment-job-input
                    'make-export-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:deftype export-vector-enrichment-job-input-client-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-vector-enrichment-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-vector-enrichment-job-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vector-enrichment-job-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or execution-role-arn common-lisp:null))
   (export-status (common-lisp:error ":export-status is required") :type
    (common-lisp:or vector-enrichment-job-export-status common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or export-vector-enrichment-job-output-config
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-vector-enrichment-job-output
                    'make-export-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "ExportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-vector-enrichment-job-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-vector-enrichment-job-output-config-"))
   (s3data (common-lisp:error ":s3data is required") :type
    (common-lisp:or vector-enrichment-job-s3data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-vector-enrichment-job-output-config
                    'make-export-vector-enrichment-job-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data))
      (common-lisp:list
       (common-lisp:cons "S3Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (maximum common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (minimum common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "Maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "Minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (geo-mosaic-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-mosaic-config-input-"))
   (algorithm-name common-lisp:nil :type
    (common-lisp:or algorithm-name-geo-mosaic common-lisp:null))
   (target-bands common-lisp:nil :type
    (common-lisp:or string-list-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geo-mosaic-config-input 'make-geo-mosaic-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geo-mosaic-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geo-mosaic-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geo-mosaic-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geometry (:copier common-lisp:nil) (:conc-name "struct-shape-geometry-"))
   (coordinates (common-lisp:error ":coordinates is required") :type
    (common-lisp:or linear-rings common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'geometry 'make-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coordinates))
      (common-lisp:list
       (common-lisp:cons "Coordinates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geometry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-earth-observation-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-earth-observation-job-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or earth-observation-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-earth-observation-job-input
                    'make-get-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-earth-observation-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-earth-observation-job-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or string common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (duration-in-seconds (common-lisp:error ":duration-in-seconds is required")
    :type (common-lisp:or integer common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or earth-observation-job-error-details common-lisp:null))
   (execution-role-arn common-lisp:nil :type
    (common-lisp:or execution-role-arn common-lisp:null))
   (export-error-details common-lisp:nil :type
    (common-lisp:or export-error-details common-lisp:null))
   (export-status common-lisp:nil :type
    (common-lisp:or earth-observation-job-export-status common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or input-config-output common-lisp:null))
   (job-config (common-lisp:error ":job-config is required") :type
    (common-lisp:or job-config-input common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (output-bands common-lisp:nil :type
    (common-lisp:or earth-observation-job-output-bands common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or earth-observation-job-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-earth-observation-job-output
                    'make-get-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-error-details))
      (common-lisp:list
       (common-lisp:cons "ExportErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "ExportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bands))
      (common-lisp:list
       (common-lisp:cons "OutputBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-raster-data-collection-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-raster-data-collection-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or data-collection-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-raster-data-collection-input
                    'make-get-raster-data-collection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-raster-data-collection-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-raster-data-collection-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or data-collection-arn common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (description-page-url
    (common-lisp:error ":description-page-url is required") :type
    (common-lisp:or string common-lisp:null))
   (image-source-bands (common-lisp:error ":image-source-bands is required")
    :type (common-lisp:or image-source-band-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (supported-filters (common-lisp:error ":supported-filters is required")
    :type (common-lisp:or filter-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or data-collection-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-raster-data-collection-output
                    'make-get-raster-data-collection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'description-page-url))
      (common-lisp:list
       (common-lisp:cons "DescriptionPageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-source-bands))
      (common-lisp:list
       (common-lisp:cons "ImageSourceBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-filters))
      (common-lisp:list
       (common-lisp:cons "SupportedFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-tile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-tile-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or earth-observation-job-arn common-lisp:null))
   (execution-role-arn common-lisp:nil :type
    (common-lisp:or execution-role-arn common-lisp:null))
   (image-assets (common-lisp:error ":image-assets is required") :type
    (common-lisp:or string-list-input common-lisp:null))
   (image-mask common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (output-data-type common-lisp:nil :type
    (common-lisp:or output-type common-lisp:null))
   (output-format common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (property-filters common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or target-options common-lisp:null))
   (time-range-filter common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (x (common-lisp:error ":x is required") :type
    (common-lisp:or integer common-lisp:null))
   (y (common-lisp:error ":y is required") :type
    (common-lisp:or integer common-lisp:null))
   (z (common-lisp:error ":z is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-tile-input 'make-get-tile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-tile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-tile-output-"))
   (binary-file common-lisp:nil :type
    (common-lisp:or binary-file common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-tile-output 'make-get-tile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binary-file))
      (common-lisp:list
       (common-lisp:cons "BinaryFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tile-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'binary-file)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-vector-enrichment-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-vector-enrichment-job-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vector-enrichment-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-vector-enrichment-job-input
                    'make-get-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-vector-enrichment-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-vector-enrichment-job-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or string common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (duration-in-seconds (common-lisp:error ":duration-in-seconds is required")
    :type (common-lisp:or integer common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or vector-enrichment-job-error-details common-lisp:null))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or execution-role-arn common-lisp:null))
   (export-error-details common-lisp:nil :type
    (common-lisp:or vector-enrichment-job-export-error-details
                    common-lisp:null))
   (export-status common-lisp:nil :type
    (common-lisp:or vector-enrichment-job-export-status common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or vector-enrichment-job-input-config common-lisp:null))
   (job-config (common-lisp:error ":job-config is required") :type
    (common-lisp:or vector-enrichment-job-config common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or vector-enrichment-job-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or vector-enrichment-job-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-vector-enrichment-job-output
                    'make-get-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-error-details))
      (common-lisp:list
       (common-lisp:cons "ExportErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "ExportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:deftype group-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-source-band-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-image-source-band-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (input-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-config-input-"))
   (data-source-config common-lisp:nil :type
    (common-lisp:or eoj-data-source-config-input common-lisp:null))
   (previous-earth-observation-job-arn common-lisp:nil :type
    (common-lisp:or earth-observation-job-arn common-lisp:null))
   (raster-data-collection-query common-lisp:nil :type
    (common-lisp:or raster-data-collection-query-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-config-input 'make-input-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-config))
      (common-lisp:list
       (common-lisp:cons "DataSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-earth-observation-job-arn))
      (common-lisp:list
       (common-lisp:cons "PreviousEarthObservationJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-query))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-config-output-"))
   (data-source-config common-lisp:nil :type
    (common-lisp:or eoj-data-source-config-input common-lisp:null))
   (previous-earth-observation-job-arn common-lisp:nil :type
    (common-lisp:or earth-observation-job-arn common-lisp:null))
   (raster-data-collection-query common-lisp:nil :type
    (common-lisp:or raster-data-collection-query-output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-config-output 'make-input-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-config))
      (common-lisp:list
       (common-lisp:cons "DataSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-earth-observation-job-arn))
      (common-lisp:list
       (common-lisp:cons "PreviousEarthObservationJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-query))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-config-output))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       internal-server-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (item-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-item-source-"))
   (assets common-lisp:nil :type (common-lisp:or assets-map common-lisp:null))
   (date-time (common-lisp:error ":date-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (geometry (common-lisp:error ":geometry is required") :type
    (common-lisp:or geometry common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or properties common-lisp:null)))
 (common-lisp:export (common-lisp:list 'item-source 'make-item-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input item-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input item-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "Assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time))
      (common-lisp:list
       (common-lisp:cons "DateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input item-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype item-source-list ()
   '(trivial-types:proper-list item-source))
 (common-lisp:defun |make-item-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list item-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-config-input-"))
   (band-math-config common-lisp:nil :type
    (common-lisp:or band-math-config-input common-lisp:null))
   (cloud-masking-config common-lisp:nil :type
    (common-lisp:or cloud-masking-config-input common-lisp:null))
   (cloud-removal-config common-lisp:nil :type
    (common-lisp:or cloud-removal-config-input common-lisp:null))
   (geo-mosaic-config common-lisp:nil :type
    (common-lisp:or geo-mosaic-config-input common-lisp:null))
   (land-cover-segmentation-config common-lisp:nil :type
    (common-lisp:or land-cover-segmentation-config-input common-lisp:null))
   (resampling-config common-lisp:nil :type
    (common-lisp:or resampling-config-input common-lisp:null))
   (stack-config common-lisp:nil :type
    (common-lisp:or stack-config-input common-lisp:null))
   (temporal-statistics-config common-lisp:nil :type
    (common-lisp:or temporal-statistics-config-input common-lisp:null))
   (zonal-statistics-config common-lisp:nil :type
    (common-lisp:or zonal-statistics-config-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-config-input 'make-job-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'band-math-config))
      (common-lisp:list
       (common-lisp:cons "BandMathConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-masking-config))
      (common-lisp:list
       (common-lisp:cons "CloudMaskingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-removal-config))
      (common-lisp:list
       (common-lisp:cons "CloudRemovalConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-mosaic-config))
      (common-lisp:list
       (common-lisp:cons "GeoMosaicConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'land-cover-segmentation-config))
      (common-lisp:list
       (common-lisp:cons "LandCoverSegmentationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resampling-config))
      (common-lisp:list
       (common-lisp:cons "ResamplingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-config))
      (common-lisp:list
       (common-lisp:cons "StackConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-statistics-config))
      (common-lisp:list
       (common-lisp:cons "TemporalStatisticsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zonal-statistics-config))
      (common-lisp:list
       (common-lisp:cons "ZonalStatisticsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-config-input))
   common-lisp:nil))
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (land-cover-segmentation-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-land-cover-segmentation-config-input-")))
 (common-lisp:export
  (common-lisp:list 'land-cover-segmentation-config-input
                    'make-land-cover-segmentation-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          land-cover-segmentation-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          land-cover-segmentation-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          land-cover-segmentation-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (landsat-cloud-cover-land-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-landsat-cloud-cover-land-input-"))
   (lower-bound (common-lisp:error ":lower-bound is required") :type
    (common-lisp:or float common-lisp:null))
   (upper-bound (common-lisp:error ":upper-bound is required") :type
    (common-lisp:or float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'landsat-cloud-cover-land-input
                    'make-landsat-cloud-cover-land-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          landsat-cloud-cover-land-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          landsat-cloud-cover-land-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          landsat-cloud-cover-land-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype linear-ring () '(trivial-types:proper-list position))
 (common-lisp:defun |make-linear-ring|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype linear-rings () '(trivial-types:proper-list linear-ring))
 (common-lisp:defun |make-linear-rings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list linear-ring))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype linear-rings-list ()
   '(trivial-types:proper-list linear-rings))
 (common-lisp:defun |make-linear-rings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list linear-rings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-earth-observation-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-earth-observation-job-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-earth-observation-job-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or earth-observation-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-earth-observation-job-input
                    'make-list-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:deftype list-earth-observation-job-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-earth-observation-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-earth-observation-job-output-"))
   (earth-observation-job-summaries
    (common-lisp:error ":earth-observation-job-summaries is required") :type
    (common-lisp:or earth-observation-job-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-earth-observation-job-output
                    'make-list-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earth-observation-job-summaries))
      (common-lisp:list
       (common-lisp:cons "EarthObservationJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-earth-observation-job-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-earth-observation-job-output-config-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or string common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (duration-in-seconds (common-lisp:error ":duration-in-seconds is required")
    :type (common-lisp:or integer common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (operation-type (common-lisp:error ":operation-type is required") :type
    (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or earth-observation-job-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-earth-observation-job-output-config
                    'make-list-earth-observation-job-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "OperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-raster-data-collections-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-raster-data-collections-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-raster-data-collections-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-raster-data-collections-input
                    'make-list-raster-data-collections-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-input))
   common-lisp:nil))
(common-lisp:deftype list-raster-data-collections-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-raster-data-collections-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-raster-data-collections-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (raster-data-collection-summaries
    (common-lisp:error ":raster-data-collection-summaries is required") :type
    (common-lisp:or data-collections-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-raster-data-collections-output
                    'make-list-raster-data-collections-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-summaries))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vector-enrichment-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vector-enrichment-job-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-vector-enrichment-job-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vector-enrichment-job-input
                    'make-list-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:deftype list-vector-enrichment-job-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-vector-enrichment-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vector-enrichment-job-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (vector-enrichment-job-summaries
    (common-lisp:error ":vector-enrichment-job-summaries is required") :type
    (common-lisp:or vector-enrichment-job-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vector-enrichment-job-output
                    'make-list-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vector-enrichment-job-summaries))
      (common-lisp:list
       (common-lisp:cons "VectorEnrichmentJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vector-enrichment-job-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vector-enrichment-job-output-config-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vector-enrichment-job-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (duration-in-seconds (common-lisp:error ":duration-in-seconds is required")
    :type (common-lisp:or integer common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or vector-enrichment-job-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or vector-enrichment-job-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vector-enrichment-job-output-config
                    'make-list-vector-enrichment-job-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output-config))
   common-lisp:nil))
(common-lisp:deftype logical-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (map-matching-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-map-matching-config-"))
   (id-attribute-name (common-lisp:error ":id-attribute-name is required")
    :type (common-lisp:or string common-lisp:null))
   (timestamp-attribute-name
    (common-lisp:error ":timestamp-attribute-name is required") :type
    (common-lisp:or string common-lisp:null))
   (xattribute-name (common-lisp:error ":xattribute-name is required") :type
    (common-lisp:or string common-lisp:null))
   (yattribute-name (common-lisp:error ":yattribute-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'map-matching-config 'make-map-matching-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input map-matching-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input map-matching-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-attribute-name))
      (common-lisp:list
       (common-lisp:cons "IdAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-attribute-name))
      (common-lisp:list
       (common-lisp:cons "TimestampAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xattribute-name))
      (common-lisp:list
       (common-lisp:cons "XAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yattribute-name))
      (common-lisp:list
       (common-lisp:cons "YAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input map-matching-config))
   common-lisp:nil))
(common-lisp:deftype metadata-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (multi-polygon-geometry-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-polygon-geometry-input-"))
   (coordinates (common-lisp:error ":coordinates is required") :type
    (common-lisp:or linear-rings-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-polygon-geometry-input
                    'make-multi-polygon-geometry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-polygon-geometry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-polygon-geometry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coordinates))
      (common-lisp:list
       (common-lisp:cons "Coordinates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-polygon-geometry-input))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-operation-"))
   (equation (common-lisp:error ":equation is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (output-type common-lisp:nil :type
    (common-lisp:or output-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'operation 'make-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equation))
      (common-lisp:list
       (common-lisp:cons "Equation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-type))
      (common-lisp:list
       (common-lisp:cons "OutputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype operations-list-input ()
   '(trivial-types:proper-list operation))
 (common-lisp:defun |make-operations-list-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (output-band (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-band-"))
   (band-name (common-lisp:error ":band-name is required") :type
    (common-lisp:or string common-lisp:null))
   (output-data-type (common-lisp:error ":output-data-type is required") :type
    (common-lisp:or output-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-band 'make-output-band))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-band))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-band))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'band-name))
      (common-lisp:list
       (common-lisp:cons "BandName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-type))
      (common-lisp:list
       (common-lisp:cons "OutputDataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-band))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-config-input-"))
   (s3data (common-lisp:error ":s3data is required") :type
    (common-lisp:or export-s3data-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-config-input 'make-output-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data))
      (common-lisp:list
       (common-lisp:cons "S3Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-resolution-resampling-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-resolution-resampling-input-"))
   (user-defined (common-lisp:error ":user-defined is required") :type
    (common-lisp:or user-defined common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-resolution-resampling-input
                    'make-output-resolution-resampling-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-resampling-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-resampling-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined))
      (common-lisp:list
       (common-lisp:cons "UserDefined"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-resampling-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-resolution-stack-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-resolution-stack-input-"))
   (predefined common-lisp:nil :type
    (common-lisp:or predefined-resolution common-lisp:null))
   (user-defined common-lisp:nil :type
    (common-lisp:or user-defined common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-resolution-stack-input
                    'make-output-resolution-stack-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predefined))
      (common-lisp:list
       (common-lisp:cons "Predefined"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined))
      (common-lisp:list
       (common-lisp:cons "UserDefined"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-stack-input))
   common-lisp:nil))
(common-lisp:deftype output-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (platform-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-platform-input-"))
   (comparison-operator common-lisp:nil :type
    (common-lisp:or comparison-operator common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'platform-input 'make-platform-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (polygon-geometry-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-polygon-geometry-input-"))
   (coordinates (common-lisp:error ":coordinates is required") :type
    (common-lisp:or linear-rings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'polygon-geometry-input 'make-polygon-geometry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          polygon-geometry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          polygon-geometry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coordinates))
      (common-lisp:list
       (common-lisp:cons "Coordinates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          polygon-geometry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype position () '(trivial-types:proper-list double))
 (common-lisp:defun |make-position|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list double))
   aws-sdk/generator/shape::members))
(common-lisp:deftype predefined-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-properties-"))
   (eo-cloud-cover common-lisp:nil :type
    (common-lisp:or float common-lisp:null))
   (landsat-cloud-cover-land common-lisp:nil :type
    (common-lisp:or float common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (view-off-nadir common-lisp:nil :type
    (common-lisp:or float common-lisp:null))
   (view-sun-azimuth common-lisp:nil :type
    (common-lisp:or float common-lisp:null))
   (view-sun-elevation common-lisp:nil :type
    (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'properties 'make-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eo-cloud-cover))
      (common-lisp:list
       (common-lisp:cons "EoCloudCover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'landsat-cloud-cover-land))
      (common-lisp:list
       (common-lisp:cons "LandsatCloudCoverLand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-off-nadir))
      (common-lisp:list
       (common-lisp:cons "ViewOffNadir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-sun-azimuth))
      (common-lisp:list
       (common-lisp:cons "ViewSunAzimuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-sun-elevation))
      (common-lisp:list
       (common-lisp:cons "ViewSunElevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (property (:copier common-lisp:nil) (:conc-name "struct-shape-property-"))
   (eo-cloud-cover common-lisp:nil :type
    (common-lisp:or eo-cloud-cover-input common-lisp:null))
   (landsat-cloud-cover-land common-lisp:nil :type
    (common-lisp:or landsat-cloud-cover-land-input common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or platform-input common-lisp:null))
   (view-off-nadir common-lisp:nil :type
    (common-lisp:or view-off-nadir-input common-lisp:null))
   (view-sun-azimuth common-lisp:nil :type
    (common-lisp:or view-sun-azimuth-input common-lisp:null))
   (view-sun-elevation common-lisp:nil :type
    (common-lisp:or view-sun-elevation-input common-lisp:null)))
 (common-lisp:export (common-lisp:list 'property 'make-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eo-cloud-cover))
      (common-lisp:list
       (common-lisp:cons "EoCloudCover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'landsat-cloud-cover-land))
      (common-lisp:list
       (common-lisp:cons "LandsatCloudCoverLand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-off-nadir))
      (common-lisp:list
       (common-lisp:cons "ViewOffNadir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-sun-azimuth))
      (common-lisp:list
       (common-lisp:cons "ViewSunAzimuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-sun-elevation))
      (common-lisp:list
       (common-lisp:cons "ViewSunElevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (property-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-property-filter-"))
   (property (common-lisp:error ":property is required") :type
    (common-lisp:or property common-lisp:null)))
 (common-lisp:export (common-lisp:list 'property-filter 'make-property-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "Property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (property-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-property-filters-"))
   (logical-operator common-lisp:nil :type
    (common-lisp:or logical-operator common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or property-filters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'property-filters 'make-property-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-operator))
      (common-lisp:list
       (common-lisp:cons "LogicalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-filters-list ()
   '(trivial-types:proper-list property-filter))
 (common-lisp:defun |make-property-filters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (raster-data-collection-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-raster-data-collection-metadata-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or data-collection-arn common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (description-page-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (supported-filters (common-lisp:error ":supported-filters is required")
    :type (common-lisp:or filter-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or data-collection-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'raster-data-collection-metadata
                    'make-raster-data-collection-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'description-page-url))
      (common-lisp:list
       (common-lisp:cons "DescriptionPageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-filters))
      (common-lisp:list
       (common-lisp:cons "SupportedFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (raster-data-collection-query-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-raster-data-collection-query-input-"))
   (area-of-interest common-lisp:nil :type
    (common-lisp:or area-of-interest common-lisp:null))
   (property-filters common-lisp:nil :type
    (common-lisp:or property-filters common-lisp:null))
   (raster-data-collection-arn
    (common-lisp:error ":raster-data-collection-arn is required") :type
    (common-lisp:or data-collection-arn common-lisp:null))
   (time-range-filter (common-lisp:error ":time-range-filter is required")
    :type (common-lisp:or time-range-filter-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'raster-data-collection-query-input
                    'make-raster-data-collection-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-of-interest))
      (common-lisp:list
       (common-lisp:cons "AreaOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "PropertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-arn))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (raster-data-collection-query-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-raster-data-collection-query-output-"))
   (area-of-interest common-lisp:nil :type
    (common-lisp:or area-of-interest common-lisp:null))
   (property-filters common-lisp:nil :type
    (common-lisp:or property-filters common-lisp:null))
   (raster-data-collection-arn
    (common-lisp:error ":raster-data-collection-arn is required") :type
    (common-lisp:or data-collection-arn common-lisp:null))
   (raster-data-collection-name
    (common-lisp:error ":raster-data-collection-name is required") :type
    (common-lisp:or string common-lisp:null))
   (time-range-filter (common-lisp:error ":time-range-filter is required")
    :type (common-lisp:or time-range-filter-output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'raster-data-collection-query-output
                    'make-raster-data-collection-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-of-interest))
      (common-lisp:list
       (common-lisp:cons "AreaOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "PropertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-arn))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-name))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (raster-data-collection-query-with-band-filter-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-raster-data-collection-query-with-band-filter-input-"))
   (area-of-interest common-lisp:nil :type
    (common-lisp:or area-of-interest common-lisp:null))
   (band-filter common-lisp:nil :type
    (common-lisp:or string-list-input common-lisp:null))
   (property-filters common-lisp:nil :type
    (common-lisp:or property-filters common-lisp:null))
   (time-range-filter (common-lisp:error ":time-range-filter is required")
    :type (common-lisp:or time-range-filter-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'raster-data-collection-query-with-band-filter-input
                    'make-raster-data-collection-query-with-band-filter-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-with-band-filter-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-with-band-filter-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-of-interest))
      (common-lisp:list
       (common-lisp:cons "AreaOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'band-filter))
      (common-lisp:list
       (common-lisp:cons "BandFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "PropertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-with-band-filter-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resampling-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-resampling-config-input-"))
   (algorithm-name common-lisp:nil :type
    (common-lisp:or algorithm-name-resampling common-lisp:null))
   (output-resolution (common-lisp:error ":output-resolution is required")
    :type (common-lisp:or output-resolution-resampling-input common-lisp:null))
   (target-bands common-lisp:nil :type
    (common-lisp:or string-list-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resampling-config-input 'make-resampling-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resampling-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resampling-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-resolution))
      (common-lisp:list
       (common-lisp:cons "OutputResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resampling-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (reverse-geocoding-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-reverse-geocoding-config-"))
   (xattribute-name (common-lisp:error ":xattribute-name is required") :type
    (common-lisp:or string common-lisp:null))
   (yattribute-name (common-lisp:error ":yattribute-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reverse-geocoding-config 'make-reverse-geocoding-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reverse-geocoding-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reverse-geocoding-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xattribute-name))
      (common-lisp:list
       (common-lisp:cons "XAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yattribute-name))
      (common-lisp:list
       (common-lisp:cons "YAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reverse-geocoding-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3data-input-"))
   (kms-key-id common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (metadata-provider (common-lisp:error ":metadata-provider is required")
    :type (common-lisp:or metadata-provider common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3data-input 'make-s3data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-provider))
      (common-lisp:list
       (common-lisp:cons "MetadataProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3data-input))
   common-lisp:nil))
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-raster-data-collection-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-raster-data-collection-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or data-collection-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (raster-data-collection-query
    (common-lisp:error ":raster-data-collection-query is required") :type
    (common-lisp:or raster-data-collection-query-with-band-filter-input
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-raster-data-collection-input
                    'make-search-raster-data-collection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-query))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-raster-data-collection-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-raster-data-collection-output-"))
   (approximate-result-count
    (common-lisp:error ":approximate-result-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or item-source-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-raster-data-collection-output
                    'make-search-raster-data-collection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-result-count))
      (common-lisp:list
       (common-lisp:cons "ApproximateResultCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id)))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stack-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-config-input-"))
   (output-resolution common-lisp:nil :type
    (common-lisp:or output-resolution-stack-input common-lisp:null))
   (target-bands common-lisp:nil :type
    (common-lisp:or string-list-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stack-config-input 'make-stack-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-resolution))
      (common-lisp:list
       (common-lisp:cons "OutputResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-earth-observation-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-earth-observation-job-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or start-earth-observation-job-input-client-token-string
                    common-lisp:null))
   (execution-role-arn common-lisp:nil :type
    (common-lisp:or execution-role-arn common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or input-config-input common-lisp:null))
   (job-config (common-lisp:error ":job-config is required") :type
    (common-lisp:or job-config-input common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or start-earth-observation-job-input-name-string
                    common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-earth-observation-job-input
                    'make-start-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:deftype start-earth-observation-job-input-client-token-string ()
  'common-lisp:string)
(common-lisp:deftype start-earth-observation-job-input-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-earth-observation-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-earth-observation-job-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or string common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (duration-in-seconds (common-lisp:error ":duration-in-seconds is required")
    :type (common-lisp:or integer common-lisp:null))
   (execution-role-arn common-lisp:nil :type
    (common-lisp:or execution-role-arn common-lisp:null))
   (input-config common-lisp:nil :type
    (common-lisp:or input-config-output common-lisp:null))
   (job-config (common-lisp:error ":job-config is required") :type
    (common-lisp:or job-config-input common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or earth-observation-job-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-earth-observation-job-output
                    'make-start-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-vector-enrichment-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-vector-enrichment-job-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or start-vector-enrichment-job-input-client-token-string
                    common-lisp:null))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or execution-role-arn common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or vector-enrichment-job-input-config common-lisp:null))
   (job-config (common-lisp:error ":job-config is required") :type
    (common-lisp:or vector-enrichment-job-config common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or start-vector-enrichment-job-input-name-string
                    common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-vector-enrichment-job-input
                    'make-start-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:deftype start-vector-enrichment-job-input-client-token-string ()
  'common-lisp:string)
(common-lisp:deftype start-vector-enrichment-job-input-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-vector-enrichment-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-vector-enrichment-job-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vector-enrichment-job-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (duration-in-seconds (common-lisp:error ":duration-in-seconds is required")
    :type (common-lisp:or integer common-lisp:null))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or execution-role-arn common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or vector-enrichment-job-input-config common-lisp:null))
   (job-config (common-lisp:error ":job-config is required") :type
    (common-lisp:or vector-enrichment-job-config common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or vector-enrichment-job-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or vector-enrichment-job-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-vector-enrichment-job-output
                    'make-start-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-earth-observation-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-earth-observation-job-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or earth-observation-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-earth-observation-job-input
                    'make-stop-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-earth-observation-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-earth-observation-job-output-")))
 (common-lisp:export
  (common-lisp:list 'stop-earth-observation-job-output
                    'make-stop-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-vector-enrichment-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-vector-enrichment-job-input-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vector-enrichment-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-vector-enrichment-job-input
                    'make-stop-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-vector-enrichment-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-vector-enrichment-job-output-")))
 (common-lisp:export
  (common-lisp:list 'stop-vector-enrichment-job-output
                    'make-stop-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list-input () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-options () 'common-lisp:string)
(common-lisp:deftype temporal-statistics () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (temporal-statistics-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-temporal-statistics-config-input-"))
   (group-by common-lisp:nil :type (common-lisp:or group-by common-lisp:null))
   (statistics (common-lisp:error ":statistics is required") :type
    (common-lisp:or temporal-statistics-list-input common-lisp:null))
   (target-bands common-lisp:nil :type
    (common-lisp:or string-list-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'temporal-statistics-config-input
                    'make-temporal-statistics-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          temporal-statistics-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          temporal-statistics-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          temporal-statistics-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype temporal-statistics-list-input ()
   '(trivial-types:proper-list temporal-statistics))
 (common-lisp:defun |make-temporal-statistics-list-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list temporal-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       throttling-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (time-range-filter-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-filter-input-"))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-range-filter-input 'make-time-range-filter-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (time-range-filter-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-filter-output-"))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-range-filter-output 'make-time-range-filter-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-output))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-defined (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-defined-"))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or unit common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-defined 'make-user-defined))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-defined))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-defined))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-defined))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       validation-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-resource-id)))
(common-lisp:deftype vector-enrichment-job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vector-enrichment-job-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-vector-enrichment-job-config-"))
   (map-matching-config common-lisp:nil :type
    (common-lisp:or map-matching-config common-lisp:null))
   (reverse-geocoding-config common-lisp:nil :type
    (common-lisp:or reverse-geocoding-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-config
                    'make-vector-enrichment-job-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-matching-config))
      (common-lisp:list
       (common-lisp:cons "MapMatchingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reverse-geocoding-config))
      (common-lisp:list
       (common-lisp:cons "ReverseGeocodingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vector-enrichment-job-data-source-config-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-vector-enrichment-job-data-source-config-input-"))
   (s3data common-lisp:nil :type
    (common-lisp:or vector-enrichment-job-s3data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-data-source-config-input
                    'make-vector-enrichment-job-data-source-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-data-source-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-data-source-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data))
      (common-lisp:list
       (common-lisp:cons "S3Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-data-source-config-input))
   common-lisp:nil))
(common-lisp:deftype vector-enrichment-job-document-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vector-enrichment-job-error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-vector-enrichment-job-error-details-"))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (error-type common-lisp:nil :type
    (common-lisp:or vector-enrichment-job-error-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-error-details
                    'make-vector-enrichment-job-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-error-details))
   common-lisp:nil))
(common-lisp:deftype vector-enrichment-job-error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vector-enrichment-job-export-error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-vector-enrichment-job-export-error-details-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or vector-enrichment-job-export-error-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-export-error-details
                    'make-vector-enrichment-job-export-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-export-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-export-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-export-error-details))
   common-lisp:nil))
(common-lisp:deftype vector-enrichment-job-export-error-type ()
  'common-lisp:string)
(common-lisp:deftype vector-enrichment-job-export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vector-enrichment-job-input-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-vector-enrichment-job-input-config-"))
   (data-source-config (common-lisp:error ":data-source-config is required")
    :type
    (common-lisp:or vector-enrichment-job-data-source-config-input
                    common-lisp:null))
   (document-type (common-lisp:error ":document-type is required") :type
    (common-lisp:or vector-enrichment-job-document-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-input-config
                    'make-vector-enrichment-job-input-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-config))
      (common-lisp:list
       (common-lisp:cons "DataSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-type))
      (common-lisp:list
       (common-lisp:cons "DocumentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-input-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vector-enrichment-job-list ()
   '(trivial-types:proper-list list-vector-enrichment-job-output-config))
 (common-lisp:defun |make-vector-enrichment-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-vector-enrichment-job-output-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vector-enrichment-job-s3data (:copier common-lisp:nil)
      (:conc-name "struct-shape-vector-enrichment-job-s3data-"))
   (kms-key-id common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-s3data
                    'make-vector-enrichment-job-s3data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-s3data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-s3data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-s3data))
   common-lisp:nil))
(common-lisp:deftype vector-enrichment-job-status () 'common-lisp:string)
(common-lisp:deftype vector-enrichment-job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (view-off-nadir-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-view-off-nadir-input-"))
   (lower-bound (common-lisp:error ":lower-bound is required") :type
    (common-lisp:or float common-lisp:null))
   (upper-bound (common-lisp:error ":upper-bound is required") :type
    (common-lisp:or float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'view-off-nadir-input 'make-view-off-nadir-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input view-off-nadir-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input view-off-nadir-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input view-off-nadir-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (view-sun-azimuth-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-view-sun-azimuth-input-"))
   (lower-bound (common-lisp:error ":lower-bound is required") :type
    (common-lisp:or float common-lisp:null))
   (upper-bound (common-lisp:error ":upper-bound is required") :type
    (common-lisp:or float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'view-sun-azimuth-input 'make-view-sun-azimuth-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-azimuth-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-azimuth-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-azimuth-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (view-sun-elevation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-view-sun-elevation-input-"))
   (lower-bound (common-lisp:error ":lower-bound is required") :type
    (common-lisp:or float common-lisp:null))
   (upper-bound (common-lisp:error ":upper-bound is required") :type
    (common-lisp:or float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'view-sun-elevation-input 'make-view-sun-elevation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-elevation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-elevation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-elevation-input))
   common-lisp:nil))
(common-lisp:deftype zonal-statistics () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (zonal-statistics-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-zonal-statistics-config-input-"))
   (statistics (common-lisp:error ":statistics is required") :type
    (common-lisp:or zonal-statistics-list-input common-lisp:null))
   (target-bands common-lisp:nil :type
    (common-lisp:or string-list-input common-lisp:null))
   (zone-s3path (common-lisp:error ":zone-s3path is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (zone-s3path-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zonal-statistics-config-input
                    'make-zonal-statistics-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zonal-statistics-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zonal-statistics-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-s3path))
      (common-lisp:list
       (common-lisp:cons "ZoneS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-s3path-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ZoneS3PathKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zonal-statistics-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype zonal-statistics-list-input ()
   '(trivial-types:proper-list zonal-statistics))
 (common-lisp:defun |make-zonal-statistics-list-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list zonal-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun delete-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-earth-observation-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/earth-observation-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "DeleteEarthObservationJob" "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun delete-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vector-enrichment-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/vector-enrichment-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "DeleteVectorEnrichmentJob" "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun export-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn client-token execution-role-arn
                     export-source-images output-config)
   (common-lisp:declare
    (common-lisp:ignorable arn client-token execution-role-arn
     export-source-images output-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-export-earth-observation-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        :rest-json "/export-earth-observation-job" "ExportEarthObservationJob"
        "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun export-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn client-token execution-role-arn
                     output-config)
   (common-lisp:declare
    (common-lisp:ignorable arn client-token execution-role-arn output-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-export-vector-enrichment-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        :rest-json "/export-vector-enrichment-jobs" "ExportVectorEnrichmentJob"
        "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun get-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-earth-observation-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/earth-observation-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "GetEarthObservationJob" "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun get-raster-data-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-raster-data-collection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/raster-data-collection/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "GetRasterDataCollection" "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-raster-data-collection))
(common-lisp:progn
 (common-lisp:defun get-tile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn execution-role-arn image-assets
                     image-mask output-data-type output-format property-filters
                     target time-range-filter x y z)
   (common-lisp:declare
    (common-lisp:ignorable arn execution-role-arn image-assets image-mask
     output-data-type output-format property-filters target time-range-filter x
     y z))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-tile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tile/~A/~A/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'z))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'x))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'y))))
        "GetTile" "2020-05-27")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-tile))
(common-lisp:progn
 (common-lisp:defun get-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vector-enrichment-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/vector-enrichment-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "GetVectorEnrichmentJob" "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun list-earth-observation-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token sort-by sort-order
                     status-equals)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token sort-by sort-order
     status-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-earth-observation-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        :rest-json "/list-earth-observation-jobs" "ListEarthObservationJobs"
        "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-earth-observation-jobs))
(common-lisp:progn
 (common-lisp:defun list-raster-data-collections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-raster-data-collections-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        :rest-json "/raster-data-collections" "ListRasterDataCollections"
        "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-raster-data-collections))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource" "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-vector-enrichment-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token sort-by sort-order
                     status-equals)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token sort-by sort-order
     status-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vector-enrichment-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        :rest-json "/list-vector-enrichment-jobs" "ListVectorEnrichmentJobs"
        "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vector-enrichment-jobs))
(common-lisp:progn
 (common-lisp:defun search-raster-data-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token
                     raster-data-collection-query)
   (common-lisp:declare
    (common-lisp:ignorable arn next-token raster-data-collection-query))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-raster-data-collection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        :rest-json "/search-raster-data-collection"
        "SearchRasterDataCollection" "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-raster-data-collection))
(common-lisp:progn
 (common-lisp:defun start-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token execution-role-arn
                     input-config job-config kms-key-id name tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token execution-role-arn input-config
     job-config kms-key-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-earth-observation-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        :rest-json "/earth-observation-jobs" "StartEarthObservationJob"
        "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun start-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token execution-role-arn
                     input-config job-config kms-key-id name tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token execution-role-arn input-config
     job-config kms-key-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-vector-enrichment-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        :rest-json "/vector-enrichment-jobs" "StartVectorEnrichmentJob"
        "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun stop-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-earth-observation-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        :rest-json "/earth-observation-jobs/stop" "StopEarthObservationJob"
        "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun stop-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-vector-enrichment-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        :rest-json "/vector-enrichment-jobs/stop" "StopVectorEnrichmentJob"
        "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource" "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2020-05-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
