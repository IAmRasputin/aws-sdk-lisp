;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lookoutmetrics/api
  (:use)
  (:nicknames #:aws/lookoutmetrics)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lookoutmetrics/api)
(common-lisp:progn
 (common-lisp:defclass lookoutmetrics-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "lookoutmetrics" :protocol
                        :rest-json))
 (common-lisp:export 'lookoutmetrics-request))
(common-lisp:progn
 (common-lisp:define-condition lookoutmetrics-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lookoutmetrics-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lookoutmetrics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((lambda-configuration :initarg :lambda-configuration
                         :type
                         (common-lisp:or lambda-configuration common-lisp:null)
                         :accessor %action-lambda-configuration :initform
                         common-lisp:nil)
                        (snsconfiguration :initarg :snsconfiguration :type
                         (common-lisp:or snsconfiguration common-lisp:null)
                         :accessor %action-snsconfiguration :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defun make-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-configuration snsconfiguration)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snsconfiguration))
      (common-lisp:list
       (common-lisp:cons "SNSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-configuration))
      (common-lisp:list
       (common-lisp:cons "LambdaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-anomaly-detector-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %activate-anomaly-detector-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'activate-anomaly-detector-request
                    'make-activate-anomaly-detector-request))
 (common-lisp:defun make-activate-anomaly-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-anomaly-detector-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'activate-anomaly-detector-response
                    'make-activate-anomaly-detector-response))
 (common-lisp:defun make-activate-anomaly-detector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-anomaly-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-anomaly-detector-response))
   common-lisp:nil))
(common-lisp:deftype aggregation-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alert common-lisp:nil
                       ((alert-filters :initarg :alert-filters :type
                         (common-lisp:or alert-filters common-lisp:null)
                         :accessor %alert-alert-filters :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %alert-creation-time :initform common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %alert-last-modification-time :initform
                         common-lisp:nil)
                        (alert-status :initarg :alert-status :type
                         (common-lisp:or alert-status common-lisp:null)
                         :accessor %alert-alert-status :initform
                         common-lisp:nil)
                        (alert-type :initarg :alert-type :type
                         (common-lisp:or alert-type common-lisp:null) :accessor
                         %alert-alert-type :initform common-lisp:nil)
                        (alert-sensitivity-threshold :initarg
                         :alert-sensitivity-threshold :type
                         (common-lisp:or sensitivity-threshold
                                         common-lisp:null)
                         :accessor %alert-alert-sensitivity-threshold :initform
                         common-lisp:nil)
                        (alert-name :initarg :alert-name :type
                         (common-lisp:or alert-name common-lisp:null) :accessor
                         %alert-alert-name :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %alert-anomaly-detector-arn :initform common-lisp:nil)
                        (alert-arn :initarg :alert-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %alert-alert-arn :initform common-lisp:nil)
                        (alert-description :initarg :alert-description :type
                         (common-lisp:or alert-description common-lisp:null)
                         :accessor %alert-alert-description :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %alert-action :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'alert 'make-alert))
 (common-lisp:defun make-alert
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alert-filters creation-time
                     last-modification-time alert-status alert-type
                     alert-sensitivity-threshold alert-name
                     anomaly-detector-arn alert-arn alert-description action)
   (common-lisp:apply #'common-lisp:make-instance 'alert
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alert))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alert))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-description))
      (common-lisp:list
       (common-lisp:cons "AlertDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-arn))
      (common-lisp:list
       (common-lisp:cons "AlertArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-name))
      (common-lisp:list
       (common-lisp:cons "AlertName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alert-sensitivity-threshold))
      (common-lisp:list
       (common-lisp:cons "AlertSensitivityThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-type))
      (common-lisp:list
       (common-lisp:cons "AlertType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-status))
      (common-lisp:list
       (common-lisp:cons "AlertStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-filters))
      (common-lisp:list
       (common-lisp:cons "AlertFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alert))
   common-lisp:nil))
(common-lisp:deftype alert-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alert-filters common-lisp:nil
                       ((dimension-filter-list :initarg :dimension-filter-list
                         :type
                         (common-lisp:or dimension-filter-list
                                         common-lisp:null)
                         :accessor %alert-filters-dimension-filter-list
                         :initform common-lisp:nil)
                        (metric-list :initarg :metric-list :type
                         (common-lisp:or metric-name-list common-lisp:null)
                         :accessor %alert-filters-metric-list :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'alert-filters 'make-alert-filters))
 (common-lisp:defun make-alert-filters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimension-filter-list metric-list)
   (common-lisp:apply #'common-lisp:make-instance 'alert-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alert-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alert-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-list))
      (common-lisp:list
       (common-lisp:cons "MetricList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-filter-list))
      (common-lisp:list
       (common-lisp:cons "DimensionFilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alert-filters))
   common-lisp:nil))
(common-lisp:deftype alert-name () 'common-lisp:string)
(common-lisp:deftype alert-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alert-summary common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %alert-summary-tags :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %alert-summary-creation-time :initform
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %alert-summary-last-modification-time :initform
                         common-lisp:nil)
                        (alert-status :initarg :alert-status :type
                         (common-lisp:or alert-status common-lisp:null)
                         :accessor %alert-summary-alert-status :initform
                         common-lisp:nil)
                        (alert-type :initarg :alert-type :type
                         (common-lisp:or alert-type common-lisp:null) :accessor
                         %alert-summary-alert-type :initform common-lisp:nil)
                        (alert-sensitivity-threshold :initarg
                         :alert-sensitivity-threshold :type
                         (common-lisp:or sensitivity-threshold
                                         common-lisp:null)
                         :accessor %alert-summary-alert-sensitivity-threshold
                         :initform common-lisp:nil)
                        (alert-name :initarg :alert-name :type
                         (common-lisp:or alert-name common-lisp:null) :accessor
                         %alert-summary-alert-name :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %alert-summary-anomaly-detector-arn :initform
                         common-lisp:nil)
                        (alert-arn :initarg :alert-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %alert-summary-alert-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'alert-summary 'make-alert-summary))
 (common-lisp:defun make-alert-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags creation-time last-modification-time
                     alert-status alert-type alert-sensitivity-threshold
                     alert-name anomaly-detector-arn alert-arn)
   (common-lisp:apply #'common-lisp:make-instance 'alert-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alert-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alert-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-arn))
      (common-lisp:list
       (common-lisp:cons "AlertArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-name))
      (common-lisp:list
       (common-lisp:cons "AlertName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alert-sensitivity-threshold))
      (common-lisp:list
       (common-lisp:cons "AlertSensitivityThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-type))
      (common-lisp:list
       (common-lisp:cons "AlertType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-status))
      (common-lisp:list
       (common-lisp:cons "AlertStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alert-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alert-summary-list ()
   '(trivial-types:proper-list alert-summary))
 (common-lisp:defun |make-alert-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alert-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alert-type () 'common-lisp:string)
(common-lisp:deftype anomaly-detection-task-status () 'common-lisp:string)
(common-lisp:deftype anomaly-detection-task-status-message ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass anomaly-detector-config common-lisp:nil
                       ((anomaly-detector-frequency :initarg
                         :anomaly-detector-frequency :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         %anomaly-detector-config-anomaly-detector-frequency
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'anomaly-detector-config 'make-anomaly-detector-config))
 (common-lisp:defun make-anomaly-detector-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-frequency)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-detector-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-frequency))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-detector-config-summary common-lisp:nil
                       ((anomaly-detector-frequency :initarg
                         :anomaly-detector-frequency :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         %anomaly-detector-config-summary-anomaly-detector-frequency
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'anomaly-detector-config-summary
                    'make-anomaly-detector-config-summary))
 (common-lisp:defun make-anomaly-detector-config-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-frequency)
   (common-lisp:apply #'common-lisp:make-instance
                      'anomaly-detector-config-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-config-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-config-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-frequency))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-config-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-detector-data-quality-metric common-lisp:nil
                       ((metric-set-data-quality-metric-list :initarg
                         :metric-set-data-quality-metric-list :type
                         (common-lisp:or metric-set-data-quality-metric-list
                                         common-lisp:null)
                         :accessor
                         %anomaly-detector-data-quality-metric-metric-set-data-quality-metric-list
                         :initform common-lisp:nil)
                        (start-timestamp :initarg :start-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %anomaly-detector-data-quality-metric-start-timestamp
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'anomaly-detector-data-quality-metric
                    'make-anomaly-detector-data-quality-metric))
 (common-lisp:defun make-anomaly-detector-data-quality-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-set-data-quality-metric-list
                     start-timestamp)
   (common-lisp:apply #'common-lisp:make-instance
                      'anomaly-detector-data-quality-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-data-quality-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-data-quality-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-data-quality-metric-list))
      (common-lisp:list
       (common-lisp:cons "MetricSetDataQualityMetricList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-data-quality-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomaly-detector-data-quality-metric-list ()
   '(trivial-types:proper-list anomaly-detector-data-quality-metric))
 (common-lisp:defun |make-anomaly-detector-data-quality-metric-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            anomaly-detector-data-quality-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype anomaly-detector-description () 'common-lisp:string)
(common-lisp:deftype anomaly-detector-failure-type () 'common-lisp:string)
(common-lisp:deftype anomaly-detector-name () 'common-lisp:string)
(common-lisp:deftype anomaly-detector-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass anomaly-detector-summary common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %anomaly-detector-summary-tags :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or anomaly-detector-status
                                         common-lisp:null)
                         :accessor %anomaly-detector-summary-status :initform
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %anomaly-detector-summary-last-modification-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %anomaly-detector-summary-creation-time :initform
                         common-lisp:nil)
                        (anomaly-detector-description :initarg
                         :anomaly-detector-description :type
                         (common-lisp:or anomaly-detector-description
                                         common-lisp:null)
                         :accessor
                         %anomaly-detector-summary-anomaly-detector-description
                         :initform common-lisp:nil)
                        (anomaly-detector-name :initarg :anomaly-detector-name
                         :type
                         (common-lisp:or anomaly-detector-name
                                         common-lisp:null)
                         :accessor
                         %anomaly-detector-summary-anomaly-detector-name
                         :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %anomaly-detector-summary-anomaly-detector-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'anomaly-detector-summary 'make-anomaly-detector-summary))
 (common-lisp:defun make-anomaly-detector-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status last-modification-time
                     creation-time anomaly-detector-description
                     anomaly-detector-name anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-detector-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-name))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-description))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-detector-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomaly-detector-summary-list ()
   '(trivial-types:proper-list anomaly-detector-summary))
 (common-lisp:defun |make-anomaly-detector-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            anomaly-detector-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass anomaly-group common-lisp:nil
                       ((metric-level-impact-list :initarg
                         :metric-level-impact-list :type
                         (common-lisp:or metric-level-impact-list
                                         common-lisp:null)
                         :accessor %anomaly-group-metric-level-impact-list
                         :initform common-lisp:nil)
                        (primary-metric-name :initarg :primary-metric-name
                         :type (common-lisp:or metric-name common-lisp:null)
                         :accessor %anomaly-group-primary-metric-name :initform
                         common-lisp:nil)
                        (anomaly-group-score :initarg :anomaly-group-score
                         :type (common-lisp:or score common-lisp:null)
                         :accessor %anomaly-group-anomaly-group-score :initform
                         common-lisp:nil)
                        (anomaly-group-id :initarg :anomaly-group-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %anomaly-group-anomaly-group-id :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp-string common-lisp:null)
                         :accessor %anomaly-group-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-string common-lisp:null)
                         :accessor %anomaly-group-start-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'anomaly-group 'make-anomaly-group))
 (common-lisp:defun make-anomaly-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-level-impact-list
                     primary-metric-name anomaly-group-score anomaly-group-id
                     end-time start-time)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-score))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-metric-name))
      (common-lisp:list
       (common-lisp:cons "PrimaryMetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-level-impact-list))
      (common-lisp:list
       (common-lisp:cons "MetricLevelImpactList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-group-statistics common-lisp:nil
                       ((itemized-metric-stats-list :initarg
                         :itemized-metric-stats-list :type
                         (common-lisp:or itemized-metric-stats-list
                                         common-lisp:null)
                         :accessor
                         %anomaly-group-statistics-itemized-metric-stats-list
                         :initform common-lisp:nil)
                        (total-count :initarg :total-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %anomaly-group-statistics-total-count :initform
                         common-lisp:nil)
                        (evaluation-start-date :initarg :evaluation-start-date
                         :type
                         (common-lisp:or timestamp-string common-lisp:null)
                         :accessor
                         %anomaly-group-statistics-evaluation-start-date
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'anomaly-group-statistics 'make-anomaly-group-statistics))
 (common-lisp:defun make-anomaly-group-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key itemized-metric-stats-list total-count
                     evaluation-start-date)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-group-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-start-date))
      (common-lisp:list
       (common-lisp:cons "EvaluationStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'itemized-metric-stats-list))
      (common-lisp:list
       (common-lisp:cons "ItemizedMetricStatsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-group-summary common-lisp:nil
                       ((primary-metric-name :initarg :primary-metric-name
                         :type (common-lisp:or metric-name common-lisp:null)
                         :accessor %anomaly-group-summary-primary-metric-name
                         :initform common-lisp:nil)
                        (anomaly-group-score :initarg :anomaly-group-score
                         :type (common-lisp:or score common-lisp:null)
                         :accessor %anomaly-group-summary-anomaly-group-score
                         :initform common-lisp:nil)
                        (anomaly-group-id :initarg :anomaly-group-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %anomaly-group-summary-anomaly-group-id :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp-string common-lisp:null)
                         :accessor %anomaly-group-summary-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-string common-lisp:null)
                         :accessor %anomaly-group-summary-start-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'anomaly-group-summary 'make-anomaly-group-summary))
 (common-lisp:defun make-anomaly-group-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key primary-metric-name anomaly-group-score
                     anomaly-group-id end-time start-time)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-score))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-metric-name))
      (common-lisp:list
       (common-lisp:cons "PrimaryMetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomaly-group-summary-list ()
   '(trivial-types:proper-list anomaly-group-summary))
 (common-lisp:defun |make-anomaly-group-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass anomaly-group-time-series common-lisp:nil
                       ((time-series-id :initarg :time-series-id :type
                         (common-lisp:or time-series-id common-lisp:null)
                         :accessor %anomaly-group-time-series-time-series-id
                         :initform common-lisp:nil)
                        (anomaly-group-id :initarg :anomaly-group-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %anomaly-group-time-series-anomaly-group-id :initform
                         (common-lisp:error ":anomaly-group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'anomaly-group-time-series
                    'make-anomaly-group-time-series))
 (common-lisp:defun make-anomaly-group-time-series
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-series-id anomaly-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-group-time-series
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-time-series))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-time-series))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-id))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-time-series))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-group-time-series-feedback common-lisp:nil
                       ((is-anomaly :initarg :is-anomaly :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %anomaly-group-time-series-feedback-is-anomaly
                         :initform
                         (common-lisp:error ":is-anomaly is required"))
                        (time-series-id :initarg :time-series-id :type
                         (common-lisp:or time-series-id common-lisp:null)
                         :accessor
                         %anomaly-group-time-series-feedback-time-series-id
                         :initform
                         (common-lisp:error ":time-series-id is required"))
                        (anomaly-group-id :initarg :anomaly-group-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %anomaly-group-time-series-feedback-anomaly-group-id
                         :initform
                         (common-lisp:error ":anomaly-group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'anomaly-group-time-series-feedback
                    'make-anomaly-group-time-series-feedback))
 (common-lisp:defun make-anomaly-group-time-series-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-anomaly time-series-id
                     anomaly-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'anomaly-group-time-series-feedback
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-time-series-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-time-series-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-id))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-anomaly))
      (common-lisp:list
       (common-lisp:cons "IsAnomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-group-time-series-feedback))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass app-flow-config common-lisp:nil
                       ((flow-name :initarg :flow-name :type
                         (common-lisp:or flow-name common-lisp:null) :accessor
                         %app-flow-config-flow-name :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %app-flow-config-role-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'app-flow-config 'make-app-flow-config))
 (common-lisp:defun make-app-flow-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-name role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'app-flow-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-flow-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-flow-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "FlowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-flow-config))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype athena-data-catalog () 'common-lisp:string)
(common-lisp:deftype athena-database-name () 'common-lisp:string)
(common-lisp:deftype athena-s3results-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass athena-source-config common-lisp:nil
                       ((back-test-configuration :initarg
                         :back-test-configuration :type
                         (common-lisp:or back-test-configuration
                                         common-lisp:null)
                         :accessor
                         %athena-source-config-back-test-configuration
                         :initform common-lisp:nil)
                        (s3results-path :initarg :s3results-path :type
                         (common-lisp:or athena-s3results-path
                                         common-lisp:null)
                         :accessor %athena-source-config-s3results-path
                         :initform common-lisp:nil)
                        (work-group-name :initarg :work-group-name :type
                         (common-lisp:or athena-work-group-name
                                         common-lisp:null)
                         :accessor %athena-source-config-work-group-name
                         :initform common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or athena-table-name common-lisp:null)
                         :accessor %athena-source-config-table-name :initform
                         common-lisp:nil)
                        (data-catalog :initarg :data-catalog :type
                         (common-lisp:or athena-data-catalog common-lisp:null)
                         :accessor %athena-source-config-data-catalog :initform
                         common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or athena-database-name common-lisp:null)
                         :accessor %athena-source-config-database-name
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %athena-source-config-role-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'athena-source-config 'make-athena-source-config))
 (common-lisp:defun make-athena-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key back-test-configuration s3results-path
                     work-group-name table-name data-catalog database-name
                     role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'athena-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input athena-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input athena-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-catalog))
      (common-lisp:list
       (common-lisp:cons "DataCatalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group-name))
      (common-lisp:list
       (common-lisp:cons "WorkGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3results-path))
      (common-lisp:list
       (common-lisp:cons "S3ResultsPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'back-test-configuration))
      (common-lisp:list
       (common-lisp:cons "BackTestConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input athena-source-config))
   common-lisp:nil))
(common-lisp:deftype athena-table-name () 'common-lisp:string)
(common-lisp:deftype athena-work-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribute-value common-lisp:nil
                       ((bs :initarg :bs :type
                         (common-lisp:or binary-list-attribute-value
                                         common-lisp:null)
                         :accessor %attribute-value-bs :initform
                         common-lisp:nil)
                        (ns :initarg :ns :type
                         (common-lisp:or number-list-attribute-value
                                         common-lisp:null)
                         :accessor %attribute-value-ns :initform
                         common-lisp:nil)
                        (ss :initarg :ss :type
                         (common-lisp:or string-list-attribute-value
                                         common-lisp:null)
                         :accessor %attribute-value-ss :initform
                         common-lisp:nil)
                        (b :initarg :b :type
                         (common-lisp:or binary-attribute-value
                                         common-lisp:null)
                         :accessor %attribute-value-b :initform
                         common-lisp:nil)
                        (n :initarg :n :type
                         (common-lisp:or number-attribute-value
                                         common-lisp:null)
                         :accessor %attribute-value-n :initform
                         common-lisp:nil)
                        (s :initarg :s :type
                         (common-lisp:or string-attribute-value
                                         common-lisp:null)
                         :accessor %attribute-value-s :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'attribute-value 'make-attribute-value))
 (common-lisp:defun make-attribute-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bs ns ss b n s)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's))
      (common-lisp:list
       (common-lisp:cons "S"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'n))
      (common-lisp:list
       (common-lisp:cons "N"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'b))
      (common-lisp:list
       (common-lisp:cons "B"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ss))
      (common-lisp:list
       (common-lisp:cons "SS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns))
      (common-lisp:list
       (common-lisp:cons "NS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bs))
      (common-lisp:list
       (common-lisp:cons "BS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-detection-metric-source common-lisp:nil
                       ((s3source-config :initarg :s3source-config :type
                         (common-lisp:or auto-detection-s3source-config
                                         common-lisp:null)
                         :accessor
                         %auto-detection-metric-source-s3source-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-detection-metric-source
                    'make-auto-detection-metric-source))
 (common-lisp:defun make-auto-detection-metric-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3source-config)
   (common-lisp:apply #'common-lisp:make-instance 'auto-detection-metric-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-detection-metric-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-detection-metric-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3source-config))
      (common-lisp:list
       (common-lisp:cons "S3SourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-detection-metric-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-detection-s3source-config common-lisp:nil
                       ((historical-data-path-list :initarg
                         :historical-data-path-list :type
                         (common-lisp:or historical-data-path-list
                                         common-lisp:null)
                         :accessor
                         %auto-detection-s3source-config-historical-data-path-list
                         :initform common-lisp:nil)
                        (templated-path-list :initarg :templated-path-list
                         :type
                         (common-lisp:or templated-path-list common-lisp:null)
                         :accessor
                         %auto-detection-s3source-config-templated-path-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-detection-s3source-config
                    'make-auto-detection-s3source-config))
 (common-lisp:defun make-auto-detection-s3source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key historical-data-path-list
                     templated-path-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-detection-s3source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-detection-s3source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-detection-s3source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templated-path-list))
      (common-lisp:list
       (common-lisp:cons "TemplatedPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'historical-data-path-list))
      (common-lisp:list
       (common-lisp:cons "HistoricalDataPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-detection-s3source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass back-test-anomaly-detector-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %back-test-anomaly-detector-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'back-test-anomaly-detector-request
                    'make-back-test-anomaly-detector-request))
 (common-lisp:defun make-back-test-anomaly-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'back-test-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          back-test-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          back-test-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          back-test-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass back-test-anomaly-detector-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'back-test-anomaly-detector-response
                    'make-back-test-anomaly-detector-response))
 (common-lisp:defun make-back-test-anomaly-detector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'back-test-anomaly-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          back-test-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          back-test-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          back-test-anomaly-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass back-test-configuration common-lisp:nil
                       ((run-back-test-mode :initarg :run-back-test-mode :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %back-test-configuration-run-back-test-mode :initform
                         (common-lisp:error
                          ":run-back-test-mode is required"))))
 (common-lisp:export
  (common-lisp:list 'back-test-configuration 'make-back-test-configuration))
 (common-lisp:defun make-back-test-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key run-back-test-mode)
   (common-lisp:apply #'common-lisp:make-instance 'back-test-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          back-test-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          back-test-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-back-test-mode))
      (common-lisp:list
       (common-lisp:cons "RunBackTestMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          back-test-configuration))
   common-lisp:nil))
(common-lisp:deftype binary-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype binary-list-attribute-value ()
   '(trivial-types:proper-list binary-attribute-value))
 (common-lisp:defun |make-binary-list-attribute-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list binary-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype csvfile-compression () 'common-lisp:string)
(common-lisp:deftype charset () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-config common-lisp:nil
                       ((back-test-configuration :initarg
                         :back-test-configuration :type
                         (common-lisp:or back-test-configuration
                                         common-lisp:null)
                         :accessor %cloud-watch-config-back-test-configuration
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %cloud-watch-config-role-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-config 'make-cloud-watch-config))
 (common-lisp:defun make-cloud-watch-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key back-test-configuration role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cloud-watch-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cloud-watch-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'back-test-configuration))
      (common-lisp:list
       (common-lisp:cons "BackTestConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cloud-watch-config))
   common-lisp:nil))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:deftype confidence () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (lookoutmetrics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass contribution-matrix common-lisp:nil
                       ((dimension-contribution-list :initarg
                         :dimension-contribution-list :type
                         (common-lisp:or dimension-contribution-list
                                         common-lisp:null)
                         :accessor
                         %contribution-matrix-dimension-contribution-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'contribution-matrix 'make-contribution-matrix))
 (common-lisp:defun make-contribution-matrix
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimension-contribution-list)
   (common-lisp:apply #'common-lisp:make-instance 'contribution-matrix
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contribution-matrix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contribution-matrix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-contribution-list))
      (common-lisp:list
       (common-lisp:cons "DimensionContributionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contribution-matrix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-alert-request common-lisp:nil
                       ((alert-filters :initarg :alert-filters :type
                         (common-lisp:or alert-filters common-lisp:null)
                         :accessor %create-alert-request-alert-filters
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-alert-request-tags :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %create-alert-request-action :initform
                         (common-lisp:error ":action is required"))
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %create-alert-request-anomaly-detector-arn :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))
                        (alert-description :initarg :alert-description :type
                         (common-lisp:or alert-description common-lisp:null)
                         :accessor %create-alert-request-alert-description
                         :initform common-lisp:nil)
                        (alert-sensitivity-threshold :initarg
                         :alert-sensitivity-threshold :type
                         (common-lisp:or sensitivity-threshold
                                         common-lisp:null)
                         :accessor
                         %create-alert-request-alert-sensitivity-threshold
                         :initform common-lisp:nil)
                        (alert-name :initarg :alert-name :type
                         (common-lisp:or alert-name common-lisp:null) :accessor
                         %create-alert-request-alert-name :initform
                         (common-lisp:error ":alert-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-alert-request 'make-create-alert-request))
 (common-lisp:defun make-create-alert-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alert-filters tags action
                     anomaly-detector-arn alert-description
                     alert-sensitivity-threshold alert-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-alert-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alert-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alert-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-name))
      (common-lisp:list
       (common-lisp:cons "AlertName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alert-sensitivity-threshold))
      (common-lisp:list
       (common-lisp:cons "AlertSensitivityThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-description))
      (common-lisp:list
       (common-lisp:cons "AlertDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-filters))
      (common-lisp:list
       (common-lisp:cons "AlertFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alert-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-alert-response common-lisp:nil
                       ((alert-arn :initarg :alert-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-alert-response-alert-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-alert-response 'make-create-alert-response))
 (common-lisp:defun make-create-alert-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alert-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-alert-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-alert-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-alert-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-arn))
      (common-lisp:list
       (common-lisp:cons "AlertArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-alert-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-anomaly-detector-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-anomaly-detector-request-tags :initform
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %create-anomaly-detector-request-kms-key-arn
                         :initform common-lisp:nil)
                        (anomaly-detector-config :initarg
                         :anomaly-detector-config :type
                         (common-lisp:or anomaly-detector-config
                                         common-lisp:null)
                         :accessor
                         %create-anomaly-detector-request-anomaly-detector-config
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-config is required"))
                        (anomaly-detector-description :initarg
                         :anomaly-detector-description :type
                         (common-lisp:or anomaly-detector-description
                                         common-lisp:null)
                         :accessor
                         %create-anomaly-detector-request-anomaly-detector-description
                         :initform common-lisp:nil)
                        (anomaly-detector-name :initarg :anomaly-detector-name
                         :type
                         (common-lisp:or anomaly-detector-name
                                         common-lisp:null)
                         :accessor
                         %create-anomaly-detector-request-anomaly-detector-name
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-detector-request
                    'make-create-anomaly-detector-request))
 (common-lisp:defun make-create-anomaly-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags kms-key-arn anomaly-detector-config
                     anomaly-detector-description anomaly-detector-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-name))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-description))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-config))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-anomaly-detector-response common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %create-anomaly-detector-response-anomaly-detector-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-detector-response
                    'make-create-anomaly-detector-response))
 (common-lisp:defun make-create-anomaly-detector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-anomaly-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-detector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-metric-set-request common-lisp:nil
                       ((dimension-filter-list :initarg :dimension-filter-list
                         :type
                         (common-lisp:or metric-set-dimension-filter-list
                                         common-lisp:null)
                         :accessor
                         %create-metric-set-request-dimension-filter-list
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-metric-set-request-tags :initform
                         common-lisp:nil)
                        (timezone :initarg :timezone :type
                         (common-lisp:or timezone common-lisp:null) :accessor
                         %create-metric-set-request-timezone :initform
                         common-lisp:nil)
                        (metric-source :initarg :metric-source :type
                         (common-lisp:or metric-source common-lisp:null)
                         :accessor %create-metric-set-request-metric-source
                         :initform
                         (common-lisp:error ":metric-source is required"))
                        (metric-set-frequency :initarg :metric-set-frequency
                         :type (common-lisp:or frequency common-lisp:null)
                         :accessor
                         %create-metric-set-request-metric-set-frequency
                         :initform common-lisp:nil)
                        (dimension-list :initarg :dimension-list :type
                         (common-lisp:or dimension-list common-lisp:null)
                         :accessor %create-metric-set-request-dimension-list
                         :initform common-lisp:nil)
                        (timestamp-column :initarg :timestamp-column :type
                         (common-lisp:or timestamp-column common-lisp:null)
                         :accessor %create-metric-set-request-timestamp-column
                         :initform common-lisp:nil)
                        (offset :initarg :offset :type
                         (common-lisp:or offset common-lisp:null) :accessor
                         %create-metric-set-request-offset :initform
                         common-lisp:nil)
                        (metric-list :initarg :metric-list :type
                         (common-lisp:or metric-list common-lisp:null)
                         :accessor %create-metric-set-request-metric-list
                         :initform
                         (common-lisp:error ":metric-list is required"))
                        (metric-set-description :initarg
                         :metric-set-description :type
                         (common-lisp:or metric-set-description
                                         common-lisp:null)
                         :accessor
                         %create-metric-set-request-metric-set-description
                         :initform common-lisp:nil)
                        (metric-set-name :initarg :metric-set-name :type
                         (common-lisp:or metric-set-name common-lisp:null)
                         :accessor %create-metric-set-request-metric-set-name
                         :initform
                         (common-lisp:error ":metric-set-name is required"))
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %create-metric-set-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-metric-set-request
                    'make-create-metric-set-request))
 (common-lisp:defun make-create-metric-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimension-filter-list tags timezone
                     metric-source metric-set-frequency dimension-list
                     timestamp-column offset metric-list metric-set-description
                     metric-set-name anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-metric-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-metric-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-metric-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-name))
      (common-lisp:list
       (common-lisp:cons "MetricSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-description))
      (common-lisp:list
       (common-lisp:cons "MetricSetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-list))
      (common-lisp:list
       (common-lisp:cons "MetricList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "Offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-column))
      (common-lisp:list
       (common-lisp:cons "TimestampColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-list))
      (common-lisp:list
       (common-lisp:cons "DimensionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-frequency))
      (common-lisp:list
       (common-lisp:cons "MetricSetFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-source))
      (common-lisp:list
       (common-lisp:cons "MetricSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-filter-list))
      (common-lisp:list
       (common-lisp:cons "DimensionFilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-metric-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-metric-set-response common-lisp:nil
                       ((metric-set-arn :initarg :metric-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-metric-set-response-metric-set-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-metric-set-response
                    'make-create-metric-set-response))
 (common-lisp:defun make-create-metric-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-set-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-metric-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-metric-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-metric-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-arn))
      (common-lisp:list
       (common-lisp:cons "MetricSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-metric-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass csv-format-descriptor common-lisp:nil
                       ((quote-symbol :initarg :quote-symbol :type
                         (common-lisp:or quote-symbol common-lisp:null)
                         :accessor %csv-format-descriptor-quote-symbol
                         :initform common-lisp:nil)
                        (header-list :initarg :header-list :type
                         (common-lisp:or header-list common-lisp:null)
                         :accessor %csv-format-descriptor-header-list :initform
                         common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %csv-format-descriptor-delimiter :initform
                         common-lisp:nil)
                        (contains-header :initarg :contains-header :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %csv-format-descriptor-contains-header :initform
                         common-lisp:nil)
                        (charset :initarg :charset :type
                         (common-lisp:or charset common-lisp:null) :accessor
                         %csv-format-descriptor-charset :initform
                         common-lisp:nil)
                        (file-compression :initarg :file-compression :type
                         (common-lisp:or csvfile-compression common-lisp:null)
                         :accessor %csv-format-descriptor-file-compression
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'csv-format-descriptor 'make-csv-format-descriptor))
 (common-lisp:defun make-csv-format-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quote-symbol header-list delimiter
                     contains-header charset file-compression)
   (common-lisp:apply #'common-lisp:make-instance 'csv-format-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          csv-format-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          csv-format-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-compression))
      (common-lisp:list
       (common-lisp:cons "FileCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'charset))
      (common-lisp:list
       (common-lisp:cons "Charset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-list))
      (common-lisp:list
       (common-lisp:cons "HeaderList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-symbol))
      (common-lisp:list
       (common-lisp:cons "QuoteSymbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          csv-format-descriptor))
   common-lisp:nil))
(common-lisp:deftype data-item () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-quality-metric common-lisp:nil
                       ((metric-value :initarg :metric-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %data-quality-metric-metric-value :initform
                         common-lisp:nil)
                        (related-column-name :initarg :related-column-name
                         :type
                         (common-lisp:or related-column-name common-lisp:null)
                         :accessor %data-quality-metric-related-column-name
                         :initform common-lisp:nil)
                        (metric-description :initarg :metric-description :type
                         (common-lisp:or data-quality-metric-description
                                         common-lisp:null)
                         :accessor %data-quality-metric-metric-description
                         :initform common-lisp:nil)
                        (metric-type :initarg :metric-type :type
                         (common-lisp:or data-quality-metric-type
                                         common-lisp:null)
                         :accessor %data-quality-metric-metric-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-quality-metric 'make-data-quality-metric))
 (common-lisp:defun make-data-quality-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-value related-column-name
                     metric-description metric-type)
   (common-lisp:apply #'common-lisp:make-instance 'data-quality-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-quality-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-quality-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "MetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-description))
      (common-lisp:list
       (common-lisp:cons "MetricDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-column-name))
      (common-lisp:list
       (common-lisp:cons "RelatedColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "MetricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-quality-metric))
   common-lisp:nil))
(common-lisp:deftype data-quality-metric-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-quality-metric-list ()
   '(trivial-types:proper-list data-quality-metric))
 (common-lisp:defun |make-data-quality-metric-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-quality-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-quality-metric-type () 'common-lisp:string)
(common-lisp:deftype database-host () 'common-lisp:string)
(common-lisp:deftype database-port () 'common-lisp:integer)
(common-lisp:deftype date-time-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deactivate-anomaly-detector-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %deactivate-anomaly-detector-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'deactivate-anomaly-detector-request
                    'make-deactivate-anomaly-detector-request))
 (common-lisp:defun make-deactivate-anomaly-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'deactivate-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deactivate-anomaly-detector-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deactivate-anomaly-detector-response
                    'make-deactivate-anomaly-detector-response))
 (common-lisp:defun make-deactivate-anomaly-detector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'deactivate-anomaly-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-anomaly-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-alert-request common-lisp:nil
                       ((alert-arn :initarg :alert-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-alert-request-alert-arn :initform
                         (common-lisp:error ":alert-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-alert-request 'make-delete-alert-request))
 (common-lisp:defun make-delete-alert-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alert-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-alert-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alert-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alert-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-arn))
      (common-lisp:list
       (common-lisp:cons "AlertArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alert-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-alert-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-alert-response 'make-delete-alert-response))
 (common-lisp:defun make-delete-alert-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-alert-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-alert-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-alert-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-alert-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-anomaly-detector-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %delete-anomaly-detector-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-detector-request
                    'make-delete-anomaly-detector-request))
 (common-lisp:defun make-delete-anomaly-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-anomaly-detector-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-detector-response
                    'make-delete-anomaly-detector-response))
 (common-lisp:defun make-delete-anomaly-detector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-anomaly-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-detector-response))
   common-lisp:nil))
(common-lisp:deftype delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-alert-request common-lisp:nil
                       ((alert-arn :initarg :alert-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-alert-request-alert-arn :initform
                         (common-lisp:error ":alert-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-alert-request 'make-describe-alert-request))
 (common-lisp:defun make-describe-alert-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alert-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-alert-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-arn))
      (common-lisp:list
       (common-lisp:cons "AlertArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-alert-response common-lisp:nil
                       ((alert :initarg :alert :type
                         (common-lisp:or alert common-lisp:null) :accessor
                         %describe-alert-response-alert :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-alert-response 'make-describe-alert-response))
 (common-lisp:defun make-describe-alert-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alert)
   (common-lisp:apply #'common-lisp:make-instance 'describe-alert-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert))
      (common-lisp:list
       (common-lisp:cons "Alert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-anomaly-detection-executions-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-anomaly-detection-executions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-anomaly-detection-executions-request-max-results
                         :initform common-lisp:nil)
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or timestamp-string common-lisp:null)
                         :accessor
                         %describe-anomaly-detection-executions-request-timestamp
                         :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %describe-anomaly-detection-executions-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-anomaly-detection-executions-request
                    'make-describe-anomaly-detection-executions-request))
 (common-lisp:defun make-describe-anomaly-detection-executions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results timestamp
                     anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-anomaly-detection-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detection-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detection-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detection-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-anomaly-detection-executions-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-anomaly-detection-executions-response-next-token
                         :initform common-lisp:nil)
                        (execution-list :initarg :execution-list :type
                         (common-lisp:or execution-list common-lisp:null)
                         :accessor
                         %describe-anomaly-detection-executions-response-execution-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-anomaly-detection-executions-response
                    'make-describe-anomaly-detection-executions-response))
 (common-lisp:defun make-describe-anomaly-detection-executions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token execution-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-anomaly-detection-executions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detection-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detection-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-list))
      (common-lisp:list
       (common-lisp:cons "ExecutionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detection-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-anomaly-detector-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %describe-anomaly-detector-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-anomaly-detector-request
                    'make-describe-anomaly-detector-request))
 (common-lisp:defun make-describe-anomaly-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-anomaly-detector-response common-lisp:nil
                       ((failure-type :initarg :failure-type :type
                         (common-lisp:or anomaly-detector-failure-type
                                         common-lisp:null)
                         :accessor
                         %describe-anomaly-detector-response-failure-type
                         :initform common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         %describe-anomaly-detector-response-kms-key-arn
                         :initform common-lisp:nil)
                        (failure-reason :initarg :failure-reason :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %describe-anomaly-detector-response-failure-reason
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or anomaly-detector-status
                                         common-lisp:null)
                         :accessor %describe-anomaly-detector-response-status
                         :initform common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-anomaly-detector-response-last-modification-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-anomaly-detector-response-creation-time
                         :initform common-lisp:nil)
                        (anomaly-detector-config :initarg
                         :anomaly-detector-config :type
                         (common-lisp:or anomaly-detector-config-summary
                                         common-lisp:null)
                         :accessor
                         %describe-anomaly-detector-response-anomaly-detector-config
                         :initform common-lisp:nil)
                        (anomaly-detector-description :initarg
                         :anomaly-detector-description :type
                         (common-lisp:or anomaly-detector-description
                                         common-lisp:null)
                         :accessor
                         %describe-anomaly-detector-response-anomaly-detector-description
                         :initform common-lisp:nil)
                        (anomaly-detector-name :initarg :anomaly-detector-name
                         :type
                         (common-lisp:or anomaly-detector-name
                                         common-lisp:null)
                         :accessor
                         %describe-anomaly-detector-response-anomaly-detector-name
                         :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %describe-anomaly-detector-response-anomaly-detector-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-anomaly-detector-response
                    'make-describe-anomaly-detector-response))
 (common-lisp:defun make-describe-anomaly-detector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-type kms-key-arn failure-reason
                     status last-modification-time creation-time
                     anomaly-detector-config anomaly-detector-description
                     anomaly-detector-name anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-anomaly-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-name))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-description))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-config))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "FailureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metric-set-request common-lisp:nil
                       ((metric-set-arn :initarg :metric-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-metric-set-request-metric-set-arn :initform
                         (common-lisp:error ":metric-set-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-metric-set-request
                    'make-describe-metric-set-request))
 (common-lisp:defun make-describe-metric-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-set-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-metric-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-arn))
      (common-lisp:list
       (common-lisp:cons "MetricSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metric-set-response common-lisp:nil
                       ((dimension-filter-list :initarg :dimension-filter-list
                         :type
                         (common-lisp:or metric-set-dimension-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-metric-set-response-dimension-filter-list
                         :initform common-lisp:nil)
                        (metric-source :initarg :metric-source :type
                         (common-lisp:or metric-source common-lisp:null)
                         :accessor %describe-metric-set-response-metric-source
                         :initform common-lisp:nil)
                        (timezone :initarg :timezone :type
                         (common-lisp:or timezone common-lisp:null) :accessor
                         %describe-metric-set-response-timezone :initform
                         common-lisp:nil)
                        (metric-set-frequency :initarg :metric-set-frequency
                         :type (common-lisp:or frequency common-lisp:null)
                         :accessor
                         %describe-metric-set-response-metric-set-frequency
                         :initform common-lisp:nil)
                        (dimension-list :initarg :dimension-list :type
                         (common-lisp:or dimension-list common-lisp:null)
                         :accessor %describe-metric-set-response-dimension-list
                         :initform common-lisp:nil)
                        (timestamp-column :initarg :timestamp-column :type
                         (common-lisp:or timestamp-column common-lisp:null)
                         :accessor
                         %describe-metric-set-response-timestamp-column
                         :initform common-lisp:nil)
                        (metric-list :initarg :metric-list :type
                         (common-lisp:or metric-list common-lisp:null)
                         :accessor %describe-metric-set-response-metric-list
                         :initform common-lisp:nil)
                        (offset :initarg :offset :type
                         (common-lisp:or offset common-lisp:null) :accessor
                         %describe-metric-set-response-offset :initform
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-metric-set-response-last-modification-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-metric-set-response-creation-time :initform
                         common-lisp:nil)
                        (metric-set-description :initarg
                         :metric-set-description :type
                         (common-lisp:or metric-set-description
                                         common-lisp:null)
                         :accessor
                         %describe-metric-set-response-metric-set-description
                         :initform common-lisp:nil)
                        (metric-set-name :initarg :metric-set-name :type
                         (common-lisp:or metric-set-name common-lisp:null)
                         :accessor
                         %describe-metric-set-response-metric-set-name
                         :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %describe-metric-set-response-anomaly-detector-arn
                         :initform common-lisp:nil)
                        (metric-set-arn :initarg :metric-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-metric-set-response-metric-set-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-metric-set-response
                    'make-describe-metric-set-response))
 (common-lisp:defun make-describe-metric-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimension-filter-list metric-source
                     timezone metric-set-frequency dimension-list
                     timestamp-column metric-list offset last-modification-time
                     creation-time metric-set-description metric-set-name
                     anomaly-detector-arn metric-set-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-metric-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-arn))
      (common-lisp:list
       (common-lisp:cons "MetricSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-name))
      (common-lisp:list
       (common-lisp:cons "MetricSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-description))
      (common-lisp:list
       (common-lisp:cons "MetricSetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "Offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-list))
      (common-lisp:list
       (common-lisp:cons "MetricList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-column))
      (common-lisp:list
       (common-lisp:cons "TimestampColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-list))
      (common-lisp:list
       (common-lisp:cons "DimensionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-frequency))
      (common-lisp:list
       (common-lisp:cons "MetricSetFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-source))
      (common-lisp:list
       (common-lisp:cons "MetricSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-filter-list))
      (common-lisp:list
       (common-lisp:cons "DimensionFilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-metric-set-config-request common-lisp:nil
                       ((auto-detection-metric-source :initarg
                         :auto-detection-metric-source :type
                         (common-lisp:or auto-detection-metric-source
                                         common-lisp:null)
                         :accessor
                         %detect-metric-set-config-request-auto-detection-metric-source
                         :initform
                         (common-lisp:error
                          ":auto-detection-metric-source is required"))
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %detect-metric-set-config-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'detect-metric-set-config-request
                    'make-detect-metric-set-config-request))
 (common-lisp:defun make-detect-metric-set-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-detection-metric-source
                     anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-metric-set-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-metric-set-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-metric-set-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-detection-metric-source))
      (common-lisp:list
       (common-lisp:cons "AutoDetectionMetricSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-metric-set-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-metric-set-config-response common-lisp:nil
                       ((detected-metric-set-config :initarg
                         :detected-metric-set-config :type
                         (common-lisp:or detected-metric-set-config
                                         common-lisp:null)
                         :accessor
                         %detect-metric-set-config-response-detected-metric-set-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detect-metric-set-config-response
                    'make-detect-metric-set-config-response))
 (common-lisp:defun make-detect-metric-set-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detected-metric-set-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-metric-set-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-metric-set-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-metric-set-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detected-metric-set-config))
      (common-lisp:list
       (common-lisp:cons "DetectedMetricSetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-metric-set-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detected-csv-format-descriptor common-lisp:nil
                       ((quote-symbol :initarg :quote-symbol :type
                         (common-lisp:or detected-field common-lisp:null)
                         :accessor %detected-csv-format-descriptor-quote-symbol
                         :initform common-lisp:nil)
                        (header-list :initarg :header-list :type
                         (common-lisp:or detected-field common-lisp:null)
                         :accessor %detected-csv-format-descriptor-header-list
                         :initform common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or detected-field common-lisp:null)
                         :accessor %detected-csv-format-descriptor-delimiter
                         :initform common-lisp:nil)
                        (contains-header :initarg :contains-header :type
                         (common-lisp:or detected-field common-lisp:null)
                         :accessor
                         %detected-csv-format-descriptor-contains-header
                         :initform common-lisp:nil)
                        (charset :initarg :charset :type
                         (common-lisp:or detected-field common-lisp:null)
                         :accessor %detected-csv-format-descriptor-charset
                         :initform common-lisp:nil)
                        (file-compression :initarg :file-compression :type
                         (common-lisp:or detected-field common-lisp:null)
                         :accessor
                         %detected-csv-format-descriptor-file-compression
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detected-csv-format-descriptor
                    'make-detected-csv-format-descriptor))
 (common-lisp:defun make-detected-csv-format-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quote-symbol header-list delimiter
                     contains-header charset file-compression)
   (common-lisp:apply #'common-lisp:make-instance
                      'detected-csv-format-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detected-csv-format-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detected-csv-format-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-compression))
      (common-lisp:list
       (common-lisp:cons "FileCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'charset))
      (common-lisp:list
       (common-lisp:cons "Charset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-list))
      (common-lisp:list
       (common-lisp:cons "HeaderList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-symbol))
      (common-lisp:list
       (common-lisp:cons "QuoteSymbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detected-csv-format-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detected-field common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %detected-field-message :initform common-lisp:nil)
                        (confidence :initarg :confidence :type
                         (common-lisp:or confidence common-lisp:null) :accessor
                         %detected-field-confidence :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or attribute-value common-lisp:null)
                         :accessor %detected-field-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'detected-field 'make-detected-field))
 (common-lisp:defun make-detected-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message confidence value)
   (common-lisp:apply #'common-lisp:make-instance 'detected-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detected-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detected-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detected-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detected-file-format-descriptor common-lisp:nil
                       ((json-format-descriptor :initarg
                         :json-format-descriptor :type
                         (common-lisp:or detected-json-format-descriptor
                                         common-lisp:null)
                         :accessor
                         %detected-file-format-descriptor-json-format-descriptor
                         :initform common-lisp:nil)
                        (csv-format-descriptor :initarg :csv-format-descriptor
                         :type
                         (common-lisp:or detected-csv-format-descriptor
                                         common-lisp:null)
                         :accessor
                         %detected-file-format-descriptor-csv-format-descriptor
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detected-file-format-descriptor
                    'make-detected-file-format-descriptor))
 (common-lisp:defun make-detected-file-format-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key json-format-descriptor
                     csv-format-descriptor)
   (common-lisp:apply #'common-lisp:make-instance
                      'detected-file-format-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detected-file-format-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detected-file-format-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'csv-format-descriptor))
      (common-lisp:list
       (common-lisp:cons "CsvFormatDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'json-format-descriptor))
      (common-lisp:list
       (common-lisp:cons "JsonFormatDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detected-file-format-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detected-json-format-descriptor common-lisp:nil
                       ((charset :initarg :charset :type
                         (common-lisp:or detected-field common-lisp:null)
                         :accessor %detected-json-format-descriptor-charset
                         :initform common-lisp:nil)
                        (file-compression :initarg :file-compression :type
                         (common-lisp:or detected-field common-lisp:null)
                         :accessor
                         %detected-json-format-descriptor-file-compression
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detected-json-format-descriptor
                    'make-detected-json-format-descriptor))
 (common-lisp:defun make-detected-json-format-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key charset file-compression)
   (common-lisp:apply #'common-lisp:make-instance
                      'detected-json-format-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detected-json-format-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detected-json-format-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-compression))
      (common-lisp:list
       (common-lisp:cons "FileCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'charset))
      (common-lisp:list
       (common-lisp:cons "Charset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detected-json-format-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detected-metric-set-config common-lisp:nil
                       ((metric-source :initarg :metric-source :type
                         (common-lisp:or detected-metric-source
                                         common-lisp:null)
                         :accessor %detected-metric-set-config-metric-source
                         :initform common-lisp:nil)
                        (metric-set-frequency :initarg :metric-set-frequency
                         :type (common-lisp:or detected-field common-lisp:null)
                         :accessor
                         %detected-metric-set-config-metric-set-frequency
                         :initform common-lisp:nil)
                        (offset :initarg :offset :type
                         (common-lisp:or detected-field common-lisp:null)
                         :accessor %detected-metric-set-config-offset :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detected-metric-set-config
                    'make-detected-metric-set-config))
 (common-lisp:defun make-detected-metric-set-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-source metric-set-frequency
                     offset)
   (common-lisp:apply #'common-lisp:make-instance 'detected-metric-set-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detected-metric-set-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detected-metric-set-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "Offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-frequency))
      (common-lisp:list
       (common-lisp:cons "MetricSetFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-source))
      (common-lisp:list
       (common-lisp:cons "MetricSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detected-metric-set-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detected-metric-source common-lisp:nil
                       ((s3source-config :initarg :s3source-config :type
                         (common-lisp:or detected-s3source-config
                                         common-lisp:null)
                         :accessor %detected-metric-source-s3source-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detected-metric-source 'make-detected-metric-source))
 (common-lisp:defun make-detected-metric-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3source-config)
   (common-lisp:apply #'common-lisp:make-instance 'detected-metric-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detected-metric-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detected-metric-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3source-config))
      (common-lisp:list
       (common-lisp:cons "S3SourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detected-metric-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detected-s3source-config common-lisp:nil
                       ((file-format-descriptor :initarg
                         :file-format-descriptor :type
                         (common-lisp:or detected-file-format-descriptor
                                         common-lisp:null)
                         :accessor
                         %detected-s3source-config-file-format-descriptor
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detected-s3source-config 'make-detected-s3source-config))
 (common-lisp:defun make-detected-s3source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-format-descriptor)
   (common-lisp:apply #'common-lisp:make-instance 'detected-s3source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detected-s3source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detected-s3source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-format-descriptor))
      (common-lisp:list
       (common-lisp:cons "FileFormatDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detected-s3source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dimension-contribution common-lisp:nil
                       ((dimension-value-contribution-list :initarg
                         :dimension-value-contribution-list :type
                         (common-lisp:or dimension-value-contribution-list
                                         common-lisp:null)
                         :accessor
                         %dimension-contribution-dimension-value-contribution-list
                         :initform common-lisp:nil)
                        (dimension-name :initarg :dimension-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %dimension-contribution-dimension-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dimension-contribution 'make-dimension-contribution))
 (common-lisp:defun make-dimension-contribution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimension-value-contribution-list
                     dimension-name)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-contribution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dimension-contribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dimension-contribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-name))
      (common-lisp:list
       (common-lisp:cons "DimensionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-value-contribution-list))
      (common-lisp:list
       (common-lisp:cons "DimensionValueContributionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dimension-contribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-contribution-list ()
   '(trivial-types:proper-list dimension-contribution))
 (common-lisp:defun |make-dimension-contribution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-contribution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dimension-filter common-lisp:nil
                       ((dimension-value-list :initarg :dimension-value-list
                         :type
                         (common-lisp:or dimension-value-list common-lisp:null)
                         :accessor %dimension-filter-dimension-value-list
                         :initform common-lisp:nil)
                        (dimension-name :initarg :dimension-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %dimension-filter-dimension-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dimension-filter 'make-dimension-filter))
 (common-lisp:defun make-dimension-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimension-value-list dimension-name)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-name))
      (common-lisp:list
       (common-lisp:cons "DimensionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-value-list))
      (common-lisp:list
       (common-lisp:cons "DimensionValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-filter-list ()
   '(trivial-types:proper-list dimension-filter))
 (common-lisp:defun |make-dimension-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dimension-list ()
   '(trivial-types:proper-list column-name))
 (common-lisp:defun |make-dimension-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dimension-name-value common-lisp:nil
                       ((dimension-value :initarg :dimension-value :type
                         (common-lisp:or dimension-value common-lisp:null)
                         :accessor %dimension-name-value-dimension-value
                         :initform
                         (common-lisp:error ":dimension-value is required"))
                        (dimension-name :initarg :dimension-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %dimension-name-value-dimension-name
                         :initform
                         (common-lisp:error ":dimension-name is required"))))
 (common-lisp:export
  (common-lisp:list 'dimension-name-value 'make-dimension-name-value))
 (common-lisp:defun make-dimension-name-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimension-value dimension-name)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-name-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-name-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-name-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-name))
      (common-lisp:list
       (common-lisp:cons "DimensionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-value))
      (common-lisp:list
       (common-lisp:cons "DimensionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-name-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-name-value-list ()
   '(trivial-types:proper-list dimension-name-value))
 (common-lisp:defun |make-dimension-name-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-name-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dimension-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dimension-value-contribution common-lisp:nil
                       ((contribution-score :initarg :contribution-score :type
                         (common-lisp:or score common-lisp:null) :accessor
                         %dimension-value-contribution-contribution-score
                         :initform common-lisp:nil)
                        (dimension-value :initarg :dimension-value :type
                         (common-lisp:or dimension-value common-lisp:null)
                         :accessor
                         %dimension-value-contribution-dimension-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dimension-value-contribution
                    'make-dimension-value-contribution))
 (common-lisp:defun make-dimension-value-contribution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contribution-score dimension-value)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-value-contribution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dimension-value-contribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dimension-value-contribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-value))
      (common-lisp:list
       (common-lisp:cons "DimensionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contribution-score))
      (common-lisp:list
       (common-lisp:cons "ContributionScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dimension-value-contribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-value-contribution-list ()
   '(trivial-types:proper-list dimension-value-contribution))
 (common-lisp:defun |make-dimension-value-contribution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dimension-value-contribution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dimension-value-list ()
   '(trivial-types:proper-list dimension-value))
 (common-lisp:defun |make-dimension-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype execution-list ()
   '(trivial-types:proper-list execution-status))
 (common-lisp:defun |make-execution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass execution-status common-lisp:nil
                       ((failure-reason :initarg :failure-reason :type
                         (common-lisp:or anomaly-detection-task-status-message
                                         common-lisp:null)
                         :accessor %execution-status-failure-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or anomaly-detection-task-status
                                         common-lisp:null)
                         :accessor %execution-status-status :initform
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or timestamp-string common-lisp:null)
                         :accessor %execution-status-timestamp :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execution-status 'make-execution-status))
 (common-lisp:defun make-execution-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-reason status timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'execution-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-status))
   common-lisp:nil))
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-format-descriptor common-lisp:nil
                       ((json-format-descriptor :initarg
                         :json-format-descriptor :type
                         (common-lisp:or json-format-descriptor
                                         common-lisp:null)
                         :accessor
                         %file-format-descriptor-json-format-descriptor
                         :initform common-lisp:nil)
                        (csv-format-descriptor :initarg :csv-format-descriptor
                         :type
                         (common-lisp:or csv-format-descriptor
                                         common-lisp:null)
                         :accessor
                         %file-format-descriptor-csv-format-descriptor
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-format-descriptor 'make-file-format-descriptor))
 (common-lisp:defun make-file-format-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key json-format-descriptor
                     csv-format-descriptor)
   (common-lisp:apply #'common-lisp:make-instance 'file-format-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-format-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-format-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'csv-format-descriptor))
      (common-lisp:list
       (common-lisp:cons "CsvFormatDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'json-format-descriptor))
      (common-lisp:list
       (common-lisp:cons "JsonFormatDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-format-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((filter-operation :initarg :filter-operation :type
                         (common-lisp:or filter-operation common-lisp:null)
                         :accessor %filter-filter-operation :initform
                         common-lisp:nil)
                        (dimension-value :initarg :dimension-value :type
                         (common-lisp:or dimension-value common-lisp:null)
                         :accessor %filter-dimension-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter-operation dimension-value)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-value))
      (common-lisp:list
       (common-lisp:cons "DimensionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-operation))
      (common-lisp:list
       (common-lisp:cons "FilterOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-operation () 'common-lisp:string)
(common-lisp:deftype flow-name () 'common-lisp:string)
(common-lisp:deftype frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-anomaly-group-request common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %get-anomaly-group-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))
                        (anomaly-group-id :initarg :anomaly-group-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-anomaly-group-request-anomaly-group-id :initform
                         (common-lisp:error ":anomaly-group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-group-request
                    'make-get-anomaly-group-request))
 (common-lisp:defun make-get-anomaly-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-arn anomaly-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-anomaly-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-anomaly-group-response common-lisp:nil
                       ((anomaly-group :initarg :anomaly-group :type
                         (common-lisp:or anomaly-group common-lisp:null)
                         :accessor %get-anomaly-group-response-anomaly-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-group-response
                    'make-get-anomaly-group-response))
 (common-lisp:defun make-get-anomaly-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-group)
   (common-lisp:apply #'common-lisp:make-instance 'get-anomaly-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-metrics-request common-lisp:nil
                       ((metric-set-arn :initarg :metric-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-data-quality-metrics-request-metric-set-arn
                         :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %get-data-quality-metrics-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-metrics-request
                    'make-get-data-quality-metrics-request))
 (common-lisp:defun make-get-data-quality-metrics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-set-arn anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-arn))
      (common-lisp:list
       (common-lisp:cons "MetricSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-metrics-response common-lisp:nil
                       ((anomaly-detector-data-quality-metric-list :initarg
                         :anomaly-detector-data-quality-metric-list :type
                         (common-lisp:or
                          anomaly-detector-data-quality-metric-list
                          common-lisp:null)
                         :accessor
                         %get-data-quality-metrics-response-anomaly-detector-data-quality-metric-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-metrics-response
                    'make-get-data-quality-metrics-response))
 (common-lisp:defun make-get-data-quality-metrics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     anomaly-detector-data-quality-metric-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-data-quality-metric-list))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorDataQualityMetricList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-feedback-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-feedback-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-feedback-request-max-results :initform
                         common-lisp:nil)
                        (anomaly-group-time-series-feedback :initarg
                         :anomaly-group-time-series-feedback :type
                         (common-lisp:or anomaly-group-time-series
                                         common-lisp:null)
                         :accessor
                         %get-feedback-request-anomaly-group-time-series-feedback
                         :initform
                         (common-lisp:error
                          ":anomaly-group-time-series-feedback is required"))
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %get-feedback-request-anomaly-detector-arn :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-feedback-request 'make-get-feedback-request))
 (common-lisp:defun make-get-feedback-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     anomaly-group-time-series-feedback anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-group-time-series-feedback))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupTimeSeriesFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-feedback-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-feedback-response-next-token :initform
                         common-lisp:nil)
                        (anomaly-group-time-series-feedback :initarg
                         :anomaly-group-time-series-feedback :type
                         (common-lisp:or time-series-feedback-list
                                         common-lisp:null)
                         :accessor
                         %get-feedback-response-anomaly-group-time-series-feedback
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-feedback-response 'make-get-feedback-response))
 (common-lisp:defun make-get-feedback-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     anomaly-group-time-series-feedback)
   (common-lisp:apply #'common-lisp:make-instance 'get-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-feedback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-group-time-series-feedback))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupTimeSeriesFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sample-data-request common-lisp:nil
                       ((s3source-config :initarg :s3source-config :type
                         (common-lisp:or sample-data-s3source-config
                                         common-lisp:null)
                         :accessor %get-sample-data-request-s3source-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-sample-data-request 'make-get-sample-data-request))
 (common-lisp:defun make-get-sample-data-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3source-config)
   (common-lisp:apply #'common-lisp:make-instance 'get-sample-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sample-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sample-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3source-config))
      (common-lisp:list
       (common-lisp:cons "S3SourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sample-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sample-data-response common-lisp:nil
                       ((sample-rows :initarg :sample-rows :type
                         (common-lisp:or sample-rows common-lisp:null)
                         :accessor %get-sample-data-response-sample-rows
                         :initform common-lisp:nil)
                        (header-values :initarg :header-values :type
                         (common-lisp:or header-value-list common-lisp:null)
                         :accessor %get-sample-data-response-header-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-sample-data-response 'make-get-sample-data-response))
 (common-lisp:defun make-get-sample-data-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-rows header-values)
   (common-lisp:apply #'common-lisp:make-instance 'get-sample-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sample-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sample-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-values))
      (common-lisp:list
       (common-lisp:cons "HeaderValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rows))
      (common-lisp:list
       (common-lisp:cons "SampleRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sample-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype header-list () '(trivial-types:proper-list column-name))
 (common-lisp:defun |make-header-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype header-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype header-value-list ()
   '(trivial-types:proper-list header-value))
 (common-lisp:defun |make-header-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list header-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype historical-data-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype historical-data-path-list ()
   '(trivial-types:proper-list historical-data-path))
 (common-lisp:defun |make-historical-data-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list historical-data-path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass inter-metric-impact-details common-lisp:nil
                       ((contribution-percentage :initarg
                         :contribution-percentage :type
                         (common-lisp:or metric-change-percentage
                                         common-lisp:null)
                         :accessor
                         %inter-metric-impact-details-contribution-percentage
                         :initform common-lisp:nil)
                        (relationship-type :initarg :relationship-type :type
                         (common-lisp:or relationship-type common-lisp:null)
                         :accessor
                         %inter-metric-impact-details-relationship-type
                         :initform common-lisp:nil)
                        (anomaly-group-id :initarg :anomaly-group-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %inter-metric-impact-details-anomaly-group-id
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor %inter-metric-impact-details-metric-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inter-metric-impact-details
                    'make-inter-metric-impact-details))
 (common-lisp:defun make-inter-metric-impact-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contribution-percentage relationship-type
                     anomaly-group-id metric-name)
   (common-lisp:apply #'common-lisp:make-instance 'inter-metric-impact-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inter-metric-impact-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inter-metric-impact-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-type))
      (common-lisp:list
       (common-lisp:cons "RelationshipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contribution-percentage))
      (common-lisp:list
       (common-lisp:cons "ContributionPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inter-metric-impact-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inter-metric-impact-list ()
   '(trivial-types:proper-list inter-metric-impact-details))
 (common-lisp:defun |make-inter-metric-impact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inter-metric-impact-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (lookoutmetrics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass itemized-metric-stats common-lisp:nil
                       ((occurrence-count :initarg :occurrence-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %itemized-metric-stats-occurrence-count :initform
                         common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %itemized-metric-stats-metric-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'itemized-metric-stats 'make-itemized-metric-stats))
 (common-lisp:defun make-itemized-metric-stats
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key occurrence-count metric-name)
   (common-lisp:apply #'common-lisp:make-instance 'itemized-metric-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          itemized-metric-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          itemized-metric-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrence-count))
      (common-lisp:list
       (common-lisp:cons "OccurrenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          itemized-metric-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype itemized-metric-stats-list ()
   '(trivial-types:proper-list itemized-metric-stats))
 (common-lisp:defun |make-itemized-metric-stats-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list itemized-metric-stats))
   aws-sdk/generator/shape::members))
(common-lisp:deftype json-file-compression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass json-format-descriptor common-lisp:nil
                       ((charset :initarg :charset :type
                         (common-lisp:or charset common-lisp:null) :accessor
                         %json-format-descriptor-charset :initform
                         common-lisp:nil)
                        (file-compression :initarg :file-compression :type
                         (common-lisp:or json-file-compression
                                         common-lisp:null)
                         :accessor %json-format-descriptor-file-compression
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'json-format-descriptor 'make-json-format-descriptor))
 (common-lisp:defun make-json-format-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key charset file-compression)
   (common-lisp:apply #'common-lisp:make-instance 'json-format-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          json-format-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          json-format-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-compression))
      (common-lisp:list
       (common-lisp:cons "FileCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'charset))
      (common-lisp:list
       (common-lisp:cons "Charset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          json-format-descriptor))
   common-lisp:nil))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-configuration common-lisp:nil
                       ((lambda-arn :initarg :lambda-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %lambda-configuration-lambda-arn :initform
                         (common-lisp:error ":lambda-arn is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %lambda-configuration-role-arn :initform
                         (common-lisp:error ":role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'lambda-configuration 'make-lambda-configuration))
 (common-lisp:defun make-lambda-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-arn role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-alerts-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-alerts-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-alerts-request-next-token :initform
                         common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %list-alerts-request-anomaly-detector-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-alerts-request 'make-list-alerts-request))
 (common-lisp:defun make-list-alerts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-alerts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-alerts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-alerts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-alerts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-alerts-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-alerts-response-next-token :initform
                         common-lisp:nil)
                        (alert-summary-list :initarg :alert-summary-list :type
                         (common-lisp:or alert-summary-list common-lisp:null)
                         :accessor %list-alerts-response-alert-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-alerts-response 'make-list-alerts-response))
 (common-lisp:defun make-list-alerts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token alert-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-alerts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-alerts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-alerts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-summary-list))
      (common-lisp:list
       (common-lisp:cons "AlertSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-alerts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-anomaly-detectors-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-anomaly-detectors-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-anomaly-detectors-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-anomaly-detectors-request
                    'make-list-anomaly-detectors-request))
 (common-lisp:defun make-list-anomaly-detectors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-anomaly-detectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-detectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-detectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-detectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-anomaly-detectors-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-anomaly-detectors-response-next-token :initform
                         common-lisp:nil)
                        (anomaly-detector-summary-list :initarg
                         :anomaly-detector-summary-list :type
                         (common-lisp:or anomaly-detector-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-anomaly-detectors-response-anomaly-detector-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-anomaly-detectors-response
                    'make-list-anomaly-detectors-response))
 (common-lisp:defun make-list-anomaly-detectors-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token anomaly-detector-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-anomaly-detectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-detectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-detectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-summary-list))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-detectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-anomaly-group-related-metrics-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-anomaly-group-related-metrics-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-anomaly-group-related-metrics-request-max-results
                         :initform common-lisp:nil)
                        (relationship-type-filter :initarg
                         :relationship-type-filter :type
                         (common-lisp:or relationship-type common-lisp:null)
                         :accessor
                         %list-anomaly-group-related-metrics-request-relationship-type-filter
                         :initform common-lisp:nil)
                        (anomaly-group-id :initarg :anomaly-group-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %list-anomaly-group-related-metrics-request-anomaly-group-id
                         :initform
                         (common-lisp:error ":anomaly-group-id is required"))
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %list-anomaly-group-related-metrics-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-anomaly-group-related-metrics-request
                    'make-list-anomaly-group-related-metrics-request))
 (common-lisp:defun make-list-anomaly-group-related-metrics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     relationship-type-filter anomaly-group-id
                     anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-anomaly-group-related-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-related-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-related-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relationship-type-filter))
      (common-lisp:list
       (common-lisp:cons "RelationshipTypeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-related-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-anomaly-group-related-metrics-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-anomaly-group-related-metrics-response-next-token
                         :initform common-lisp:nil)
                        (inter-metric-impact-list :initarg
                         :inter-metric-impact-list :type
                         (common-lisp:or inter-metric-impact-list
                                         common-lisp:null)
                         :accessor
                         %list-anomaly-group-related-metrics-response-inter-metric-impact-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-anomaly-group-related-metrics-response
                    'make-list-anomaly-group-related-metrics-response))
 (common-lisp:defun make-list-anomaly-group-related-metrics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token inter-metric-impact-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-anomaly-group-related-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-related-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-related-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inter-metric-impact-list))
      (common-lisp:list
       (common-lisp:cons "InterMetricImpactList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-related-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-anomaly-group-summaries-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-anomaly-group-summaries-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-anomaly-group-summaries-request-max-results
                         :initform common-lisp:nil)
                        (sensitivity-threshold :initarg :sensitivity-threshold
                         :type
                         (common-lisp:or sensitivity-threshold
                                         common-lisp:null)
                         :accessor
                         %list-anomaly-group-summaries-request-sensitivity-threshold
                         :initform
                         (common-lisp:error
                          ":sensitivity-threshold is required"))
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %list-anomaly-group-summaries-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-anomaly-group-summaries-request
                    'make-list-anomaly-group-summaries-request))
 (common-lisp:defun make-list-anomaly-group-summaries-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     sensitivity-threshold anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-anomaly-group-summaries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-summaries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensitivity-threshold))
      (common-lisp:list
       (common-lisp:cons "SensitivityThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-summaries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-anomaly-group-summaries-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-anomaly-group-summaries-response-next-token
                         :initform common-lisp:nil)
                        (anomaly-group-statistics :initarg
                         :anomaly-group-statistics :type
                         (common-lisp:or anomaly-group-statistics
                                         common-lisp:null)
                         :accessor
                         %list-anomaly-group-summaries-response-anomaly-group-statistics
                         :initform common-lisp:nil)
                        (anomaly-group-summary-list :initarg
                         :anomaly-group-summary-list :type
                         (common-lisp:or anomaly-group-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-anomaly-group-summaries-response-anomaly-group-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-anomaly-group-summaries-response
                    'make-list-anomaly-group-summaries-response))
 (common-lisp:defun make-list-anomaly-group-summaries-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token anomaly-group-statistics
                     anomaly-group-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-anomaly-group-summaries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-summaries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-summaries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-group-summary-list))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-group-statistics))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-summaries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-anomaly-group-time-series-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-anomaly-group-time-series-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-anomaly-group-time-series-request-max-results
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         %list-anomaly-group-time-series-request-metric-name
                         :initform
                         (common-lisp:error ":metric-name is required"))
                        (anomaly-group-id :initarg :anomaly-group-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %list-anomaly-group-time-series-request-anomaly-group-id
                         :initform
                         (common-lisp:error ":anomaly-group-id is required"))
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %list-anomaly-group-time-series-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-anomaly-group-time-series-request
                    'make-list-anomaly-group-time-series-request))
 (common-lisp:defun make-list-anomaly-group-time-series-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results metric-name
                     anomaly-group-id anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-anomaly-group-time-series-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-time-series-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-time-series-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-anomaly-group-time-series-response common-lisp:nil
                       ((time-series-list :initarg :time-series-list :type
                         (common-lisp:or time-series-list common-lisp:null)
                         :accessor
                         %list-anomaly-group-time-series-response-time-series-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-anomaly-group-time-series-response-next-token
                         :initform common-lisp:nil)
                        (timestamp-list :initarg :timestamp-list :type
                         (common-lisp:or timestamp-list common-lisp:null)
                         :accessor
                         %list-anomaly-group-time-series-response-timestamp-list
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         %list-anomaly-group-time-series-response-metric-name
                         :initform common-lisp:nil)
                        (anomaly-group-id :initarg :anomaly-group-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %list-anomaly-group-time-series-response-anomaly-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-anomaly-group-time-series-response
                    'make-list-anomaly-group-time-series-response))
 (common-lisp:defun make-list-anomaly-group-time-series-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-series-list next-token
                     timestamp-list metric-name anomaly-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-anomaly-group-time-series-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-time-series-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-time-series-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-group-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-list))
      (common-lisp:list
       (common-lisp:cons "TimestampList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-list))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomaly-group-time-series-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-metric-sets-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-metric-sets-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-metric-sets-request-max-results
                         :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %list-metric-sets-request-anomaly-detector-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-metric-sets-request 'make-list-metric-sets-request))
 (common-lisp:defun make-list-metric-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-metric-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-metric-sets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-metric-sets-response-next-token :initform
                         common-lisp:nil)
                        (metric-set-summary-list :initarg
                         :metric-set-summary-list :type
                         (common-lisp:or metric-set-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-metric-sets-response-metric-set-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-metric-sets-response
                    'make-list-metric-sets-response))
 (common-lisp:defun make-list-metric-sets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token metric-set-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-metric-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-summary-list))
      (common-lisp:list
       (common-lisp:cons "MetricSetSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %metric-namespace :initform common-lisp:nil)
                        (aggregation-function :initarg :aggregation-function
                         :type
                         (common-lisp:or aggregation-function common-lisp:null)
                         :accessor %metric-aggregation-function :initform
                         (common-lisp:error
                          ":aggregation-function is required"))
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %metric-metric-name :initform
                         (common-lisp:error ":metric-name is required"))))
 (common-lisp:export (common-lisp:list 'metric 'make-metric))
 (common-lisp:defun make-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aggregation-function
                     metric-name)
   (common-lisp:apply #'common-lisp:make-instance 'metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric))
   common-lisp:nil))
(common-lisp:deftype metric-change-percentage () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass metric-level-impact common-lisp:nil
                       ((contribution-matrix :initarg :contribution-matrix
                         :type
                         (common-lisp:or contribution-matrix common-lisp:null)
                         :accessor %metric-level-impact-contribution-matrix
                         :initform common-lisp:nil)
                        (num-time-series :initarg :num-time-series :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %metric-level-impact-num-time-series :initform
                         common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor %metric-level-impact-metric-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-level-impact 'make-metric-level-impact))
 (common-lisp:defun make-metric-level-impact
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contribution-matrix num-time-series
                     metric-name)
   (common-lisp:apply #'common-lisp:make-instance 'metric-level-impact
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-level-impact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-level-impact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-time-series))
      (common-lisp:list
       (common-lisp:cons "NumTimeSeries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contribution-matrix))
      (common-lisp:list
       (common-lisp:cons "ContributionMatrix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-level-impact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-level-impact-list ()
   '(trivial-types:proper-list metric-level-impact))
 (common-lisp:defun |make-metric-level-impact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-level-impact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-list () '(trivial-types:proper-list metric))
 (common-lisp:defun |make-metric-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-name-list ()
   '(trivial-types:proper-list metric-name))
 (common-lisp:defun |make-metric-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-set-data-quality-metric common-lisp:nil
                       ((data-quality-metric-list :initarg
                         :data-quality-metric-list :type
                         (common-lisp:or data-quality-metric-list
                                         common-lisp:null)
                         :accessor
                         %metric-set-data-quality-metric-data-quality-metric-list
                         :initform common-lisp:nil)
                        (metric-set-arn :initarg :metric-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %metric-set-data-quality-metric-metric-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-set-data-quality-metric
                    'make-metric-set-data-quality-metric))
 (common-lisp:defun make-metric-set-data-quality-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-quality-metric-list metric-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'metric-set-data-quality-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-set-data-quality-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-set-data-quality-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-arn))
      (common-lisp:list
       (common-lisp:cons "MetricSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-metric-list))
      (common-lisp:list
       (common-lisp:cons "DataQualityMetricList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-set-data-quality-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-set-data-quality-metric-list ()
   '(trivial-types:proper-list metric-set-data-quality-metric))
 (common-lisp:defun |make-metric-set-data-quality-metric-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            metric-set-data-quality-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-set-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-set-dimension-filter common-lisp:nil
                       ((filter-list :initarg :filter-list :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %metric-set-dimension-filter-filter-list
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %metric-set-dimension-filter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-set-dimension-filter
                    'make-metric-set-dimension-filter))
 (common-lisp:defun make-metric-set-dimension-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter-list name)
   (common-lisp:apply #'common-lisp:make-instance 'metric-set-dimension-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-set-dimension-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-set-dimension-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-list))
      (common-lisp:list
       (common-lisp:cons "FilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-set-dimension-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-set-dimension-filter-list ()
   '(trivial-types:proper-list metric-set-dimension-filter))
 (common-lisp:defun |make-metric-set-dimension-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            metric-set-dimension-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-set-summary common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %metric-set-summary-tags :initform common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %metric-set-summary-last-modification-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %metric-set-summary-creation-time :initform
                         common-lisp:nil)
                        (metric-set-name :initarg :metric-set-name :type
                         (common-lisp:or metric-set-name common-lisp:null)
                         :accessor %metric-set-summary-metric-set-name
                         :initform common-lisp:nil)
                        (metric-set-description :initarg
                         :metric-set-description :type
                         (common-lisp:or metric-set-description
                                         common-lisp:null)
                         :accessor %metric-set-summary-metric-set-description
                         :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %metric-set-summary-anomaly-detector-arn :initform
                         common-lisp:nil)
                        (metric-set-arn :initarg :metric-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %metric-set-summary-metric-set-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-set-summary 'make-metric-set-summary))
 (common-lisp:defun make-metric-set-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags last-modification-time creation-time
                     metric-set-name metric-set-description
                     anomaly-detector-arn metric-set-arn)
   (common-lisp:apply #'common-lisp:make-instance 'metric-set-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-arn))
      (common-lisp:list
       (common-lisp:cons "MetricSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-description))
      (common-lisp:list
       (common-lisp:cons "MetricSetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-name))
      (common-lisp:list
       (common-lisp:cons "MetricSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-set-summary-list ()
   '(trivial-types:proper-list metric-set-summary))
 (common-lisp:defun |make-metric-set-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-source common-lisp:nil
                       ((athena-source-config :initarg :athena-source-config
                         :type
                         (common-lisp:or athena-source-config common-lisp:null)
                         :accessor %metric-source-athena-source-config
                         :initform common-lisp:nil)
                        (redshift-source-config :initarg
                         :redshift-source-config :type
                         (common-lisp:or redshift-source-config
                                         common-lisp:null)
                         :accessor %metric-source-redshift-source-config
                         :initform common-lisp:nil)
                        (rdssource-config :initarg :rdssource-config :type
                         (common-lisp:or rdssource-config common-lisp:null)
                         :accessor %metric-source-rdssource-config :initform
                         common-lisp:nil)
                        (cloud-watch-config :initarg :cloud-watch-config :type
                         (common-lisp:or cloud-watch-config common-lisp:null)
                         :accessor %metric-source-cloud-watch-config :initform
                         common-lisp:nil)
                        (app-flow-config :initarg :app-flow-config :type
                         (common-lisp:or app-flow-config common-lisp:null)
                         :accessor %metric-source-app-flow-config :initform
                         common-lisp:nil)
                        (s3source-config :initarg :s3source-config :type
                         (common-lisp:or s3source-config common-lisp:null)
                         :accessor %metric-source-s3source-config :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'metric-source 'make-metric-source))
 (common-lisp:defun make-metric-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key athena-source-config
                     redshift-source-config rdssource-config cloud-watch-config
                     app-flow-config s3source-config)
   (common-lisp:apply #'common-lisp:make-instance 'metric-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3source-config))
      (common-lisp:list
       (common-lisp:cons "S3SourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-flow-config))
      (common-lisp:list
       (common-lisp:cons "AppFlowConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-config))
      (common-lisp:list
       (common-lisp:cons "CloudWatchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rdssource-config))
      (common-lisp:list
       (common-lisp:cons "RDSSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-source-config))
      (common-lisp:list
       (common-lisp:cons "RedshiftSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'athena-source-config))
      (common-lisp:list
       (common-lisp:cons "AthenaSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-source))
   common-lisp:nil))
(common-lisp:deftype metric-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype metric-value-list ()
   '(trivial-types:proper-list metric-value))
 (common-lisp:defun |make-metric-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype namespace () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype number-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype number-list-attribute-value ()
   '(trivial-types:proper-list number-attribute-value))
 (common-lisp:defun |make-number-list-attribute-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offset () 'common-lisp:integer)
(common-lisp:deftype poirot-secret-manager-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-feedback-request common-lisp:nil
                       ((anomaly-group-time-series-feedback :initarg
                         :anomaly-group-time-series-feedback :type
                         (common-lisp:or anomaly-group-time-series-feedback
                                         common-lisp:null)
                         :accessor
                         %put-feedback-request-anomaly-group-time-series-feedback
                         :initform
                         (common-lisp:error
                          ":anomaly-group-time-series-feedback is required"))
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %put-feedback-request-anomaly-detector-arn :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-feedback-request 'make-put-feedback-request))
 (common-lisp:defun make-put-feedback-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-group-time-series-feedback
                     anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-group-time-series-feedback))
      (common-lisp:list
       (common-lisp:cons "AnomalyGroupTimeSeriesFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-feedback-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-feedback-response 'make-put-feedback-response))
 (common-lisp:defun make-put-feedback-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-feedback-response))
   common-lisp:nil))
(common-lisp:deftype quota-code () 'common-lisp:string)
(common-lisp:deftype quote-symbol () 'common-lisp:string)
(common-lisp:deftype rdsdatabase-identifier () 'common-lisp:string)
(common-lisp:deftype rdsdatabase-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rdssource-config common-lisp:nil
                       ((vpc-configuration :initarg :vpc-configuration :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor %rdssource-config-vpc-configuration
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %rdssource-config-role-arn :initform common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         %rdssource-config-table-name :initform
                         common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or rdsdatabase-name common-lisp:null)
                         :accessor %rdssource-config-database-name :initform
                         common-lisp:nil)
                        (secret-manager-arn :initarg :secret-manager-arn :type
                         (common-lisp:or poirot-secret-manager-arn
                                         common-lisp:null)
                         :accessor %rdssource-config-secret-manager-arn
                         :initform common-lisp:nil)
                        (database-port :initarg :database-port :type
                         (common-lisp:or database-port common-lisp:null)
                         :accessor %rdssource-config-database-port :initform
                         common-lisp:nil)
                        (database-host :initarg :database-host :type
                         (common-lisp:or database-host common-lisp:null)
                         :accessor %rdssource-config-database-host :initform
                         common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :type
                         (common-lisp:or rdsdatabase-identifier
                                         common-lisp:null)
                         :accessor %rdssource-config-dbinstance-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rdssource-config 'make-rdssource-config))
 (common-lisp:defun make-rdssource-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-configuration role-arn table-name
                     database-name secret-manager-arn database-port
                     database-host dbinstance-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'rdssource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdssource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdssource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-host))
      (common-lisp:list
       (common-lisp:cons "DatabaseHost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-port))
      (common-lisp:list
       (common-lisp:cons "DatabasePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-manager-arn))
      (common-lisp:list
       (common-lisp:cons "SecretManagerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdssource-config))
   common-lisp:nil))
(common-lisp:deftype redshift-cluster-identifier () 'common-lisp:string)
(common-lisp:deftype redshift-database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-source-config common-lisp:nil
                       ((vpc-configuration :initarg :vpc-configuration :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor %redshift-source-config-vpc-configuration
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %redshift-source-config-role-arn :initform
                         common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         %redshift-source-config-table-name :initform
                         common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or redshift-database-name
                                         common-lisp:null)
                         :accessor %redshift-source-config-database-name
                         :initform common-lisp:nil)
                        (secret-manager-arn :initarg :secret-manager-arn :type
                         (common-lisp:or poirot-secret-manager-arn
                                         common-lisp:null)
                         :accessor %redshift-source-config-secret-manager-arn
                         :initform common-lisp:nil)
                        (database-port :initarg :database-port :type
                         (common-lisp:or database-port common-lisp:null)
                         :accessor %redshift-source-config-database-port
                         :initform common-lisp:nil)
                        (database-host :initarg :database-host :type
                         (common-lisp:or database-host common-lisp:null)
                         :accessor %redshift-source-config-database-host
                         :initform common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier :type
                         (common-lisp:or redshift-cluster-identifier
                                         common-lisp:null)
                         :accessor %redshift-source-config-cluster-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'redshift-source-config 'make-redshift-source-config))
 (common-lisp:defun make-redshift-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-configuration role-arn table-name
                     database-name secret-manager-arn database-port
                     database-host cluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-host))
      (common-lisp:list
       (common-lisp:cons "DatabaseHost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-port))
      (common-lisp:list
       (common-lisp:cons "DatabasePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-manager-arn))
      (common-lisp:list
       (common-lisp:cons "SecretManagerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-source-config))
   common-lisp:nil))
(common-lisp:deftype related-column-name () 'common-lisp:string)
(common-lisp:deftype relationship-type () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (lookoutmetrics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3source-config common-lisp:nil
                       ((file-format-descriptor :initarg
                         :file-format-descriptor :type
                         (common-lisp:or file-format-descriptor
                                         common-lisp:null)
                         :accessor %s3source-config-file-format-descriptor
                         :initform common-lisp:nil)
                        (historical-data-path-list :initarg
                         :historical-data-path-list :type
                         (common-lisp:or historical-data-path-list
                                         common-lisp:null)
                         :accessor %s3source-config-historical-data-path-list
                         :initform common-lisp:nil)
                        (templated-path-list :initarg :templated-path-list
                         :type
                         (common-lisp:or templated-path-list common-lisp:null)
                         :accessor %s3source-config-templated-path-list
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %s3source-config-role-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3source-config 'make-s3source-config))
 (common-lisp:defun make-s3source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-format-descriptor
                     historical-data-path-list templated-path-list role-arn)
   (common-lisp:apply #'common-lisp:make-instance 's3source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templated-path-list))
      (common-lisp:list
       (common-lisp:cons "TemplatedPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'historical-data-path-list))
      (common-lisp:list
       (common-lisp:cons "HistoricalDataPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-format-descriptor))
      (common-lisp:list
       (common-lisp:cons "FileFormatDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snsconfiguration common-lisp:nil
                       ((sns-format :initarg :sns-format :type
                         (common-lisp:or sns-format common-lisp:null) :accessor
                         %snsconfiguration-sns-format :initform
                         common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %snsconfiguration-sns-topic-arn :initform
                         (common-lisp:error ":sns-topic-arn is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %snsconfiguration-role-arn :initform
                         (common-lisp:error ":role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'snsconfiguration 'make-snsconfiguration))
 (common-lisp:defun make-snsconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sns-format sns-topic-arn role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'snsconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snsconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snsconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-format))
      (common-lisp:list
       (common-lisp:cons "SnsFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snsconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sample-data-s3source-config common-lisp:nil
                       ((file-format-descriptor :initarg
                         :file-format-descriptor :type
                         (common-lisp:or file-format-descriptor
                                         common-lisp:null)
                         :accessor
                         %sample-data-s3source-config-file-format-descriptor
                         :initform
                         (common-lisp:error
                          ":file-format-descriptor is required"))
                        (historical-data-path-list :initarg
                         :historical-data-path-list :type
                         (common-lisp:or historical-data-path-list
                                         common-lisp:null)
                         :accessor
                         %sample-data-s3source-config-historical-data-path-list
                         :initform common-lisp:nil)
                        (templated-path-list :initarg :templated-path-list
                         :type
                         (common-lisp:or templated-path-list common-lisp:null)
                         :accessor
                         %sample-data-s3source-config-templated-path-list
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %sample-data-s3source-config-role-arn :initform
                         (common-lisp:error ":role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'sample-data-s3source-config
                    'make-sample-data-s3source-config))
 (common-lisp:defun make-sample-data-s3source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-format-descriptor
                     historical-data-path-list templated-path-list role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'sample-data-s3source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sample-data-s3source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sample-data-s3source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templated-path-list))
      (common-lisp:list
       (common-lisp:cons "TemplatedPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'historical-data-path-list))
      (common-lisp:list
       (common-lisp:cons "HistoricalDataPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-format-descriptor))
      (common-lisp:list
       (common-lisp:cons "FileFormatDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sample-data-s3source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sample-row () '(trivial-types:proper-list data-item))
 (common-lisp:defun |make-sample-row|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sample-rows () '(trivial-types:proper-list sample-row))
 (common-lisp:defun |make-sample-rows|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sample-row))
   aws-sdk/generator/shape::members))
(common-lisp:deftype score () 'common-lisp:double-float)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitivity-threshold () 'common-lisp:integer)
(common-lisp:deftype service-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (lookoutmetrics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype sns-format () 'common-lisp:string)
(common-lisp:deftype string-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list-attribute-value ()
   '(trivial-types:proper-list string-attribute-value))
 (common-lisp:defun |make-string-list-attribute-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype templated-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype templated-path-list ()
   '(trivial-types:proper-list templated-path))
 (common-lisp:defun |make-templated-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list templated-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass time-series common-lisp:nil
                       ((metric-value-list :initarg :metric-value-list :type
                         (common-lisp:or metric-value-list common-lisp:null)
                         :accessor %time-series-metric-value-list :initform
                         (common-lisp:error ":metric-value-list is required"))
                        (dimension-list :initarg :dimension-list :type
                         (common-lisp:or dimension-name-value-list
                                         common-lisp:null)
                         :accessor %time-series-dimension-list :initform
                         (common-lisp:error ":dimension-list is required"))
                        (time-series-id :initarg :time-series-id :type
                         (common-lisp:or time-series-id common-lisp:null)
                         :accessor %time-series-time-series-id :initform
                         (common-lisp:error ":time-series-id is required"))))
 (common-lisp:export (common-lisp:list 'time-series 'make-time-series))
 (common-lisp:defun make-time-series
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-value-list dimension-list
                     time-series-id)
   (common-lisp:apply #'common-lisp:make-instance 'time-series
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-series))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-series))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-id))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-list))
      (common-lisp:list
       (common-lisp:cons "DimensionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value-list))
      (common-lisp:list
       (common-lisp:cons "MetricValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-series))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-series-feedback common-lisp:nil
                       ((is-anomaly :initarg :is-anomaly :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %time-series-feedback-is-anomaly :initform
                         common-lisp:nil)
                        (time-series-id :initarg :time-series-id :type
                         (common-lisp:or time-series-id common-lisp:null)
                         :accessor %time-series-feedback-time-series-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'time-series-feedback 'make-time-series-feedback))
 (common-lisp:defun make-time-series-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-anomaly time-series-id)
   (common-lisp:apply #'common-lisp:make-instance 'time-series-feedback
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-series-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-series-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-id))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-anomaly))
      (common-lisp:list
       (common-lisp:cons "IsAnomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-series-feedback))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype time-series-feedback-list ()
   '(trivial-types:proper-list time-series-feedback))
 (common-lisp:defun |make-time-series-feedback-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time-series-feedback))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time-series-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype time-series-list ()
   '(trivial-types:proper-list time-series))
 (common-lisp:defun |make-time-series-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time-series))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestamp-column common-lisp:nil
                       ((column-format :initarg :column-format :type
                         (common-lisp:or date-time-format common-lisp:null)
                         :accessor %timestamp-column-column-format :initform
                         common-lisp:nil)
                        (column-name :initarg :column-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %timestamp-column-column-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'timestamp-column 'make-timestamp-column))
 (common-lisp:defun make-timestamp-column
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-format column-name)
   (common-lisp:apply #'common-lisp:make-instance 'timestamp-column
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-format))
      (common-lisp:list
       (common-lisp:cons "ColumnFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype timestamp-list ()
   '(trivial-types:proper-list timestamp-string))
 (common-lisp:defun |make-timestamp-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestamp-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp-string () 'common-lisp:string)
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (lookoutmetrics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-alert-request common-lisp:nil
                       ((alert-filters :initarg :alert-filters :type
                         (common-lisp:or alert-filters common-lisp:null)
                         :accessor %update-alert-request-alert-filters
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %update-alert-request-action :initform
                         common-lisp:nil)
                        (alert-sensitivity-threshold :initarg
                         :alert-sensitivity-threshold :type
                         (common-lisp:or sensitivity-threshold
                                         common-lisp:null)
                         :accessor
                         %update-alert-request-alert-sensitivity-threshold
                         :initform common-lisp:nil)
                        (alert-description :initarg :alert-description :type
                         (common-lisp:or alert-description common-lisp:null)
                         :accessor %update-alert-request-alert-description
                         :initform common-lisp:nil)
                        (alert-arn :initarg :alert-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-alert-request-alert-arn :initform
                         (common-lisp:error ":alert-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-alert-request 'make-update-alert-request))
 (common-lisp:defun make-update-alert-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alert-filters action
                     alert-sensitivity-threshold alert-description alert-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-alert-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-alert-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-alert-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-arn))
      (common-lisp:list
       (common-lisp:cons "AlertArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-description))
      (common-lisp:list
       (common-lisp:cons "AlertDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alert-sensitivity-threshold))
      (common-lisp:list
       (common-lisp:cons "AlertSensitivityThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-filters))
      (common-lisp:list
       (common-lisp:cons "AlertFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-alert-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-alert-response common-lisp:nil
                       ((alert-arn :initarg :alert-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-alert-response-alert-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-alert-response 'make-update-alert-response))
 (common-lisp:defun make-update-alert-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alert-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-alert-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-alert-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-alert-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-arn))
      (common-lisp:list
       (common-lisp:cons "AlertArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-alert-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-anomaly-detector-request common-lisp:nil
                       ((anomaly-detector-config :initarg
                         :anomaly-detector-config :type
                         (common-lisp:or anomaly-detector-config
                                         common-lisp:null)
                         :accessor
                         %update-anomaly-detector-request-anomaly-detector-config
                         :initform common-lisp:nil)
                        (anomaly-detector-description :initarg
                         :anomaly-detector-description :type
                         (common-lisp:or anomaly-detector-description
                                         common-lisp:null)
                         :accessor
                         %update-anomaly-detector-request-anomaly-detector-description
                         :initform common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %update-anomaly-detector-request-kms-key-arn
                         :initform common-lisp:nil)
                        (anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %update-anomaly-detector-request-anomaly-detector-arn
                         :initform
                         (common-lisp:error
                          ":anomaly-detector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-detector-request
                    'make-update-anomaly-detector-request))
 (common-lisp:defun make-update-anomaly-detector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-config
                     anomaly-detector-description kms-key-arn
                     anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-anomaly-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-description))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-config))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-anomaly-detector-response common-lisp:nil
                       ((anomaly-detector-arn :initarg :anomaly-detector-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %update-anomaly-detector-response-anomaly-detector-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-detector-response
                    'make-update-anomaly-detector-response))
 (common-lisp:defun make-update-anomaly-detector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-anomaly-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-detector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-detector-arn))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-metric-set-request common-lisp:nil
                       ((dimension-filter-list :initarg :dimension-filter-list
                         :type
                         (common-lisp:or metric-set-dimension-filter-list
                                         common-lisp:null)
                         :accessor
                         %update-metric-set-request-dimension-filter-list
                         :initform common-lisp:nil)
                        (metric-source :initarg :metric-source :type
                         (common-lisp:or metric-source common-lisp:null)
                         :accessor %update-metric-set-request-metric-source
                         :initform common-lisp:nil)
                        (metric-set-frequency :initarg :metric-set-frequency
                         :type (common-lisp:or frequency common-lisp:null)
                         :accessor
                         %update-metric-set-request-metric-set-frequency
                         :initform common-lisp:nil)
                        (dimension-list :initarg :dimension-list :type
                         (common-lisp:or dimension-list common-lisp:null)
                         :accessor %update-metric-set-request-dimension-list
                         :initform common-lisp:nil)
                        (timestamp-column :initarg :timestamp-column :type
                         (common-lisp:or timestamp-column common-lisp:null)
                         :accessor %update-metric-set-request-timestamp-column
                         :initform common-lisp:nil)
                        (offset :initarg :offset :type
                         (common-lisp:or offset common-lisp:null) :accessor
                         %update-metric-set-request-offset :initform
                         common-lisp:nil)
                        (metric-list :initarg :metric-list :type
                         (common-lisp:or metric-list common-lisp:null)
                         :accessor %update-metric-set-request-metric-list
                         :initform common-lisp:nil)
                        (metric-set-description :initarg
                         :metric-set-description :type
                         (common-lisp:or metric-set-description
                                         common-lisp:null)
                         :accessor
                         %update-metric-set-request-metric-set-description
                         :initform common-lisp:nil)
                        (metric-set-arn :initarg :metric-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-metric-set-request-metric-set-arn :initform
                         (common-lisp:error ":metric-set-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-metric-set-request
                    'make-update-metric-set-request))
 (common-lisp:defun make-update-metric-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimension-filter-list metric-source
                     metric-set-frequency dimension-list timestamp-column
                     offset metric-list metric-set-description metric-set-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-metric-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-metric-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-metric-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-arn))
      (common-lisp:list
       (common-lisp:cons "MetricSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-description))
      (common-lisp:list
       (common-lisp:cons "MetricSetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-list))
      (common-lisp:list
       (common-lisp:cons "MetricList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "Offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-column))
      (common-lisp:list
       (common-lisp:cons "TimestampColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-list))
      (common-lisp:list
       (common-lisp:cons "DimensionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-set-frequency))
      (common-lisp:list
       (common-lisp:cons "MetricSetFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-source))
      (common-lisp:list
       (common-lisp:cons "MetricSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-filter-list))
      (common-lisp:list
       (common-lisp:cons "DimensionFilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-metric-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-metric-set-response common-lisp:nil
                       ((metric-set-arn :initarg :metric-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-metric-set-response-metric-set-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-metric-set-response
                    'make-update-metric-set-response))
 (common-lisp:defun make-update-metric-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-set-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-metric-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-metric-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-metric-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-set-arn))
      (common-lisp:list
       (common-lisp:cons "MetricSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-metric-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (lookoutmetrics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))
                        (name :initarg :name :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message name)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-configuration common-lisp:nil
                       ((security-group-id-list :initarg
                         :security-group-id-list :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor %vpc-configuration-security-group-id-list
                         :initform
                         (common-lisp:error
                          ":security-group-id-list is required"))
                        (subnet-id-list :initarg :subnet-id-list :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor %vpc-configuration-subnet-id-list :initform
                         (common-lisp:error ":subnet-id-list is required"))))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defun make-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-id-list subnet-id-list)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id-list))
      (common-lisp:list
       (common-lisp:cons "SubnetIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-id-list))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun activate-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:declare (common-lisp:ignorable anomaly-detector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-activate-anomaly-detector-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ActivateAnomalyDetector"
                                                        "ActivateAnomalyDetector"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun back-test-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:declare (common-lisp:ignorable anomaly-detector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-back-test-anomaly-detector-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/BackTestAnomalyDetector"
                                                        "BackTestAnomalyDetector"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'back-test-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun create-alert
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alert-name alert-sensitivity-threshold
                     alert-description anomaly-detector-arn action tags
                     alert-filters)
   (common-lisp:declare
    (common-lisp:ignorable alert-name alert-sensitivity-threshold
     alert-description anomaly-detector-arn action tags alert-filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alert-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/CreateAlert"
                                                        "CreateAlert"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-alert))
(common-lisp:progn
 (common-lisp:defun create-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-name
                     anomaly-detector-description anomaly-detector-config
                     kms-key-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-name anomaly-detector-description
     anomaly-detector-config kms-key-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-anomaly-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/CreateAnomalyDetector"
                                                        "CreateAnomalyDetector"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun create-metric-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn metric-set-name
                     metric-set-description metric-list offset timestamp-column
                     dimension-list metric-set-frequency metric-source timezone
                     tags dimension-filter-list)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn metric-set-name
     metric-set-description metric-list offset timestamp-column dimension-list
     metric-set-frequency metric-source timezone tags dimension-filter-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-metric-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/CreateMetricSet"
                                                        "CreateMetricSet"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-metric-set))
(common-lisp:progn
 (common-lisp:defun deactivate-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:declare (common-lisp:ignorable anomaly-detector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deactivate-anomaly-detector-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DeactivateAnomalyDetector"
                                                        "DeactivateAnomalyDetector"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun delete-alert
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alert-arn)
   (common-lisp:declare (common-lisp:ignorable alert-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alert-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DeleteAlert"
                                                        "DeleteAlert"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-alert))
(common-lisp:progn
 (common-lisp:defun delete-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:declare (common-lisp:ignorable anomaly-detector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-anomaly-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DeleteAnomalyDetector"
                                                        "DeleteAnomalyDetector"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun describe-alert
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alert-arn)
   (common-lisp:declare (common-lisp:ignorable alert-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-alert-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DescribeAlert"
                                                        "DescribeAlert"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-alert))
(common-lisp:progn
 (common-lisp:defun describe-anomaly-detection-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn timestamp
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn timestamp max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-anomaly-detection-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DescribeAnomalyDetectionExecutions"
                                                        "DescribeAnomalyDetectionExecutions"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-anomaly-detection-executions))
(common-lisp:progn
 (common-lisp:defun describe-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn)
   (common-lisp:declare (common-lisp:ignorable anomaly-detector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-anomaly-detector-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DescribeAnomalyDetector"
                                                        "DescribeAnomalyDetector"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun describe-metric-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-set-arn)
   (common-lisp:declare (common-lisp:ignorable metric-set-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-metric-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DescribeMetricSet"
                                                        "DescribeMetricSet"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-metric-set))
(common-lisp:progn
 (common-lisp:defun detect-metric-set-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn
                     auto-detection-metric-source)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn auto-detection-metric-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-metric-set-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/DetectMetricSetConfig"
                                                        "DetectMetricSetConfig"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detect-metric-set-config))
(common-lisp:progn
 (common-lisp:defun get-anomaly-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-group-id anomaly-detector-arn)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-group-id anomaly-detector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-anomaly-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetAnomalyGroup"
                                                        "GetAnomalyGroup"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-anomaly-group))
(common-lisp:progn
 (common-lisp:defun get-data-quality-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn metric-set-arn)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn metric-set-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-quality-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetDataQualityMetrics"
                                                        "GetDataQualityMetrics"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-quality-metrics))
(common-lisp:progn
 (common-lisp:defun get-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn
                     anomaly-group-time-series-feedback max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn
     anomaly-group-time-series-feedback max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetFeedback"
                                                        "GetFeedback"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-feedback))
(common-lisp:progn
 (common-lisp:defun get-sample-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key s3source-config)
   (common-lisp:declare (common-lisp:ignorable s3source-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sample-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/GetSampleData"
                                                        "GetSampleData"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sample-data))
(common-lisp:progn
 (common-lisp:defun list-alerts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-alerts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListAlerts"
                                                        "ListAlerts"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-alerts))
(common-lisp:progn
 (common-lisp:defun list-anomaly-detectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-anomaly-detectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListAnomalyDetectors"
                                                        "ListAnomalyDetectors"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-anomaly-detectors))
(common-lisp:progn
 (common-lisp:defun list-anomaly-group-related-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn anomaly-group-id
                     relationship-type-filter max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn anomaly-group-id
     relationship-type-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-anomaly-group-related-metrics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListAnomalyGroupRelatedMetrics"
                                                        "ListAnomalyGroupRelatedMetrics"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-anomaly-group-related-metrics))
(common-lisp:progn
 (common-lisp:defun list-anomaly-group-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn
                     sensitivity-threshold max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn sensitivity-threshold
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-anomaly-group-summaries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListAnomalyGroupSummaries"
                                                        "ListAnomalyGroupSummaries"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-anomaly-group-summaries))
(common-lisp:progn
 (common-lisp:defun list-anomaly-group-time-series
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn anomaly-group-id
                     metric-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn anomaly-group-id metric-name
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-anomaly-group-time-series-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListAnomalyGroupTimeSeries"
                                                        "ListAnomalyGroupTimeSeries"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-anomaly-group-time-series))
(common-lisp:progn
 (common-lisp:defun list-metric-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-metric-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListMetricSets"
                                                        "ListMetricSets"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-metric-sets))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn
                     anomaly-group-time-series-feedback)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn
     anomaly-group-time-series-feedback))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/PutFeedback"
                                                        "PutFeedback"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-feedback))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-alert
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alert-arn alert-description
                     alert-sensitivity-threshold action alert-filters)
   (common-lisp:declare
    (common-lisp:ignorable alert-arn alert-description
     alert-sensitivity-threshold action alert-filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-alert-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/UpdateAlert"
                                                        "UpdateAlert"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-alert))
(common-lisp:progn
 (common-lisp:defun update-anomaly-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-detector-arn kms-key-arn
                     anomaly-detector-description anomaly-detector-config)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-detector-arn kms-key-arn
     anomaly-detector-description anomaly-detector-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-anomaly-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/UpdateAnomalyDetector"
                                                        "UpdateAnomalyDetector"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-anomaly-detector))
(common-lisp:progn
 (common-lisp:defun update-metric-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-set-arn metric-set-description
                     metric-list offset timestamp-column dimension-list
                     metric-set-frequency metric-source dimension-filter-list)
   (common-lisp:declare
    (common-lisp:ignorable metric-set-arn metric-set-description metric-list
     offset timestamp-column dimension-list metric-set-frequency metric-source
     dimension-filter-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-metric-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutmetrics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/UpdateMetricSet"
                                                        "UpdateMetricSet"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-metric-set))
