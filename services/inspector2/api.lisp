;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/inspector2/api
  (:use)
  (:nicknames #:aws/inspector2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/inspector2/api)
(common-lisp:progn
 (common-lisp:define-condition inspector2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'inspector2-error))
(common-lisp:progn
 (common-lisp:defclass inspector2-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "inspector2" :api-version
                        "2020-06-08" :host-prefix "inspector2" :signing-name
                        "inspector2" :global-host common-lisp:nil))
 (common-lisp:export 'inspector2-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (inspector2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (account (:copier common-lisp:nil) (:conc-name "struct-shape-account-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-status (common-lisp:error ":resourcestatus is required") :type
    (common-lisp:or resource-status common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account 'make-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "resourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (account-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-aggregation-"))
   (finding-type common-lisp:nil :type
    (common-lisp:or aggregation-finding-type common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or aggregation-resource-type common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or account-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-aggregation 'make-account-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-type))
      (common-lisp:list
       (common-lisp:cons "findingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (account-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-aggregation-response-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-aggregation-response
                    'make-account-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-aggregation-response))
   common-lisp:nil))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-id-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-account-id-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-id-set ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-account-id-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-list () '(trivial-types:proper-list account))
 (common-lisp:defun make-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (account-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-state-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-state (common-lisp:error ":resourcestate is required") :type
    (common-lisp:or resource-state common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-state 'make-account-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-state))
      (common-lisp:list
       (common-lisp:cons "resourceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-state-list ()
   '(trivial-types:proper-list account-state))
 (common-lisp:defun make-account-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agg-counts () 'common-lisp:integer)
(common-lisp:deftype aggregation-finding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aggregation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregation-request-"))
   (account-aggregation common-lisp:nil :type
    (common-lisp:or account-aggregation common-lisp:null))
   (ami-aggregation common-lisp:nil :type
    (common-lisp:or ami-aggregation common-lisp:null))
   (aws-ecr-container-aggregation common-lisp:nil :type
    (common-lisp:or aws-ecr-container-aggregation common-lisp:null))
   (ec2instance-aggregation common-lisp:nil :type
    (common-lisp:or ec2instance-aggregation common-lisp:null))
   (finding-type-aggregation common-lisp:nil :type
    (common-lisp:or finding-type-aggregation common-lisp:null))
   (image-layer-aggregation common-lisp:nil :type
    (common-lisp:or image-layer-aggregation common-lisp:null))
   (lambda-function-aggregation common-lisp:nil :type
    (common-lisp:or lambda-function-aggregation common-lisp:null))
   (lambda-layer-aggregation common-lisp:nil :type
    (common-lisp:or lambda-layer-aggregation common-lisp:null))
   (package-aggregation common-lisp:nil :type
    (common-lisp:or package-aggregation common-lisp:null))
   (repository-aggregation common-lisp:nil :type
    (common-lisp:or repository-aggregation common-lisp:null))
   (title-aggregation common-lisp:nil :type
    (common-lisp:or title-aggregation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregation-request 'make-aggregation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-aggregation))
      (common-lisp:list
       (common-lisp:cons "accountAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-aggregation))
      (common-lisp:list
       (common-lisp:cons "amiAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ecr-container-aggregation))
      (common-lisp:list
       (common-lisp:cons "awsEcrContainerAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2instance-aggregation))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-type-aggregation))
      (common-lisp:list
       (common-lisp:cons "findingTypeAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-layer-aggregation))
      (common-lisp:list
       (common-lisp:cons "imageLayerAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-aggregation))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-layer-aggregation))
      (common-lisp:list
       (common-lisp:cons "lambdaLayerAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-aggregation))
      (common-lisp:list
       (common-lisp:cons "packageAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-aggregation))
      (common-lisp:list
       (common-lisp:cons "repositoryAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-aggregation))
      (common-lisp:list
       (common-lisp:cons "titleAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregation-request))
   common-lisp:nil))
(common-lisp:deftype aggregation-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregation-response-"))
   (account-aggregation common-lisp:nil :type
    (common-lisp:or account-aggregation-response common-lisp:null))
   (ami-aggregation common-lisp:nil :type
    (common-lisp:or ami-aggregation-response common-lisp:null))
   (aws-ecr-container-aggregation common-lisp:nil :type
    (common-lisp:or aws-ecr-container-aggregation-response common-lisp:null))
   (ec2instance-aggregation common-lisp:nil :type
    (common-lisp:or ec2instance-aggregation-response common-lisp:null))
   (finding-type-aggregation common-lisp:nil :type
    (common-lisp:or finding-type-aggregation-response common-lisp:null))
   (image-layer-aggregation common-lisp:nil :type
    (common-lisp:or image-layer-aggregation-response common-lisp:null))
   (lambda-function-aggregation common-lisp:nil :type
    (common-lisp:or lambda-function-aggregation-response common-lisp:null))
   (lambda-layer-aggregation common-lisp:nil :type
    (common-lisp:or lambda-layer-aggregation-response common-lisp:null))
   (package-aggregation common-lisp:nil :type
    (common-lisp:or package-aggregation-response common-lisp:null))
   (repository-aggregation common-lisp:nil :type
    (common-lisp:or repository-aggregation-response common-lisp:null))
   (title-aggregation common-lisp:nil :type
    (common-lisp:or title-aggregation-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregation-response 'make-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-aggregation))
      (common-lisp:list
       (common-lisp:cons "accountAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-aggregation))
      (common-lisp:list
       (common-lisp:cons "amiAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ecr-container-aggregation))
      (common-lisp:list
       (common-lisp:cons "awsEcrContainerAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2instance-aggregation))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-type-aggregation))
      (common-lisp:list
       (common-lisp:cons "findingTypeAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-layer-aggregation))
      (common-lisp:list
       (common-lisp:cons "imageLayerAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-aggregation))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-layer-aggregation))
      (common-lisp:list
       (common-lisp:cons "lambdaLayerAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-aggregation))
      (common-lisp:list
       (common-lisp:cons "packageAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-aggregation))
      (common-lisp:list
       (common-lisp:cons "repositoryAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-aggregation))
      (common-lisp:list
       (common-lisp:cons "titleAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregation-response-list ()
   '(trivial-types:proper-list aggregation-response))
 (common-lisp:defun make-aggregation-response-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregation-response))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ami-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-aggregation-"))
   (amis common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or ami-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ami-aggregation 'make-ami-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ami-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ami-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amis))
      (common-lisp:list
       (common-lisp:cons "amis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ami-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ami-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-aggregation-response-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (affected-instances common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (ami (common-lisp:error ":ami is required") :type
    (common-lisp:or ami-id common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-aggregation-response 'make-ami-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affected-instances))
      (common-lisp:list
       (common-lisp:cons "affectedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami))
      (common-lisp:list
       (common-lisp:cons "ami"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-aggregation-response))
   common-lisp:nil))
(common-lisp:deftype ami-id () 'common-lisp:string)
(common-lisp:deftype ami-sort-by () 'common-lisp:string)
(common-lisp:deftype architecture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype architecture-list ()
   '(trivial-types:proper-list architecture))
 (common-lisp:defun make-architecture-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list architecture))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-member-request-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-member-request 'make-associate-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-member-response-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-member-response
                    'make-associate-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (atig-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-atig-data-"))
   (first-seen common-lisp:nil :type
    (common-lisp:or first-seen common-lisp:null))
   (last-seen common-lisp:nil :type
    (common-lisp:or last-seen common-lisp:null))
   (targets common-lisp:nil :type (common-lisp:or targets common-lisp:null))
   (ttps common-lisp:nil :type (common-lisp:or ttps common-lisp:null)))
 (common-lisp:export (common-lisp:list 'atig-data 'make-atig-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input atig-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input atig-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-seen))
      (common-lisp:list
       (common-lisp:cons "firstSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-seen))
      (common-lisp:list
       (common-lisp:cons "lastSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttps))
      (common-lisp:list
       (common-lisp:cons "ttps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input atig-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-enable (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-enable-"))
   (ec2 (common-lisp:error ":ec2 is required") :type
    (common-lisp:or boolean common-lisp:null))
   (ecr (common-lisp:error ":ecr is required") :type
    (common-lisp:or boolean common-lisp:null))
   (lambda common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (lambda-code common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'auto-enable 'make-auto-enable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-enable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-enable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2))
      (common-lisp:list
       (common-lisp:cons "ec2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr))
      (common-lisp:list
       (common-lisp:cons "ecr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-code))
      (common-lisp:list
       (common-lisp:cons "lambdaCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-enable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2instance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2instance-details-"))
   (iam-instance-profile-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ip-v4addresses common-lisp:nil :type
    (common-lisp:or ip-v4address-list common-lisp:null))
   (ip-v6addresses common-lisp:nil :type
    (common-lisp:or ip-v6address-list common-lisp:null))
   (key-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (launched-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-details 'make-aws-ec2instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "iamInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v4addresses))
      (common-lisp:list
       (common-lisp:cons "ipV4Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v6addresses))
      (common-lisp:list
       (common-lisp:cons "ipV6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "keyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-at))
      (common-lisp:list
       (common-lisp:cons "launchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecr-container-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecr-container-aggregation-"))
   (architectures common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (image-shas common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (image-tags common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (repositories common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-ids common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or aws-ecr-container-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-container-aggregation
                    'make-aws-ecr-container-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architectures))
      (common-lisp:list
       (common-lisp:cons "architectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-shas))
      (common-lisp:list
       (common-lisp:cons "imageShas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tags))
      (common-lisp:list
       (common-lisp:cons "imageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecr-container-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecr-container-aggregation-response-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (image-sha common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (image-tags common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (repository common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-id (common-lisp:error ":resourceid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-container-aggregation-response
                    'make-aws-ecr-container-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-sha))
      (common-lisp:list
       (common-lisp:cons "imageSha"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tags))
      (common-lisp:list
       (common-lisp:cons "imageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-aggregation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecr-container-image-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecr-container-image-details-"))
   (architecture common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (author common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (image-hash (common-lisp:error ":imagehash is required") :type
    (common-lisp:or image-hash common-lisp:null))
   (image-tags common-lisp:nil :type
    (common-lisp:or image-tag-list common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (pushed-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (registry (common-lisp:error ":registry is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-container-image-details
                    'make-aws-ecr-container-image-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-hash))
      (common-lisp:list
       (common-lisp:cons "imageHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tags))
      (common-lisp:list
       (common-lisp:cons "imageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pushed-at))
      (common-lisp:list
       (common-lisp:cons "pushedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry))
      (common-lisp:list
       (common-lisp:cons "registry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   common-lisp:nil))
(common-lisp:deftype aws-ecr-container-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-function-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-function-details-"))
   (architectures common-lisp:nil :type
    (common-lisp:or architecture-list common-lisp:null))
   (code-sha256 (common-lisp:error ":codesha256 is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (execution-role-arn (common-lisp:error ":executionrolearn is required")
    :type (common-lisp:or execution-role-arn common-lisp:null))
   (function-name (common-lisp:error ":functionname is required") :type
    (common-lisp:or function-name common-lisp:null))
   (last-modified-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (layers common-lisp:nil :type (common-lisp:or layer-list common-lisp:null))
   (package-type common-lisp:nil :type
    (common-lisp:or package-type common-lisp:null))
   (runtime (common-lisp:error ":runtime is required") :type
    (common-lisp:or runtime common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or lambda-vpc-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-details
                    'make-aws-lambda-function-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architectures))
      (common-lisp:list
       (common-lisp:cons "architectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-sha256))
      (common-lisp:list
       (common-lisp:cons "codeSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "functionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "packageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (inspector2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-account-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-account-status-request-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or account-id-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-account-status-request
                    'make-batch-get-account-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-account-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-account-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-account-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-account-status-response-"))
   (accounts (common-lisp:error ":accounts is required") :type
    (common-lisp:or account-state-list common-lisp:null))
   (failed-accounts common-lisp:nil :type
    (common-lisp:or failed-account-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-account-status-response
                    'make-batch-get-account-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-account-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-account-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-accounts))
      (common-lisp:list
       (common-lisp:cons "failedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-account-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-code-snippet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-code-snippet-request-"))
   (finding-arns (common-lisp:error ":findingarns is required") :type
    (common-lisp:or batch-get-code-snippet-request-finding-arns-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-code-snippet-request
                    'make-batch-get-code-snippet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-code-snippet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-code-snippet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-code-snippet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-code-snippet-request-finding-arns-list ()
   '(trivial-types:proper-list finding-arn))
 (common-lisp:defun make-batch-get-code-snippet-request-finding-arns-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-code-snippet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-code-snippet-response-"))
   (code-snippet-results common-lisp:nil :type
    (common-lisp:or code-snippet-result-list common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or code-snippet-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-code-snippet-response
                    'make-batch-get-code-snippet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-code-snippet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-code-snippet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-snippet-results))
      (common-lisp:list
       (common-lisp:cons "codeSnippetResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-code-snippet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-finding-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-finding-details-request-"))
   (finding-arns (common-lisp:error ":findingarns is required") :type
    (common-lisp:or finding-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-finding-details-request
                    'make-batch-get-finding-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-finding-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-finding-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-finding-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-finding-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-finding-details-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or finding-details-error-list common-lisp:null))
   (finding-details common-lisp:nil :type
    (common-lisp:or finding-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-finding-details-response
                    'make-batch-get-finding-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-finding-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-finding-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-details))
      (common-lisp:list
       (common-lisp:cons "findingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-finding-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-free-trial-info-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-free-trial-info-request-"))
   (account-ids (common-lisp:error ":accountids is required") :type
    (common-lisp:or batch-get-free-trial-info-request-account-ids-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-free-trial-info-request
                    'make-batch-get-free-trial-info-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-free-trial-info-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-free-trial-info-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-free-trial-info-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-free-trial-info-request-account-ids-list ()
   '(trivial-types:proper-list metering-account-id))
 (common-lisp:defun make-batch-get-free-trial-info-request-account-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metering-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-free-trial-info-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-free-trial-info-response-"))
   (accounts (common-lisp:error ":accounts is required") :type
    (common-lisp:or free-trial-account-info-list common-lisp:null))
   (failed-accounts (common-lisp:error ":failedaccounts is required") :type
    (common-lisp:or free-trial-info-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-free-trial-info-response
                    'make-batch-get-free-trial-info-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-free-trial-info-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-free-trial-info-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-accounts))
      (common-lisp:list
       (common-lisp:cons "failedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-free-trial-info-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-member-ec2deep-inspection-status-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-member-ec2deep-inspection-status-request-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or account-id-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-member-ec2deep-inspection-status-request
                    'make-batch-get-member-ec2deep-inspection-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-member-ec2deep-inspection-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-member-ec2deep-inspection-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-member-ec2deep-inspection-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-member-ec2deep-inspection-status-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-member-ec2deep-inspection-status-response-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or member-account-ec2deep-inspection-status-state-list
                    common-lisp:null))
   (failed-account-ids common-lisp:nil :type
    (common-lisp:or failed-member-account-ec2deep-inspection-status-state-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-member-ec2deep-inspection-status-response
                    'make-batch-get-member-ec2deep-inspection-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-member-ec2deep-inspection-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-member-ec2deep-inspection-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-account-ids))
      (common-lisp:list
       (common-lisp:cons "failedAccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-member-ec2deep-inspection-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-member-ec2deep-inspection-status-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-update-member-ec2deep-inspection-status-request-"))
   (account-ids (common-lisp:error ":accountids is required") :type
    (common-lisp:or member-account-ec2deep-inspection-status-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-member-ec2deep-inspection-status-request
                    'make-batch-update-member-ec2deep-inspection-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-member-ec2deep-inspection-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-member-ec2deep-inspection-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-member-ec2deep-inspection-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-member-ec2deep-inspection-status-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-update-member-ec2deep-inspection-status-response-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or member-account-ec2deep-inspection-status-state-list
                    common-lisp:null))
   (failed-account-ids common-lisp:nil :type
    (common-lisp:or failed-member-account-ec2deep-inspection-status-state-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-member-ec2deep-inspection-status-response
                    'make-batch-update-member-ec2deep-inspection-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-member-ec2deep-inspection-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-member-ec2deep-inspection-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-account-ids))
      (common-lisp:list
       (common-lisp:cons "failedAccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-member-ec2deep-inspection-status-response))
   common-lisp:nil))
(common-lisp:deftype benchmark-profile () 'common-lisp:string)
(common-lisp:deftype benchmark-version () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-findings-report-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-findings-report-request-"))
   (report-id (common-lisp:error ":reportid is required") :type
    (common-lisp:or report-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-findings-report-request
                    'make-cancel-findings-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-findings-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-findings-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-findings-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-findings-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-findings-report-response-"))
   (report-id (common-lisp:error ":reportid is required") :type
    (common-lisp:or report-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-findings-report-response
                    'make-cancel-findings-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-findings-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-findings-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-findings-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-sbom-export-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-sbom-export-request-"))
   (report-id (common-lisp:error ":reportid is required") :type
    (common-lisp:or report-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-sbom-export-request
                    'make-cancel-sbom-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sbom-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sbom-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sbom-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-sbom-export-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-sbom-export-response-"))
   (report-id common-lisp:nil :type
    (common-lisp:or report-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-sbom-export-response
                    'make-cancel-sbom-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sbom-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sbom-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sbom-export-response))
   common-lisp:nil))
(common-lisp:deftype check-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype check-id-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-check-id-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cis-account-id-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-cis-account-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cis-check-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-check-aggregation-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (check-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (check-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (level common-lisp:nil :type
    (common-lisp:or cis-security-level common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scan-arn (common-lisp:error ":scanarn is required") :type
    (common-lisp:or cis-scan-arn common-lisp:null))
   (status-counts common-lisp:nil :type
    (common-lisp:or status-counts common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-check-aggregation 'make-cis-check-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-check-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-check-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-description))
      (common-lisp:list
       (common-lisp:cons "checkDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id))
      (common-lisp:list
       (common-lisp:cons "checkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-arn))
      (common-lisp:list
       (common-lisp:cons "scanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-counts))
      (common-lisp:list
       (common-lisp:cons "statusCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-check-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-check-aggregation-list ()
   '(trivial-types:proper-list cis-check-aggregation))
 (common-lisp:defun make-cis-check-aggregation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-check-aggregation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cis-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-date-filter-"))
   (earliest-scan-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (latest-scan-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cis-date-filter 'make-cis-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cis-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cis-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earliest-scan-start-time))
      (common-lisp:list
       (common-lisp:cons "earliestScanStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-scan-start-time))
      (common-lisp:list
       (common-lisp:cons "latestScanStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cis-date-filter))
   common-lisp:nil))
(common-lisp:deftype cis-finding-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cis-finding-arn-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-cis-finding-arn-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cis-finding-status () 'common-lisp:string)
(common-lisp:deftype cis-finding-status-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-finding-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-finding-status-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or cis-finding-status-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or cis-finding-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-finding-status-filter
                    'make-cis-finding-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-finding-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-finding-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-finding-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-finding-status-filter-list ()
   '(trivial-types:proper-list cis-finding-status-filter))
 (common-lisp:defun make-cis-finding-status-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cis-finding-status-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cis-number-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-number-filter-"))
   (lower-inclusive common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (upper-inclusive common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-number-filter 'make-cis-number-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cis-number-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cis-number-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-inclusive))
      (common-lisp:list
       (common-lisp:cons "lowerInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-inclusive))
      (common-lisp:list
       (common-lisp:cons "upperInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cis-number-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-number-filter-list ()
   '(trivial-types:proper-list cis-number-filter))
 (common-lisp:defun make-cis-number-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-number-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cis-owner-id () 'common-lisp:string)
(common-lisp:deftype cis-report-status () 'common-lisp:string)
(common-lisp:deftype cis-result-status () 'common-lisp:string)
(common-lisp:deftype cis-result-status-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-result-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-result-status-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or cis-result-status-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or cis-result-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-result-status-filter 'make-cis-result-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-result-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-result-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-result-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-result-status-filter-list ()
   '(trivial-types:proper-list cis-result-status-filter))
 (common-lisp:defun make-cis-result-status-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cis-result-status-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cis-rule-details ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype cis-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-scan (:copier common-lisp:nil) (:conc-name "struct-shape-cis-scan-"))
   (failed-checks common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (scan-arn (common-lisp:error ":scanarn is required") :type
    (common-lisp:or cis-scan-arn common-lisp:null))
   (scan-configuration-arn
    (common-lisp:error ":scanconfigurationarn is required") :type
    (common-lisp:or cis-scan-configuration-arn common-lisp:null))
   (scan-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (scan-name common-lisp:nil :type
    (common-lisp:or cis-scan-name common-lisp:null))
   (scheduled-by common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (security-level common-lisp:nil :type
    (common-lisp:or cis-security-level common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cis-scan-status common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or cis-targets common-lisp:null))
   (total-checks common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cis-scan 'make-cis-scan))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cis-scan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cis-scan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-checks))
      (common-lisp:list
       (common-lisp:cons "failedChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-arn))
      (common-lisp:list
       (common-lisp:cons "scanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "scanConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-date))
      (common-lisp:list
       (common-lisp:cons "scanDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-name))
      (common-lisp:list
       (common-lisp:cons "scanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-by))
      (common-lisp:list
       (common-lisp:cons "scheduledBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-level))
      (common-lisp:list
       (common-lisp:cons "securityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-checks))
      (common-lisp:list
       (common-lisp:cons "totalChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cis-scan))
   common-lisp:nil))
(common-lisp:deftype cis-scan-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cis-scan-arn-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-cis-scan-arn-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cis-scan-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-scan-configuration-"))
   (owner-id common-lisp:nil :type
    (common-lisp:or cis-owner-id common-lisp:null))
   (scan-configuration-arn
    (common-lisp:error ":scanconfigurationarn is required") :type
    (common-lisp:or cis-scan-configuration-arn common-lisp:null))
   (scan-name common-lisp:nil :type
    (common-lisp:or cis-scan-name common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (security-level common-lisp:nil :type
    (common-lisp:or cis-security-level common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or cis-tag-map common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or cis-targets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-scan-configuration 'make-cis-scan-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "ownerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "scanConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-name))
      (common-lisp:list
       (common-lisp:cons "scanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-level))
      (common-lisp:list
       (common-lisp:cons "securityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-configuration))
   common-lisp:nil))
(common-lisp:deftype cis-scan-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cis-scan-configuration-arn-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-cis-scan-configuration-arn-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cis-scan-configuration-list ()
   '(trivial-types:proper-list cis-scan-configuration))
 (common-lisp:defun make-cis-scan-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-scan-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cis-scan-configurations-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cis-scan-date-filter-list ()
   '(trivial-types:proper-list cis-date-filter))
 (common-lisp:defun make-cis-scan-date-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-date-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cis-scan-list () '(trivial-types:proper-list cis-scan))
 (common-lisp:defun make-cis-scan-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-scan))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cis-scan-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cis-scan-name-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-cis-scan-name-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cis-scan-result-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-scan-result-details-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (check-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (check-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (finding-arn common-lisp:nil :type
    (common-lisp:or cis-finding-arn common-lisp:null))
   (level common-lisp:nil :type
    (common-lisp:or cis-security-level common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (remediation common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scan-arn (common-lisp:error ":scanarn is required") :type
    (common-lisp:or cis-scan-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cis-finding-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-scan-result-details 'make-cis-scan-result-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-result-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-result-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-description))
      (common-lisp:list
       (common-lisp:cons "checkDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id))
      (common-lisp:list
       (common-lisp:cons "checkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arn))
      (common-lisp:list
       (common-lisp:cons "findingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-arn))
      (common-lisp:list
       (common-lisp:cons "scanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-resource-id))
      (common-lisp:list
       (common-lisp:cons "targetResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-result-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cis-scan-result-details-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-scan-result-details-filter-criteria-"))
   (check-id-filters common-lisp:nil :type
    (common-lisp:or check-id-filter-list common-lisp:null))
   (finding-arn-filters common-lisp:nil :type
    (common-lisp:or cis-finding-arn-filter-list common-lisp:null))
   (finding-status-filters common-lisp:nil :type
    (common-lisp:or cis-finding-status-filter-list common-lisp:null))
   (security-level-filters common-lisp:nil :type
    (common-lisp:or cis-security-level-filter-list common-lisp:null))
   (title-filters common-lisp:nil :type
    (common-lisp:or title-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-scan-result-details-filter-criteria
                    'make-cis-scan-result-details-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-result-details-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-result-details-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id-filters))
      (common-lisp:list
       (common-lisp:cons "checkIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arn-filters))
      (common-lisp:list
       (common-lisp:cons "findingArnFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-status-filters))
      (common-lisp:list
       (common-lisp:cons "findingStatusFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-level-filters))
      (common-lisp:list
       (common-lisp:cons "securityLevelFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-filters))
      (common-lisp:list
       (common-lisp:cons "titleFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-result-details-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-scan-result-details-list ()
   '(trivial-types:proper-list cis-scan-result-details))
 (common-lisp:defun make-cis-scan-result-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-scan-result-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cis-scan-result-details-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-scan-results-aggregated-by-checks-filter-criteria
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cis-scan-results-aggregated-by-checks-filter-criteria-"))
   (account-id-filters common-lisp:nil :type
    (common-lisp:or one-account-id-filter-list common-lisp:null))
   (check-id-filters common-lisp:nil :type
    (common-lisp:or check-id-filter-list common-lisp:null))
   (failed-resources-filters common-lisp:nil :type
    (common-lisp:or cis-number-filter-list common-lisp:null))
   (platform-filters common-lisp:nil :type
    (common-lisp:or platform-filter-list common-lisp:null))
   (security-level-filters common-lisp:nil :type
    (common-lisp:or cis-security-level-filter-list common-lisp:null))
   (title-filters common-lisp:nil :type
    (common-lisp:or title-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-scan-results-aggregated-by-checks-filter-criteria
                    'make-cis-scan-results-aggregated-by-checks-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-results-aggregated-by-checks-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-results-aggregated-by-checks-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id-filters))
      (common-lisp:list
       (common-lisp:cons "accountIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id-filters))
      (common-lisp:list
       (common-lisp:cons "checkIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-resources-filters))
      (common-lisp:list
       (common-lisp:cons "failedResourcesFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-filters))
      (common-lisp:list
       (common-lisp:cons "platformFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-level-filters))
      (common-lisp:list
       (common-lisp:cons "securityLevelFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-filters))
      (common-lisp:list
       (common-lisp:cons "titleFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-results-aggregated-by-checks-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype cis-scan-results-aggregated-by-checks-sort-by ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-scan-results-aggregated-by-target-resource-filter-criteria
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cis-scan-results-aggregated-by-target-resource-filter-criteria-"))
   (account-id-filters common-lisp:nil :type
    (common-lisp:or account-id-filter-list common-lisp:null))
   (check-id-filters common-lisp:nil :type
    (common-lisp:or check-id-filter-list common-lisp:null))
   (failed-checks-filters common-lisp:nil :type
    (common-lisp:or cis-number-filter-list common-lisp:null))
   (platform-filters common-lisp:nil :type
    (common-lisp:or platform-filter-list common-lisp:null))
   (status-filters common-lisp:nil :type
    (common-lisp:or cis-result-status-filter-list common-lisp:null))
   (target-resource-id-filters common-lisp:nil :type
    (common-lisp:or resource-id-filter-list common-lisp:null))
   (target-resource-tag-filters common-lisp:nil :type
    (common-lisp:or resource-tag-filter-list common-lisp:null))
   (target-status-filters common-lisp:nil :type
    (common-lisp:or target-status-filter-list common-lisp:null))
   (target-status-reason-filters common-lisp:nil :type
    (common-lisp:or target-status-reason-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'cis-scan-results-aggregated-by-target-resource-filter-criteria
   'make-cis-scan-results-aggregated-by-target-resource-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-results-aggregated-by-target-resource-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-results-aggregated-by-target-resource-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id-filters))
      (common-lisp:list
       (common-lisp:cons "accountIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id-filters))
      (common-lisp:list
       (common-lisp:cons "checkIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-checks-filters))
      (common-lisp:list
       (common-lisp:cons "failedChecksFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-filters))
      (common-lisp:list
       (common-lisp:cons "platformFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filters))
      (common-lisp:list
       (common-lisp:cons "statusFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-id-filters))
      (common-lisp:list
       (common-lisp:cons "targetResourceIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-tag-filters))
      (common-lisp:list
       (common-lisp:cons "targetResourceTagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-status-filters))
      (common-lisp:list
       (common-lisp:cons "targetStatusFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-status-reason-filters))
      (common-lisp:list
       (common-lisp:cons "targetStatusReasonFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-results-aggregated-by-target-resource-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype cis-scan-results-aggregated-by-target-resource-sort-by ()
  'common-lisp:string)
(common-lisp:deftype cis-scan-results-max-results () 'common-lisp:integer)
(common-lisp:deftype cis-scan-status () 'common-lisp:string)
(common-lisp:deftype cis-scan-status-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-scan-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-scan-status-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or cis-scan-status-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or cis-scan-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-scan-status-filter 'make-cis-scan-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-scan-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-scan-status-filter-list ()
   '(trivial-types:proper-list cis-scan-status-filter))
 (common-lisp:defun make-cis-scan-status-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-scan-status-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cis-scheduled-by-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-cis-scheduled-by-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cis-security-level () 'common-lisp:string)
(common-lisp:deftype cis-security-level-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-security-level-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-security-level-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or cis-security-level-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or cis-security-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-security-level-filter
                    'make-cis-security-level-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-security-level-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-security-level-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-security-level-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-security-level-filter-list ()
   '(trivial-types:proper-list cis-security-level-filter))
 (common-lisp:defun make-cis-security-level-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cis-security-level-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cis-session-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-session-message-"))
   (cis-rule-details (common-lisp:error ":cisruledetails is required") :type
    (common-lisp:or cis-rule-details common-lisp:null))
   (rule-id (common-lisp:error ":ruleid is required") :type
    (common-lisp:or rule-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or cis-rule-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-session-message 'make-cis-session-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cis-session-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cis-session-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cis-rule-details))
      (common-lisp:list
       (common-lisp:cons "cisRuleDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cis-session-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-session-messages ()
   '(trivial-types:proper-list cis-session-message))
 (common-lisp:defun make-cis-session-messages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-session-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cis-sort-order () 'common-lisp:string)
(common-lisp:deftype cis-string-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-string-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-string-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or cis-string-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-string-filter 'make-cis-string-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cis-string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cis-string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cis-string-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-cis-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (cis-target-resource-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-target-resource-aggregation-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scan-arn (common-lisp:error ":scanarn is required") :type
    (common-lisp:or cis-scan-arn common-lisp:null))
   (status-counts common-lisp:nil :type
    (common-lisp:or status-counts common-lisp:null))
   (target-resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (target-resource-tags common-lisp:nil :type
    (common-lisp:or target-resource-tags common-lisp:null))
   (target-status common-lisp:nil :type
    (common-lisp:or cis-target-status common-lisp:null))
   (target-status-reason common-lisp:nil :type
    (common-lisp:or cis-target-status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-target-resource-aggregation
                    'make-cis-target-resource-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-target-resource-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-target-resource-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-arn))
      (common-lisp:list
       (common-lisp:cons "scanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-counts))
      (common-lisp:list
       (common-lisp:cons "statusCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-resource-id))
      (common-lisp:list
       (common-lisp:cons "targetResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-tags))
      (common-lisp:list
       (common-lisp:cons "targetResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "targetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-status-reason))
      (common-lisp:list
       (common-lisp:cons "targetStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-target-resource-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cis-target-resource-aggregation-list ()
   '(trivial-types:proper-list cis-target-resource-aggregation))
 (common-lisp:defun make-cis-target-resource-aggregation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cis-target-resource-aggregation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cis-target-status () 'common-lisp:string)
(common-lisp:deftype cis-target-status-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-target-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-target-status-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or cis-target-status-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or cis-target-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-target-status-filter 'make-cis-target-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-target-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-target-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-target-status-filter))
   common-lisp:nil))
(common-lisp:deftype cis-target-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cis-target-status-reason-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-target-status-reason-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or cis-target-status-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or cis-target-status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cis-target-status-reason-filter
                    'make-cis-target-status-reason-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cis-target-status-reason-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cis-target-status-reason-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cis-target-status-reason-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cis-targets (:copier common-lisp:nil)
      (:conc-name "struct-shape-cis-targets-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or cis-account-id-list common-lisp:null))
   (target-resource-tags common-lisp:nil :type
    (common-lisp:or target-resource-tags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cis-targets 'make-cis-targets))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cis-targets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cis-targets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-tags))
      (common-lisp:list
       (common-lisp:cons "targetResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cis-targets))
   common-lisp:nil))
(common-lisp:deftype cisa-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cisa-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-cisa-data-"))
   (action common-lisp:nil :type (common-lisp:or cisa-action common-lisp:null))
   (date-added common-lisp:nil :type
    (common-lisp:or cisa-date-added common-lisp:null))
   (date-due common-lisp:nil :type
    (common-lisp:or cisa-date-due common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cisa-data 'make-cisa-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cisa-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cisa-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-added))
      (common-lisp:list
       (common-lisp:cons "dateAdded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-due))
      (common-lisp:list
       (common-lisp:cons "dateDue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cisa-data))
   common-lisp:nil))
(common-lisp:deftype cisa-date-added () 'common-lisp:string)
(common-lisp:deftype cisa-date-due () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (code-file-path (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-file-path-"))
   (end-line (common-lisp:error ":endline is required") :type
    (common-lisp:or integer common-lisp:null))
   (file-name (common-lisp:error ":filename is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (file-path (common-lisp:error ":filepath is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (start-line (common-lisp:error ":startline is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-file-path 'make-code-file-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-file-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-file-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-line))
      (common-lisp:list
       (common-lisp:cons "endLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "fileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-line))
      (common-lisp:list
       (common-lisp:cons "startLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-file-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-line (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-line-"))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or code-line-content-string common-lisp:null))
   (line-number (common-lisp:error ":linenumber is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-line 'make-code-line))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-line))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-line))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-number))
      (common-lisp:list
       (common-lisp:cons "lineNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-line))
   common-lisp:nil))
(common-lisp:deftype code-line-content-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype code-line-list () '(trivial-types:proper-list code-line))
 (common-lisp:defun make-code-line-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-line))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (code-snippet-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-snippet-error-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or code-snippet-error-code common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (finding-arn (common-lisp:error ":findingarn is required") :type
    (common-lisp:or finding-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-snippet-error 'make-code-snippet-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-snippet-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-snippet-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arn))
      (common-lisp:list
       (common-lisp:cons "findingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-snippet-error))
   common-lisp:nil))
(common-lisp:deftype code-snippet-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype code-snippet-error-list ()
   '(trivial-types:proper-list code-snippet-error))
 (common-lisp:defun make-code-snippet-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-snippet-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (code-snippet-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-snippet-result-"))
   (code-snippet common-lisp:nil :type
    (common-lisp:or code-line-list common-lisp:null))
   (end-line common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (finding-arn common-lisp:nil :type
    (common-lisp:or finding-arn common-lisp:null))
   (start-line common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (suggested-fixes common-lisp:nil :type
    (common-lisp:or suggested-fixes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-snippet-result 'make-code-snippet-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-snippet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-snippet-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-snippet))
      (common-lisp:list
       (common-lisp:cons "codeSnippet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-line))
      (common-lisp:list
       (common-lisp:cons "endLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arn))
      (common-lisp:list
       (common-lisp:cons "findingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-line))
      (common-lisp:list
       (common-lisp:cons "startLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggested-fixes))
      (common-lisp:list
       (common-lisp:cons "suggestedFixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-snippet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype code-snippet-result-list ()
   '(trivial-types:proper-list code-snippet-result))
 (common-lisp:defun make-code-snippet-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-snippet-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (code-vulnerability-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-vulnerability-details-"))
   (cwes (common-lisp:error ":cwes is required") :type
    (common-lisp:or cwe-list common-lisp:null))
   (detector-id (common-lisp:error ":detectorid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (detector-name (common-lisp:error ":detectorname is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (detector-tags common-lisp:nil :type
    (common-lisp:or detector-tag-list common-lisp:null))
   (file-path (common-lisp:error ":filepath is required") :type
    (common-lisp:or code-file-path common-lisp:null))
   (reference-urls common-lisp:nil :type
    (common-lisp:or reference-urls common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-lambda-layer-arn common-lisp:nil :type
    (common-lisp:or lambda-layer-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-vulnerability-details
                    'make-code-vulnerability-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-vulnerability-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-vulnerability-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cwes))
      (common-lisp:list
       (common-lisp:cons "cwes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "detectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-name))
      (common-lisp:list
       (common-lisp:cons "detectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-tags))
      (common-lisp:list
       (common-lisp:cons "detectorTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "referenceUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-lambda-layer-arn))
      (common-lisp:list
       (common-lisp:cons "sourceLambdaLayerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-vulnerability-details))
   common-lisp:nil))
(common-lisp:deftype component () 'common-lisp:string)
(common-lisp:deftype component-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (compute-platform (:copier common-lisp:nil)
      (:conc-name "struct-shape-compute-platform-"))
   (product common-lisp:nil :type (common-lisp:or product common-lisp:null))
   (vendor common-lisp:nil :type (common-lisp:or vendor common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or platform-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compute-platform 'make-compute-platform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute-platform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute-platform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute-platform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (inspector2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (counts (:copier common-lisp:nil) (:conc-name "struct-shape-counts-"))
   (count common-lisp:nil :type (common-lisp:or agg-counts common-lisp:null))
   (group-key common-lisp:nil :type
    (common-lisp:or group-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'counts 'make-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-key))
      (common-lisp:list
       (common-lisp:cons "groupKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input counts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype counts-list () '(trivial-types:proper-list counts))
 (common-lisp:defun make-counts-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list counts))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (coverage-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-coverage-date-filter-"))
   (end-inclusive common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (start-inclusive common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'coverage-date-filter 'make-coverage-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-inclusive))
      (common-lisp:list
       (common-lisp:cons "endInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-inclusive))
      (common-lisp:list
       (common-lisp:cons "startInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype coverage-date-filter-list ()
   '(trivial-types:proper-list coverage-date-filter))
 (common-lisp:defun make-coverage-date-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list coverage-date-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (coverage-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-coverage-filter-criteria-"))
   (account-id common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null))
   (ec2instance-tags common-lisp:nil :type
    (common-lisp:or coverage-map-filter-list common-lisp:null))
   (ecr-image-tags common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null))
   (ecr-repository-name common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null))
   (image-pulled-at common-lisp:nil :type
    (common-lisp:or coverage-date-filter-list common-lisp:null))
   (lambda-function-name common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null))
   (lambda-function-runtime common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null))
   (lambda-function-tags common-lisp:nil :type
    (common-lisp:or coverage-map-filter-list common-lisp:null))
   (last-scanned-at common-lisp:nil :type
    (common-lisp:or coverage-date-filter-list common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null))
   (scan-status-code common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null))
   (scan-status-reason common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null))
   (scan-type common-lisp:nil :type
    (common-lisp:or coverage-string-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'coverage-filter-criteria 'make-coverage-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-tags))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-image-tags))
      (common-lisp:list
       (common-lisp:cons "ecrImageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-repository-name))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pulled-at))
      (common-lisp:list
       (common-lisp:cons "imagePulledAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-name))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-runtime))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionRuntime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-tags))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-scanned-at))
      (common-lisp:list
       (common-lisp:cons "lastScannedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-status-code))
      (common-lisp:list
       (common-lisp:cons "scanStatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-status-reason))
      (common-lisp:list
       (common-lisp:cons "scanStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "scanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype coverage-map-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (coverage-map-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-coverage-map-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or coverage-map-comparison common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'coverage-map-filter 'make-coverage-map-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-map-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-map-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-map-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype coverage-map-filter-list ()
   '(trivial-types:proper-list coverage-map-filter))
 (common-lisp:defun make-coverage-map-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list coverage-map-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype coverage-resource-type () 'common-lisp:string)
(common-lisp:deftype coverage-string-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (coverage-string-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-coverage-string-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or coverage-string-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or coverage-string-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'coverage-string-filter 'make-coverage-string-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-string-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype coverage-string-filter-list ()
   '(trivial-types:proper-list coverage-string-filter))
 (common-lisp:defun make-coverage-string-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list coverage-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype coverage-string-input () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (covered-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-covered-resource-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (last-scanned-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (resource-id (common-lisp:error ":resourceid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (resource-metadata common-lisp:nil :type
    (common-lisp:or resource-scan-metadata common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or coverage-resource-type common-lisp:null))
   (scan-status common-lisp:nil :type
    (common-lisp:or scan-status common-lisp:null))
   (scan-type (common-lisp:error ":scantype is required") :type
    (common-lisp:or scan-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'covered-resource 'make-covered-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input covered-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input covered-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-scanned-at))
      (common-lisp:list
       (common-lisp:cons "lastScannedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-metadata))
      (common-lisp:list
       (common-lisp:cons "resourceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-status))
      (common-lisp:list
       (common-lisp:cons "scanStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "scanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input covered-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype covered-resources ()
   '(trivial-types:proper-list covered-resource))
 (common-lisp:defun make-covered-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list covered-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cis-scan-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cis-scan-configuration-request-"))
   (scan-name (common-lisp:error ":scanname is required") :type
    (common-lisp:or cis-scan-name common-lisp:null))
   (schedule (common-lisp:error ":schedule is required") :type
    (common-lisp:or schedule common-lisp:null))
   (security-level (common-lisp:error ":securitylevel is required") :type
    (common-lisp:or cis-security-level common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or cis-tag-map common-lisp:null))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or create-cis-targets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cis-scan-configuration-request
                    'make-create-cis-scan-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cis-scan-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cis-scan-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-name))
      (common-lisp:list
       (common-lisp:cons "scanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-level))
      (common-lisp:list
       (common-lisp:cons "securityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cis-scan-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cis-scan-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cis-scan-configuration-response-"))
   (scan-configuration-arn common-lisp:nil :type
    (common-lisp:or cis-scan-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cis-scan-configuration-response
                    'make-create-cis-scan-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cis-scan-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cis-scan-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "scanConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cis-scan-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cis-targets (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cis-targets-"))
   (account-ids (common-lisp:error ":accountids is required") :type
    (common-lisp:or target-account-list common-lisp:null))
   (target-resource-tags (common-lisp:error ":targetresourcetags is required")
    :type (common-lisp:or target-resource-tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cis-targets 'make-create-cis-targets))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-cis-targets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-cis-targets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-tags))
      (common-lisp:list
       (common-lisp:cons "targetResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-cis-targets))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-filter-request-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or filter-action common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or filter-description common-lisp:null))
   (filter-criteria (common-lisp:error ":filtercriteria is required") :type
    (common-lisp:or filter-criteria common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or filter-name common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or filter-reason common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-filter-request 'make-create-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-filter-response-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or filter-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-filter-response 'make-create-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-findings-report-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-findings-report-request-"))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or filter-criteria common-lisp:null))
   (report-format (common-lisp:error ":reportformat is required") :type
    (common-lisp:or report-format common-lisp:null))
   (s3destination (common-lisp:error ":s3destination is required") :type
    (common-lisp:or destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-findings-report-request
                    'make-create-findings-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-format))
      (common-lisp:list
       (common-lisp:cons "reportFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-findings-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-findings-report-response-"))
   (report-id common-lisp:nil :type
    (common-lisp:or report-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-findings-report-response
                    'make-create-findings-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-findings-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sbom-export-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sbom-export-request-"))
   (report-format (common-lisp:error ":reportformat is required") :type
    (common-lisp:or sbom-report-format common-lisp:null))
   (resource-filter-criteria common-lisp:nil :type
    (common-lisp:or resource-filter-criteria common-lisp:null))
   (s3destination (common-lisp:error ":s3destination is required") :type
    (common-lisp:or destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sbom-export-request
                    'make-create-sbom-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sbom-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sbom-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-format))
      (common-lisp:list
       (common-lisp:cons "reportFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-filter-criteria))
      (common-lisp:list
       (common-lisp:cons "resourceFilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sbom-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sbom-export-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sbom-export-response-"))
   (report-id common-lisp:nil :type
    (common-lisp:or report-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sbom-export-response
                    'make-create-sbom-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sbom-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sbom-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sbom-export-response))
   common-lisp:nil))
(common-lisp:deftype currency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cvss2 (:copier common-lisp:nil) (:conc-name "struct-shape-cvss2-"))
   (base-score common-lisp:nil :type
    (common-lisp:or cvss2base-score common-lisp:null))
   (scoring-vector common-lisp:nil :type
    (common-lisp:or cvss2scoring-vector common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cvss2 'make-cvss2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-score))
      (common-lisp:list
       (common-lisp:cons "baseScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss2))
   common-lisp:nil))
(common-lisp:deftype cvss2base-score () 'common-lisp:double-float)
(common-lisp:deftype cvss2scoring-vector () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cvss3 (:copier common-lisp:nil) (:conc-name "struct-shape-cvss3-"))
   (base-score common-lisp:nil :type
    (common-lisp:or cvss3base-score common-lisp:null))
   (scoring-vector common-lisp:nil :type
    (common-lisp:or cvss3scoring-vector common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cvss3 'make-cvss3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-score))
      (common-lisp:list
       (common-lisp:cons "baseScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss3))
   common-lisp:nil))
(common-lisp:deftype cvss3base-score () 'common-lisp:double-float)
(common-lisp:deftype cvss3scoring-vector () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cvss-score (:copier common-lisp:nil)
      (:conc-name "struct-shape-cvss-score-"))
   (base-score (common-lisp:error ":basescore is required") :type
    (common-lisp:or double common-lisp:null))
   (scoring-vector (common-lisp:error ":scoringvector is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cvss-score 'make-cvss-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-score))
      (common-lisp:list
       (common-lisp:cons "baseScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cvss-score-adjustment (:copier common-lisp:nil)
      (:conc-name "struct-shape-cvss-score-adjustment-"))
   (metric (common-lisp:error ":metric is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (reason (common-lisp:error ":reason is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cvss-score-adjustment 'make-cvss-score-adjustment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-score-adjustment-list ()
   '(trivial-types:proper-list cvss-score-adjustment))
 (common-lisp:defun make-cvss-score-adjustment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss-score-adjustment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cvss-score-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-cvss-score-details-"))
   (adjustments common-lisp:nil :type
    (common-lisp:or cvss-score-adjustment-list common-lisp:null))
   (cvss-source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (score (common-lisp:error ":score is required") :type
    (common-lisp:or double common-lisp:null))
   (score-source (common-lisp:error ":scoresource is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (scoring-vector (common-lisp:error ":scoringvector is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cvss-score-details 'make-cvss-score-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss-score-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss-score-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustments))
      (common-lisp:list
       (common-lisp:cons "adjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss-source))
      (common-lisp:list
       (common-lisp:cons "cvssSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-source))
      (common-lisp:list
       (common-lisp:cons "scoreSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss-score-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-score-list ()
   '(trivial-types:proper-list cvss-score))
 (common-lisp:defun make-cvss-score-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss-score))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cwe () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cwe-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-cwe-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cwes () '(trivial-types:proper-list cwe))
 (common-lisp:defun make-cwes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cwe))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (daily-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-daily-schedule-"))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'daily-schedule 'make-daily-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input daily-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input daily-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input daily-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-filter-"))
   (end-inclusive common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (start-inclusive common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'date-filter 'make-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-inclusive))
      (common-lisp:list
       (common-lisp:cons "endInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-inclusive))
      (common-lisp:list
       (common-lisp:cons "startInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype date-filter-list ()
   '(trivial-types:proper-list date-filter))
 (common-lisp:defun make-date-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list date-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype date-time-timestamp () 'common-lisp:string)
(common-lisp:deftype day () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype days-list () '(trivial-types:proper-list day))
 (common-lisp:defun make-days-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list day))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delegated-admin (:copier common-lisp:nil)
      (:conc-name "struct-shape-delegated-admin-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (relationship-status common-lisp:nil :type
    (common-lisp:or relationship-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'delegated-admin 'make-delegated-admin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delegated-admin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delegated-admin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "relationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delegated-admin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delegated-admin-account (:copier common-lisp:nil)
      (:conc-name "struct-shape-delegated-admin-account-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or delegated-admin-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delegated-admin-account 'make-delegated-admin-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delegated-admin-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delegated-admin-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delegated-admin-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delegated-admin-account-list ()
   '(trivial-types:proper-list delegated-admin-account))
 (common-lisp:defun make-delegated-admin-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegated-admin-account))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delegated-admin-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cis-scan-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cis-scan-configuration-request-"))
   (scan-configuration-arn
    (common-lisp:error ":scanconfigurationarn is required") :type
    (common-lisp:or cis-scan-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cis-scan-configuration-request
                    'make-delete-cis-scan-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cis-scan-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cis-scan-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "scanConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cis-scan-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cis-scan-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cis-scan-configuration-response-"))
   (scan-configuration-arn
    (common-lisp:error ":scanconfigurationarn is required") :type
    (common-lisp:or cis-scan-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cis-scan-configuration-response
                    'make-delete-cis-scan-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cis-scan-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cis-scan-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "scanConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cis-scan-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-filter-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or filter-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-filter-request 'make-delete-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-filter-response-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or filter-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-filter-response 'make-delete-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-organization-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-request
                    'make-describe-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-organization-configuration-response-"))
   (auto-enable common-lisp:nil :type
    (common-lisp:or auto-enable common-lisp:null))
   (max-account-limit-reached common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-response
                    'make-describe-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "autoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-account-limit-reached))
      (common-lisp:list
       (common-lisp:cons "maxAccountLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or string common-lisp:null))
   (key-prefix common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (kms-key-arn (common-lisp:error ":kmskeyarn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detection-platforms ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-detection-platforms
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype detector-tag-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-detector-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-delegated-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-delegated-admin-account-request-"))
   (delegated-admin-account-id
    (common-lisp:error ":delegatedadminaccountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-delegated-admin-account-request
                    'make-disable-delegated-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-delegated-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-delegated-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-admin-account-id))
      (common-lisp:list
       (common-lisp:cons "delegatedAdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-delegated-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-delegated-admin-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-delegated-admin-account-response-"))
   (delegated-admin-account-id
    (common-lisp:error ":delegatedadminaccountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-delegated-admin-account-response
                    'make-disable-delegated-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-delegated-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-delegated-admin-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-admin-account-id))
      (common-lisp:list
       (common-lisp:cons "delegatedAdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-delegated-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-request-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or account-id-set common-lisp:null))
   (resource-types common-lisp:nil :type
    (common-lisp:or disable-resource-type-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'disable-request 'make-disable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "resourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disable-resource-type-list ()
   '(trivial-types:proper-list resource-scan-type))
 (common-lisp:defun make-disable-resource-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-scan-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-response-"))
   (accounts (common-lisp:error ":accounts is required") :type
    (common-lisp:or account-list common-lisp:null))
   (failed-accounts common-lisp:nil :type
    (common-lisp:or failed-account-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-response 'make-disable-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-accounts))
      (common-lisp:list
       (common-lisp:cons "failedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-member-request-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-member-request
                    'make-disassociate-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-member-response-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-member-response
                    'make-disassociate-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-response))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype ec2deep-inspection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ec2instance-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2instance-aggregation-"))
   (amis common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (instance-ids common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (instance-tags common-lisp:nil :type
    (common-lisp:or map-filter-list common-lisp:null))
   (operating-systems common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or ec2instance-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-aggregation 'make-ec2instance-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amis))
      (common-lisp:list
       (common-lisp:cons "amis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "instanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-tags))
      (common-lisp:list
       (common-lisp:cons "instanceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-systems))
      (common-lisp:list
       (common-lisp:cons "operatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2instance-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2instance-aggregation-response-"))
   (account-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ami common-lisp:nil :type (common-lisp:or ami-id common-lisp:null))
   (instance-id (common-lisp:error ":instanceid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-tags common-lisp:nil :type
    (common-lisp:or tag-map common-lisp:null))
   (network-findings common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (operating-system common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-aggregation-response
                    'make-ec2instance-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami))
      (common-lisp:list
       (common-lisp:cons "ami"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-tags))
      (common-lisp:list
       (common-lisp:cons "instanceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-findings))
      (common-lisp:list
       (common-lisp:cons "networkFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "operatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-aggregation-response))
   common-lisp:nil))
(common-lisp:deftype ec2instance-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ec2metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2metadata-"))
   (ami-id common-lisp:nil :type (common-lisp:or ami-id common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or ec2platform common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ec2metadata 'make-ec2metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "amiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2metadata))
   common-lisp:nil))
(common-lisp:deftype ec2platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ecr-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecr-configuration-"))
   (pull-date-rescan-duration common-lisp:nil :type
    (common-lisp:or ecr-pull-date-rescan-duration common-lisp:null))
   (rescan-duration (common-lisp:error ":rescanduration is required") :type
    (common-lisp:or ecr-rescan-duration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ecr-configuration 'make-ecr-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecr-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecr-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pull-date-rescan-duration))
      (common-lisp:list
       (common-lisp:cons "pullDateRescanDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rescan-duration))
      (common-lisp:list
       (common-lisp:cons "rescanDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecr-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ecr-configuration-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecr-configuration-state-"))
   (rescan-duration-state common-lisp:nil :type
    (common-lisp:or ecr-rescan-duration-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ecr-configuration-state 'make-ecr-configuration-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecr-configuration-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecr-configuration-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rescan-duration-state))
      (common-lisp:list
       (common-lisp:cons "rescanDurationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecr-configuration-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ecr-container-image-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecr-container-image-metadata-"))
   (image-pulled-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ecr-container-image-metadata
                    'make-ecr-container-image-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecr-container-image-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecr-container-image-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pulled-at))
      (common-lisp:list
       (common-lisp:cons "imagePulledAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecr-container-image-metadata))
   common-lisp:nil))
(common-lisp:deftype ecr-pull-date-rescan-duration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ecr-repository-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecr-repository-metadata-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scan-frequency common-lisp:nil :type
    (common-lisp:or ecr-scan-frequency common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ecr-repository-metadata 'make-ecr-repository-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-frequency))
      (common-lisp:list
       (common-lisp:cons "scanFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-metadata))
   common-lisp:nil))
(common-lisp:deftype ecr-rescan-duration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ecr-rescan-duration-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecr-rescan-duration-state-"))
   (pull-date-rescan-duration common-lisp:nil :type
    (common-lisp:or ecr-pull-date-rescan-duration common-lisp:null))
   (rescan-duration common-lisp:nil :type
    (common-lisp:or ecr-rescan-duration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ecr-rescan-duration-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ecr-rescan-duration-state
                    'make-ecr-rescan-duration-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecr-rescan-duration-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecr-rescan-duration-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pull-date-rescan-duration))
      (common-lisp:list
       (common-lisp:cons "pullDateRescanDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rescan-duration))
      (common-lisp:list
       (common-lisp:cons "rescanDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecr-rescan-duration-state))
   common-lisp:nil))
(common-lisp:deftype ecr-rescan-duration-status () 'common-lisp:string)
(common-lisp:deftype ecr-scan-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-delegated-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-delegated-admin-account-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (delegated-admin-account-id
    (common-lisp:error ":delegatedadminaccountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-delegated-admin-account-request
                    'make-enable-delegated-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-delegated-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-delegated-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-admin-account-id))
      (common-lisp:list
       (common-lisp:cons "delegatedAdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-delegated-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-delegated-admin-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-delegated-admin-account-response-"))
   (delegated-admin-account-id
    (common-lisp:error ":delegatedadminaccountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-delegated-admin-account-response
                    'make-enable-delegated-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-delegated-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-delegated-admin-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-admin-account-id))
      (common-lisp:list
       (common-lisp:cons "delegatedAdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-delegated-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-request-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or account-id-set common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (resource-types (common-lisp:error ":resourcetypes is required") :type
    (common-lisp:or enable-resource-type-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'enable-request 'make-enable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "resourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enable-resource-type-list ()
   '(trivial-types:proper-list resource-scan-type))
 (common-lisp:defun make-enable-resource-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-scan-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-response-"))
   (accounts (common-lisp:error ":accounts is required") :type
    (common-lisp:or account-list common-lisp:null))
   (failed-accounts common-lisp:nil :type
    (common-lisp:or failed-account-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'enable-response 'make-enable-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-accounts))
      (common-lisp:list
       (common-lisp:cons "failedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (epss (:copier common-lisp:nil) (:conc-name "struct-shape-epss-"))
   (score common-lisp:nil :type (common-lisp:or epss-score common-lisp:null)))
 (common-lisp:export (common-lisp:list 'epss 'make-epss))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input epss))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input epss))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input epss))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (epss-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-epss-details-"))
   (score common-lisp:nil :type
    (common-lisp:or epss-score-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'epss-details 'make-epss-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input epss-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input epss-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input epss-details))
   common-lisp:nil))
(common-lisp:deftype epss-score () 'common-lisp:double-float)
(common-lisp:deftype epss-score-value () 'common-lisp:double-float)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evidence (:copier common-lisp:nil) (:conc-name "struct-shape-evidence-"))
   (evidence-detail common-lisp:nil :type
    (common-lisp:or evidence-detail common-lisp:null))
   (evidence-rule common-lisp:nil :type
    (common-lisp:or evidence-rule common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or evidence-severity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'evidence 'make-evidence))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evidence))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evidence))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-detail))
      (common-lisp:list
       (common-lisp:cons "evidenceDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-rule))
      (common-lisp:list
       (common-lisp:cons "evidenceRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evidence))
   common-lisp:nil))
(common-lisp:deftype evidence-detail () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype evidence-list () '(trivial-types:proper-list evidence))
 (common-lisp:defun make-evidence-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evidence))
   aws-sdk/generator/shape::members))
(common-lisp:deftype evidence-rule () 'common-lisp:string)
(common-lisp:deftype evidence-severity () 'common-lisp:string)
(common-lisp:deftype execution-role-arn () 'common-lisp:string)
(common-lisp:deftype exploit-available () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (exploit-observed (:copier common-lisp:nil)
      (:conc-name "struct-shape-exploit-observed-"))
   (first-seen common-lisp:nil :type
    (common-lisp:or first-seen common-lisp:null))
   (last-seen common-lisp:nil :type
    (common-lisp:or last-seen common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exploit-observed 'make-exploit-observed))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exploit-observed))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exploit-observed))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-seen))
      (common-lisp:list
       (common-lisp:cons "firstSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-seen))
      (common-lisp:list
       (common-lisp:cons "lastSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exploit-observed))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (exploitability-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-exploitability-details-"))
   (last-known-exploit-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exploitability-details 'make-exploitability-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exploitability-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exploitability-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-known-exploit-at))
      (common-lisp:list
       (common-lisp:cons "lastKnownExploitAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exploitability-details))
   common-lisp:nil))
(common-lisp:deftype external-report-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (failed-account (:copier common-lisp:nil)
      (:conc-name "struct-shape-failed-account-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or error-code common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failed-account 'make-failed-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "resourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-account-list ()
   '(trivial-types:proper-list failed-account))
 (common-lisp:defun make-failed-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (failed-member-account-ec2deep-inspection-status-state
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-failed-member-account-ec2deep-inspection-status-state-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (ec2scan-status common-lisp:nil :type
    (common-lisp:or status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failed-member-account-ec2deep-inspection-status-state
                    'make-failed-member-account-ec2deep-inspection-status-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-member-account-ec2deep-inspection-status-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-member-account-ec2deep-inspection-status-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2scan-status))
      (common-lisp:list
       (common-lisp:cons "ec2ScanStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-member-account-ec2deep-inspection-status-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-member-account-ec2deep-inspection-status-state-list
                      ()
   '(trivial-types:proper-list
     failed-member-account-ec2deep-inspection-status-state))
 (common-lisp:defun make-failed-member-account-ec2deep-inspection-status-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-member-account-ec2deep-inspection-status-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype file-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or filter-action common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or filter-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (criteria (common-lisp:error ":criteria is required") :type
    (common-lisp:or filter-criteria common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or filter-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or filter-name common-lisp:null))
   (owner-id (common-lisp:error ":ownerid is required") :type
    (common-lisp:or owner-id common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or filter-reason common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-time-timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "ownerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-action () 'common-lisp:string)
(common-lisp:deftype filter-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-arn-list ()
   '(trivial-types:proper-list filter-arn))
 (common-lisp:defun make-filter-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-criteria-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (code-vulnerability-detector-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (code-vulnerability-detector-tags common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (code-vulnerability-file-path common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (component-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (component-type common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (ec2instance-image-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (ec2instance-subnet-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (ec2instance-vpc-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (ecr-image-architecture common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (ecr-image-hash common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (ecr-image-pushed-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (ecr-image-registry common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (ecr-image-repository-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (ecr-image-tags common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (epss-score common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (exploit-available common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (finding-arn common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (finding-status common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (finding-type common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (first-observed-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (fix-available common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (inspector-score common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (lambda-function-execution-role-arn common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (lambda-function-last-modified-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (lambda-function-layers common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (lambda-function-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (lambda-function-runtime common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (last-observed-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (network-protocol common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (port-range common-lisp:nil :type
    (common-lisp:or port-range-filter-list common-lisp:null))
   (related-vulnerabilities common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or map-filter-list common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (vendor-severity common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (vulnerability-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (vulnerability-source common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (vulnerable-packages common-lisp:nil :type
    (common-lisp:or package-filter-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter-criteria 'make-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-vulnerability-detector-name))
      (common-lisp:list
       (common-lisp:cons "codeVulnerabilityDetectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-vulnerability-detector-tags))
      (common-lisp:list
       (common-lisp:cons "codeVulnerabilityDetectorTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-vulnerability-file-path))
      (common-lisp:list
       (common-lisp:cons "codeVulnerabilityFilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-id))
      (common-lisp:list
       (common-lisp:cons "componentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2instance-image-id))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2instance-subnet-id))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-vpc-id))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-image-architecture))
      (common-lisp:list
       (common-lisp:cons "ecrImageArchitecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-image-hash))
      (common-lisp:list
       (common-lisp:cons "ecrImageHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-image-pushed-at))
      (common-lisp:list
       (common-lisp:cons "ecrImagePushedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-image-registry))
      (common-lisp:list
       (common-lisp:cons "ecrImageRegistry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-image-repository-name))
      (common-lisp:list
       (common-lisp:cons "ecrImageRepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-image-tags))
      (common-lisp:list
       (common-lisp:cons "ecrImageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epss-score))
      (common-lisp:list
       (common-lisp:cons "epssScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exploit-available))
      (common-lisp:list
       (common-lisp:cons "exploitAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arn))
      (common-lisp:list
       (common-lisp:cons "findingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-status))
      (common-lisp:list
       (common-lisp:cons "findingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-type))
      (common-lisp:list
       (common-lisp:cons "findingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-observed-at))
      (common-lisp:list
       (common-lisp:cons "firstObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fix-available))
      (common-lisp:list
       (common-lisp:cons "fixAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inspector-score))
      (common-lisp:list
       (common-lisp:cons "inspectorScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionLastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-layers))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionLayers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-name))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-runtime))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionRuntime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-observed-at))
      (common-lisp:list
       (common-lisp:cons "lastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-protocol))
      (common-lisp:list
       (common-lisp:cons "networkProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-range))
      (common-lisp:list
       (common-lisp:cons "portRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "relatedVulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-severity))
      (common-lisp:list
       (common-lisp:cons "vendorSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-id))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vulnerability-source))
      (common-lisp:list
       (common-lisp:cons "vulnerabilitySource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerable-packages))
      (common-lisp:list
       (common-lisp:cons "vulnerablePackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-criteria))
   common-lisp:nil))
(common-lisp:deftype filter-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (finding (:copier common-lisp:nil) (:conc-name "struct-shape-finding-"))
   (aws-account-id (common-lisp:error ":awsaccountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (code-vulnerability-details common-lisp:nil :type
    (common-lisp:or code-vulnerability-details common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or finding-description common-lisp:null))
   (epss common-lisp:nil :type (common-lisp:or epss-details common-lisp:null))
   (exploit-available common-lisp:nil :type
    (common-lisp:or exploit-available common-lisp:null))
   (exploitability-details common-lisp:nil :type
    (common-lisp:or exploitability-details common-lisp:null))
   (finding-arn (common-lisp:error ":findingarn is required") :type
    (common-lisp:or finding-arn common-lisp:null))
   (first-observed-at (common-lisp:error ":firstobservedat is required") :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (fix-available common-lisp:nil :type
    (common-lisp:or fix-available common-lisp:null))
   (inspector-score common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (inspector-score-details common-lisp:nil :type
    (common-lisp:or inspector-score-details common-lisp:null))
   (last-observed-at (common-lisp:error ":lastobservedat is required") :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (network-reachability-details common-lisp:nil :type
    (common-lisp:or network-reachability-details common-lisp:null))
   (package-vulnerability-details common-lisp:nil :type
    (common-lisp:or package-vulnerability-details common-lisp:null))
   (remediation (common-lisp:error ":remediation is required") :type
    (common-lisp:or remediation common-lisp:null))
   (resources (common-lisp:error ":resources is required") :type
    (common-lisp:or resource-list common-lisp:null))
   (severity (common-lisp:error ":severity is required") :type
    (common-lisp:or severity common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or finding-status common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or finding-title common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or finding-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-vulnerability-details))
      (common-lisp:list
       (common-lisp:cons "codeVulnerabilityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epss))
      (common-lisp:list
       (common-lisp:cons "epss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exploit-available))
      (common-lisp:list
       (common-lisp:cons "exploitAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exploitability-details))
      (common-lisp:list
       (common-lisp:cons "exploitabilityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arn))
      (common-lisp:list
       (common-lisp:cons "findingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-observed-at))
      (common-lisp:list
       (common-lisp:cons "firstObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fix-available))
      (common-lisp:list
       (common-lisp:cons "fixAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inspector-score))
      (common-lisp:list
       (common-lisp:cons "inspectorScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inspector-score-details))
      (common-lisp:list
       (common-lisp:cons "inspectorScoreDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-observed-at))
      (common-lisp:list
       (common-lisp:cons "lastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-reachability-details))
      (common-lisp:list
       (common-lisp:cons "networkReachabilityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-vulnerability-details))
      (common-lisp:list
       (common-lisp:cons "packageVulnerabilityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:deftype finding-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-arn-list ()
   '(trivial-types:proper-list finding-arn))
 (common-lisp:defun make-finding-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype finding-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (finding-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-detail-"))
   (cisa-data common-lisp:nil :type
    (common-lisp:or cisa-data common-lisp:null))
   (cwes common-lisp:nil :type (common-lisp:or cwes common-lisp:null))
   (epss-score common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (evidences common-lisp:nil :type
    (common-lisp:or evidence-list common-lisp:null))
   (exploit-observed common-lisp:nil :type
    (common-lisp:or exploit-observed common-lisp:null))
   (finding-arn common-lisp:nil :type
    (common-lisp:or finding-arn common-lisp:null))
   (reference-urls common-lisp:nil :type
    (common-lisp:or vulnerability-reference-urls common-lisp:null))
   (risk-score common-lisp:nil :type
    (common-lisp:or risk-score common-lisp:null))
   (tools common-lisp:nil :type (common-lisp:or tools common-lisp:null))
   (ttps common-lisp:nil :type (common-lisp:or ttps common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding-detail 'make-finding-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cisa-data))
      (common-lisp:list
       (common-lisp:cons "cisaData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cwes))
      (common-lisp:list
       (common-lisp:cons "cwes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epss-score))
      (common-lisp:list
       (common-lisp:cons "epssScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidences))
      (common-lisp:list
       (common-lisp:cons "evidences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exploit-observed))
      (common-lisp:list
       (common-lisp:cons "exploitObserved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arn))
      (common-lisp:list
       (common-lisp:cons "findingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "referenceUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-score))
      (common-lisp:list
       (common-lisp:cons "riskScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tools))
      (common-lisp:list
       (common-lisp:cons "tools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttps))
      (common-lisp:list
       (common-lisp:cons "ttps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype finding-details ()
   '(trivial-types:proper-list finding-detail))
 (common-lisp:defun make-finding-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (finding-details-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-details-error-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or finding-details-error-code common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (finding-arn (common-lisp:error ":findingarn is required") :type
    (common-lisp:or finding-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'finding-details-error 'make-finding-details-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-details-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-details-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arn))
      (common-lisp:list
       (common-lisp:cons "findingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-details-error))
   common-lisp:nil))
(common-lisp:deftype finding-details-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-details-error-list ()
   '(trivial-types:proper-list finding-details-error))
 (common-lisp:defun make-finding-details-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-details-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype finding-list () '(trivial-types:proper-list finding))
 (common-lisp:defun make-finding-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype finding-status () 'common-lisp:string)
(common-lisp:deftype finding-title () 'common-lisp:string)
(common-lisp:deftype finding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (finding-type-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-type-aggregation-"))
   (finding-type common-lisp:nil :type
    (common-lisp:or aggregation-finding-type common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or aggregation-resource-type common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or finding-type-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'finding-type-aggregation 'make-finding-type-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-type-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-type-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-type))
      (common-lisp:list
       (common-lisp:cons "findingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-type-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (finding-type-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-type-aggregation-response-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'finding-type-aggregation-response
                    'make-finding-type-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-type-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-type-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-type-aggregation-response))
   common-lisp:nil))
(common-lisp:deftype finding-type-sort-by () 'common-lisp:string)
(common-lisp:deftype first-seen () 'common-lisp:string)
(common-lisp:deftype fix-available () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (free-trial-account-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-trial-account-info-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or metering-account-id common-lisp:null))
   (free-trial-info (common-lisp:error ":freetrialinfo is required") :type
    (common-lisp:or free-trial-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'free-trial-account-info 'make-free-trial-account-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-account-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-account-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-trial-info))
      (common-lisp:list
       (common-lisp:cons "freeTrialInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-account-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype free-trial-account-info-list ()
   '(trivial-types:proper-list free-trial-account-info))
 (common-lisp:defun make-free-trial-account-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list free-trial-account-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (free-trial-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-trial-info-"))
   (end (common-lisp:error ":end is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (start (common-lisp:error ":start is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or free-trial-status common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or free-trial-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'free-trial-info 'make-free-trial-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input free-trial-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input free-trial-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input free-trial-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (free-trial-info-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-trial-info-error-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or metering-account-id common-lisp:null))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or free-trial-info-error-code common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'free-trial-info-error 'make-free-trial-info-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-info-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-info-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-info-error))
   common-lisp:nil))
(common-lisp:deftype free-trial-info-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype free-trial-info-error-list ()
   '(trivial-types:proper-list free-trial-info-error))
 (common-lisp:defun make-free-trial-info-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list free-trial-info-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype free-trial-info-list ()
   '(trivial-types:proper-list free-trial-info))
 (common-lisp:defun make-free-trial-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list free-trial-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype free-trial-status () 'common-lisp:string)
(common-lisp:deftype free-trial-type () 'common-lisp:string)
(common-lisp:deftype function-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-cis-scan-report-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cis-scan-report-request-"))
   (scan-arn (common-lisp:error ":scanarn is required") :type
    (common-lisp:or cis-scan-arn common-lisp:null))
   (target-accounts common-lisp:nil :type
    (common-lisp:or report-target-accounts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cis-scan-report-request
                    'make-get-cis-scan-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-arn))
      (common-lisp:list
       (common-lisp:cons "scanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-accounts))
      (common-lisp:list
       (common-lisp:cons "targetAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cis-scan-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cis-scan-report-response-"))
   (status common-lisp:nil :type
    (common-lisp:or cis-report-status common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cis-scan-report-response
                    'make-get-cis-scan-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-report-response))
   common-lisp:nil))
(common-lisp:deftype get-cis-scan-result-details-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-cis-scan-result-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cis-scan-result-details-request-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or cis-scan-result-details-filter-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or get-cis-scan-result-details-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (scan-arn (common-lisp:error ":scanarn is required") :type
    (common-lisp:or cis-scan-arn common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or cis-scan-result-details-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or cis-sort-order common-lisp:null))
   (target-resource-id (common-lisp:error ":targetresourceid is required")
    :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cis-scan-result-details-request
                    'make-get-cis-scan-result-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-result-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-result-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-arn))
      (common-lisp:list
       (common-lisp:cons "scanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-resource-id))
      (common-lisp:list
       (common-lisp:cons "targetResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-result-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cis-scan-result-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cis-scan-result-details-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (scan-result-details common-lisp:nil :type
    (common-lisp:or cis-scan-result-details-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cis-scan-result-details-response
                    'make-get-cis-scan-result-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-result-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-result-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-result-details))
      (common-lisp:list
       (common-lisp:cons "scanResultDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cis-scan-result-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'get-configuration-request
                    'make-get-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-configuration-response-"))
   (ecr-configuration common-lisp:nil :type
    (common-lisp:or ecr-configuration-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-configuration-response
                    'make-get-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-configuration))
      (common-lisp:list
       (common-lisp:cons "ecrConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-delegated-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-delegated-admin-account-request-")))
 (common-lisp:export
  (common-lisp:list 'get-delegated-admin-account-request
                    'make-get-delegated-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delegated-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delegated-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delegated-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-delegated-admin-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-delegated-admin-account-response-"))
   (delegated-admin common-lisp:nil :type
    (common-lisp:or delegated-admin common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-delegated-admin-account-response
                    'make-get-delegated-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delegated-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delegated-admin-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegated-admin))
      (common-lisp:list
       (common-lisp:cons "delegatedAdmin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delegated-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-ec2deep-inspection-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-ec2deep-inspection-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'get-ec2deep-inspection-configuration-request
                    'make-get-ec2deep-inspection-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ec2deep-inspection-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ec2deep-inspection-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ec2deep-inspection-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-ec2deep-inspection-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-ec2deep-inspection-configuration-response-"))
   (error-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (org-package-paths common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null))
   (package-paths common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ec2deep-inspection-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-ec2deep-inspection-configuration-response
                    'make-get-ec2deep-inspection-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ec2deep-inspection-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ec2deep-inspection-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'org-package-paths))
      (common-lisp:list
       (common-lisp:cons "orgPackagePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-paths))
      (common-lisp:list
       (common-lisp:cons "packagePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ec2deep-inspection-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-encryption-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-encryption-key-request-"))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (scan-type (common-lisp:error ":scantype is required") :type
    (common-lisp:or scan-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-encryption-key-request
                    'make-get-encryption-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-encryption-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-encryption-key-response-"))
   (kms-key-id (common-lisp:error ":kmskeyid is required") :type
    (common-lisp:or kms-key-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-encryption-key-response
                    'make-get-encryption-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-report-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-findings-report-status-request-"))
   (report-id common-lisp:nil :type
    (common-lisp:or report-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-findings-report-status-request
                    'make-get-findings-report-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-report-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-findings-report-status-response-"))
   (destination common-lisp:nil :type
    (common-lisp:or destination common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or reporting-error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or filter-criteria common-lisp:null))
   (report-id common-lisp:nil :type
    (common-lisp:or report-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or external-report-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-findings-report-status-response
                    'make-get-findings-report-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-member-request-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-member-request 'make-get-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-member-response-"))
   (member common-lisp:nil :type (common-lisp:or member common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-member-response 'make-get-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sbom-export-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sbom-export-request-"))
   (report-id (common-lisp:error ":reportid is required") :type
    (common-lisp:or report-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sbom-export-request 'make-get-sbom-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sbom-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sbom-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sbom-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sbom-export-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sbom-export-response-"))
   (error-code common-lisp:nil :type
    (common-lisp:or reporting-error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or resource-filter-criteria common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or sbom-report-format common-lisp:null))
   (report-id common-lisp:nil :type
    (common-lisp:or report-id common-lisp:null))
   (s3destination common-lisp:nil :type
    (common-lisp:or destination common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or external-report-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sbom-export-response 'make-get-sbom-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sbom-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sbom-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sbom-export-response))
   common-lisp:nil))
(common-lisp:deftype group-key () 'common-lisp:string)
(common-lisp:deftype image-hash () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-layer-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-layer-aggregation-"))
   (layer-hashes common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (repositories common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-ids common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or image-layer-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-layer-aggregation 'make-image-layer-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-layer-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-layer-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-hashes))
      (common-lisp:list
       (common-lisp:cons "layerHashes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-layer-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (image-layer-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-layer-aggregation-response-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (layer-hash (common-lisp:error ":layerhash is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-id (common-lisp:error ":resourceid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-layer-aggregation-response
                    'make-image-layer-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-layer-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-layer-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-hash))
      (common-lisp:list
       (common-lisp:cons "layerHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-layer-aggregation-response))
   common-lisp:nil))
(common-lisp:deftype image-layer-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-tag-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-image-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (inspector-score-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-inspector-score-details-"))
   (adjusted-cvss common-lisp:nil :type
    (common-lisp:or cvss-score-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inspector-score-details 'make-inspector-score-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inspector-score-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inspector-score-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjusted-cvss))
      (common-lisp:list
       (common-lisp:cons "adjustedCvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inspector-score-details))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (inspector2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype ip-v4address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-v4address-list ()
   '(trivial-types:proper-list ip-v4address))
 (common-lisp:defun make-ip-v4address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-v4address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ip-v6address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-v6address-list ()
   '(trivial-types:proper-list ip-v6address))
 (common-lisp:defun make-ip-v6address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-v6address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-aggregation-"))
   (function-names common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (function-tags common-lisp:nil :type
    (common-lisp:or map-filter-list common-lisp:null))
   (resource-ids common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (runtimes common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or lambda-function-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-aggregation
                    'make-lambda-function-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-names))
      (common-lisp:list
       (common-lisp:cons "functionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-tags))
      (common-lisp:list
       (common-lisp:cons "functionTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtimes))
      (common-lisp:list
       (common-lisp:cons "runtimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-aggregation-response-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (function-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (lambda-tags common-lisp:nil :type
    (common-lisp:or tag-map common-lisp:null))
   (last-modified-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (resource-id (common-lisp:error ":resourceid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (runtime common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-aggregation-response
                    'make-lambda-function-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "functionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-tags))
      (common-lisp:list
       (common-lisp:cons "lambdaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-aggregation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-metadata-"))
   (function-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (function-tags common-lisp:nil :type
    (common-lisp:or tag-map common-lisp:null))
   (layers common-lisp:nil :type
    (common-lisp:or lambda-layer-list common-lisp:null))
   (runtime common-lisp:nil :type (common-lisp:or runtime common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-metadata 'make-lambda-function-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "functionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-tags))
      (common-lisp:list
       (common-lisp:cons "functionTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-metadata))
   common-lisp:nil))
(common-lisp:deftype lambda-function-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-layer-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-layer-aggregation-"))
   (function-names common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (layer-arns common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-ids common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or lambda-layer-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-layer-aggregation 'make-lambda-layer-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-layer-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-layer-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-names))
      (common-lisp:list
       (common-lisp:cons "functionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-arns))
      (common-lisp:list
       (common-lisp:cons "layerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-layer-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-layer-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-layer-aggregation-response-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (function-name (common-lisp:error ":functionname is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (layer-arn (common-lisp:error ":layerarn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-id (common-lisp:error ":resourceid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-layer-aggregation-response
                    'make-lambda-layer-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-layer-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-layer-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "functionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-arn))
      (common-lisp:list
       (common-lisp:cons "layerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-layer-aggregation-response))
   common-lisp:nil))
(common-lisp:deftype lambda-layer-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lambda-layer-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-lambda-layer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lambda-layer-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-vpc-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-vpc-config-"))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-id-list common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-vpc-config 'make-lambda-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-vpc-config))
   common-lisp:nil))
(common-lisp:deftype last-seen () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layer-list ()
   '(trivial-types:proper-list lambda-layer-arn))
 (common-lisp:defun make-layer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lambda-layer-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-account-permissions-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-account-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-account-permissions-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-account-permissions-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (service common-lisp:nil :type (common-lisp:or service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-account-permissions-request
                    'make-list-account-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-account-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-account-permissions-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (permissions (common-lisp:error ":permissions is required") :type
    (common-lisp:or permissions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-account-permissions-response
                    'make-list-account-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scan-configurations-filter-criteria (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-cis-scan-configurations-filter-criteria-"))
   (scan-configuration-arn-filters common-lisp:nil :type
    (common-lisp:or cis-scan-configuration-arn-filter-list common-lisp:null))
   (scan-name-filters common-lisp:nil :type
    (common-lisp:or cis-scan-name-filter-list common-lisp:null))
   (target-resource-tag-filters common-lisp:nil :type
    (common-lisp:or resource-tag-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cis-scan-configurations-filter-criteria
                    'make-list-cis-scan-configurations-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-configurations-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-configurations-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-configuration-arn-filters))
      (common-lisp:list
       (common-lisp:cons "scanConfigurationArnFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-name-filters))
      (common-lisp:list
       (common-lisp:cons "scanNameFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-tag-filters))
      (common-lisp:list
       (common-lisp:cons "targetResourceTagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-configurations-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype list-cis-scan-configurations-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scan-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cis-scan-configurations-request-"))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or list-cis-scan-configurations-filter-criteria
                    common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-cis-scan-configurations-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or cis-scan-configurations-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or cis-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cis-scan-configurations-request
                    'make-list-cis-scan-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scan-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cis-scan-configurations-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (scan-configurations common-lisp:nil :type
    (common-lisp:or cis-scan-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cis-scan-configurations-response
                    'make-list-cis-scan-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-configurations))
      (common-lisp:list
       (common-lisp:cons "scanConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scan-results-aggregated-by-checks-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-cis-scan-results-aggregated-by-checks-request-"))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or cis-scan-results-aggregated-by-checks-filter-criteria
                    common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or cis-scan-results-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (scan-arn (common-lisp:error ":scanarn is required") :type
    (common-lisp:or cis-scan-arn common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or cis-scan-results-aggregated-by-checks-sort-by
                    common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or cis-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cis-scan-results-aggregated-by-checks-request
                    'make-list-cis-scan-results-aggregated-by-checks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-checks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-checks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-arn))
      (common-lisp:list
       (common-lisp:cons "scanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-checks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scan-results-aggregated-by-checks-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-cis-scan-results-aggregated-by-checks-response-"))
   (check-aggregations common-lisp:nil :type
    (common-lisp:or cis-check-aggregation-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cis-scan-results-aggregated-by-checks-response
                    'make-list-cis-scan-results-aggregated-by-checks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-checks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-checks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-aggregations))
      (common-lisp:list
       (common-lisp:cons "checkAggregations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-checks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scan-results-aggregated-by-target-resource-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-cis-scan-results-aggregated-by-target-resource-request-"))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or
     cis-scan-results-aggregated-by-target-resource-filter-criteria
     common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or cis-scan-results-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (scan-arn (common-lisp:error ":scanarn is required") :type
    (common-lisp:or cis-scan-arn common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or cis-scan-results-aggregated-by-target-resource-sort-by
                    common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or cis-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'list-cis-scan-results-aggregated-by-target-resource-request
   'make-list-cis-scan-results-aggregated-by-target-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-target-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-target-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-arn))
      (common-lisp:list
       (common-lisp:cons "scanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-target-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scan-results-aggregated-by-target-resource-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-cis-scan-results-aggregated-by-target-resource-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (target-resource-aggregations common-lisp:nil :type
    (common-lisp:or cis-target-resource-aggregation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'list-cis-scan-results-aggregated-by-target-resource-response
   'make-list-cis-scan-results-aggregated-by-target-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-target-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-target-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-aggregations))
      (common-lisp:list
       (common-lisp:cons "targetResourceAggregations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scan-results-aggregated-by-target-resource-response))
   common-lisp:nil))
(common-lisp:deftype list-cis-scans-detail-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scans-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cis-scans-filter-criteria-"))
   (failed-checks-filters common-lisp:nil :type
    (common-lisp:or cis-number-filter-list common-lisp:null))
   (scan-arn-filters common-lisp:nil :type
    (common-lisp:or cis-scan-arn-filter-list common-lisp:null))
   (scan-at-filters common-lisp:nil :type
    (common-lisp:or cis-scan-date-filter-list common-lisp:null))
   (scan-configuration-arn-filters common-lisp:nil :type
    (common-lisp:or cis-scan-configuration-arn-filter-list common-lisp:null))
   (scan-name-filters common-lisp:nil :type
    (common-lisp:or cis-scan-name-filter-list common-lisp:null))
   (scan-status-filters common-lisp:nil :type
    (common-lisp:or cis-scan-status-filter-list common-lisp:null))
   (scheduled-by-filters common-lisp:nil :type
    (common-lisp:or cis-scheduled-by-filter-list common-lisp:null))
   (target-account-id-filters common-lisp:nil :type
    (common-lisp:or account-id-filter-list common-lisp:null))
   (target-resource-id-filters common-lisp:nil :type
    (common-lisp:or resource-id-filter-list common-lisp:null))
   (target-resource-tag-filters common-lisp:nil :type
    (common-lisp:or resource-tag-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cis-scans-filter-criteria
                    'make-list-cis-scans-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scans-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scans-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-checks-filters))
      (common-lisp:list
       (common-lisp:cons "failedChecksFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-arn-filters))
      (common-lisp:list
       (common-lisp:cons "scanArnFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-at-filters))
      (common-lisp:list
       (common-lisp:cons "scanAtFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-configuration-arn-filters))
      (common-lisp:list
       (common-lisp:cons "scanConfigurationArnFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-name-filters))
      (common-lisp:list
       (common-lisp:cons "scanNameFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-status-filters))
      (common-lisp:list
       (common-lisp:cons "scanStatusFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-by-filters))
      (common-lisp:list
       (common-lisp:cons "scheduledByFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-account-id-filters))
      (common-lisp:list
       (common-lisp:cons "targetAccountIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-id-filters))
      (common-lisp:list
       (common-lisp:cons "targetResourceIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-tag-filters))
      (common-lisp:list
       (common-lisp:cons "targetResourceTagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scans-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype list-cis-scans-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scans-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cis-scans-request-"))
   (detail-level common-lisp:nil :type
    (common-lisp:or list-cis-scans-detail-level common-lisp:null))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or list-cis-scans-filter-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-cis-scans-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-cis-scans-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or cis-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cis-scans-request 'make-list-cis-scans-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scans-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scans-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-level))
      (common-lisp:list
       (common-lisp:cons "detailLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scans-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cis-scans-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cis-scans-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (scans common-lisp:nil :type
    (common-lisp:or cis-scan-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cis-scans-response 'make-list-cis-scans-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scans-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scans-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scans))
      (common-lisp:list
       (common-lisp:cons "scans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cis-scans-response))
   common-lisp:nil))
(common-lisp:deftype list-cis-scans-sort-by () 'common-lisp:string)
(common-lisp:deftype list-coverage-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-coverage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-coverage-request-"))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or coverage-filter-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-coverage-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-coverage-request 'make-list-coverage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-coverage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-coverage-response-"))
   (covered-resources common-lisp:nil :type
    (common-lisp:or covered-resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-coverage-response 'make-list-coverage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'covered-resources))
      (common-lisp:list
       (common-lisp:cons "coveredResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-coverage-statistics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-coverage-statistics-request-"))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or coverage-filter-criteria common-lisp:null))
   (group-by common-lisp:nil :type (common-lisp:or group-key common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-coverage-statistics-request
                    'make-list-coverage-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-coverage-statistics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-coverage-statistics-response-"))
   (counts-by-group common-lisp:nil :type
    (common-lisp:or counts-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (total-counts (common-lisp:error ":totalcounts is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-coverage-statistics-response
                    'make-list-coverage-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'counts-by-group))
      (common-lisp:list
       (common-lisp:cons "countsByGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-counts))
      (common-lisp:list
       (common-lisp:cons "totalCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-delegated-admin-accounts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-delegated-admin-accounts-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-delegated-admin-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-delegated-admin-accounts-request
                    'make-list-delegated-admin-accounts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-admin-accounts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-admin-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-delegated-admin-accounts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-delegated-admin-accounts-response-"))
   (delegated-admin-accounts common-lisp:nil :type
    (common-lisp:or delegated-admin-account-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-delegated-admin-accounts-response
                    'make-list-delegated-admin-accounts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-admin-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-admin-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-admin-accounts))
      (common-lisp:list
       (common-lisp:cons "delegatedAdminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-admin-accounts-response))
   common-lisp:nil))
(common-lisp:deftype list-delegated-admin-max-results () 'common-lisp:integer)
(common-lisp:deftype list-filter-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-filters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-filters-request-"))
   (action common-lisp:nil :type
    (common-lisp:or filter-action common-lisp:null))
   (arns common-lisp:nil :type
    (common-lisp:or filter-arn-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-filter-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-filters-request 'make-list-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-filters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arns))
      (common-lisp:list
       (common-lisp:cons "arns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-filters-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-filters-response-"))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-filters-response 'make-list-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-filters-response))
   common-lisp:nil))
(common-lisp:deftype list-finding-aggregations-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-finding-aggregations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-finding-aggregations-request-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (aggregation-request common-lisp:nil :type
    (common-lisp:or aggregation-request common-lisp:null))
   (aggregation-type (common-lisp:error ":aggregationtype is required") :type
    (common-lisp:or aggregation-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-finding-aggregations-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-finding-aggregations-request
                    'make-list-finding-aggregations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-request))
      (common-lisp:list
       (common-lisp:cons "aggregationRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-finding-aggregations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-finding-aggregations-response-"))
   (aggregation-type (common-lisp:error ":aggregationtype is required") :type
    (common-lisp:or aggregation-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (responses common-lisp:nil :type
    (common-lisp:or aggregation-response-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-finding-aggregations-response
                    'make-list-finding-aggregations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'responses))
      (common-lisp:list
       (common-lisp:cons "responses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregations-response))
   common-lisp:nil))
(common-lisp:deftype list-findings-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-request-"))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or filter-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-findings-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or sort-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-request 'make-list-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "sortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-response-"))
   (findings common-lisp:nil :type
    (common-lisp:or finding-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-response 'make-list-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   common-lisp:nil))
(common-lisp:deftype list-members-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-members-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (only-associated common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-request 'make-list-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'only-associated))
      (common-lisp:list
       (common-lisp:cons "onlyAssociated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-response-"))
   (members common-lisp:nil :type
    (common-lisp:or member-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-response 'make-list-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype list-usage-totals-max-results () 'common-lisp:integer)
(common-lisp:deftype list-usage-totals-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-usage-totals-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-usage-totals-request-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or usage-account-id-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-usage-totals-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or list-usage-totals-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-usage-totals-request
                    'make-list-usage-totals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-totals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-totals-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-totals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-usage-totals-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-usage-totals-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or list-usage-totals-next-token common-lisp:null))
   (totals common-lisp:nil :type
    (common-lisp:or usage-total-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-usage-totals-response
                    'make-list-usage-totals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-totals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-totals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'totals))
      (common-lisp:list
       (common-lisp:cons "totals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-totals-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype map-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (map-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-map-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or map-comparison common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or map-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or map-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'map-filter 'make-map-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input map-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input map-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input map-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype map-filter-list ()
   '(trivial-types:proper-list map-filter))
 (common-lisp:defun make-map-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list map-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype map-key () 'common-lisp:string)
(common-lisp:deftype map-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (member (:copier common-lisp:nil) (:conc-name "struct-shape-member-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (delegated-admin-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (relationship-status common-lisp:nil :type
    (common-lisp:or relationship-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-admin-account-id))
      (common-lisp:list
       (common-lisp:cons "delegatedAdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "relationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (member-account-ec2deep-inspection-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-account-ec2deep-inspection-status-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (activate-deep-inspection
    (common-lisp:error ":activatedeepinspection is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-account-ec2deep-inspection-status
                    'make-member-account-ec2deep-inspection-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-account-ec2deep-inspection-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-account-ec2deep-inspection-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activate-deep-inspection))
      (common-lisp:list
       (common-lisp:cons "activateDeepInspection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-account-ec2deep-inspection-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-account-ec2deep-inspection-status-list ()
   '(trivial-types:proper-list member-account-ec2deep-inspection-status))
 (common-lisp:defun make-member-account-ec2deep-inspection-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            member-account-ec2deep-inspection-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (member-account-ec2deep-inspection-status-state (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-member-account-ec2deep-inspection-status-state-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ec2deep-inspection-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-account-ec2deep-inspection-status-state
                    'make-member-account-ec2deep-inspection-status-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-account-ec2deep-inspection-status-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-account-ec2deep-inspection-status-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-account-ec2deep-inspection-status-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-account-ec2deep-inspection-status-state-list ()
   '(trivial-types:proper-list member-account-ec2deep-inspection-status-state))
 (common-lisp:defun make-member-account-ec2deep-inspection-status-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            member-account-ec2deep-inspection-status-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype member-list () '(trivial-types:proper-list member))
 (common-lisp:defun make-member-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metering-account-id () 'common-lisp:string)
(common-lisp:deftype monthly-cost-estimate () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (monthly-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-monthly-schedule-"))
   (day (common-lisp:error ":day is required") :type
    (common-lisp:or day common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monthly-schedule 'make-monthly-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monthly-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monthly-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day))
      (common-lisp:list
       (common-lisp:cons "day"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monthly-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-path (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-path-"))
   (steps common-lisp:nil :type (common-lisp:or step-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network-path 'make-network-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-path))
   common-lisp:nil))
(common-lisp:deftype network-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-reachability-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-reachability-details-"))
   (network-path (common-lisp:error ":networkpath is required") :type
    (common-lisp:or network-path common-lisp:null))
   (open-port-range (common-lisp:error ":openportrange is required") :type
    (common-lisp:or port-range common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or network-protocol common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-reachability-details
                    'make-network-reachability-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-reachability-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-reachability-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-path))
      (common-lisp:list
       (common-lisp:cons "networkPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-port-range))
      (common-lisp:list
       (common-lisp:cons "openPortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-reachability-details))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype non-empty-string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-non-empty-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (number-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-number-filter-"))
   (lower-inclusive common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (upper-inclusive common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'number-filter 'make-number-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input number-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input number-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-inclusive))
      (common-lisp:list
       (common-lisp:cons "lowerInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-inclusive))
      (common-lisp:list
       (common-lisp:cons "upperInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input number-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype number-filter-list ()
   '(trivial-types:proper-list number-filter))
 (common-lisp:defun make-number-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype one-account-id-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-one-account-id-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (one-time-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-one-time-schedule-")))
 (common-lisp:export
  (common-lisp:list 'one-time-schedule 'make-one-time-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input one-time-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input one-time-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input one-time-schedule))
   common-lisp:nil))
(common-lisp:deftype operation () 'common-lisp:string)
(common-lisp:deftype owner-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (package-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-aggregation-"))
   (package-names common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or package-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-aggregation 'make-package-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-names))
      (common-lisp:list
       (common-lisp:cons "packageNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (package-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-aggregation-response-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (package-name (common-lisp:error ":packagename is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-aggregation-response
                    'make-package-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-aggregation-response))
   common-lisp:nil))
(common-lisp:deftype package-architecture () 'common-lisp:string)
(common-lisp:deftype package-epoch () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (package-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-filter-"))
   (architecture common-lisp:nil :type
    (common-lisp:or string-filter common-lisp:null))
   (epoch common-lisp:nil :type
    (common-lisp:or number-filter common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string-filter common-lisp:null))
   (release common-lisp:nil :type
    (common-lisp:or string-filter common-lisp:null))
   (source-lambda-layer-arn common-lisp:nil :type
    (common-lisp:or string-filter common-lisp:null))
   (source-layer-hash common-lisp:nil :type
    (common-lisp:or string-filter common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or string-filter common-lisp:null)))
 (common-lisp:export (common-lisp:list 'package-filter 'make-package-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release))
      (common-lisp:list
       (common-lisp:cons "release"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-lambda-layer-arn))
      (common-lisp:list
       (common-lisp:cons "sourceLambdaLayerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-layer-hash))
      (common-lisp:list
       (common-lisp:cons "sourceLayerHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-filter-list ()
   '(trivial-types:proper-list package-filter))
 (common-lisp:defun make-package-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-manager () 'common-lisp:string)
(common-lisp:deftype package-name () 'common-lisp:string)
(common-lisp:deftype package-release () 'common-lisp:string)
(common-lisp:deftype package-sort-by () 'common-lisp:string)
(common-lisp:deftype package-type () 'common-lisp:string)
(common-lisp:deftype package-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (package-vulnerability-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-vulnerability-details-"))
   (cvss common-lisp:nil :type
    (common-lisp:or cvss-score-list common-lisp:null))
   (reference-urls common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (related-vulnerabilities common-lisp:nil :type
    (common-lisp:or vulnerability-id-list common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vendor-created-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (vendor-severity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vendor-updated-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (vulnerability-id (common-lisp:error ":vulnerabilityid is required") :type
    (common-lisp:or vulnerability-id common-lisp:null))
   (vulnerable-packages common-lisp:nil :type
    (common-lisp:or vulnerable-package-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-vulnerability-details
                    'make-package-vulnerability-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss))
      (common-lisp:list
       (common-lisp:cons "cvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "referenceUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "relatedVulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "sourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-created-at))
      (common-lisp:list
       (common-lisp:cons "vendorCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-severity))
      (common-lisp:list
       (common-lisp:cons "vendorSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-updated-at))
      (common-lisp:list
       (common-lisp:cons "vendorUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-id))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerable-packages))
      (common-lisp:list
       (common-lisp:cons "vulnerablePackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   common-lisp:nil))
(common-lisp:deftype path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path-list () '(trivial-types:proper-list path))
 (common-lisp:defun make-path-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-permission-"))
   (operation (common-lisp:error ":operation is required") :type
    (common-lisp:or operation common-lisp:null))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service common-lisp:null)))
 (common-lisp:export (common-lisp:list 'permission 'make-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype permissions () '(trivial-types:proper-list permission))
 (common-lisp:defun make-permissions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platform-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-platform-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-version () 'common-lisp:string)
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (port-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-range-"))
   (begin (common-lisp:error ":begin is required") :type
    (common-lisp:or port common-lisp:null))
   (end (common-lisp:error ":end is required") :type
    (common-lisp:or port common-lisp:null)))
 (common-lisp:export (common-lisp:list 'port-range 'make-port-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin))
      (common-lisp:list
       (common-lisp:cons "begin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (port-range-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-range-filter-"))
   (begin-inclusive common-lisp:nil :type
    (common-lisp:or port common-lisp:null))
   (end-inclusive common-lisp:nil :type
    (common-lisp:or port common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'port-range-filter 'make-port-range-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-inclusive))
      (common-lisp:list
       (common-lisp:cons "beginInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-inclusive))
      (common-lisp:list
       (common-lisp:cons "endInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-range-filter-list ()
   '(trivial-types:proper-list port-range-filter))
 (common-lisp:defun make-port-range-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-range-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype product () 'common-lisp:string)
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-"))
   (url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (text common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-urls ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-reference-urls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype related-vulnerabilities ()
   '(trivial-types:proper-list related-vulnerability))
 (common-lisp:defun make-related-vulnerabilities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list related-vulnerability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype related-vulnerability () 'common-lisp:string)
(common-lisp:deftype relationship-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (remediation (:copier common-lisp:nil)
      (:conc-name "struct-shape-remediation-"))
   (recommendation common-lisp:nil :type
    (common-lisp:or recommendation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'remediation 'make-remediation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remediation))
   common-lisp:nil))
(common-lisp:deftype report-format () 'common-lisp:string)
(common-lisp:deftype report-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype report-target-accounts ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-report-target-accounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reporting-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (repository-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-aggregation-"))
   (repositories common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or repository-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-aggregation 'make-repository-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-aggregation-response-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (affected-images common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-aggregation-response
                    'make-repository-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affected-images))
      (common-lisp:list
       (common-lisp:cons "affectedImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-aggregation-response))
   common-lisp:nil))
(common-lisp:deftype repository-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reset-encryption-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-encryption-key-request-"))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (scan-type (common-lisp:error ":scantype is required") :type
    (common-lisp:or scan-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-encryption-key-request
                    'make-reset-encryption-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-encryption-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-encryption-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "scanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-encryption-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-encryption-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-encryption-key-response-")))
 (common-lisp:export
  (common-lisp:list 'reset-encryption-key-response
                    'make-reset-encryption-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-encryption-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-encryption-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-encryption-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource (:copier common-lisp:nil) (:conc-name "struct-shape-resource-"))
   (details common-lisp:nil :type
    (common-lisp:or resource-details common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (partition common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-details-"))
   (aws-ec2instance common-lisp:nil :type
    (common-lisp:or aws-ec2instance-details common-lisp:null))
   (aws-ecr-container-image common-lisp:nil :type
    (common-lisp:or aws-ecr-container-image-details common-lisp:null))
   (aws-lambda-function common-lisp:nil :type
    (common-lisp:or aws-lambda-function-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2instance))
      (common-lisp:list
       (common-lisp:cons "awsEc2Instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ecr-container-image))
      (common-lisp:list
       (common-lisp:cons "awsEcrContainerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-lambda-function))
      (common-lisp:list
       (common-lisp:cons "awsLambdaFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-filter-criteria-"))
   (account-id common-lisp:nil :type
    (common-lisp:or resource-string-filter-list common-lisp:null))
   (ec2instance-tags common-lisp:nil :type
    (common-lisp:or resource-map-filter-list common-lisp:null))
   (ecr-image-tags common-lisp:nil :type
    (common-lisp:or resource-string-filter-list common-lisp:null))
   (ecr-repository-name common-lisp:nil :type
    (common-lisp:or resource-string-filter-list common-lisp:null))
   (lambda-function-name common-lisp:nil :type
    (common-lisp:or resource-string-filter-list common-lisp:null))
   (lambda-function-tags common-lisp:nil :type
    (common-lisp:or resource-map-filter-list common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-string-filter-list common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-string-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-filter-criteria 'make-resource-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-tags))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-image-tags))
      (common-lisp:list
       (common-lisp:cons "ecrImageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-repository-name))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-name))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-tags))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-filter-criteria))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-id-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-resource-id-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-map-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-map-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-map-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or resource-map-comparison common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-map-filter 'make-resource-map-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-map-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-map-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-map-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-map-filter-list ()
   '(trivial-types:proper-list resource-map-filter))
 (common-lisp:defun make-resource-map-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-map-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (inspector2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-scan-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-scan-metadata-"))
   (ec2 common-lisp:nil :type (common-lisp:or ec2metadata common-lisp:null))
   (ecr-image common-lisp:nil :type
    (common-lisp:or ecr-container-image-metadata common-lisp:null))
   (ecr-repository common-lisp:nil :type
    (common-lisp:or ecr-repository-metadata common-lisp:null))
   (lambda-function common-lisp:nil :type
    (common-lisp:or lambda-function-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-scan-metadata 'make-resource-scan-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-scan-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-scan-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2))
      (common-lisp:list
       (common-lisp:cons "ec2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-image))
      (common-lisp:list
       (common-lisp:cons "ecrImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-repository))
      (common-lisp:list
       (common-lisp:cons "ecrRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function))
      (common-lisp:list
       (common-lisp:cons "lambdaFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-scan-metadata))
   common-lisp:nil))
(common-lisp:deftype resource-scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-state-"))
   (ec2 (common-lisp:error ":ec2 is required") :type
    (common-lisp:or state common-lisp:null))
   (ecr (common-lisp:error ":ecr is required") :type
    (common-lisp:or state common-lisp:null))
   (lambda common-lisp:nil :type (common-lisp:or state common-lisp:null))
   (lambda-code common-lisp:nil :type (common-lisp:or state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-state 'make-resource-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2))
      (common-lisp:list
       (common-lisp:cons "ec2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr))
      (common-lisp:list
       (common-lisp:cons "ecr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-code))
      (common-lisp:list
       (common-lisp:cons "lambdaCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-status-"))
   (ec2 (common-lisp:error ":ec2 is required") :type
    (common-lisp:or status common-lisp:null))
   (ecr (common-lisp:error ":ecr is required") :type
    (common-lisp:or status common-lisp:null))
   (lambda common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (lambda-code common-lisp:nil :type
    (common-lisp:or status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-status 'make-resource-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2))
      (common-lisp:list
       (common-lisp:cons "ec2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr))
      (common-lisp:list
       (common-lisp:cons "ecr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-code))
      (common-lisp:list
       (common-lisp:cons "lambdaCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-status))
   common-lisp:nil))
(common-lisp:deftype resource-string-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-string-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-string-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or resource-string-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or resource-string-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-string-filter 'make-resource-string-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-string-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-string-filter-list ()
   '(trivial-types:proper-list resource-string-filter))
 (common-lisp:defun make-resource-string-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-string-input () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-tag-filter-list ()
   '(trivial-types:proper-list tag-filter))
 (common-lisp:defun make-resource-tag-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype risk-score () 'common-lisp:integer)
(common-lisp:deftype rule-id () 'common-lisp:string)
(common-lisp:deftype runtime () 'common-lisp:string)
(common-lisp:deftype sbom-report-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scan-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-scan-status-"))
   (reason (common-lisp:error ":reason is required") :type
    (common-lisp:or scan-status-reason common-lisp:null))
   (status-code (common-lisp:error ":statuscode is required") :type
    (common-lisp:or scan-status-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scan-status 'make-scan-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-status))
   common-lisp:nil))
(common-lisp:deftype scan-status-code () 'common-lisp:string)
(common-lisp:deftype scan-status-reason () 'common-lisp:string)
(common-lisp:deftype scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schedule (:copier common-lisp:nil) (:conc-name "struct-shape-schedule-"))
   (daily common-lisp:nil :type
    (common-lisp:or daily-schedule common-lisp:null))
   (monthly common-lisp:nil :type
    (common-lisp:or monthly-schedule common-lisp:null))
   (one-time common-lisp:nil :type
    (common-lisp:or one-time-schedule common-lisp:null))
   (weekly common-lisp:nil :type
    (common-lisp:or weekly-schedule common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily))
      (common-lisp:list
       (common-lisp:cons "daily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly))
      (common-lisp:list
       (common-lisp:cons "monthly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'one-time))
      (common-lisp:list
       (common-lisp:cons "oneTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weekly))
      (common-lisp:list
       (common-lisp:cons "weekly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-vulnerabilities-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-vulnerabilities-filter-criteria-"))
   (vulnerability-ids (common-lisp:error ":vulnerabilityids is required") :type
    (common-lisp:or vuln-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-vulnerabilities-filter-criteria
                    'make-search-vulnerabilities-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-vulnerabilities-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-vulnerabilities-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-ids))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-vulnerabilities-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-vulnerabilities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-vulnerabilities-request-"))
   (filter-criteria (common-lisp:error ":filtercriteria is required") :type
    (common-lisp:or search-vulnerabilities-filter-criteria common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-vulnerabilities-request
                    'make-search-vulnerabilities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-vulnerabilities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-vulnerabilities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-vulnerabilities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-vulnerabilities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-vulnerabilities-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (vulnerabilities (common-lisp:error ":vulnerabilities is required") :type
    (common-lisp:or vulnerabilities common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-vulnerabilities-response
                    'make-search-vulnerabilities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-vulnerabilities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-vulnerabilities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "vulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-vulnerabilities-response))
   common-lisp:nil))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (send-cis-session-health-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-cis-session-health-request-"))
   (scan-job-id (common-lisp:error ":scanjobid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (session-token (common-lisp:error ":sessiontoken is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-cis-session-health-request
                    'make-send-cis-session-health-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-health-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-job-id))
      (common-lisp:list
       (common-lisp:cons "scanJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-health-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-cis-session-health-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-cis-session-health-response-")))
 (common-lisp:export
  (common-lisp:list 'send-cis-session-health-response
                    'make-send-cis-session-health-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-health-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-health-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-health-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-cis-session-telemetry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-cis-session-telemetry-request-"))
   (messages (common-lisp:error ":messages is required") :type
    (common-lisp:or cis-session-messages common-lisp:null))
   (scan-job-id (common-lisp:error ":scanjobid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (session-token (common-lisp:error ":sessiontoken is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-cis-session-telemetry-request
                    'make-send-cis-session-telemetry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-telemetry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-telemetry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-job-id))
      (common-lisp:list
       (common-lisp:cons "scanJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-telemetry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-cis-session-telemetry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-cis-session-telemetry-response-")))
 (common-lisp:export
  (common-lisp:list 'send-cis-session-telemetry-response
                    'make-send-cis-session-telemetry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-telemetry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-telemetry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-cis-session-telemetry-response))
   common-lisp:nil))
(common-lisp:deftype service () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (inspector2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id)))
(common-lisp:deftype severity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (severity-counts (:copier common-lisp:nil)
      (:conc-name "struct-shape-severity-counts-"))
   (all common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (critical common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (high common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (medium common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'severity-counts 'make-severity-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all))
      (common-lisp:list
       (common-lisp:cons "all"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'critical))
      (common-lisp:list
       (common-lisp:cons "critical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'high))
      (common-lisp:list
       (common-lisp:cons "high"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'medium))
      (common-lisp:list
       (common-lisp:cons "medium"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity-counts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-sort-criteria-"))
   (field (common-lisp:error ":field is required") :type
    (common-lisp:or sort-field common-lisp:null))
   (sort-order (common-lisp:error ":sortorder is required") :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sort-criteria 'make-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criteria))
   common-lisp:nil))
(common-lisp:deftype sort-field () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype source-layer-hash () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-cis-session-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-cis-session-message-"))
   (session-token (common-lisp:error ":sessiontoken is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-cis-session-message
                    'make-start-cis-session-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-cis-session-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-cis-session-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-cis-session-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-cis-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-cis-session-request-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or start-cis-session-message common-lisp:null))
   (scan-job-id (common-lisp:error ":scanjobid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-cis-session-request
                    'make-start-cis-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-cis-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-cis-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-job-id))
      (common-lisp:list
       (common-lisp:cons "scanJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-cis-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-cis-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-cis-session-response-")))
 (common-lisp:export
  (common-lisp:list 'start-cis-session-response
                    'make-start-cis-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-cis-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-cis-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-cis-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (state (:copier common-lisp:nil) (:conc-name "struct-shape-state-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or error-code common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'state 'make-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input state))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (status-counts (:copier common-lisp:nil)
      (:conc-name "struct-shape-status-counts-"))
   (failed common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (passed common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (skipped common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'status-counts 'make-status-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passed))
      (common-lisp:list
       (common-lisp:cons "passed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped))
      (common-lisp:list
       (common-lisp:cons "skipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-counts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (step (:copier common-lisp:nil) (:conc-name "struct-shape-step-"))
   (component-id (common-lisp:error ":componentid is required") :type
    (common-lisp:or component common-lisp:null))
   (component-type (common-lisp:error ":componenttype is required") :type
    (common-lisp:or component-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'step 'make-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-id))
      (common-lisp:list
       (common-lisp:cons "componentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype step-list () '(trivial-types:proper-list step))
 (common-lisp:defun make-step-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-cis-message-progress (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-cis-message-progress-"))
   (error-checks common-lisp:nil :type
    (common-lisp:or check-count common-lisp:null))
   (failed-checks common-lisp:nil :type
    (common-lisp:or check-count common-lisp:null))
   (informational-checks common-lisp:nil :type
    (common-lisp:or check-count common-lisp:null))
   (not-applicable-checks common-lisp:nil :type
    (common-lisp:or check-count common-lisp:null))
   (not-evaluated-checks common-lisp:nil :type
    (common-lisp:or check-count common-lisp:null))
   (successful-checks common-lisp:nil :type
    (common-lisp:or check-count common-lisp:null))
   (total-checks common-lisp:nil :type
    (common-lisp:or check-count common-lisp:null))
   (unknown-checks common-lisp:nil :type
    (common-lisp:or check-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-cis-message-progress
                    'make-stop-cis-message-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-message-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-message-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-checks))
      (common-lisp:list
       (common-lisp:cons "errorChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-checks))
      (common-lisp:list
       (common-lisp:cons "failedChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'informational-checks))
      (common-lisp:list
       (common-lisp:cons "informationalChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-applicable-checks))
      (common-lisp:list
       (common-lisp:cons "notApplicableChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-evaluated-checks))
      (common-lisp:list
       (common-lisp:cons "notEvaluatedChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-checks))
      (common-lisp:list
       (common-lisp:cons "successfulChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-checks))
      (common-lisp:list
       (common-lisp:cons "totalChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown-checks))
      (common-lisp:list
       (common-lisp:cons "unknownChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-message-progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-cis-session-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-cis-session-message-"))
   (benchmark-profile common-lisp:nil :type
    (common-lisp:or benchmark-profile common-lisp:null))
   (benchmark-version common-lisp:nil :type
    (common-lisp:or benchmark-version common-lisp:null))
   (compute-platform common-lisp:nil :type
    (common-lisp:or compute-platform common-lisp:null))
   (progress (common-lisp:error ":progress is required") :type
    (common-lisp:or stop-cis-message-progress common-lisp:null))
   (reason common-lisp:nil :type (common-lisp:or reason common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or stop-cis-session-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-cis-session-message 'make-stop-cis-session-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-session-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-session-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'benchmark-profile))
      (common-lisp:list
       (common-lisp:cons "benchmarkProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'benchmark-version))
      (common-lisp:list
       (common-lisp:cons "benchmarkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-session-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-cis-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-cis-session-request-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or stop-cis-session-message common-lisp:null))
   (scan-job-id (common-lisp:error ":scanjobid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (session-token (common-lisp:error ":sessiontoken is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-cis-session-request 'make-stop-cis-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-job-id))
      (common-lisp:list
       (common-lisp:cons "scanJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-cis-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-cis-session-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-cis-session-response
                    'make-stop-cis-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-cis-session-response))
   common-lisp:nil))
(common-lisp:deftype stop-cis-session-status () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (string-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or string-comparison common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string-input common-lisp:null)))
 (common-lisp:export (common-lisp:list 'string-filter 'make-string-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input string-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-filter-list ()
   '(trivial-types:proper-list string-filter))
 (common-lisp:defun make-string-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string-input () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (suggested-fix (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggested-fix-"))
   (code common-lisp:nil :type
    (common-lisp:or suggested-fix-code-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or suggested-fix-description-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'suggested-fix 'make-suggested-fix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggested-fix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggested-fix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggested-fix))
   common-lisp:nil))
(common-lisp:deftype suggested-fix-code-string () 'common-lisp:string)
(common-lisp:deftype suggested-fix-description-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype suggested-fixes ()
   '(trivial-types:proper-list suggested-fix))
 (common-lisp:defun make-suggested-fixes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list suggested-fix))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-filter-"))
   (comparison (common-lisp:error ":comparison is required") :type
    (common-lisp:or tag-comparison common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-filter 'make-tag-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-filter))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-value-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target () 'common-lisp:string)
(common-lisp:deftype target-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-account-list ()
   '(trivial-types:proper-list target-account))
 (common-lisp:defun make-target-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype target-resource-tags () 'common-lisp:hash-table)
 (common-lisp:defun make-target-resource-tags
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype target-status-filter-list ()
   '(trivial-types:proper-list cis-target-status-filter))
 (common-lisp:defun make-target-status-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cis-target-status-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype target-status-reason-filter-list ()
   '(trivial-types:proper-list cis-target-status-reason-filter))
 (common-lisp:defun make-target-status-reason-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cis-target-status-reason-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype targets () '(trivial-types:proper-list target))
 (common-lisp:defun make-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (inspector2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (time (:copier common-lisp:nil) (:conc-name "struct-shape-time-"))
   (time-of-day (common-lisp:error ":timeofday is required") :type
    (common-lisp:or time-of-day common-lisp:null))
   (timezone (common-lisp:error ":timezone is required") :type
    (common-lisp:or timezone common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time 'make-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-of-day))
      (common-lisp:list
       (common-lisp:cons "timeOfDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time))
   common-lisp:nil))
(common-lisp:deftype time-of-day () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (title-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-title-aggregation-"))
   (finding-type common-lisp:nil :type
    (common-lisp:or aggregation-finding-type common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or aggregation-resource-type common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or title-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (titles common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (vulnerability-ids common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'title-aggregation 'make-title-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input title-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input title-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-type))
      (common-lisp:list
       (common-lisp:cons "findingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'titles))
      (common-lisp:list
       (common-lisp:cons "titles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-ids))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input title-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (title-aggregation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-title-aggregation-response-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vulnerability-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'title-aggregation-response
                    'make-title-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          title-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          title-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-id))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          title-aggregation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype title-filter-list ()
   '(trivial-types:proper-list cis-string-filter))
 (common-lisp:defun make-title-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cis-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype title-sort-by () 'common-lisp:string)
(common-lisp:deftype tool () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tools () '(trivial-types:proper-list tool))
 (common-lisp:defun make-tools
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tool))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ttp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ttps () '(trivial-types:proper-list ttp))
 (common-lisp:defun make-ttps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ttp))
   aws-sdk/generator/shape::members))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cis-scan-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cis-scan-configuration-request-"))
   (scan-configuration-arn
    (common-lisp:error ":scanconfigurationarn is required") :type
    (common-lisp:or cis-scan-configuration-arn common-lisp:null))
   (scan-name common-lisp:nil :type
    (common-lisp:or cis-scan-name common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (security-level common-lisp:nil :type
    (common-lisp:or cis-security-level common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or update-cis-targets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cis-scan-configuration-request
                    'make-update-cis-scan-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cis-scan-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cis-scan-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "scanConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-name))
      (common-lisp:list
       (common-lisp:cons "scanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-level))
      (common-lisp:list
       (common-lisp:cons "securityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cis-scan-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cis-scan-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cis-scan-configuration-response-"))
   (scan-configuration-arn
    (common-lisp:error ":scanconfigurationarn is required") :type
    (common-lisp:or cis-scan-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cis-scan-configuration-response
                    'make-update-cis-scan-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cis-scan-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cis-scan-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "scanConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cis-scan-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cis-targets (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cis-targets-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or target-account-list common-lisp:null))
   (target-resource-tags common-lisp:nil :type
    (common-lisp:or target-resource-tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cis-targets 'make-update-cis-targets))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-cis-targets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-cis-targets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-tags))
      (common-lisp:list
       (common-lisp:cons "targetResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-cis-targets))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-configuration-request-"))
   (ecr-configuration (common-lisp:error ":ecrconfiguration is required") :type
    (common-lisp:or ecr-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-configuration-request
                    'make-update-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-configuration))
      (common-lisp:list
       (common-lisp:cons "ecrConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-configuration-response
                    'make-update-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ec2deep-inspection-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-ec2deep-inspection-configuration-request-"))
   (activate-deep-inspection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (package-paths common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ec2deep-inspection-configuration-request
                    'make-update-ec2deep-inspection-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ec2deep-inspection-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ec2deep-inspection-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activate-deep-inspection))
      (common-lisp:list
       (common-lisp:cons "activateDeepInspection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-paths))
      (common-lisp:list
       (common-lisp:cons "packagePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ec2deep-inspection-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ec2deep-inspection-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-ec2deep-inspection-configuration-response-"))
   (error-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (org-package-paths common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null))
   (package-paths common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ec2deep-inspection-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ec2deep-inspection-configuration-response
                    'make-update-ec2deep-inspection-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ec2deep-inspection-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ec2deep-inspection-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'org-package-paths))
      (common-lisp:list
       (common-lisp:cons "orgPackagePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-paths))
      (common-lisp:list
       (common-lisp:cons "packagePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ec2deep-inspection-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-encryption-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-encryption-key-request-"))
   (kms-key-id (common-lisp:error ":kmskeyid is required") :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (scan-type (common-lisp:error ":scantype is required") :type
    (common-lisp:or scan-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-encryption-key-request
                    'make-update-encryption-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-encryption-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-encryption-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "scanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-encryption-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-encryption-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-encryption-key-response-")))
 (common-lisp:export
  (common-lisp:list 'update-encryption-key-response
                    'make-update-encryption-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-encryption-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-encryption-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-encryption-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-filter-request-"))
   (action common-lisp:nil :type
    (common-lisp:or filter-action common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or filter-description common-lisp:null))
   (filter-arn (common-lisp:error ":filterarn is required") :type
    (common-lisp:or filter-arn common-lisp:null))
   (filter-criteria common-lisp:nil :type
    (common-lisp:or filter-criteria common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or filter-name common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or filter-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-filter-request 'make-update-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-arn))
      (common-lisp:list
       (common-lisp:cons "filterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "filterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-filter-response-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or filter-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-filter-response 'make-update-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-org-ec2deep-inspection-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-org-ec2deep-inspection-configuration-request-"))
   (org-package-paths (common-lisp:error ":orgpackagepaths is required") :type
    (common-lisp:or path-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-org-ec2deep-inspection-configuration-request
                    'make-update-org-ec2deep-inspection-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-org-ec2deep-inspection-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-org-ec2deep-inspection-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'org-package-paths))
      (common-lisp:list
       (common-lisp:cons "orgPackagePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-org-ec2deep-inspection-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-org-ec2deep-inspection-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-org-ec2deep-inspection-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-org-ec2deep-inspection-configuration-response
                    'make-update-org-ec2deep-inspection-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-org-ec2deep-inspection-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-org-ec2deep-inspection-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-org-ec2deep-inspection-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-organization-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-organization-configuration-request-"))
   (auto-enable (common-lisp:error ":autoenable is required") :type
    (common-lisp:or auto-enable common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-request
                    'make-update-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "autoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-organization-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-organization-configuration-response-"))
   (auto-enable (common-lisp:error ":autoenable is required") :type
    (common-lisp:or auto-enable common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-response
                    'make-update-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "autoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (usage (:copier common-lisp:nil) (:conc-name "struct-shape-usage-"))
   (currency common-lisp:nil :type (common-lisp:or currency common-lisp:null))
   (estimated-monthly-cost common-lisp:nil :type
    (common-lisp:or monthly-cost-estimate common-lisp:null))
   (total common-lisp:nil :type (common-lisp:or usage-value common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or usage-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'usage 'make-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage))
   common-lisp:nil))
(common-lisp:deftype usage-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype usage-account-id-list ()
   '(trivial-types:proper-list usage-account-id))
 (common-lisp:defun make-usage-account-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype usage-list () '(trivial-types:proper-list usage))
 (common-lisp:defun make-usage-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (usage-total (:copier common-lisp:nil)
      (:conc-name "struct-shape-usage-total-"))
   (account-id common-lisp:nil :type
    (common-lisp:or metering-account-id common-lisp:null))
   (usage common-lisp:nil :type (common-lisp:or usage-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'usage-total 'make-usage-total))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-total))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-total))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-total))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-total-list ()
   '(trivial-types:proper-list usage-total))
 (common-lisp:defun make-usage-total-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-total))
   aws-sdk/generator/shape::members))
(common-lisp:deftype usage-type () 'common-lisp:string)
(common-lisp:deftype usage-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (inspector2-error)
     ((fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-fields
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-fields ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype vendor () 'common-lisp:string)
(common-lisp:deftype vendor-created-at () 'common-lisp:string)
(common-lisp:deftype vendor-severity () 'common-lisp:string)
(common-lisp:deftype vendor-updated-at () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype vuln-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vuln-id-list () '(trivial-types:proper-list vuln-id))
 (common-lisp:defun make-vuln-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vuln-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vulnerabilities ()
   '(trivial-types:proper-list vulnerability))
 (common-lisp:defun make-vulnerabilities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerability))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vulnerability (:copier common-lisp:nil)
      (:conc-name "struct-shape-vulnerability-"))
   (atig-data common-lisp:nil :type
    (common-lisp:or atig-data common-lisp:null))
   (cisa-data common-lisp:nil :type
    (common-lisp:or cisa-data common-lisp:null))
   (cvss2 common-lisp:nil :type (common-lisp:or cvss2 common-lisp:null))
   (cvss3 common-lisp:nil :type (common-lisp:or cvss3 common-lisp:null))
   (cwes common-lisp:nil :type (common-lisp:or cwes common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or vulnerability-description common-lisp:null))
   (detection-platforms common-lisp:nil :type
    (common-lisp:or detection-platforms common-lisp:null))
   (epss common-lisp:nil :type (common-lisp:or epss common-lisp:null))
   (exploit-observed common-lisp:nil :type
    (common-lisp:or exploit-observed common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (reference-urls common-lisp:nil :type
    (common-lisp:or vulnerability-reference-urls common-lisp:null))
   (related-vulnerabilities common-lisp:nil :type
    (common-lisp:or related-vulnerabilities common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or vulnerability-source common-lisp:null))
   (source-url common-lisp:nil :type
    (common-lisp:or vulnerability-source-url common-lisp:null))
   (vendor-created-at common-lisp:nil :type
    (common-lisp:or vendor-created-at common-lisp:null))
   (vendor-severity common-lisp:nil :type
    (common-lisp:or vendor-severity common-lisp:null))
   (vendor-updated-at common-lisp:nil :type
    (common-lisp:or vendor-updated-at common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vulnerability 'make-vulnerability))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vulnerability))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vulnerability))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'atig-data))
      (common-lisp:list
       (common-lisp:cons "atigData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cisa-data))
      (common-lisp:list
       (common-lisp:cons "cisaData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss2))
      (common-lisp:list
       (common-lisp:cons "cvss2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss3))
      (common-lisp:list
       (common-lisp:cons "cvss3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cwes))
      (common-lisp:list
       (common-lisp:cons "cwes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detection-platforms))
      (common-lisp:list
       (common-lisp:cons "detectionPlatforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epss))
      (common-lisp:list
       (common-lisp:cons "epss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exploit-observed))
      (common-lisp:list
       (common-lisp:cons "exploitObserved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "referenceUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "relatedVulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "sourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-created-at))
      (common-lisp:list
       (common-lisp:cons "vendorCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-severity))
      (common-lisp:list
       (common-lisp:cons "vendorSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-updated-at))
      (common-lisp:list
       (common-lisp:cons "vendorUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vulnerability))
   common-lisp:nil))
(common-lisp:deftype vulnerability-description () 'common-lisp:string)
(common-lisp:deftype vulnerability-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vulnerability-id-list ()
   '(trivial-types:proper-list vulnerability-id))
 (common-lisp:defun make-vulnerability-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerability-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vulnerability-reference-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vulnerability-reference-urls ()
   '(trivial-types:proper-list vulnerability-reference-url))
 (common-lisp:defun make-vulnerability-reference-urls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vulnerability-reference-url))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vulnerability-source () 'common-lisp:string)
(common-lisp:deftype vulnerability-source-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vulnerable-package (:copier common-lisp:nil)
      (:conc-name "struct-shape-vulnerable-package-"))
   (arch common-lisp:nil :type
    (common-lisp:or package-architecture common-lisp:null))
   (epoch common-lisp:nil :type
    (common-lisp:or package-epoch common-lisp:null))
   (file-path common-lisp:nil :type
    (common-lisp:or file-path common-lisp:null))
   (fixed-in-version common-lisp:nil :type
    (common-lisp:or package-version common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or package-name common-lisp:null))
   (package-manager common-lisp:nil :type
    (common-lisp:or package-manager common-lisp:null))
   (release common-lisp:nil :type
    (common-lisp:or package-release common-lisp:null))
   (remediation common-lisp:nil :type
    (common-lisp:or vulnerable-package-remediation common-lisp:null))
   (source-lambda-layer-arn common-lisp:nil :type
    (common-lisp:or lambda-layer-arn common-lisp:null))
   (source-layer-hash common-lisp:nil :type
    (common-lisp:or source-layer-hash common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or package-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vulnerable-package 'make-vulnerable-package))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vulnerable-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vulnerable-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arch))
      (common-lisp:list
       (common-lisp:cons "arch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-in-version))
      (common-lisp:list
       (common-lisp:cons "fixedInVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-manager))
      (common-lisp:list
       (common-lisp:cons "packageManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release))
      (common-lisp:list
       (common-lisp:cons "release"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-lambda-layer-arn))
      (common-lisp:list
       (common-lisp:cons "sourceLambdaLayerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-layer-hash))
      (common-lisp:list
       (common-lisp:cons "sourceLayerHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vulnerable-package))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vulnerable-package-list ()
   '(trivial-types:proper-list vulnerable-package))
 (common-lisp:defun make-vulnerable-package-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerable-package))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vulnerable-package-remediation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (weekly-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-weekly-schedule-"))
   (days (common-lisp:error ":days is required") :type
    (common-lisp:or days-list common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'weekly-schedule 'make-weekly-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input weekly-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input weekly-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input weekly-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/members/associate"
                                                        "AssociateMember"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-member))
(common-lisp:progn
 (common-lisp:defun batch-get-account-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-account-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/status/batch/get"
                                                        "BatchGetAccountStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-account-status))
(common-lisp:progn
 (common-lisp:defun batch-get-code-snippet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-arns)
   (common-lisp:declare (common-lisp:ignorable finding-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-code-snippet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/codesnippet/batchget"
                                                        "BatchGetCodeSnippet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-code-snippet))
(common-lisp:progn
 (common-lisp:defun batch-get-finding-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-arns)
   (common-lisp:declare (common-lisp:ignorable finding-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-finding-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/findings/details/batch/get"
                                                        "BatchGetFindingDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-finding-details))
(common-lisp:progn
 (common-lisp:defun batch-get-free-trial-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-free-trial-info-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/freetrialinfo/batchget"
                                                        "BatchGetFreeTrialInfo"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-free-trial-info))
(common-lisp:progn
 (common-lisp:defun batch-get-member-ec2deep-inspection-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-member-ec2deep-inspection-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ec2deepinspectionstatus/member/batch/get"
                                                        "BatchGetMemberEc2DeepInspectionStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-member-ec2deep-inspection-status))
(common-lisp:progn
 (common-lisp:defun batch-update-member-ec2deep-inspection-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-update-member-ec2deep-inspection-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ec2deepinspectionstatus/member/batch/update"
                                                        "BatchUpdateMemberEc2DeepInspectionStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-member-ec2deep-inspection-status))
(common-lisp:progn
 (common-lisp:defun cancel-findings-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-id)
   (common-lisp:declare (common-lisp:ignorable report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-findings-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/reporting/cancel"
                                                        "CancelFindingsReport"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-findings-report))
(common-lisp:progn
 (common-lisp:defun cancel-sbom-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-id)
   (common-lisp:declare (common-lisp:ignorable report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-sbom-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sbomexport/cancel"
                                                        "CancelSbomExport"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-sbom-export))
(common-lisp:progn
 (common-lisp:defun create-cis-scan-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scan-name schedule security-level tags
                     targets)
   (common-lisp:declare
    (common-lisp:ignorable scan-name schedule security-level tags targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cis-scan-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cis/scan-configuration/create"
                                                        "CreateCisScanConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cis-scan-configuration))
(common-lisp:progn
 (common-lisp:defun create-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action description filter-criteria name
                     reason tags)
   (common-lisp:declare
    (common-lisp:ignorable action description filter-criteria name reason
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/filters/create"
                                                        "CreateFilter"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-filter))
(common-lisp:progn
 (common-lisp:defun create-findings-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria report-format
                     s3destination)
   (common-lisp:declare
    (common-lisp:ignorable filter-criteria report-format s3destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-findings-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/reporting/create"
                                                        "CreateFindingsReport"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-findings-report))
(common-lisp:progn
 (common-lisp:defun create-sbom-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-format resource-filter-criteria
                     s3destination)
   (common-lisp:declare
    (common-lisp:ignorable report-format resource-filter-criteria
     s3destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sbom-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sbomexport/create"
                                                        "CreateSbomExport"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sbom-export))
(common-lisp:progn
 (common-lisp:defun delete-cis-scan-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scan-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable scan-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cis-scan-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cis/scan-configuration/delete"
                                                        "DeleteCisScanConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cis-scan-configuration))
(common-lisp:progn
 (common-lisp:defun delete-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/filters/delete"
                                                        "DeleteFilter"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-filter))
(common-lisp:progn
 (common-lisp:defun describe-organization-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'inspector2-request :method "POST" :path
                                "/organizationconfiguration/describe"
                                :operation
                                "DescribeOrganizationConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-organization-configuration))
(common-lisp:progn
 (common-lisp:defun disable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids resource-types)
   (common-lisp:declare (common-lisp:ignorable account-ids resource-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/disable"
                                                        "Disable"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable))
(common-lisp:progn
 (common-lisp:defun disable-delegated-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delegated-admin-account-id)
   (common-lisp:declare (common-lisp:ignorable delegated-admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-delegated-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/delegatedadminaccounts/disable"
                                                        "DisableDelegatedAdminAccount"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-delegated-admin-account))
(common-lisp:progn
 (common-lisp:defun disassociate-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/members/disassociate"
                                                        "DisassociateMember"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-member))
(common-lisp:progn
 (common-lisp:defun enable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids client-token resource-types)
   (common-lisp:declare
    (common-lisp:ignorable account-ids client-token resource-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/enable"
                                                        "Enable"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable))
(common-lisp:progn
 (common-lisp:defun enable-delegated-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token delegated-admin-account-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token delegated-admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-delegated-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/delegatedadminaccounts/enable"
                                                        "EnableDelegatedAdminAccount"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-delegated-admin-account))
(common-lisp:progn
 (common-lisp:defun get-cis-scan-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scan-arn target-accounts)
   (common-lisp:declare (common-lisp:ignorable scan-arn target-accounts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cis-scan-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cis/scan/report/get"
                                                        "GetCisScanReport"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cis-scan-report))
(common-lisp:progn
 (common-lisp:defun get-cis-scan-result-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id filter-criteria max-results
                     next-token scan-arn sort-by sort-order target-resource-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id filter-criteria max-results next-token
     scan-arn sort-by sort-order target-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cis-scan-result-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cis/scan-result/details/get"
                                                        "GetCisScanResultDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cis-scan-result-details))
(common-lisp:progn
 (common-lisp:defun get-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'inspector2-request :method "POST" :path
                                "/configuration/get" :operation
                                "GetConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-configuration))
(common-lisp:progn
 (common-lisp:defun get-delegated-admin-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'inspector2-request :method "POST" :path
                                "/delegatedadminaccounts/get" :operation
                                "GetDelegatedAdminAccount"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-delegated-admin-account))
(common-lisp:progn
 (common-lisp:defun get-ec2deep-inspection-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'inspector2-request :method "POST" :path
                                "/ec2deepinspectionconfiguration/get"
                                :operation
                                "GetEc2DeepInspectionConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-ec2deep-inspection-configuration))
(common-lisp:progn
 (common-lisp:defun get-encryption-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type scan-type)
   (common-lisp:declare (common-lisp:ignorable resource-type scan-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-encryption-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/encryptionkey/get"
                                                        "GetEncryptionKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-encryption-key))
(common-lisp:progn
 (common-lisp:defun get-findings-report-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-id)
   (common-lisp:declare (common-lisp:ignorable report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-findings-report-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/reporting/status/get"
                                                        "GetFindingsReportStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-findings-report-status))
(common-lisp:progn
 (common-lisp:defun get-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/members/get"
                                                        "GetMember"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-member))
(common-lisp:progn
 (common-lisp:defun get-sbom-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-id)
   (common-lisp:declare (common-lisp:ignorable report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sbom-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sbomexport/get"
                                                        "GetSbomExport"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sbom-export))
(common-lisp:progn
 (common-lisp:defun list-account-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token service)
   (common-lisp:declare (common-lisp:ignorable max-results next-token service))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-account-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/accountpermissions/list"
                                                        "ListAccountPermissions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-account-permissions))
(common-lisp:progn
 (common-lisp:defun list-cis-scan-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria max-results next-token
                     sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable filter-criteria max-results next-token sort-by
     sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cis-scan-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cis/scan-configuration/list"
                                                        "ListCisScanConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cis-scan-configurations))
(common-lisp:progn
 (common-lisp:defun list-cis-scan-results-aggregated-by-checks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria max-results next-token
                     scan-arn sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable filter-criteria max-results next-token scan-arn
     sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cis-scan-results-aggregated-by-checks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cis/scan-result/check/list"
                                                        "ListCisScanResultsAggregatedByChecks"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cis-scan-results-aggregated-by-checks))
(common-lisp:progn
 (common-lisp:defun list-cis-scan-results-aggregated-by-target-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria max-results next-token
                     scan-arn sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable filter-criteria max-results next-token scan-arn
     sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cis-scan-results-aggregated-by-target-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cis/scan-result/resource/list"
                                                        "ListCisScanResultsAggregatedByTargetResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cis-scan-results-aggregated-by-target-resource))
(common-lisp:progn
 (common-lisp:defun list-cis-scans
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detail-level filter-criteria max-results
                     next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable detail-level filter-criteria max-results next-token
     sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cis-scans-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/cis/scan/list"
                                                        "ListCisScans"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cis-scans))
(common-lisp:progn
 (common-lisp:defun list-coverage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter-criteria max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-coverage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/coverage/list"
                                                        "ListCoverage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-coverage))
(common-lisp:progn
 (common-lisp:defun list-coverage-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria group-by next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter-criteria group-by next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-coverage-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/coverage/statistics/list"
                                                        "ListCoverageStatistics"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-coverage-statistics))
(common-lisp:progn
 (common-lisp:defun list-delegated-admin-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-delegated-admin-accounts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/delegatedadminaccounts/list"
                                                        "ListDelegatedAdminAccounts"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-delegated-admin-accounts))
(common-lisp:progn
 (common-lisp:defun list-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action arns max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable action arns max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-filters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/filters/list"
                                                        "ListFilters"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-filters))
(common-lisp:progn
 (common-lisp:defun list-finding-aggregations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids aggregation-request
                     aggregation-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-ids aggregation-request aggregation-type
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-finding-aggregations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/findings/aggregation/list"
                                                        "ListFindingAggregations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-finding-aggregations))
(common-lisp:progn
 (common-lisp:defun list-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria max-results next-token
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable filter-criteria max-results next-token
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/findings/list"
                                                        "ListFindings"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token only-associated)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token only-associated))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/members/list"
                                                        "ListMembers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-usage-totals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-usage-totals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/usage/list"
                                                        "ListUsageTotals"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-usage-totals))
(common-lisp:progn
 (common-lisp:defun reset-encryption-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type scan-type)
   (common-lisp:declare (common-lisp:ignorable resource-type scan-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-encryption-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/encryptionkey/reset"
                                                        "ResetEncryptionKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-encryption-key))
(common-lisp:progn
 (common-lisp:defun search-vulnerabilities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-criteria next-token)
   (common-lisp:declare (common-lisp:ignorable filter-criteria next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-vulnerabilities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/vulnerabilities/search"
                                                        "SearchVulnerabilities"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-vulnerabilities))
(common-lisp:progn
 (common-lisp:defun send-cis-session-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scan-job-id session-token)
   (common-lisp:declare (common-lisp:ignorable scan-job-id session-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-cis-session-health-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/cissession/health/send"
                                                        "SendCisSessionHealth"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-cis-session-health))
(common-lisp:progn
 (common-lisp:defun send-cis-session-telemetry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key messages scan-job-id session-token)
   (common-lisp:declare
    (common-lisp:ignorable messages scan-job-id session-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-cis-session-telemetry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/cissession/telemetry/send"
                                                        "SendCisSessionTelemetry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-cis-session-telemetry))
(common-lisp:progn
 (common-lisp:defun start-cis-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key message scan-job-id)
   (common-lisp:declare (common-lisp:ignorable message scan-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-cis-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/cissession/start"
                                                        "StartCisSession"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-cis-session))
(common-lisp:progn
 (common-lisp:defun stop-cis-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key message scan-job-id session-token)
   (common-lisp:declare
    (common-lisp:ignorable message scan-job-id session-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-cis-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/cissession/stop"
                                                        "StopCisSession"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-cis-session))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-cis-scan-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scan-configuration-arn scan-name schedule
                     security-level targets)
   (common-lisp:declare
    (common-lisp:ignorable scan-configuration-arn scan-name schedule
     security-level targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cis-scan-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cis/scan-configuration/update"
                                                        "UpdateCisScanConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cis-scan-configuration))
(common-lisp:progn
 (common-lisp:defun update-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ecr-configuration)
   (common-lisp:declare (common-lisp:ignorable ecr-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/configuration/update"
                                                        "UpdateConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-configuration))
(common-lisp:progn
 (common-lisp:defun update-ec2deep-inspection-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activate-deep-inspection package-paths)
   (common-lisp:declare
    (common-lisp:ignorable activate-deep-inspection package-paths))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-ec2deep-inspection-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ec2deepinspectionconfiguration/update"
                                                        "UpdateEc2DeepInspectionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ec2deep-inspection-configuration))
(common-lisp:progn
 (common-lisp:defun update-encryption-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kms-key-id resource-type scan-type)
   (common-lisp:declare
    (common-lisp:ignorable kms-key-id resource-type scan-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-encryption-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/encryptionkey/update"
                                                        "UpdateEncryptionKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-encryption-key))
(common-lisp:progn
 (common-lisp:defun update-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action description filter-arn
                     filter-criteria name reason)
   (common-lisp:declare
    (common-lisp:ignorable action description filter-arn filter-criteria name
     reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/filters/update"
                                                        "UpdateFilter"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-filter))
(common-lisp:progn
 (common-lisp:defun update-org-ec2deep-inspection-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key org-package-paths)
   (common-lisp:declare (common-lisp:ignorable org-package-paths))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-org-ec2deep-inspection-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ec2deepinspectionconfiguration/org/update"
                                                        "UpdateOrgEc2DeepInspectionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-org-ec2deep-inspection-configuration))
(common-lisp:progn
 (common-lisp:defun update-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable)
   (common-lisp:declare (common-lisp:ignorable auto-enable))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/organizationconfiguration/update"
                                                        "UpdateOrganizationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-organization-configuration))
