;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/secretsmanager/api
  (:use)
  (:nicknames #:aws/secretsmanager)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/secretsmanager/api)
(common-lisp:progn
 (common-lisp:defclass secretsmanager-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "secretsmanager" :protocol
                        :json))
 (common-lisp:export 'secretsmanager-request))
(common-lisp:progn
 (common-lisp:define-condition secretsmanager-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'secretsmanager-error))
(common-lisp:defvar *error-map*
  '(("DecryptionFailure" . decryption-failure)
    ("EncryptionFailure" . encryption-failure)
    ("InternalServiceError" . internal-service-error)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("PreconditionNotMetException" . precondition-not-met-exception)
    ("PublicPolicyException" . public-policy-exception)
    ("ResourceExistsException" . resource-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype add-replica-region-list-type ()
   '(trivial-types:proper-list replica-region-type))
 (common-lisp:defun |make-add-replica-region-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replica-region-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype automatically-rotate-after-days-type ()
  'common-lisp:integer)
(common-lisp:deftype boolean-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-rotate-secret-request common-lisp:nil
                       ((secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %cancel-rotate-secret-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-rotate-secret-request
                    'make-cancel-rotate-secret-request))
 (common-lisp:defun make-cancel-rotate-secret-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-rotate-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-rotate-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-rotate-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-rotate-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-rotate-secret-response common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor %cancel-rotate-secret-response-version-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %cancel-rotate-secret-response-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %cancel-rotate-secret-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-rotate-secret-response
                    'make-cancel-rotate-secret-response))
 (common-lisp:defun make-cancel-rotate-secret-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-rotate-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-rotate-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-rotate-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-rotate-secret-response))
   common-lisp:nil))
(common-lisp:deftype client-request-token-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-secret-request common-lisp:nil
                       ((force-overwrite-replica-secret :initarg
                         :force-overwrite-replica-secret :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %create-secret-request-force-overwrite-replica-secret
                         :initform common-lisp:nil)
                        (add-replica-regions :initarg :add-replica-regions
                         :type
                         (common-lisp:or add-replica-region-list-type
                                         common-lisp:null)
                         :accessor %create-secret-request-add-replica-regions
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list-type common-lisp:null)
                         :accessor %create-secret-request-tags :initform
                         common-lisp:nil)
                        (secret-string :initarg :secret-string :type
                         (common-lisp:or secret-string-type common-lisp:null)
                         :accessor %create-secret-request-secret-string
                         :initform common-lisp:nil)
                        (secret-binary :initarg :secret-binary :type
                         (common-lisp:or secret-binary-type common-lisp:null)
                         :accessor %create-secret-request-secret-binary
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id-type common-lisp:null)
                         :accessor %create-secret-request-kms-key-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor %create-secret-request-description :initform
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token-type
                                         common-lisp:null)
                         :accessor %create-secret-request-client-request-token
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-type common-lisp:null) :accessor
                         %create-secret-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-secret-request 'make-create-secret-request))
 (common-lisp:defun make-create-secret-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-overwrite-replica-secret
                     add-replica-regions tags secret-string secret-binary
                     kms-key-id description client-request-token name)
   (common-lisp:apply #'common-lisp:make-instance 'create-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-binary))
      (common-lisp:list
       (common-lisp:cons "SecretBinary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-string))
      (common-lisp:list
       (common-lisp:cons "SecretString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-replica-regions))
      (common-lisp:list
       (common-lisp:cons "AddReplicaRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-overwrite-replica-secret))
      (common-lisp:list
       (common-lisp:cons "ForceOverwriteReplicaSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-secret-response common-lisp:nil
                       ((replication-status :initarg :replication-status :type
                         (common-lisp:or replication-status-list-type
                                         common-lisp:null)
                         :accessor %create-secret-response-replication-status
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor %create-secret-response-version-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %create-secret-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %create-secret-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-secret-response 'make-create-secret-response))
 (common-lisp:defun make-create-secret-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-status version-id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:list
       (common-lisp:cons "ReplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-secret-response))
   common-lisp:nil))
(common-lisp:deftype created-date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition decryption-failure
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       decryption-failure-message)))
 (common-lisp:export
  (common-lisp:list 'decryption-failure 'decryption-failure-message)))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %delete-resource-policy-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defun make-delete-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name-type common-lisp:null) :accessor
                         %delete-resource-policy-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %delete-resource-policy-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defun make-delete-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-secret-request common-lisp:nil
                       ((force-delete-without-recovery :initarg
                         :force-delete-without-recovery :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %delete-secret-request-force-delete-without-recovery
                         :initform common-lisp:nil)
                        (recovery-window-in-days :initarg
                         :recovery-window-in-days :type
                         (common-lisp:or recovery-window-in-days-type
                                         common-lisp:null)
                         :accessor
                         %delete-secret-request-recovery-window-in-days
                         :initform common-lisp:nil)
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %delete-secret-request-secret-id :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-secret-request 'make-delete-secret-request))
 (common-lisp:defun make-delete-secret-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-delete-without-recovery
                     recovery-window-in-days secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-window-in-days))
      (common-lisp:list
       (common-lisp:cons "RecoveryWindowInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-delete-without-recovery))
      (common-lisp:list
       (common-lisp:cons "ForceDeleteWithoutRecovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-secret-response common-lisp:nil
                       ((deletion-date :initarg :deletion-date :type
                         (common-lisp:or deletion-date-type common-lisp:null)
                         :accessor %delete-secret-response-deletion-date
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %delete-secret-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %delete-secret-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-secret-response 'make-delete-secret-response))
 (common-lisp:defun make-delete-secret-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-date name arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-secret-response))
   common-lisp:nil))
(common-lisp:deftype deleted-date-type () 'common-lisp:string)
(common-lisp:deftype deletion-date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-secret-request common-lisp:nil
                       ((secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %describe-secret-request-secret-id :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-secret-request 'make-describe-secret-request))
 (common-lisp:defun make-describe-secret-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-secret-response common-lisp:nil
                       ((replication-status :initarg :replication-status :type
                         (common-lisp:or replication-status-list-type
                                         common-lisp:null)
                         :accessor %describe-secret-response-replication-status
                         :initform common-lisp:nil)
                        (primary-region :initarg :primary-region :type
                         (common-lisp:or region-type common-lisp:null)
                         :accessor %describe-secret-response-primary-region
                         :initform common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %describe-secret-response-created-date
                         :initform common-lisp:nil)
                        (owning-service :initarg :owning-service :type
                         (common-lisp:or owning-service-type common-lisp:null)
                         :accessor %describe-secret-response-owning-service
                         :initform common-lisp:nil)
                        (version-ids-to-stages :initarg :version-ids-to-stages
                         :type
                         (common-lisp:or secret-versions-to-stages-map-type
                                         common-lisp:null)
                         :accessor
                         %describe-secret-response-version-ids-to-stages
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list-type common-lisp:null)
                         :accessor %describe-secret-response-tags :initform
                         common-lisp:nil)
                        (next-rotation-date :initarg :next-rotation-date :type
                         (common-lisp:or next-rotation-date-type
                                         common-lisp:null)
                         :accessor %describe-secret-response-next-rotation-date
                         :initform common-lisp:nil)
                        (deleted-date :initarg :deleted-date :type
                         (common-lisp:or deleted-date-type common-lisp:null)
                         :accessor %describe-secret-response-deleted-date
                         :initform common-lisp:nil)
                        (last-accessed-date :initarg :last-accessed-date :type
                         (common-lisp:or last-accessed-date-type
                                         common-lisp:null)
                         :accessor %describe-secret-response-last-accessed-date
                         :initform common-lisp:nil)
                        (last-changed-date :initarg :last-changed-date :type
                         (common-lisp:or last-changed-date-type
                                         common-lisp:null)
                         :accessor %describe-secret-response-last-changed-date
                         :initform common-lisp:nil)
                        (last-rotated-date :initarg :last-rotated-date :type
                         (common-lisp:or last-rotated-date-type
                                         common-lisp:null)
                         :accessor %describe-secret-response-last-rotated-date
                         :initform common-lisp:nil)
                        (rotation-rules :initarg :rotation-rules :type
                         (common-lisp:or rotation-rules-type common-lisp:null)
                         :accessor %describe-secret-response-rotation-rules
                         :initform common-lisp:nil)
                        (rotation-lambda-arn :initarg :rotation-lambda-arn
                         :type
                         (common-lisp:or rotation-lambda-arntype
                                         common-lisp:null)
                         :accessor
                         %describe-secret-response-rotation-lambda-arn
                         :initform common-lisp:nil)
                        (rotation-enabled :initarg :rotation-enabled :type
                         (common-lisp:or rotation-enabled-type
                                         common-lisp:null)
                         :accessor %describe-secret-response-rotation-enabled
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id-type common-lisp:null)
                         :accessor %describe-secret-response-kms-key-id
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor %describe-secret-response-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %describe-secret-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %describe-secret-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-secret-response 'make-describe-secret-response))
 (common-lisp:defun make-describe-secret-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-status primary-region
                     created-date owning-service version-ids-to-stages tags
                     next-rotation-date deleted-date last-accessed-date
                     last-changed-date last-rotated-date rotation-rules
                     rotation-lambda-arn rotation-enabled kms-key-id
                     description name arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-enabled))
      (common-lisp:list
       (common-lisp:cons "RotationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "RotationLambdaARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-rules))
      (common-lisp:list
       (common-lisp:cons "RotationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-rotated-date))
      (common-lisp:list
       (common-lisp:cons "LastRotatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-changed-date))
      (common-lisp:list
       (common-lisp:cons "LastChangedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed-date))
      (common-lisp:list
       (common-lisp:cons "LastAccessedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-date))
      (common-lisp:list
       (common-lisp:cons "DeletedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-rotation-date))
      (common-lisp:list
       (common-lisp:cons "NextRotationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-ids-to-stages))
      (common-lisp:list
       (common-lisp:cons "VersionIdsToStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-service))
      (common-lisp:list
       (common-lisp:cons "OwningService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-region))
      (common-lisp:list
       (common-lisp:cons "PrimaryRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:list
       (common-lisp:cons "ReplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-secret-response))
   common-lisp:nil))
(common-lisp:deftype description-type () 'common-lisp:string)
(common-lisp:deftype duration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition encryption-failure
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       encryption-failure-message)))
 (common-lisp:export
  (common-lisp:list 'encryption-failure 'encryption-failure-message)))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype exclude-characters-type () 'common-lisp:string)
(common-lisp:deftype exclude-lowercase-type () 'common-lisp:boolean)
(common-lisp:deftype exclude-numbers-type () 'common-lisp:boolean)
(common-lisp:deftype exclude-punctuation-type () 'common-lisp:boolean)
(common-lisp:deftype exclude-uppercase-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-values-string-list
                                         common-lisp:null)
                         :accessor %filter-values :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or filter-name-string-type
                                         common-lisp:null)
                         :accessor %filter-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-name-string-type () 'common-lisp:string)
(common-lisp:deftype filter-value-string-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values-string-list ()
   '(trivial-types:proper-list filter-value-string-type))
 (common-lisp:defun |make-filter-values-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            filter-value-string-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filters-list-type () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-random-password-request common-lisp:nil
                       ((require-each-included-type :initarg
                         :require-each-included-type :type
                         (common-lisp:or require-each-included-type-type
                                         common-lisp:null)
                         :accessor
                         %get-random-password-request-require-each-included-type
                         :initform common-lisp:nil)
                        (include-space :initarg :include-space :type
                         (common-lisp:or include-space-type common-lisp:null)
                         :accessor %get-random-password-request-include-space
                         :initform common-lisp:nil)
                        (exclude-lowercase :initarg :exclude-lowercase :type
                         (common-lisp:or exclude-lowercase-type
                                         common-lisp:null)
                         :accessor
                         %get-random-password-request-exclude-lowercase
                         :initform common-lisp:nil)
                        (exclude-uppercase :initarg :exclude-uppercase :type
                         (common-lisp:or exclude-uppercase-type
                                         common-lisp:null)
                         :accessor
                         %get-random-password-request-exclude-uppercase
                         :initform common-lisp:nil)
                        (exclude-punctuation :initarg :exclude-punctuation
                         :type
                         (common-lisp:or exclude-punctuation-type
                                         common-lisp:null)
                         :accessor
                         %get-random-password-request-exclude-punctuation
                         :initform common-lisp:nil)
                        (exclude-numbers :initarg :exclude-numbers :type
                         (common-lisp:or exclude-numbers-type common-lisp:null)
                         :accessor %get-random-password-request-exclude-numbers
                         :initform common-lisp:nil)
                        (exclude-characters :initarg :exclude-characters :type
                         (common-lisp:or exclude-characters-type
                                         common-lisp:null)
                         :accessor
                         %get-random-password-request-exclude-characters
                         :initform common-lisp:nil)
                        (password-length :initarg :password-length :type
                         (common-lisp:or password-length-type common-lisp:null)
                         :accessor %get-random-password-request-password-length
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-random-password-request
                    'make-get-random-password-request))
 (common-lisp:defun make-get-random-password-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key require-each-included-type include-space
                     exclude-lowercase exclude-uppercase exclude-punctuation
                     exclude-numbers exclude-characters password-length)
   (common-lisp:apply #'common-lisp:make-instance 'get-random-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-random-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-random-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-length))
      (common-lisp:list
       (common-lisp:cons "PasswordLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-characters))
      (common-lisp:list
       (common-lisp:cons "ExcludeCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-numbers))
      (common-lisp:list
       (common-lisp:cons "ExcludeNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-punctuation))
      (common-lisp:list
       (common-lisp:cons "ExcludePunctuation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-uppercase))
      (common-lisp:list
       (common-lisp:cons "ExcludeUppercase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-lowercase))
      (common-lisp:list
       (common-lisp:cons "ExcludeLowercase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-space))
      (common-lisp:list
       (common-lisp:cons "IncludeSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-each-included-type))
      (common-lisp:list
       (common-lisp:cons "RequireEachIncludedType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-random-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-random-password-response common-lisp:nil
                       ((random-password :initarg :random-password :type
                         (common-lisp:or random-password-type common-lisp:null)
                         :accessor
                         %get-random-password-response-random-password
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-random-password-response
                    'make-get-random-password-response))
 (common-lisp:defun make-get-random-password-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key random-password)
   (common-lisp:apply #'common-lisp:make-instance 'get-random-password-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-random-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-random-password-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'random-password))
      (common-lisp:list
       (common-lisp:cons "RandomPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-random-password-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-request common-lisp:nil
                       ((secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %get-resource-policy-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-request
                    'make-get-resource-policy-request))
 (common-lisp:defun make-get-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-response common-lisp:nil
                       ((resource-policy :initarg :resource-policy :type
                         (common-lisp:or non-empty-resource-policy-type
                                         common-lisp:null)
                         :accessor
                         %get-resource-policy-response-resource-policy
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name-type common-lisp:null) :accessor
                         %get-resource-policy-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %get-resource-policy-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-response
                    'make-get-resource-policy-response))
 (common-lisp:defun make-get-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-policy name arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-secret-value-request common-lisp:nil
                       ((version-stage :initarg :version-stage :type
                         (common-lisp:or secret-version-stage-type
                                         common-lisp:null)
                         :accessor %get-secret-value-request-version-stage
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor %get-secret-value-request-version-id
                         :initform common-lisp:nil)
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %get-secret-value-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-secret-value-request 'make-get-secret-value-request))
 (common-lisp:defun make-get-secret-value-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-stage version-id secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-secret-value-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-secret-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-secret-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-stage))
      (common-lisp:list
       (common-lisp:cons "VersionStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-secret-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-secret-value-response common-lisp:nil
                       ((created-date :initarg :created-date :type
                         (common-lisp:or created-date-type common-lisp:null)
                         :accessor %get-secret-value-response-created-date
                         :initform common-lisp:nil)
                        (version-stages :initarg :version-stages :type
                         (common-lisp:or secret-version-stages-type
                                         common-lisp:null)
                         :accessor %get-secret-value-response-version-stages
                         :initform common-lisp:nil)
                        (secret-string :initarg :secret-string :type
                         (common-lisp:or secret-string-type common-lisp:null)
                         :accessor %get-secret-value-response-secret-string
                         :initform common-lisp:nil)
                        (secret-binary :initarg :secret-binary :type
                         (common-lisp:or secret-binary-type common-lisp:null)
                         :accessor %get-secret-value-response-secret-binary
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor %get-secret-value-response-version-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %get-secret-value-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %get-secret-value-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-secret-value-response
                    'make-get-secret-value-response))
 (common-lisp:defun make-get-secret-value-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-date version-stages secret-string
                     secret-binary version-id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-secret-value-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-secret-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-secret-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-binary))
      (common-lisp:list
       (common-lisp:cons "SecretBinary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-string))
      (common-lisp:list
       (common-lisp:cons "SecretString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-stages))
      (common-lisp:list
       (common-lisp:cons "VersionStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-secret-value-response))
   common-lisp:nil))
(common-lisp:deftype include-space-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition internal-service-error
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error 'internal-service-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:deftype kms-key-id-list-type ()
   '(trivial-types:proper-list kms-key-id-type))
 (common-lisp:defun |make-kms-key-id-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kms-key-id-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key-id-type () 'common-lisp:string)
(common-lisp:deftype last-accessed-date-type () 'common-lisp:string)
(common-lisp:deftype last-changed-date-type () 'common-lisp:string)
(common-lisp:deftype last-rotated-date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-secret-version-ids-request common-lisp:nil
                       ((include-deprecated :initarg :include-deprecated :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %list-secret-version-ids-request-include-deprecated
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token-type common-lisp:null)
                         :accessor %list-secret-version-ids-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor %list-secret-version-ids-request-max-results
                         :initform common-lisp:nil)
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %list-secret-version-ids-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-secret-version-ids-request
                    'make-list-secret-version-ids-request))
 (common-lisp:defun make-list-secret-version-ids-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-deprecated next-token max-results
                     secret-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-secret-version-ids-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-secret-version-ids-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-secret-version-ids-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-deprecated))
      (common-lisp:list
       (common-lisp:cons "IncludeDeprecated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-secret-version-ids-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-secret-version-ids-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %list-secret-version-ids-response-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %list-secret-version-ids-response-arn
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token-type common-lisp:null)
                         :accessor %list-secret-version-ids-response-next-token
                         :initform common-lisp:nil)
                        (versions :initarg :versions :type
                         (common-lisp:or secret-versions-list-type
                                         common-lisp:null)
                         :accessor %list-secret-version-ids-response-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-secret-version-ids-response
                    'make-list-secret-version-ids-response))
 (common-lisp:defun make-list-secret-version-ids-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn next-token versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-secret-version-ids-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-secret-version-ids-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-secret-version-ids-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-secret-version-ids-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-secrets-request common-lisp:nil
                       ((sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order-type common-lisp:null)
                         :accessor %list-secrets-request-sort-order :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filters-list-type common-lisp:null)
                         :accessor %list-secrets-request-filters :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token-type common-lisp:null)
                         :accessor %list-secrets-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor %list-secrets-request-max-results :initform
                         common-lisp:nil)
                        (include-planned-deletion :initarg
                         :include-planned-deletion :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %list-secrets-request-include-planned-deletion
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-secrets-request 'make-list-secrets-request))
 (common-lisp:defun make-list-secrets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-order filters next-token max-results
                     include-planned-deletion)
   (common-lisp:apply #'common-lisp:make-instance 'list-secrets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-secrets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-secrets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-planned-deletion))
      (common-lisp:list
       (common-lisp:cons "IncludePlannedDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-secrets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-secrets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token-type common-lisp:null)
                         :accessor %list-secrets-response-next-token :initform
                         common-lisp:nil)
                        (secret-list :initarg :secret-list :type
                         (common-lisp:or secret-list-type common-lisp:null)
                         :accessor %list-secrets-response-secret-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-secrets-response 'make-list-secrets-response))
 (common-lisp:defun make-list-secrets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token secret-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-secrets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-secrets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-secrets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-list))
      (common-lisp:list
       (common-lisp:cons "SecretList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-secrets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-document-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'malformed-policy-document-exception-message)))
(common-lisp:deftype max-results-type () 'common-lisp:integer)
(common-lisp:deftype name-type () 'common-lisp:string)
(common-lisp:deftype next-rotation-date-type () 'common-lisp:string)
(common-lisp:deftype next-token-type () 'common-lisp:string)
(common-lisp:deftype non-empty-resource-policy-type () 'common-lisp:string)
(common-lisp:deftype owning-service-type () 'common-lisp:string)
(common-lisp:deftype password-length-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition precondition-not-met-exception
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       precondition-not-met-exception-message)))
 (common-lisp:export
  (common-lisp:list 'precondition-not-met-exception
                    'precondition-not-met-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition public-policy-exception
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       public-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'public-policy-exception 'public-policy-exception-message)))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-request common-lisp:nil
                       ((block-public-policy :initarg :block-public-policy
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %put-resource-policy-request-block-public-policy
                         :initform common-lisp:nil)
                        (resource-policy :initarg :resource-policy :type
                         (common-lisp:or non-empty-resource-policy-type
                                         common-lisp:null)
                         :accessor %put-resource-policy-request-resource-policy
                         :initform
                         (common-lisp:error ":resource-policy is required"))
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %put-resource-policy-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defun make-put-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key block-public-policy resource-policy
                     secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "BlockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name-type common-lisp:null) :accessor
                         %put-resource-policy-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %put-resource-policy-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defun make-put-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-secret-value-request common-lisp:nil
                       ((version-stages :initarg :version-stages :type
                         (common-lisp:or secret-version-stages-type
                                         common-lisp:null)
                         :accessor %put-secret-value-request-version-stages
                         :initform common-lisp:nil)
                        (secret-string :initarg :secret-string :type
                         (common-lisp:or secret-string-type common-lisp:null)
                         :accessor %put-secret-value-request-secret-string
                         :initform common-lisp:nil)
                        (secret-binary :initarg :secret-binary :type
                         (common-lisp:or secret-binary-type common-lisp:null)
                         :accessor %put-secret-value-request-secret-binary
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token-type
                                         common-lisp:null)
                         :accessor
                         %put-secret-value-request-client-request-token
                         :initform common-lisp:nil)
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %put-secret-value-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-secret-value-request 'make-put-secret-value-request))
 (common-lisp:defun make-put-secret-value-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-stages secret-string
                     secret-binary client-request-token secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-secret-value-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-secret-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-secret-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-binary))
      (common-lisp:list
       (common-lisp:cons "SecretBinary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-string))
      (common-lisp:list
       (common-lisp:cons "SecretString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-stages))
      (common-lisp:list
       (common-lisp:cons "VersionStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-secret-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-secret-value-response common-lisp:nil
                       ((version-stages :initarg :version-stages :type
                         (common-lisp:or secret-version-stages-type
                                         common-lisp:null)
                         :accessor %put-secret-value-response-version-stages
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor %put-secret-value-response-version-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %put-secret-value-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %put-secret-value-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-secret-value-response
                    'make-put-secret-value-response))
 (common-lisp:defun make-put-secret-value-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-stages version-id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-secret-value-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-secret-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-secret-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-stages))
      (common-lisp:list
       (common-lisp:cons "VersionStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-secret-value-response))
   common-lisp:nil))
(common-lisp:deftype random-password-type () 'common-lisp:string)
(common-lisp:deftype recovery-window-in-days-type () 'common-lisp:integer)
(common-lisp:deftype region-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remove-regions-from-replication-request common-lisp:nil
                       ((remove-replica-regions :initarg
                         :remove-replica-regions :type
                         (common-lisp:or remove-replica-region-list-type
                                         common-lisp:null)
                         :accessor
                         %remove-regions-from-replication-request-remove-replica-regions
                         :initform
                         (common-lisp:error
                          ":remove-replica-regions is required"))
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor
                         %remove-regions-from-replication-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-regions-from-replication-request
                    'make-remove-regions-from-replication-request))
 (common-lisp:defun make-remove-regions-from-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remove-replica-regions secret-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-regions-from-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-regions-from-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-regions-from-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-replica-regions))
      (common-lisp:list
       (common-lisp:cons "RemoveReplicaRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-regions-from-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-regions-from-replication-response common-lisp:nil
                       ((replication-status :initarg :replication-status :type
                         (common-lisp:or replication-status-list-type
                                         common-lisp:null)
                         :accessor
                         %remove-regions-from-replication-response-replication-status
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor
                         %remove-regions-from-replication-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-regions-from-replication-response
                    'make-remove-regions-from-replication-response))
 (common-lisp:defun make-remove-regions-from-replication-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-status arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-regions-from-replication-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-regions-from-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-regions-from-replication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:list
       (common-lisp:cons "ReplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-regions-from-replication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remove-replica-region-list-type ()
   '(trivial-types:proper-list region-type))
 (common-lisp:defun |make-remove-replica-region-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replica-region-type common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id-type common-lisp:null)
                         :accessor %replica-region-type-kms-key-id :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region-type common-lisp:null)
                         :accessor %replica-region-type-region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replica-region-type 'make-replica-region-type))
 (common-lisp:defun make-replica-region-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id region)
   (common-lisp:apply #'common-lisp:make-instance 'replica-region-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replica-region-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replica-region-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replica-region-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replicate-secret-to-regions-request common-lisp:nil
                       ((force-overwrite-replica-secret :initarg
                         :force-overwrite-replica-secret :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %replicate-secret-to-regions-request-force-overwrite-replica-secret
                         :initform common-lisp:nil)
                        (add-replica-regions :initarg :add-replica-regions
                         :type
                         (common-lisp:or add-replica-region-list-type
                                         common-lisp:null)
                         :accessor
                         %replicate-secret-to-regions-request-add-replica-regions
                         :initform
                         (common-lisp:error
                          ":add-replica-regions is required"))
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor
                         %replicate-secret-to-regions-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'replicate-secret-to-regions-request
                    'make-replicate-secret-to-regions-request))
 (common-lisp:defun make-replicate-secret-to-regions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-overwrite-replica-secret
                     add-replica-regions secret-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'replicate-secret-to-regions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replicate-secret-to-regions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replicate-secret-to-regions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-replica-regions))
      (common-lisp:list
       (common-lisp:cons "AddReplicaRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-overwrite-replica-secret))
      (common-lisp:list
       (common-lisp:cons "ForceOverwriteReplicaSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replicate-secret-to-regions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replicate-secret-to-regions-response common-lisp:nil
                       ((replication-status :initarg :replication-status :type
                         (common-lisp:or replication-status-list-type
                                         common-lisp:null)
                         :accessor
                         %replicate-secret-to-regions-response-replication-status
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %replicate-secret-to-regions-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replicate-secret-to-regions-response
                    'make-replicate-secret-to-regions-response))
 (common-lisp:defun make-replicate-secret-to-regions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-status arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'replicate-secret-to-regions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replicate-secret-to-regions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replicate-secret-to-regions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:list
       (common-lisp:cons "ReplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replicate-secret-to-regions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-status-list-type ()
   '(trivial-types:proper-list replication-status-type))
 (common-lisp:defun |make-replication-status-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-status-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-status-type common-lisp:nil
                       ((last-accessed-date :initarg :last-accessed-date :type
                         (common-lisp:or last-accessed-date-type
                                         common-lisp:null)
                         :accessor %replication-status-type-last-accessed-date
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or status-message-type common-lisp:null)
                         :accessor %replication-status-type-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-type common-lisp:null)
                         :accessor %replication-status-type-status :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id-type common-lisp:null)
                         :accessor %replication-status-type-kms-key-id
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region-type common-lisp:null)
                         :accessor %replication-status-type-region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-status-type 'make-replication-status-type))
 (common-lisp:defun make-replication-status-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-accessed-date status-message status
                     kms-key-id region)
   (common-lisp:apply #'common-lisp:make-instance 'replication-status-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-status-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-status-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed-date))
      (common-lisp:list
       (common-lisp:cons "LastAccessedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-status-type))
   common-lisp:nil))
(common-lisp:deftype require-each-included-type-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition resource-exists-exception
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-exists-exception
                    'resource-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (secretsmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass restore-secret-request common-lisp:nil
                       ((secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %restore-secret-request-secret-id :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'restore-secret-request 'make-restore-secret-request))
 (common-lisp:defun make-restore-secret-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'restore-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-secret-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %restore-secret-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %restore-secret-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-secret-response 'make-restore-secret-response))
 (common-lisp:defun make-restore-secret-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance 'restore-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-secret-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rotate-secret-request common-lisp:nil
                       ((rotate-immediately :initarg :rotate-immediately :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor %rotate-secret-request-rotate-immediately
                         :initform common-lisp:nil)
                        (rotation-rules :initarg :rotation-rules :type
                         (common-lisp:or rotation-rules-type common-lisp:null)
                         :accessor %rotate-secret-request-rotation-rules
                         :initform common-lisp:nil)
                        (rotation-lambda-arn :initarg :rotation-lambda-arn
                         :type
                         (common-lisp:or rotation-lambda-arntype
                                         common-lisp:null)
                         :accessor %rotate-secret-request-rotation-lambda-arn
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token-type
                                         common-lisp:null)
                         :accessor %rotate-secret-request-client-request-token
                         :initform common-lisp:nil)
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %rotate-secret-request-secret-id :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'rotate-secret-request 'make-rotate-secret-request))
 (common-lisp:defun make-rotate-secret-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotate-immediately rotation-rules
                     rotation-lambda-arn client-request-token secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'rotate-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rotate-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rotate-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "RotationLambdaARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-rules))
      (common-lisp:list
       (common-lisp:cons "RotationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotate-immediately))
      (common-lisp:list
       (common-lisp:cons "RotateImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rotate-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rotate-secret-response common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor %rotate-secret-response-version-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %rotate-secret-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %rotate-secret-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rotate-secret-response 'make-rotate-secret-response))
 (common-lisp:defun make-rotate-secret-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'rotate-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rotate-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rotate-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rotate-secret-response))
   common-lisp:nil))
(common-lisp:deftype rotation-enabled-type () 'common-lisp:boolean)
(common-lisp:deftype rotation-lambda-arntype () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rotation-rules-type common-lisp:nil
                       ((schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression-type
                                         common-lisp:null)
                         :accessor %rotation-rules-type-schedule-expression
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or duration-type common-lisp:null)
                         :accessor %rotation-rules-type-duration :initform
                         common-lisp:nil)
                        (automatically-after-days :initarg
                         :automatically-after-days :type
                         (common-lisp:or automatically-rotate-after-days-type
                                         common-lisp:null)
                         :accessor
                         %rotation-rules-type-automatically-after-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rotation-rules-type 'make-rotation-rules-type))
 (common-lisp:defun make-rotation-rules-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-expression duration
                     automatically-after-days)
   (common-lisp:apply #'common-lisp:make-instance 'rotation-rules-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rotation-rules-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rotation-rules-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatically-after-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticallyAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rotation-rules-type))
   common-lisp:nil))
(common-lisp:deftype schedule-expression-type () 'common-lisp:string)
(common-lisp:deftype secret-arntype () 'common-lisp:string)
(common-lisp:deftype secret-binary-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype secret-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass secret-list-entry common-lisp:nil
                       ((primary-region :initarg :primary-region :type
                         (common-lisp:or region-type common-lisp:null)
                         :accessor %secret-list-entry-primary-region :initform
                         common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %secret-list-entry-created-date :initform
                         common-lisp:nil)
                        (owning-service :initarg :owning-service :type
                         (common-lisp:or owning-service-type common-lisp:null)
                         :accessor %secret-list-entry-owning-service :initform
                         common-lisp:nil)
                        (secret-versions-to-stages :initarg
                         :secret-versions-to-stages :type
                         (common-lisp:or secret-versions-to-stages-map-type
                                         common-lisp:null)
                         :accessor %secret-list-entry-secret-versions-to-stages
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list-type common-lisp:null)
                         :accessor %secret-list-entry-tags :initform
                         common-lisp:nil)
                        (next-rotation-date :initarg :next-rotation-date :type
                         (common-lisp:or next-rotation-date-type
                                         common-lisp:null)
                         :accessor %secret-list-entry-next-rotation-date
                         :initform common-lisp:nil)
                        (deleted-date :initarg :deleted-date :type
                         (common-lisp:or deleted-date-type common-lisp:null)
                         :accessor %secret-list-entry-deleted-date :initform
                         common-lisp:nil)
                        (last-accessed-date :initarg :last-accessed-date :type
                         (common-lisp:or last-accessed-date-type
                                         common-lisp:null)
                         :accessor %secret-list-entry-last-accessed-date
                         :initform common-lisp:nil)
                        (last-changed-date :initarg :last-changed-date :type
                         (common-lisp:or last-changed-date-type
                                         common-lisp:null)
                         :accessor %secret-list-entry-last-changed-date
                         :initform common-lisp:nil)
                        (last-rotated-date :initarg :last-rotated-date :type
                         (common-lisp:or last-rotated-date-type
                                         common-lisp:null)
                         :accessor %secret-list-entry-last-rotated-date
                         :initform common-lisp:nil)
                        (rotation-rules :initarg :rotation-rules :type
                         (common-lisp:or rotation-rules-type common-lisp:null)
                         :accessor %secret-list-entry-rotation-rules :initform
                         common-lisp:nil)
                        (rotation-lambda-arn :initarg :rotation-lambda-arn
                         :type
                         (common-lisp:or rotation-lambda-arntype
                                         common-lisp:null)
                         :accessor %secret-list-entry-rotation-lambda-arn
                         :initform common-lisp:nil)
                        (rotation-enabled :initarg :rotation-enabled :type
                         (common-lisp:or rotation-enabled-type
                                         common-lisp:null)
                         :accessor %secret-list-entry-rotation-enabled
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id-type common-lisp:null)
                         :accessor %secret-list-entry-kms-key-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor %secret-list-entry-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %secret-list-entry-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %secret-list-entry-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'secret-list-entry 'make-secret-list-entry))
 (common-lisp:defun make-secret-list-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key primary-region created-date
                     owning-service secret-versions-to-stages tags
                     next-rotation-date deleted-date last-accessed-date
                     last-changed-date last-rotated-date rotation-rules
                     rotation-lambda-arn rotation-enabled kms-key-id
                     description name arn)
   (common-lisp:apply #'common-lisp:make-instance 'secret-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input secret-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input secret-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-enabled))
      (common-lisp:list
       (common-lisp:cons "RotationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "RotationLambdaARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-rules))
      (common-lisp:list
       (common-lisp:cons "RotationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-rotated-date))
      (common-lisp:list
       (common-lisp:cons "LastRotatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-changed-date))
      (common-lisp:list
       (common-lisp:cons "LastChangedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed-date))
      (common-lisp:list
       (common-lisp:cons "LastAccessedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-date))
      (common-lisp:list
       (common-lisp:cons "DeletedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-rotation-date))
      (common-lisp:list
       (common-lisp:cons "NextRotationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secret-versions-to-stages))
      (common-lisp:list
       (common-lisp:cons "SecretVersionsToStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-service))
      (common-lisp:list
       (common-lisp:cons "OwningService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-region))
      (common-lisp:list
       (common-lisp:cons "PrimaryRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input secret-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype secret-list-type ()
   '(trivial-types:proper-list secret-list-entry))
 (common-lisp:defun |make-secret-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list secret-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype secret-name-type () 'common-lisp:string)
(common-lisp:deftype secret-string-type () 'common-lisp:string)
(common-lisp:deftype secret-version-id-type () 'common-lisp:string)
(common-lisp:deftype secret-version-stage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype secret-version-stages-type ()
   '(trivial-types:proper-list secret-version-stage-type))
 (common-lisp:defun |make-secret-version-stages-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            secret-version-stage-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass secret-versions-list-entry common-lisp:nil
                       ((kms-key-ids :initarg :kms-key-ids :type
                         (common-lisp:or kms-key-id-list-type common-lisp:null)
                         :accessor %secret-versions-list-entry-kms-key-ids
                         :initform common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or created-date-type common-lisp:null)
                         :accessor %secret-versions-list-entry-created-date
                         :initform common-lisp:nil)
                        (last-accessed-date :initarg :last-accessed-date :type
                         (common-lisp:or last-accessed-date-type
                                         common-lisp:null)
                         :accessor
                         %secret-versions-list-entry-last-accessed-date
                         :initform common-lisp:nil)
                        (version-stages :initarg :version-stages :type
                         (common-lisp:or secret-version-stages-type
                                         common-lisp:null)
                         :accessor %secret-versions-list-entry-version-stages
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor %secret-versions-list-entry-version-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'secret-versions-list-entry
                    'make-secret-versions-list-entry))
 (common-lisp:defun make-secret-versions-list-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-ids created-date
                     last-accessed-date version-stages version-id)
   (common-lisp:apply #'common-lisp:make-instance 'secret-versions-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          secret-versions-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          secret-versions-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-stages))
      (common-lisp:list
       (common-lisp:cons "VersionStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed-date))
      (common-lisp:list
       (common-lisp:cons "LastAccessedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-ids))
      (common-lisp:list
       (common-lisp:cons "KmsKeyIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          secret-versions-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype secret-versions-list-type ()
   '(trivial-types:proper-list secret-versions-list-entry))
 (common-lisp:defun |make-secret-versions-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            secret-versions-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype secret-versions-to-stages-map-type ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-secret-versions-to-stages-map-type|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype sort-order-type () 'common-lisp:string)
(common-lisp:deftype status-message-type () 'common-lisp:string)
(common-lisp:deftype status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-replication-to-replica-request common-lisp:nil
                       ((secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor
                         %stop-replication-to-replica-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-replication-to-replica-request
                    'make-stop-replication-to-replica-request))
 (common-lisp:defun make-stop-replication-to-replica-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-replication-to-replica-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-to-replica-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-to-replica-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-to-replica-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-replication-to-replica-response common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %stop-replication-to-replica-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-replication-to-replica-response
                    'make-stop-replication-to-replica-response))
 (common-lisp:defun make-stop-replication-to-replica-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-replication-to-replica-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-to-replica-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-to-replica-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-to-replica-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value-type common-lisp:null)
                         :accessor %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key-type common-lisp:null)
                         :accessor %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-key-list-type ()
   '(trivial-types:proper-list tag-key-type))
 (common-lisp:defun |make-tag-key-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list-type () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list-type common-lisp:null)
                         :accessor %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %tag-resource-request-secret-id :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value-type () 'common-lisp:string)
(common-lisp:deftype timestamp-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list-type common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %untag-resource-request-secret-id :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-secret-request common-lisp:nil
                       ((secret-string :initarg :secret-string :type
                         (common-lisp:or secret-string-type common-lisp:null)
                         :accessor %update-secret-request-secret-string
                         :initform common-lisp:nil)
                        (secret-binary :initarg :secret-binary :type
                         (common-lisp:or secret-binary-type common-lisp:null)
                         :accessor %update-secret-request-secret-binary
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id-type common-lisp:null)
                         :accessor %update-secret-request-kms-key-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor %update-secret-request-description :initform
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token-type
                                         common-lisp:null)
                         :accessor %update-secret-request-client-request-token
                         :initform common-lisp:nil)
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %update-secret-request-secret-id :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-secret-request 'make-update-secret-request))
 (common-lisp:defun make-update-secret-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-string secret-binary kms-key-id
                     description client-request-token secret-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-binary))
      (common-lisp:list
       (common-lisp:cons "SecretBinary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-string))
      (common-lisp:list
       (common-lisp:cons "SecretString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-secret-response common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor %update-secret-response-version-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %update-secret-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %update-secret-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-secret-response 'make-update-secret-response))
 (common-lisp:defun make-update-secret-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-secret-version-stage-request common-lisp:nil
                       ((move-to-version-id :initarg :move-to-version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor
                         %update-secret-version-stage-request-move-to-version-id
                         :initform common-lisp:nil)
                        (remove-from-version-id :initarg
                         :remove-from-version-id :type
                         (common-lisp:or secret-version-id-type
                                         common-lisp:null)
                         :accessor
                         %update-secret-version-stage-request-remove-from-version-id
                         :initform common-lisp:nil)
                        (version-stage :initarg :version-stage :type
                         (common-lisp:or secret-version-stage-type
                                         common-lisp:null)
                         :accessor
                         %update-secret-version-stage-request-version-stage
                         :initform
                         (common-lisp:error ":version-stage is required"))
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor
                         %update-secret-version-stage-request-secret-id
                         :initform
                         (common-lisp:error ":secret-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-secret-version-stage-request
                    'make-update-secret-version-stage-request))
 (common-lisp:defun make-update-secret-version-stage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key move-to-version-id remove-from-version-id
                     version-stage secret-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-secret-version-stage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-version-stage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-version-stage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-stage))
      (common-lisp:list
       (common-lisp:cons "VersionStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-from-version-id))
      (common-lisp:list
       (common-lisp:cons "RemoveFromVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'move-to-version-id))
      (common-lisp:list
       (common-lisp:cons "MoveToVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-version-stage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-secret-version-stage-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or secret-name-type common-lisp:null)
                         :accessor %update-secret-version-stage-response-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or secret-arntype common-lisp:null)
                         :accessor %update-secret-version-stage-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-secret-version-stage-response
                    'make-update-secret-version-stage-response))
 (common-lisp:defun make-update-secret-version-stage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-secret-version-stage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-version-stage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-version-stage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-secret-version-stage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-resource-policy-request common-lisp:nil
                       ((resource-policy :initarg :resource-policy :type
                         (common-lisp:or non-empty-resource-policy-type
                                         common-lisp:null)
                         :accessor
                         %validate-resource-policy-request-resource-policy
                         :initform
                         (common-lisp:error ":resource-policy is required"))
                        (secret-id :initarg :secret-id :type
                         (common-lisp:or secret-id-type common-lisp:null)
                         :accessor %validate-resource-policy-request-secret-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validate-resource-policy-request
                    'make-validate-resource-policy-request))
 (common-lisp:defun make-validate-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-policy secret-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-resource-policy-response common-lisp:nil
                       ((validation-errors :initarg :validation-errors :type
                         (common-lisp:or validation-errors-type
                                         common-lisp:null)
                         :accessor
                         %validate-resource-policy-response-validation-errors
                         :initform common-lisp:nil)
                        (policy-validation-passed :initarg
                         :policy-validation-passed :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %validate-resource-policy-response-policy-validation-passed
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validate-resource-policy-response
                    'make-validate-resource-policy-response))
 (common-lisp:defun make-validate-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation-errors
                     policy-validation-passed)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-validation-passed))
      (common-lisp:list
       (common-lisp:cons "PolicyValidationPassed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validation-errors-entry common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %validation-errors-entry-error-message
                         :initform common-lisp:nil)
                        (check-name :initarg :check-name :type
                         (common-lisp:or name-type common-lisp:null) :accessor
                         %validation-errors-entry-check-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validation-errors-entry 'make-validation-errors-entry))
 (common-lisp:defun make-validation-errors-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message check-name)
   (common-lisp:apply #'common-lisp:make-instance 'validation-errors-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-errors-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-errors-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "CheckName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-errors-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-errors-type ()
   '(trivial-types:proper-list validation-errors-entry))
 (common-lisp:defun |make-validation-errors-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-errors-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun cancel-rotate-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id)
   (common-lisp:declare (common-lisp:ignorable secret-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-rotate-secret-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelRotateSecret"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-rotate-secret))
(common-lisp:progn
 (common-lisp:defun create-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name client-request-token description
                     kms-key-id secret-binary secret-string tags
                     add-replica-regions force-overwrite-replica-secret)
   (common-lisp:declare
    (common-lisp:ignorable name client-request-token description kms-key-id
     secret-binary secret-string tags add-replica-regions
     force-overwrite-replica-secret))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-secret-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateSecret"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-secret))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id)
   (common-lisp:declare (common-lisp:ignorable secret-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteResourcePolicy"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id recovery-window-in-days
                     force-delete-without-recovery)
   (common-lisp:declare
    (common-lisp:ignorable secret-id recovery-window-in-days
     force-delete-without-recovery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-secret-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteSecret"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-secret))
(common-lisp:progn
 (common-lisp:defun describe-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id)
   (common-lisp:declare (common-lisp:ignorable secret-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-secret-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSecret"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-secret))
(common-lisp:progn
 (common-lisp:defun get-random-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key password-length exclude-characters
                     exclude-numbers exclude-punctuation exclude-uppercase
                     exclude-lowercase include-space
                     require-each-included-type)
   (common-lisp:declare
    (common-lisp:ignorable password-length exclude-characters exclude-numbers
     exclude-punctuation exclude-uppercase exclude-lowercase include-space
     require-each-included-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-random-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetRandomPassword"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-random-password))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id)
   (common-lisp:declare (common-lisp:ignorable secret-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetResourcePolicy"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun get-secret-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id version-id version-stage)
   (common-lisp:declare
    (common-lisp:ignorable secret-id version-id version-stage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-secret-value-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetSecretValue"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-secret-value))
(common-lisp:progn
 (common-lisp:defun list-secret-version-ids
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id max-results next-token
                     include-deprecated)
   (common-lisp:declare
    (common-lisp:ignorable secret-id max-results next-token
     include-deprecated))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-secret-version-ids-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListSecretVersionIds"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-secret-version-ids))
(common-lisp:progn
 (common-lisp:defun list-secrets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-planned-deletion max-results
                     next-token filters sort-order)
   (common-lisp:declare
    (common-lisp:ignorable include-planned-deletion max-results next-token
     filters sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-secrets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListSecrets"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-secrets))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id resource-policy
                     block-public-policy)
   (common-lisp:declare
    (common-lisp:ignorable secret-id resource-policy block-public-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutResourcePolicy"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun put-secret-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id client-request-token
                     secret-binary secret-string version-stages)
   (common-lisp:declare
    (common-lisp:ignorable secret-id client-request-token secret-binary
     secret-string version-stages))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-secret-value-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutSecretValue"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-secret-value))
(common-lisp:progn
 (common-lisp:defun remove-regions-from-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id remove-replica-regions)
   (common-lisp:declare
    (common-lisp:ignorable secret-id remove-replica-regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-regions-from-replication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveRegionsFromReplication"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-regions-from-replication))
(common-lisp:progn
 (common-lisp:defun replicate-secret-to-regions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id add-replica-regions
                     force-overwrite-replica-secret)
   (common-lisp:declare
    (common-lisp:ignorable secret-id add-replica-regions
     force-overwrite-replica-secret))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-replicate-secret-to-regions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ReplicateSecretToRegions"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'replicate-secret-to-regions))
(common-lisp:progn
 (common-lisp:defun restore-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id)
   (common-lisp:declare (common-lisp:ignorable secret-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-secret-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RestoreSecret"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-secret))
(common-lisp:progn
 (common-lisp:defun rotate-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id client-request-token
                     rotation-lambda-arn rotation-rules rotate-immediately)
   (common-lisp:declare
    (common-lisp:ignorable secret-id client-request-token rotation-lambda-arn
     rotation-rules rotate-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rotate-secret-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RotateSecret"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'rotate-secret))
(common-lisp:progn
 (common-lisp:defun stop-replication-to-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id)
   (common-lisp:declare (common-lisp:ignorable secret-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-replication-to-replica-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopReplicationToReplica"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-replication-to-replica))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id tags)
   (common-lisp:declare (common-lisp:ignorable secret-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable secret-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id client-request-token
                     description kms-key-id secret-binary secret-string)
   (common-lisp:declare
    (common-lisp:ignorable secret-id client-request-token description
     kms-key-id secret-binary secret-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-secret-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateSecret"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-secret))
(common-lisp:progn
 (common-lisp:defun update-secret-version-stage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id version-stage
                     remove-from-version-id move-to-version-id)
   (common-lisp:declare
    (common-lisp:ignorable secret-id version-stage remove-from-version-id
     move-to-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-secret-version-stage-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateSecretVersionStage"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-secret-version-stage))
(common-lisp:progn
 (common-lisp:defun validate-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key secret-id resource-policy)
   (common-lisp:declare (common-lisp:ignorable secret-id resource-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-validate-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'secretsmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ValidateResourcePolicy"
                                                        "2017-10-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'validate-resource-policy))
