;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/evidently/api
  (:use)
  (:nicknames #:aws/evidently)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/evidently/api)
(common-lisp:progn
 (common-lisp:define-condition evidently-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'evidently-error))
(common-lisp:progn
 (common-lisp:defclass evidently-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "evidently" :api-version
                        "2021-02-01" :host-prefix "evidently" :signing-name
                        "evidently" :global-host common-lisp:nil))
 (common-lisp:export 'evidently-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (evidently-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype app-config-resource-id () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-evaluate-feature-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-evaluate-feature-request-"))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (requests (common-lisp:error ":requests is required") :type
    (common-lisp:or evaluation-requests-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-evaluate-feature-request
                    'make-batch-evaluate-feature-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-feature-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-feature-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requests))
      (common-lisp:list
       (common-lisp:cons "requests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-feature-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-evaluate-feature-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-evaluate-feature-response-"))
   (results common-lisp:nil :type
    (common-lisp:or evaluation-results-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-evaluate-feature-response
                    'make-batch-evaluate-feature-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-feature-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-feature-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-evaluate-feature-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype change-direction-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logs-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logs-destination-"))
   (log-group common-lisp:nil :type
    (common-lisp:or cw-log-group-safe-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-destination
                    'make-cloud-watch-logs-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "logGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logs-destination-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logs-destination-config-"))
   (log-group common-lisp:nil :type
    (common-lisp:or cw-log-group-safe-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-destination-config
                    'make-cloud-watch-logs-destination-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "logGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (evidently-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experiment-request-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (metric-goals (common-lisp:error ":metricgoals is required") :type
    (common-lisp:or metric-goal-config-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or experiment-name common-lisp:null))
   (online-ab-config common-lisp:nil :type
    (common-lisp:or online-ab-config common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (randomization-salt common-lisp:nil :type
    (common-lisp:or randomization-salt common-lisp:null))
   (sampling-rate common-lisp:nil :type
    (common-lisp:or split-weight common-lisp:null))
   (segment common-lisp:nil :type
    (common-lisp:or segment-ref common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (treatments (common-lisp:error ":treatments is required") :type
    (common-lisp:or treatment-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-request
                    'make-create-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-goals))
      (common-lisp:list
       (common-lisp:cons "metricGoals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'online-ab-config))
      (common-lisp:list
       (common-lisp:cons "onlineAbConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'randomization-salt))
      (common-lisp:list
       (common-lisp:cons "randomizationSalt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-rate))
      (common-lisp:list
       (common-lisp:cons "samplingRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatments))
      (common-lisp:list
       (common-lisp:cons "treatments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experiment-response-"))
   (experiment (common-lisp:error ":experiment is required") :type
    (common-lisp:or experiment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-response
                    'make-create-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-feature-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-feature-request-"))
   (default-variation common-lisp:nil :type
    (common-lisp:or variation-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (entity-overrides common-lisp:nil :type
    (common-lisp:or entity-override-map common-lisp:null))
   (evaluation-strategy common-lisp:nil :type
    (common-lisp:or feature-evaluation-strategy common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (variations (common-lisp:error ":variations is required") :type
    (common-lisp:or variation-configs-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-feature-request 'make-create-feature-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-variation))
      (common-lisp:list
       (common-lisp:cons "defaultVariation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-overrides))
      (common-lisp:list
       (common-lisp:cons "entityOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-strategy))
      (common-lisp:list
       (common-lisp:cons "evaluationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variations))
      (common-lisp:list
       (common-lisp:cons "variations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-feature-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-feature-response-"))
   (feature common-lisp:nil :type (common-lisp:or feature common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-feature-response 'make-create-feature-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-launch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-launch-request-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (groups (common-lisp:error ":groups is required") :type
    (common-lisp:or launch-group-config-list common-lisp:null))
   (metric-monitors common-lisp:nil :type
    (common-lisp:or metric-monitor-config-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or launch-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (randomization-salt common-lisp:nil :type
    (common-lisp:or randomization-salt common-lisp:null))
   (scheduled-splits-config common-lisp:nil :type
    (common-lisp:or scheduled-splits-launch-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-launch-request 'make-create-launch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-monitors))
      (common-lisp:list
       (common-lisp:cons "metricMonitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'randomization-salt))
      (common-lisp:list
       (common-lisp:cons "randomizationSalt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-splits-config))
      (common-lisp:list
       (common-lisp:cons "scheduledSplitsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-launch-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-launch-response-"))
   (launch (common-lisp:error ":launch is required") :type
    (common-lisp:or launch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-launch-response 'make-create-launch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch))
      (common-lisp:list
       (common-lisp:cons "launch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-request-"))
   (app-config-resource common-lisp:nil :type
    (common-lisp:or project-app-config-resource-config common-lisp:null))
   (data-delivery common-lisp:nil :type
    (common-lisp:or project-data-delivery-config common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or project-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-config-resource))
      (common-lisp:list
       (common-lisp:cons "appConfigResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-delivery))
      (common-lisp:list
       (common-lisp:cons "dataDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-response-"))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-response 'make-create-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-segment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-segment-request-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or segment-name common-lisp:null))
   (pattern (common-lisp:error ":pattern is required") :type
    (common-lisp:or segment-pattern common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-segment-request 'make-create-segment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-segment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-segment-response-"))
   (segment (common-lisp:error ":segment is required") :type
    (common-lisp:or segment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-segment-response 'make-create-segment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-response))
   common-lisp:nil))
(common-lisp:deftype cw-dimension-safe-name () 'common-lisp:string)
(common-lisp:deftype cw-log-group-safe-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-experiment-request-"))
   (experiment (common-lisp:error ":experiment is required") :type
    (common-lisp:or experiment-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-experiment-request
                    'make-delete-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-experiment-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-experiment-response
                    'make-delete-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-feature-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-feature-request-"))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-feature-request 'make-delete-feature-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-feature-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-feature-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-feature-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-feature-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-feature-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-feature-response 'make-delete-feature-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-feature-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-feature-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-feature-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-launch-request-"))
   (launch (common-lisp:error ":launch is required") :type
    (common-lisp:or launch-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-launch-request 'make-delete-launch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-launch-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-launch-response 'make-delete-launch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-project-request-"))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-project-request 'make-delete-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-project-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-project-response 'make-delete-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-segment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-segment-request-"))
   (segment (common-lisp:error ":segment is required") :type
    (common-lisp:or segment-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-segment-request 'make-delete-segment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-segment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-segment-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-segment-response 'make-delete-segment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype double-value-list () '(trivial-types:proper-list double))
 (common-lisp:defun make-double-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list double))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype entity-override-map () 'common-lisp:hash-table)
 (common-lisp:defun make-entity-override-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype error-code-enum () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluate-feature-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluate-feature-request-"))
   (entity-id (common-lisp:error ":entityid is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (evaluation-context common-lisp:nil :type
    (common-lisp:or json-value common-lisp:null))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluate-feature-request 'make-evaluate-feature-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-feature-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-feature-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "evaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-feature-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluate-feature-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluate-feature-response-"))
   (details common-lisp:nil :type (common-lisp:or json-value common-lisp:null))
   (reason common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or variable-value common-lisp:null))
   (variation common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluate-feature-response
                    'make-evaluate-feature-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-feature-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-feature-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variation))
      (common-lisp:list
       (common-lisp:cons "variation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-feature-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-request-"))
   (entity-id (common-lisp:error ":entityid is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (evaluation-context common-lisp:nil :type
    (common-lisp:or json-value common-lisp:null))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-request 'make-evaluation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "evaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-requests-list ()
   '(trivial-types:proper-list evaluation-request))
 (common-lisp:defun make-evaluation-requests-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-result-"))
   (details common-lisp:nil :type (common-lisp:or json-value common-lisp:null))
   (entity-id (common-lisp:error ":entityid is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (project common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (reason common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or variable-value common-lisp:null))
   (variation common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-result 'make-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variation))
      (common-lisp:list
       (common-lisp:cons "variation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-results-list ()
   '(trivial-types:proper-list evaluation-result))
 (common-lisp:defun make-evaluation-results-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-rule-"))
   (name common-lisp:nil :type (common-lisp:or rule-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or rule-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'evaluation-rule 'make-evaluation-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-rules-list ()
   '(trivial-types:proper-list evaluation-rule))
 (common-lisp:defun make-evaluation-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (data (common-lisp:error ":data is required") :type
    (common-lisp:or json-value common-lisp:null))
   (timestamp (common-lisp:error ":string is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or event-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun make-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or experiment-arn common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (execution common-lisp:nil :type
    (common-lisp:or experiment-execution common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (metric-goals common-lisp:nil :type
    (common-lisp:or metric-goals-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or experiment-name common-lisp:null))
   (online-ab-definition common-lisp:nil :type
    (common-lisp:or online-ab-definition common-lisp:null))
   (project common-lisp:nil :type
    (common-lisp:or project-arn common-lisp:null))
   (randomization-salt common-lisp:nil :type
    (common-lisp:or randomization-salt common-lisp:null))
   (sampling-rate common-lisp:nil :type
    (common-lisp:or split-weight common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or experiment-schedule common-lisp:null))
   (segment common-lisp:nil :type
    (common-lisp:or segment-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or experiment-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (treatments common-lisp:nil :type
    (common-lisp:or treatment-list common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or experiment-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'experiment 'make-experiment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution))
      (common-lisp:list
       (common-lisp:cons "execution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-goals))
      (common-lisp:list
       (common-lisp:cons "metricGoals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'online-ab-definition))
      (common-lisp:list
       (common-lisp:cons "onlineAbDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'randomization-salt))
      (common-lisp:list
       (common-lisp:cons "randomizationSalt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-rate))
      (common-lisp:list
       (common-lisp:cons "samplingRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatments))
      (common-lisp:list
       (common-lisp:cons "treatments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment))
   common-lisp:nil))
(common-lisp:deftype experiment-arn () 'common-lisp:string)
(common-lisp:deftype experiment-base-stat () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-execution-"))
   (ended-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (started-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-execution 'make-experiment-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-time))
      (common-lisp:list
       (common-lisp:cons "endedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-time))
      (common-lisp:list
       (common-lisp:cons "startedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-list ()
   '(trivial-types:proper-list experiment))
 (common-lisp:defun make-experiment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list experiment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-report (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-report-"))
   (content common-lisp:nil :type (common-lisp:or json-value common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or cw-dimension-safe-name common-lisp:null))
   (report-name common-lisp:nil :type
    (common-lisp:or experiment-report-name common-lisp:null))
   (treatment-name common-lisp:nil :type
    (common-lisp:or treatment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-report 'make-experiment-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-name))
      (common-lisp:list
       (common-lisp:cons "reportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-name))
      (common-lisp:list
       (common-lisp:cons "treatmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-report))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-report-list ()
   '(trivial-types:proper-list experiment-report))
 (common-lisp:defun make-experiment-report-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list experiment-report))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-report-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-report-name-list ()
   '(trivial-types:proper-list experiment-report-name))
 (common-lisp:defun make-experiment-report-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list experiment-report-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-result-request-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-result-request-type-list ()
   '(trivial-types:proper-list experiment-result-request-type))
 (common-lisp:defun make-experiment-result-request-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-result-request-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-result-response-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-results-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-results-data-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or cw-dimension-safe-name common-lisp:null))
   (result-stat common-lisp:nil :type
    (common-lisp:or experiment-result-response-type common-lisp:null))
   (treatment-name common-lisp:nil :type
    (common-lisp:or treatment-name common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or double-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-results-data 'make-experiment-results-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-results-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-results-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-stat))
      (common-lisp:list
       (common-lisp:cons "resultStat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-name))
      (common-lisp:list
       (common-lisp:cons "treatmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-results-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-results-data-list ()
   '(trivial-types:proper-list experiment-results-data))
 (common-lisp:defun make-experiment-results-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list experiment-results-data))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-schedule-"))
   (analysis-complete-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-schedule 'make-experiment-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-complete-time))
      (common-lisp:list
       (common-lisp:cons "analysisCompleteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-schedule))
   common-lisp:nil))
(common-lisp:deftype experiment-status () 'common-lisp:string)
(common-lisp:deftype experiment-stop-desired-state () 'common-lisp:string)
(common-lisp:deftype experiment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (feature (:copier common-lisp:nil) (:conc-name "struct-shape-feature-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or feature-arn common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (default-variation common-lisp:nil :type
    (common-lisp:or variation-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (entity-overrides common-lisp:nil :type
    (common-lisp:or entity-override-map common-lisp:null))
   (evaluation-rules common-lisp:nil :type
    (common-lisp:or evaluation-rules-list common-lisp:null))
   (evaluation-strategy (common-lisp:error ":evaluationstrategy is required")
    :type (common-lisp:or feature-evaluation-strategy common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (project common-lisp:nil :type
    (common-lisp:or project-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or feature-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (value-type (common-lisp:error ":valuetype is required") :type
    (common-lisp:or variation-value-type common-lisp:null))
   (variations (common-lisp:error ":variations is required") :type
    (common-lisp:or variations-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'feature 'make-feature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-variation))
      (common-lisp:list
       (common-lisp:cons "defaultVariation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-overrides))
      (common-lisp:list
       (common-lisp:cons "entityOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-rules))
      (common-lisp:list
       (common-lisp:cons "evaluationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-strategy))
      (common-lisp:list
       (common-lisp:cons "evaluationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-type))
      (common-lisp:list
       (common-lisp:cons "valueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variations))
      (common-lisp:list
       (common-lisp:cons "variations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature))
   common-lisp:nil))
(common-lisp:deftype feature-arn () 'common-lisp:string)
(common-lisp:deftype feature-evaluation-strategy () 'common-lisp:string)
(common-lisp:deftype feature-name () 'common-lisp:string)
(common-lisp:deftype feature-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feature-summaries-list ()
   '(trivial-types:proper-list feature-summary))
 (common-lisp:defun make-feature-summaries-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list feature-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (feature-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-feature-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (default-variation common-lisp:nil :type
    (common-lisp:or variation-name common-lisp:null))
   (evaluation-rules common-lisp:nil :type
    (common-lisp:or evaluation-rules-list common-lisp:null))
   (evaluation-strategy (common-lisp:error ":evaluationstrategy is required")
    :type (common-lisp:or feature-evaluation-strategy common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (project common-lisp:nil :type
    (common-lisp:or project-ref common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or feature-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'feature-summary 'make-feature-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-variation))
      (common-lisp:list
       (common-lisp:cons "defaultVariation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-rules))
      (common-lisp:list
       (common-lisp:cons "evaluationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-strategy))
      (common-lisp:list
       (common-lisp:cons "evaluationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype feature-to-variation-map () 'common-lisp:hash-table)
 (common-lisp:defun make-feature-to-variation-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-experiment-request-"))
   (experiment (common-lisp:error ":experiment is required") :type
    (common-lisp:or experiment-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-request 'make-get-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-experiment-response-"))
   (experiment common-lisp:nil :type
    (common-lisp:or experiment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-response 'make-get-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-experiment-results-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-experiment-results-request-"))
   (base-stat common-lisp:nil :type
    (common-lisp:or experiment-base-stat common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (experiment (common-lisp:error ":experiment is required") :type
    (common-lisp:or experiment-name common-lisp:null))
   (metric-names (common-lisp:error ":metricnames is required") :type
    (common-lisp:or metric-name-list common-lisp:null))
   (period common-lisp:nil :type
    (common-lisp:or results-period common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (report-names common-lisp:nil :type
    (common-lisp:or experiment-report-name-list common-lisp:null))
   (result-stats common-lisp:nil :type
    (common-lisp:or experiment-result-request-type-list common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (treatment-names (common-lisp:error ":treatmentnames is required") :type
    (common-lisp:or treatment-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-results-request
                    'make-get-experiment-results-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-results-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-stat))
      (common-lisp:list
       (common-lisp:cons "baseStat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-names))
      (common-lisp:list
       (common-lisp:cons "metricNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-names))
      (common-lisp:list
       (common-lisp:cons "reportNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-stats))
      (common-lisp:list
       (common-lisp:cons "resultStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-names))
      (common-lisp:list
       (common-lisp:cons "treatmentNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-results-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-experiment-results-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-experiment-results-response-"))
   (details common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reports common-lisp:nil :type
    (common-lisp:or experiment-report-list common-lisp:null))
   (results-data common-lisp:nil :type
    (common-lisp:or experiment-results-data-list common-lisp:null))
   (timestamps common-lisp:nil :type
    (common-lisp:or timestamp-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-results-response
                    'make-get-experiment-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reports))
      (common-lisp:list
       (common-lisp:cons "reports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-data))
      (common-lisp:list
       (common-lisp:cons "resultsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamps))
      (common-lisp:list
       (common-lisp:cons "timestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-feature-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-feature-request-"))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-feature-request 'make-get-feature-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-feature-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-feature-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-feature-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-feature-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-feature-response-"))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-feature-response 'make-get-feature-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-feature-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-feature-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-feature-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-request-"))
   (launch (common-lisp:error ":launch is required") :type
    (common-lisp:or launch-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-request 'make-get-launch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-launch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-response-"))
   (launch common-lisp:nil :type (common-lisp:or launch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-response 'make-get-launch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-launch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-launch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch))
      (common-lisp:list
       (common-lisp:cons "launch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-launch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-project-request-"))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-project-request 'make-get-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-project-response-"))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-project-response 'make-get-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-request-"))
   (segment (common-lisp:error ":segment is required") :type
    (common-lisp:or segment-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-request 'make-get-segment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-segment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-response-"))
   (segment (common-lisp:error ":segment is required") :type
    (common-lisp:or segment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-response 'make-get-segment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-segment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-segment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-segment-response))
   common-lisp:nil))
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype group-to-weight-map () 'common-lisp:hash-table)
 (common-lisp:defun make-group-to-weight-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (evidently-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype json-path () 'common-lisp:string)
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (launch (:copier common-lisp:nil) (:conc-name "struct-shape-launch-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or launch-arn common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (execution common-lisp:nil :type
    (common-lisp:or launch-execution common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or launch-group-list common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (metric-monitors common-lisp:nil :type
    (common-lisp:or metric-monitor-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or launch-name common-lisp:null))
   (project common-lisp:nil :type
    (common-lisp:or project-ref common-lisp:null))
   (randomization-salt common-lisp:nil :type
    (common-lisp:or randomization-salt common-lisp:null))
   (scheduled-splits-definition common-lisp:nil :type
    (common-lisp:or scheduled-splits-launch-definition common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or launch-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or launch-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'launch 'make-launch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution))
      (common-lisp:list
       (common-lisp:cons "execution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-monitors))
      (common-lisp:list
       (common-lisp:cons "metricMonitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'randomization-salt))
      (common-lisp:list
       (common-lisp:cons "randomizationSalt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-splits-definition))
      (common-lisp:list
       (common-lisp:cons "scheduledSplitsDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch))
   common-lisp:nil))
(common-lisp:deftype launch-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (launch-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-execution-"))
   (ended-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (started-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-execution 'make-launch-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-time))
      (common-lisp:list
       (common-lisp:cons "endedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-time))
      (common-lisp:list
       (common-lisp:cons "startedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-group-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (feature-variations (common-lisp:error ":featurevariations is required")
    :type (common-lisp:or feature-to-variation-map common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or group-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'launch-group 'make-launch-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-variations))
      (common-lisp:list
       (common-lisp:cons "featureVariations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-group-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-group-config-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or group-name common-lisp:null))
   (variation (common-lisp:error ":variation is required") :type
    (common-lisp:or variation-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-group-config 'make-launch-group-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-group-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-group-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variation))
      (common-lisp:list
       (common-lisp:cons "variation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-group-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-group-config-list ()
   '(trivial-types:proper-list launch-group-config))
 (common-lisp:defun make-launch-group-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-group-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype launch-group-list ()
   '(trivial-types:proper-list launch-group))
 (common-lisp:defun make-launch-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-name () 'common-lisp:string)
(common-lisp:deftype launch-status () 'common-lisp:string)
(common-lisp:deftype launch-stop-desired-state () 'common-lisp:string)
(common-lisp:deftype launch-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launches-list () '(trivial-types:proper-list launch))
 (common-lisp:defun make-launches-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiments-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-experiments common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or experiment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiments-request 'make-list-experiments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiments-response-"))
   (experiments common-lisp:nil :type
    (common-lisp:or experiment-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiments-response
                    'make-list-experiments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiments))
      (common-lisp:list
       (common-lisp:cons "experiments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-features-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-features-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-features common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-features-request 'make-list-features-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-features-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-features-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-features-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-features-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-features-response-"))
   (features common-lisp:nil :type
    (common-lisp:or feature-summaries-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-features-response 'make-list-features-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-features-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-features-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-features-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-launches-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-launches-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-launches common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or launch-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-launches-request 'make-list-launches-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-launches-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-launches-response-"))
   (launches common-lisp:nil :type
    (common-lisp:or launches-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-launches-response 'make-list-launches-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launches-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launches-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launches))
      (common-lisp:list
       (common-lisp:cons "launches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launches-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-projects common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (projects common-lisp:nil :type
    (common-lisp:or project-summaries-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-response 'make-list-projects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projects))
      (common-lisp:list
       (common-lisp:cons "projects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-segment-references-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-segment-references-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-references common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (segment (common-lisp:error ":segment is required") :type
    (common-lisp:or segment-ref common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or segment-reference-resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-segment-references-request
                    'make-list-segment-references-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-segment-references-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-segment-references-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-segment-references-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-segment-references-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-segment-references-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (referenced-by common-lisp:nil :type
    (common-lisp:or ref-resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-segment-references-response
                    'make-list-segment-references-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-segment-references-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-segment-references-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'referenced-by))
      (common-lisp:list
       (common-lisp:cons "referencedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-segment-references-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-segments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-segments-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-segments common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-segments-request 'make-list-segments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-segments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-segments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-segments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-segments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-segments-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (segments common-lisp:nil :type
    (common-lisp:or segment-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-segments-response 'make-list-segments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-segments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-segments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments))
      (common-lisp:list
       (common-lisp:cons "segments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-segments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-experiments () 'common-lisp:integer)
(common-lisp:deftype max-features () 'common-lisp:integer)
(common-lisp:deftype max-launches () 'common-lisp:integer)
(common-lisp:deftype max-projects () 'common-lisp:integer)
(common-lisp:deftype max-references () 'common-lisp:integer)
(common-lisp:deftype max-segments () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-definition-"))
   (entity-id-key common-lisp:nil :type
    (common-lisp:or json-path common-lisp:null))
   (event-pattern common-lisp:nil :type
    (common-lisp:or json-value common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or cw-dimension-safe-name common-lisp:null))
   (unit-label common-lisp:nil :type
    (common-lisp:or metric-unit-label common-lisp:null))
   (value-key common-lisp:nil :type
    (common-lisp:or json-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-definition 'make-metric-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id-key))
      (common-lisp:list
       (common-lisp:cons "entityIdKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "eventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-label))
      (common-lisp:list
       (common-lisp:cons "unitLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-key))
      (common-lisp:list
       (common-lisp:cons "valueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-definition-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-definition-config-"))
   (entity-id-key (common-lisp:error ":entityidkey is required") :type
    (common-lisp:or json-path common-lisp:null))
   (event-pattern common-lisp:nil :type
    (common-lisp:or metric-definition-config-event-pattern-string
                    common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or cw-dimension-safe-name common-lisp:null))
   (unit-label common-lisp:nil :type
    (common-lisp:or metric-unit-label common-lisp:null))
   (value-key (common-lisp:error ":valuekey is required") :type
    (common-lisp:or json-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-definition-config 'make-metric-definition-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-definition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-definition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id-key))
      (common-lisp:list
       (common-lisp:cons "entityIdKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "eventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-label))
      (common-lisp:list
       (common-lisp:cons "unitLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-key))
      (common-lisp:list
       (common-lisp:cons "valueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-definition-config))
   common-lisp:nil))
(common-lisp:deftype metric-definition-config-event-pattern-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-goal (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-goal-"))
   (desired-change common-lisp:nil :type
    (common-lisp:or change-direction-enum common-lisp:null))
   (metric-definition (common-lisp:error ":metricdefinition is required") :type
    (common-lisp:or metric-definition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-goal 'make-metric-goal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-goal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-goal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-change))
      (common-lisp:list
       (common-lisp:cons "desiredChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definition))
      (common-lisp:list
       (common-lisp:cons "metricDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-goal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-goal-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-goal-config-"))
   (desired-change common-lisp:nil :type
    (common-lisp:or change-direction-enum common-lisp:null))
   (metric-definition (common-lisp:error ":metricdefinition is required") :type
    (common-lisp:or metric-definition-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-goal-config 'make-metric-goal-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-goal-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-goal-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-change))
      (common-lisp:list
       (common-lisp:cons "desiredChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definition))
      (common-lisp:list
       (common-lisp:cons "metricDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-goal-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-goal-config-list ()
   '(trivial-types:proper-list metric-goal-config))
 (common-lisp:defun make-metric-goal-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-goal-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-goals-list ()
   '(trivial-types:proper-list metric-goal))
 (common-lisp:defun make-metric-goals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-goal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-monitor (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-monitor-"))
   (metric-definition (common-lisp:error ":metricdefinition is required") :type
    (common-lisp:or metric-definition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-monitor 'make-metric-monitor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-monitor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-monitor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definition))
      (common-lisp:list
       (common-lisp:cons "metricDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-monitor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-monitor-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-monitor-config-"))
   (metric-definition (common-lisp:error ":metricdefinition is required") :type
    (common-lisp:or metric-definition-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-monitor-config 'make-metric-monitor-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-monitor-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-monitor-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definition))
      (common-lisp:list
       (common-lisp:cons "metricDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-monitor-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-monitor-config-list ()
   '(trivial-types:proper-list metric-monitor-config))
 (common-lisp:defun make-metric-monitor-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-monitor-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-monitor-list ()
   '(trivial-types:proper-list metric-monitor))
 (common-lisp:defun make-metric-monitor-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-monitor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-name-list ()
   '(trivial-types:proper-list cw-dimension-safe-name))
 (common-lisp:defun make-metric-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cw-dimension-safe-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-unit-label () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (online-ab-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-online-ab-config-"))
   (control-treatment-name common-lisp:nil :type
    (common-lisp:or treatment-name common-lisp:null))
   (treatment-weights common-lisp:nil :type
    (common-lisp:or treatment-to-weight-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'online-ab-config 'make-online-ab-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input online-ab-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input online-ab-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-treatment-name))
      (common-lisp:list
       (common-lisp:cons "controlTreatmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-weights))
      (common-lisp:list
       (common-lisp:cons "treatmentWeights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input online-ab-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (online-ab-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-online-ab-definition-"))
   (control-treatment-name common-lisp:nil :type
    (common-lisp:or treatment-name common-lisp:null))
   (treatment-weights common-lisp:nil :type
    (common-lisp:or treatment-to-weight-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'online-ab-definition 'make-online-ab-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input online-ab-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input online-ab-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-treatment-name))
      (common-lisp:list
       (common-lisp:cons "controlTreatmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-weights))
      (common-lisp:list
       (common-lisp:cons "treatmentWeights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input online-ab-definition))
   common-lisp:nil))
(common-lisp:deftype primitive-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (project (:copier common-lisp:nil) (:conc-name "struct-shape-project-"))
   (active-experiment-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (active-launch-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (app-config-resource common-lisp:nil :type
    (common-lisp:or project-app-config-resource common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or project-arn common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (data-delivery common-lisp:nil :type
    (common-lisp:or project-data-delivery common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (experiment-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (feature-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (launch-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or project-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or project-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'project 'make-project))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-experiment-count))
      (common-lisp:list
       (common-lisp:cons "activeExperimentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-launch-count))
      (common-lisp:list
       (common-lisp:cons "activeLaunchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-config-resource))
      (common-lisp:list
       (common-lisp:cons "appConfigResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-delivery))
      (common-lisp:list
       (common-lisp:cons "dataDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-count))
      (common-lisp:list
       (common-lisp:cons "experimentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-count))
      (common-lisp:list
       (common-lisp:cons "featureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-count))
      (common-lisp:list
       (common-lisp:cons "launchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (project-app-config-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-app-config-resource-"))
   (application-id (common-lisp:error ":applicationid is required") :type
    (common-lisp:or app-config-resource-id common-lisp:null))
   (configuration-profile-id
    (common-lisp:error ":configurationprofileid is required") :type
    (common-lisp:or app-config-resource-id common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or app-config-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'project-app-config-resource
                    'make-project-app-config-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          project-app-config-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          project-app-config-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-profile-id))
      (common-lisp:list
       (common-lisp:cons "configurationProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          project-app-config-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (project-app-config-resource-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-app-config-resource-config-"))
   (application-id common-lisp:nil :type
    (common-lisp:or app-config-resource-id common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or app-config-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'project-app-config-resource-config
                    'make-project-app-config-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          project-app-config-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          project-app-config-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          project-app-config-resource-config))
   common-lisp:nil))
(common-lisp:deftype project-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (project-data-delivery (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-data-delivery-"))
   (cloud-watch-logs common-lisp:nil :type
    (common-lisp:or cloud-watch-logs-destination common-lisp:null))
   (s3destination common-lisp:nil :type
    (common-lisp:or s3destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'project-data-delivery 'make-project-data-delivery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          project-data-delivery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          project-data-delivery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-logs))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          project-data-delivery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (project-data-delivery-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-data-delivery-config-"))
   (cloud-watch-logs common-lisp:nil :type
    (common-lisp:or cloud-watch-logs-destination-config common-lisp:null))
   (s3destination common-lisp:nil :type
    (common-lisp:or s3destination-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'project-data-delivery-config
                    'make-project-data-delivery-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          project-data-delivery-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          project-data-delivery-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-logs))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          project-data-delivery-config))
   common-lisp:nil))
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:deftype project-ref () 'common-lisp:string)
(common-lisp:deftype project-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype project-summaries-list ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun make-project-summaries-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (project-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-summary-"))
   (active-experiment-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (active-launch-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or project-arn common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (experiment-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (feature-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (launch-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or project-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or project-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-experiment-count))
      (common-lisp:list
       (common-lisp:cons "activeExperimentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-launch-count))
      (common-lisp:list
       (common-lisp:cons "activeLaunchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-count))
      (common-lisp:list
       (common-lisp:cons "experimentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-count))
      (common-lisp:list
       (common-lisp:cons "featureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-count))
      (common-lisp:list
       (common-lisp:cons "launchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-project-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-project-events-request-"))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or event-list common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-project-events-request
                    'make-put-project-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-project-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-project-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-project-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-project-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-project-events-response-"))
   (event-results common-lisp:nil :type
    (common-lisp:or put-project-events-result-entry-list common-lisp:null))
   (failed-event-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-project-events-response
                    'make-put-project-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-project-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-project-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-results))
      (common-lisp:list
       (common-lisp:cons "eventResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-event-count))
      (common-lisp:list
       (common-lisp:cons "failedEventCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-project-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-project-events-result-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-project-events-result-entry-"))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code-enum common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-project-events-result-entry
                    'make-put-project-events-result-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-project-events-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-project-events-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-project-events-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-project-events-result-entry-list ()
   '(trivial-types:proper-list put-project-events-result-entry))
 (common-lisp:defun make-put-project-events-result-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-project-events-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype randomization-salt () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ref-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-ref-resource-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (last-updated-on common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ref-resource 'make-ref-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ref-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ref-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-on))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ref-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ref-resource-list ()
   '(trivial-types:proper-list ref-resource))
 (common-lisp:defun make-ref-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ref-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (evidently-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype results-period () 'common-lisp:integer)
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:deftype rule-type () 'common-lisp:string)
(common-lisp:deftype s3bucket-safe-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3destination-"))
   (bucket common-lisp:nil :type
    (common-lisp:or s3bucket-safe-name common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or s3prefix-safe-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3destination 'make-s3destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3destination-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3destination-config-"))
   (bucket common-lisp:nil :type
    (common-lisp:or s3bucket-safe-name common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or s3prefix-safe-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3destination-config 'make-s3destination-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3destination-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3destination-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3destination-config))
   common-lisp:nil))
(common-lisp:deftype s3prefix-safe-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-split (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-split-"))
   (group-weights common-lisp:nil :type
    (common-lisp:or group-to-weight-map common-lisp:null))
   (segment-overrides common-lisp:nil :type
    (common-lisp:or segment-overrides-list common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scheduled-split 'make-scheduled-split))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scheduled-split))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scheduled-split))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-weights))
      (common-lisp:list
       (common-lisp:cons "groupWeights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-overrides))
      (common-lisp:list
       (common-lisp:cons "segmentOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scheduled-split))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-split-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-split-config-"))
   (group-weights (common-lisp:error ":groupweights is required") :type
    (common-lisp:or group-to-weight-map common-lisp:null))
   (segment-overrides common-lisp:nil :type
    (common-lisp:or segment-overrides-list common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-split-config 'make-scheduled-split-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-split-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-split-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-weights))
      (common-lisp:list
       (common-lisp:cons "groupWeights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-overrides))
      (common-lisp:list
       (common-lisp:cons "segmentOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-split-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-split-config-list ()
   '(trivial-types:proper-list scheduled-split-config))
 (common-lisp:defun make-scheduled-split-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-split-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-splits-launch-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-splits-launch-config-"))
   (steps (common-lisp:error ":steps is required") :type
    (common-lisp:or scheduled-split-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-splits-launch-config
                    'make-scheduled-splits-launch-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-splits-launch-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-splits-launch-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-splits-launch-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-splits-launch-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-splits-launch-definition-"))
   (steps common-lisp:nil :type
    (common-lisp:or scheduled-step-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-splits-launch-definition
                    'make-scheduled-splits-launch-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-splits-launch-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-splits-launch-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-splits-launch-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-step-list ()
   '(trivial-types:proper-list scheduled-split))
 (common-lisp:defun make-scheduled-step-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-split))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (segment (:copier common-lisp:nil) (:conc-name "struct-shape-segment-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or segment-arn common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (experiment-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (last-updated-time (common-lisp:error ":lastupdatedtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (launch-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or segment-name common-lisp:null))
   (pattern (common-lisp:error ":pattern is required") :type
    (common-lisp:or segment-pattern common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'segment 'make-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-count))
      (common-lisp:list
       (common-lisp:cons "experimentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-count))
      (common-lisp:list
       (common-lisp:cons "launchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment))
   common-lisp:nil))
(common-lisp:deftype segment-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype segment-list () '(trivial-types:proper-list segment))
 (common-lisp:defun make-segment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype segment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (segment-override (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-override-"))
   (evaluation-order (common-lisp:error ":evaluationorder is required") :type
    (common-lisp:or long common-lisp:null))
   (segment (common-lisp:error ":segment is required") :type
    (common-lisp:or segment-ref common-lisp:null))
   (weights (common-lisp:error ":weights is required") :type
    (common-lisp:or group-to-weight-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-override 'make-segment-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-order))
      (common-lisp:list
       (common-lisp:cons "evaluationOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weights))
      (common-lisp:list
       (common-lisp:cons "weights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype segment-overrides-list ()
   '(trivial-types:proper-list segment-override))
 (common-lisp:defun make-segment-overrides-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment-override))
   aws-sdk/generator/shape::members))
(common-lisp:deftype segment-pattern () 'common-lisp:string)
(common-lisp:deftype segment-ref () 'common-lisp:string)
(common-lisp:deftype segment-reference-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (evidently-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (evidently-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype split-weight () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (start-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-experiment-request-"))
   (analysis-complete-time
    (common-lisp:error ":analysiscompletetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (experiment (common-lisp:error ":experiment is required") :type
    (common-lisp:or experiment-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-experiment-request 'make-start-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-complete-time))
      (common-lisp:list
       (common-lisp:cons "analysisCompleteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-experiment-response-"))
   (started-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-experiment-response
                    'make-start-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-time))
      (common-lisp:list
       (common-lisp:cons "startedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-launch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-launch-request-"))
   (launch (common-lisp:error ":launch is required") :type
    (common-lisp:or launch-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-launch-request 'make-start-launch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-launch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-launch-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-launch-response-"))
   (launch (common-lisp:error ":launch is required") :type
    (common-lisp:or launch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-launch-response 'make-start-launch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-launch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-launch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch))
      (common-lisp:list
       (common-lisp:cons "launch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-launch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-experiment-request-"))
   (desired-state common-lisp:nil :type
    (common-lisp:or experiment-stop-desired-state common-lisp:null))
   (experiment (common-lisp:error ":experiment is required") :type
    (common-lisp:or experiment-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-experiment-request 'make-stop-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "desiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-experiment-response-"))
   (ended-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-experiment-response 'make-stop-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-time))
      (common-lisp:list
       (common-lisp:cons "endedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-launch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-launch-request-"))
   (desired-state common-lisp:nil :type
    (common-lisp:or launch-stop-desired-state common-lisp:null))
   (launch (common-lisp:error ":launch is required") :type
    (common-lisp:or launch-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-launch-request 'make-stop-launch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-launch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "desiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-launch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-launch-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-launch-response-"))
   (ended-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-launch-response 'make-stop-launch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-launch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-launch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-time))
      (common-lisp:list
       (common-lisp:cons "endedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-launch-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (test-segment-pattern-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-segment-pattern-request-"))
   (pattern (common-lisp:error ":pattern is required") :type
    (common-lisp:or segment-pattern common-lisp:null))
   (payload (common-lisp:error ":payload is required") :type
    (common-lisp:or json-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-segment-pattern-request
                    'make-test-segment-pattern-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-segment-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-segment-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-segment-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-segment-pattern-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-segment-pattern-response-"))
   (match (common-lisp:error ":match is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-segment-pattern-response
                    'make-test-segment-pattern-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-segment-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-segment-pattern-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-segment-pattern-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (evidently-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype timestamp-list () '(trivial-types:proper-list timestamp))
 (common-lisp:defun make-timestamp-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestamp))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (treatment (:copier common-lisp:nil)
      (:conc-name "struct-shape-treatment-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (feature-variations common-lisp:nil :type
    (common-lisp:or feature-to-variation-map common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or treatment-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'treatment 'make-treatment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input treatment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input treatment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-variations))
      (common-lisp:list
       (common-lisp:cons "featureVariations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input treatment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (treatment-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-treatment-config-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or treatment-name common-lisp:null))
   (variation (common-lisp:error ":variation is required") :type
    (common-lisp:or variation-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'treatment-config 'make-treatment-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input treatment-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input treatment-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variation))
      (common-lisp:list
       (common-lisp:cons "variation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input treatment-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype treatment-config-list ()
   '(trivial-types:proper-list treatment-config))
 (common-lisp:defun make-treatment-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list treatment-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype treatment-list () '(trivial-types:proper-list treatment))
 (common-lisp:defun make-treatment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list treatment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype treatment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype treatment-name-list ()
   '(trivial-types:proper-list treatment-name))
 (common-lisp:defun make-treatment-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list treatment-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype treatment-to-weight-map () 'common-lisp:hash-table)
 (common-lisp:defun make-treatment-to-weight-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-experiment-request-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (experiment (common-lisp:error ":experiment is required") :type
    (common-lisp:or experiment-name common-lisp:null))
   (metric-goals common-lisp:nil :type
    (common-lisp:or metric-goal-config-list common-lisp:null))
   (online-ab-config common-lisp:nil :type
    (common-lisp:or online-ab-config common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (randomization-salt common-lisp:nil :type
    (common-lisp:or randomization-salt common-lisp:null))
   (remove-segment common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (sampling-rate common-lisp:nil :type
    (common-lisp:or split-weight common-lisp:null))
   (segment common-lisp:nil :type
    (common-lisp:or segment-ref common-lisp:null))
   (treatments common-lisp:nil :type
    (common-lisp:or treatment-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-request
                    'make-update-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-goals))
      (common-lisp:list
       (common-lisp:cons "metricGoals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'online-ab-config))
      (common-lisp:list
       (common-lisp:cons "onlineAbConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'randomization-salt))
      (common-lisp:list
       (common-lisp:cons "randomizationSalt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-segment))
      (common-lisp:list
       (common-lisp:cons "removeSegment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-rate))
      (common-lisp:list
       (common-lisp:cons "samplingRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatments))
      (common-lisp:list
       (common-lisp:cons "treatments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-experiment-response-"))
   (experiment (common-lisp:error ":experiment is required") :type
    (common-lisp:or experiment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-response
                    'make-update-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-feature-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-feature-request-"))
   (add-or-update-variations common-lisp:nil :type
    (common-lisp:or variation-configs-list common-lisp:null))
   (default-variation common-lisp:nil :type
    (common-lisp:or variation-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (entity-overrides common-lisp:nil :type
    (common-lisp:or entity-override-map common-lisp:null))
   (evaluation-strategy common-lisp:nil :type
    (common-lisp:or feature-evaluation-strategy common-lisp:null))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (remove-variations common-lisp:nil :type
    (common-lisp:or variation-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-feature-request 'make-update-feature-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-or-update-variations))
      (common-lisp:list
       (common-lisp:cons "addOrUpdateVariations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-variation))
      (common-lisp:list
       (common-lisp:cons "defaultVariation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-overrides))
      (common-lisp:list
       (common-lisp:cons "entityOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-strategy))
      (common-lisp:list
       (common-lisp:cons "evaluationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-variations))
      (common-lisp:list
       (common-lisp:cons "removeVariations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-feature-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-feature-response-"))
   (feature (common-lisp:error ":feature is required") :type
    (common-lisp:or feature common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-feature-response 'make-update-feature-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-launch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-launch-request-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or launch-group-config-list common-lisp:null))
   (launch (common-lisp:error ":launch is required") :type
    (common-lisp:or launch-name common-lisp:null))
   (metric-monitors common-lisp:nil :type
    (common-lisp:or metric-monitor-config-list common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (randomization-salt common-lisp:nil :type
    (common-lisp:or randomization-salt common-lisp:null))
   (scheduled-splits-config common-lisp:nil :type
    (common-lisp:or scheduled-splits-launch-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-launch-request 'make-update-launch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-monitors))
      (common-lisp:list
       (common-lisp:cons "metricMonitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'randomization-salt))
      (common-lisp:list
       (common-lisp:cons "randomizationSalt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-splits-config))
      (common-lisp:list
       (common-lisp:cons "scheduledSplitsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-launch-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-launch-response-"))
   (launch (common-lisp:error ":launch is required") :type
    (common-lisp:or launch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-launch-response 'make-update-launch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch))
      (common-lisp:list
       (common-lisp:cons "launch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-data-delivery-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-data-delivery-request-"))
   (cloud-watch-logs common-lisp:nil :type
    (common-lisp:or cloud-watch-logs-destination-config common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null))
   (s3destination common-lisp:nil :type
    (common-lisp:or s3destination-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-project-data-delivery-request
                    'make-update-project-data-delivery-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-data-delivery-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-data-delivery-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-logs))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-data-delivery-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-data-delivery-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-data-delivery-response-"))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-project-data-delivery-response
                    'make-update-project-data-delivery-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-data-delivery-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-data-delivery-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-data-delivery-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-request-"))
   (app-config-resource common-lisp:nil :type
    (common-lisp:or project-app-config-resource-config common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-project-request 'make-update-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-config-resource))
      (common-lisp:list
       (common-lisp:cons "appConfigResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-response-"))
   (project (common-lisp:error ":project is required") :type
    (common-lisp:or project common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-project-response 'make-update-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-response))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (evidently-error)
     ((field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (variable-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-variable-value-"))
   (bool-value common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (double-value common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (long-value common-lisp:nil :type
    (common-lisp:or variable-value-long-value-long common-lisp:null))
   (string-value common-lisp:nil :type
    (common-lisp:or variable-value-string-value-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'variable-value 'make-variable-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variable-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variable-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bool-value))
      (common-lisp:list
       (common-lisp:cons "boolValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variable-value))
   common-lisp:nil))
(common-lisp:deftype variable-value-long-value-long () 'common-lisp:integer)
(common-lisp:deftype variable-value-string-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (variation (:copier common-lisp:nil)
      (:conc-name "struct-shape-variation-"))
   (name common-lisp:nil :type
    (common-lisp:or variation-name common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or variable-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'variation 'make-variation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (variation-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-variation-config-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or variation-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or variable-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'variation-config 'make-variation-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variation-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variation-configs-list ()
   '(trivial-types:proper-list variation-config))
 (common-lisp:defun make-variation-configs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variation-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype variation-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype variation-name-list ()
   '(trivial-types:proper-list variation-name))
 (common-lisp:defun make-variation-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variation-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype variation-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype variations-list ()
   '(trivial-types:proper-list variation))
 (common-lisp:defun make-variations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun batch-evaluate-feature
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project requests)
   (common-lisp:declare (common-lisp:ignorable project requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-evaluate-feature-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/evaluations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "BatchEvaluateFeature"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-evaluate-feature))
(common-lisp:progn
 (common-lisp:defun create-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description metric-goals name
                     online-ab-config project randomization-salt sampling-rate
                     segment tags treatments)
   (common-lisp:declare
    (common-lisp:ignorable description metric-goals name online-ab-config
     project randomization-salt sampling-rate segment tags treatments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/experiments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "CreateExperiment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-experiment))
(common-lisp:progn
 (common-lisp:defun create-feature
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key default-variation description
                     entity-overrides evaluation-strategy name project tags
                     variations)
   (common-lisp:declare
    (common-lisp:ignorable default-variation description entity-overrides
     evaluation-strategy name project tags variations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-feature-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/features"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "CreateFeature"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-feature))
(common-lisp:progn
 (common-lisp:defun create-launch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description groups metric-monitors name
                     project randomization-salt scheduled-splits-config tags)
   (common-lisp:declare
    (common-lisp:ignorable description groups metric-monitors name project
     randomization-salt scheduled-splits-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-launch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/launches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "CreateLaunch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-launch))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-config-resource data-delivery
                     description name tags)
   (common-lisp:declare
    (common-lisp:ignorable app-config-resource data-delivery description name
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/projects"
                                                        "CreateProject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun create-segment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name pattern tags)
   (common-lisp:declare (common-lisp:ignorable description name pattern tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-segment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/segments"
                                                        "CreateSegment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-segment))
(common-lisp:progn
 (common-lisp:defun delete-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key experiment project)
   (common-lisp:declare (common-lisp:ignorable experiment project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/experiments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'experiment))))
                                                        "DeleteExperiment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-experiment))
(common-lisp:progn
 (common-lisp:defun delete-feature
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key feature project)
   (common-lisp:declare (common-lisp:ignorable feature project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-feature-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/features/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'feature))))
                                                        "DeleteFeature"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-feature))
(common-lisp:progn
 (common-lisp:defun delete-launch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch project)
   (common-lisp:declare (common-lisp:ignorable launch project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-launch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/launches/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch))))
                                                        "DeleteLaunch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-launch))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project)
   (common-lisp:declare (common-lisp:ignorable project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "DeleteProject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun delete-segment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key segment)
   (common-lisp:declare (common-lisp:ignorable segment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-segment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/segments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment))))
                                                        "DeleteSegment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-segment))
(common-lisp:progn
 (common-lisp:defun evaluate-feature
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entity-id evaluation-context feature
                     project)
   (common-lisp:declare
    (common-lisp:ignorable entity-id evaluation-context feature project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-evaluate-feature-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/evaluations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'feature))))
                                                        "EvaluateFeature"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'evaluate-feature))
(common-lisp:progn
 (common-lisp:defun get-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key experiment project)
   (common-lisp:declare (common-lisp:ignorable experiment project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/experiments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'experiment))))
                                                        "GetExperiment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-experiment))
(common-lisp:progn
 (common-lisp:defun get-experiment-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key base-stat end-time experiment
                     metric-names period project report-names result-stats
                     start-time treatment-names)
   (common-lisp:declare
    (common-lisp:ignorable base-stat end-time experiment metric-names period
     project report-names result-stats start-time treatment-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-experiment-results-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/experiments/~A/results"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'experiment))))
                                                        "GetExperimentResults"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-experiment-results))
(common-lisp:progn
 (common-lisp:defun get-feature
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key feature project)
   (common-lisp:declare (common-lisp:ignorable feature project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-feature-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/features/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'feature))))
                                                        "GetFeature"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-feature))
(common-lisp:progn
 (common-lisp:defun get-launch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch project)
   (common-lisp:declare (common-lisp:ignorable launch project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-launch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/launches/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch))))
                                                        "GetLaunch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch))
(common-lisp:progn
 (common-lisp:defun get-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project)
   (common-lisp:declare (common-lisp:ignorable project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "GetProject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-project))
(common-lisp:progn
 (common-lisp:defun get-segment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key segment)
   (common-lisp:declare (common-lisp:ignorable segment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-segment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/segments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment))))
                                                        "GetSegment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-segment))
(common-lisp:progn
 (common-lisp:defun list-experiments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token project status)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token project status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-experiments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/experiments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "ListExperiments"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-experiments))
(common-lisp:progn
 (common-lisp:defun list-features
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token project)
   (common-lisp:declare (common-lisp:ignorable max-results next-token project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-features-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/features"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "ListFeatures"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-features))
(common-lisp:progn
 (common-lisp:defun list-launches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token project status)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token project status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-launches-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/launches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "ListLaunches"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-launches))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/projects"
                                                        "ListProjects"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-segment-references
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token segment type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token segment type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-segment-references-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/segments/~A/references"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment))))
                                                        "ListSegmentReferences"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-segment-references))
(common-lisp:progn
 (common-lisp:defun list-segments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-segments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/segments"
                                                        "ListSegments"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-segments))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-project-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key events project)
   (common-lisp:declare (common-lisp:ignorable events project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-project-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/events/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "PutProjectEvents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-project-events))
(common-lisp:progn
 (common-lisp:defun start-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analysis-complete-time experiment
                     project)
   (common-lisp:declare
    (common-lisp:ignorable analysis-complete-time experiment project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/experiments/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'experiment))))
                                                        "StartExperiment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-experiment))
(common-lisp:progn
 (common-lisp:defun start-launch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch project)
   (common-lisp:declare (common-lisp:ignorable launch project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-launch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/launches/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch))))
                                                        "StartLaunch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-launch))
(common-lisp:progn
 (common-lisp:defun stop-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key desired-state experiment project reason)
   (common-lisp:declare
    (common-lisp:ignorable desired-state experiment project reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/experiments/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'experiment))))
                                                        "StopExperiment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-experiment))
(common-lisp:progn
 (common-lisp:defun stop-launch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key desired-state launch project reason)
   (common-lisp:declare
    (common-lisp:ignorable desired-state launch project reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-launch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/launches/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch))))
                                                        "StopLaunch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-launch))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-segment-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pattern payload)
   (common-lisp:declare (common-lisp:ignorable pattern payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-segment-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/test-segment-pattern"
                                                        "TestSegmentPattern"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-segment-pattern))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description experiment metric-goals
                     online-ab-config project randomization-salt remove-segment
                     sampling-rate segment treatments)
   (common-lisp:declare
    (common-lisp:ignorable description experiment metric-goals online-ab-config
     project randomization-salt remove-segment sampling-rate segment
     treatments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/experiments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'experiment))))
                                                        "UpdateExperiment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-experiment))
(common-lisp:progn
 (common-lisp:defun update-feature
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key add-or-update-variations
                     default-variation description entity-overrides
                     evaluation-strategy feature project remove-variations)
   (common-lisp:declare
    (common-lisp:ignorable add-or-update-variations default-variation
     description entity-overrides evaluation-strategy feature project
     remove-variations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-feature-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/features/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'feature))))
                                                        "UpdateFeature"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-feature))
(common-lisp:progn
 (common-lisp:defun update-launch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description groups launch metric-monitors
                     project randomization-salt scheduled-splits-config)
   (common-lisp:declare
    (common-lisp:ignorable description groups launch metric-monitors project
     randomization-salt scheduled-splits-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-launch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/launches/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch))))
                                                        "UpdateLaunch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-launch))
(common-lisp:progn
 (common-lisp:defun update-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-config-resource description project)
   (common-lisp:declare
    (common-lisp:ignorable app-config-resource description project))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "UpdateProject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-project))
(common-lisp:progn
 (common-lisp:defun update-project-data-delivery
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cloud-watch-logs project s3destination)
   (common-lisp:declare
    (common-lisp:ignorable cloud-watch-logs project s3destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-project-data-delivery-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'evidently-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/data-delivery"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project))))
                                                        "UpdateProjectDataDelivery"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-project-data-delivery))
