;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/pipes/api
  (:use)
  (:nicknames #:aws/pipes)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/pipes/api)
(common-lisp:progn
 (common-lisp:defclass pipes-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "pipes" :protocol
                        :rest-json))
 (common-lisp:export 'pipes-request))
(common-lisp:progn
 (common-lisp:define-condition pipes-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'pipes-error))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("InternalException" . internal-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype arn-or-json-path () 'common-lisp:string)
(common-lisp:deftype arn-or-url () 'common-lisp:string)
(common-lisp:deftype assign-public-ip () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-vpc-configuration common-lisp:nil
                       ((subnets :initarg :subnets :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %aws-vpc-configuration-subnets :initform
                         (common-lisp:error ":subnets is required"))
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %aws-vpc-configuration-security-groups
                         :initform common-lisp:nil)
                        (assign-public-ip :initarg :assign-public-ip :type
                         (common-lisp:or assign-public-ip common-lisp:null)
                         :accessor %aws-vpc-configuration-assign-public-ip
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-vpc-configuration 'make-aws-vpc-configuration))
 (common-lisp:defun make-aws-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnets security-groups assign-public-ip)
   (common-lisp:apply #'common-lisp:make-instance 'aws-vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign-public-ip))
      (common-lisp:list
       (common-lisp:cons "AssignPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-array-properties common-lisp:nil
                       ((size :initarg :size :type
                         (common-lisp:or batch-array-size common-lisp:null)
                         :accessor %batch-array-properties-size :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-array-properties 'make-batch-array-properties))
 (common-lisp:defun make-batch-array-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size)
   (common-lisp:apply #'common-lisp:make-instance 'batch-array-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-array-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-array-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-array-properties))
   common-lisp:nil))
(common-lisp:deftype batch-array-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass batch-container-overrides common-lisp:nil
                       ((resource-requirements :initarg :resource-requirements
                         :type
                         (common-lisp:or batch-resource-requirements-list
                                         common-lisp:null)
                         :accessor
                         %batch-container-overrides-resource-requirements
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-container-overrides-instance-type :initform
                         common-lisp:nil)
                        (environment :initarg :environment :type
                         (common-lisp:or batch-environment-variable-list
                                         common-lisp:null)
                         :accessor %batch-container-overrides-environment
                         :initform common-lisp:nil)
                        (command :initarg :command :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %batch-container-overrides-command :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-container-overrides
                    'make-batch-container-overrides))
 (common-lisp:defun make-batch-container-overrides
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-requirements instance-type
                     environment command)
   (common-lisp:apply #'common-lisp:make-instance 'batch-container-overrides
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-container-overrides))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-container-overrides))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-requirements))
      (common-lisp:list
       (common-lisp:cons "ResourceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-container-overrides))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-depends-on ()
   '(trivial-types:proper-list batch-job-dependency))
 (common-lisp:defun |make-batch-depends-on|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-job-dependency))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-environment-variable common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-environment-variable-value :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-environment-variable-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-environment-variable
                    'make-batch-environment-variable))
 (common-lisp:defun make-batch-environment-variable
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'batch-environment-variable
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-environment-variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-environment-variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-environment-variable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-environment-variable-list ()
   '(trivial-types:proper-list batch-environment-variable))
 (common-lisp:defun |make-batch-environment-variable-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-environment-variable))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-job-dependency common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or batch-job-dependency-type
                                         common-lisp:null)
                         :accessor %batch-job-dependency-type :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-job-dependency-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-job-dependency 'make-batch-job-dependency))
 (common-lisp:defun make-batch-job-dependency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type job-id)
   (common-lisp:apply #'common-lisp:make-instance 'batch-job-dependency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-job-dependency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-job-dependency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-job-dependency))
   common-lisp:nil))
(common-lisp:deftype batch-job-dependency-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-batch-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass batch-resource-requirement common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-resource-requirement-value :initform
                         (common-lisp:error ":value is required"))
                        (type :initarg :type :type
                         (common-lisp:or batch-resource-requirement-type
                                         common-lisp:null)
                         :accessor %batch-resource-requirement-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-resource-requirement
                    'make-batch-resource-requirement))
 (common-lisp:defun make-batch-resource-requirement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance 'batch-resource-requirement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-resource-requirement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-resource-requirement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-resource-requirement))
   common-lisp:nil))
(common-lisp:deftype batch-resource-requirement-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-resource-requirements-list ()
   '(trivial-types:proper-list batch-resource-requirement))
 (common-lisp:defun |make-batch-resource-requirements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-resource-requirement))
   aws-sdk/generator/shape::members))
(common-lisp:deftype batch-retry-attempts () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass batch-retry-strategy common-lisp:nil
                       ((attempts :initarg :attempts :type
                         (common-lisp:or batch-retry-attempts common-lisp:null)
                         :accessor %batch-retry-strategy-attempts :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-retry-strategy 'make-batch-retry-strategy))
 (common-lisp:defun make-batch-retry-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attempts)
   (common-lisp:apply #'common-lisp:make-instance 'batch-retry-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-retry-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-retry-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attempts))
      (common-lisp:list
       (common-lisp:cons "Attempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-retry-strategy))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype capacity-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-provider-strategy ()
   '(trivial-types:proper-list capacity-provider-strategy-item))
 (common-lisp:defun |make-capacity-provider-strategy|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            capacity-provider-strategy-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass capacity-provider-strategy-item common-lisp:nil
                       ((weight :initarg :|weight| :type
                         (common-lisp:or capacity-provider-strategy-item-weight
                                         common-lisp:null)
                         :accessor %capacity-provider-strategy-item-weight
                         :initform common-lisp:nil)
                        (capacity-provider :initarg :|capacityProvider| :type
                         (common-lisp:or capacity-provider common-lisp:null)
                         :accessor
                         %capacity-provider-strategy-item-capacity-provider
                         :initform
                         (common-lisp:error ":capacityprovider is required"))
                        (base :initarg :|base| :type
                         (common-lisp:or capacity-provider-strategy-item-base
                                         common-lisp:null)
                         :accessor %capacity-provider-strategy-item-base
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'capacity-provider-strategy-item
                    'make-capacity-provider-strategy-item))
 (common-lisp:defun make-capacity-provider-strategy-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weight capacity-provider base)
   (common-lisp:apply #'common-lisp:make-instance
                      'capacity-provider-strategy-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   common-lisp:nil))
(common-lisp:deftype capacity-provider-strategy-item-base ()
  'common-lisp:integer)
(common-lisp:deftype capacity-provider-strategy-item-weight ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (pipes-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-pipe-request common-lisp:nil
                       ((target-parameters :initarg :target-parameters :type
                         (common-lisp:or pipe-target-parameters
                                         common-lisp:null)
                         :accessor %create-pipe-request-target-parameters
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-pipe-request-target :initform
                         (common-lisp:error ":target is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-pipe-request-tags :initform common-lisp:nil)
                        (source-parameters :initarg :source-parameters :type
                         (common-lisp:or pipe-source-parameters
                                         common-lisp:null)
                         :accessor %create-pipe-request-source-parameters
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or arn-or-url common-lisp:null) :accessor
                         %create-pipe-request-source :initform
                         (common-lisp:error ":source is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-pipe-request-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %create-pipe-request-name :initform
                         (common-lisp:error ":name is required"))
                        (enrichment-parameters :initarg :enrichment-parameters
                         :type
                         (common-lisp:or pipe-enrichment-parameters
                                         common-lisp:null)
                         :accessor %create-pipe-request-enrichment-parameters
                         :initform common-lisp:nil)
                        (enrichment :initarg :enrichment :type
                         (common-lisp:or optional-arn common-lisp:null)
                         :accessor %create-pipe-request-enrichment :initform
                         common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state common-lisp:null)
                         :accessor %create-pipe-request-desired-state :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or pipe-description common-lisp:null)
                         :accessor %create-pipe-request-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-pipe-request 'make-create-pipe-request))
 (common-lisp:defun make-create-pipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-parameters target tags
                     source-parameters source role-arn name
                     enrichment-parameters enrichment desired-state
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-pipe-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrichment))
      (common-lisp:list
       (common-lisp:cons "Enrichment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enrichment-parameters))
      (common-lisp:list
       (common-lisp:cons "EnrichmentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-parameters))
      (common-lisp:list
       (common-lisp:cons "SourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-parameters))
      (common-lisp:list
       (common-lisp:cons "TargetParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-pipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pipe-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %create-pipe-response-name :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-pipe-response-last-modified-time :initform
                         common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state common-lisp:null)
                         :accessor %create-pipe-response-desired-state
                         :initform common-lisp:nil)
                        (current-state :initarg :current-state :type
                         (common-lisp:or pipe-state common-lisp:null) :accessor
                         %create-pipe-response-current-state :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-pipe-response-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %create-pipe-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-pipe-response 'make-create-pipe-response))
 (common-lisp:defun make-create-pipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name last-modified-time desired-state
                     current-state creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-pipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-pipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-state))
      (common-lisp:list
       (common-lisp:cons "CurrentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-pipe-response))
   common-lisp:nil))
(common-lisp:deftype database () 'common-lisp:string)
(common-lisp:deftype db-user () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dead-letter-config common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %dead-letter-config-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dead-letter-config 'make-dead-letter-config))
 (common-lisp:defun make-dead-letter-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'dead-letter-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dead-letter-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pipe-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %delete-pipe-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-pipe-request 'make-delete-pipe-request))
 (common-lisp:defun make-delete-pipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-pipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-pipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pipe-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %delete-pipe-response-name :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delete-pipe-response-last-modified-time :initform
                         common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state-describe-response
                                         common-lisp:null)
                         :accessor %delete-pipe-response-desired-state
                         :initform common-lisp:nil)
                        (current-state :initarg :current-state :type
                         (common-lisp:or pipe-state common-lisp:null) :accessor
                         %delete-pipe-response-current-state :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delete-pipe-response-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %delete-pipe-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-pipe-response 'make-delete-pipe-response))
 (common-lisp:defun make-delete-pipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name last-modified-time desired-state
                     current-state creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-pipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-pipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-pipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-state))
      (common-lisp:list
       (common-lisp:cons "CurrentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-pipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pipe-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %describe-pipe-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-pipe-request 'make-describe-pipe-request))
 (common-lisp:defun make-describe-pipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-pipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pipe-response common-lisp:nil
                       ((target-parameters :initarg :target-parameters :type
                         (common-lisp:or pipe-target-parameters
                                         common-lisp:null)
                         :accessor %describe-pipe-response-target-parameters
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-pipe-response-target :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-pipe-response-tags :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or pipe-state-reason common-lisp:null)
                         :accessor %describe-pipe-response-state-reason
                         :initform common-lisp:nil)
                        (source-parameters :initarg :source-parameters :type
                         (common-lisp:or pipe-source-parameters
                                         common-lisp:null)
                         :accessor %describe-pipe-response-source-parameters
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or arn-or-url common-lisp:null) :accessor
                         %describe-pipe-response-source :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %describe-pipe-response-role-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %describe-pipe-response-name :initform
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-pipe-response-last-modified-time :initform
                         common-lisp:nil)
                        (enrichment-parameters :initarg :enrichment-parameters
                         :type
                         (common-lisp:or pipe-enrichment-parameters
                                         common-lisp:null)
                         :accessor
                         %describe-pipe-response-enrichment-parameters
                         :initform common-lisp:nil)
                        (enrichment :initarg :enrichment :type
                         (common-lisp:or optional-arn common-lisp:null)
                         :accessor %describe-pipe-response-enrichment :initform
                         common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state-describe-response
                                         common-lisp:null)
                         :accessor %describe-pipe-response-desired-state
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or pipe-description common-lisp:null)
                         :accessor %describe-pipe-response-description
                         :initform common-lisp:nil)
                        (current-state :initarg :current-state :type
                         (common-lisp:or pipe-state common-lisp:null) :accessor
                         %describe-pipe-response-current-state :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-pipe-response-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %describe-pipe-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-pipe-response 'make-describe-pipe-response))
 (common-lisp:defun make-describe-pipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-parameters target tags
                     state-reason source-parameters source role-arn name
                     last-modified-time enrichment-parameters enrichment
                     desired-state description current-state creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-pipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-state))
      (common-lisp:list
       (common-lisp:cons "CurrentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrichment))
      (common-lisp:list
       (common-lisp:cons "Enrichment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enrichment-parameters))
      (common-lisp:list
       (common-lisp:cons "EnrichmentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-parameters))
      (common-lisp:list
       (common-lisp:cons "SourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-parameters))
      (common-lisp:list
       (common-lisp:cons "TargetParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipe-response))
   common-lisp:nil))
(common-lisp:deftype dynamo-dbstream-start-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ecs-container-override common-lisp:nil
                       ((resource-requirements :initarg :resource-requirements
                         :type
                         (common-lisp:or ecs-resource-requirements-list
                                         common-lisp:null)
                         :accessor
                         %ecs-container-override-resource-requirements
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-container-override-name :initform
                         common-lisp:nil)
                        (memory-reservation :initarg :memory-reservation :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %ecs-container-override-memory-reservation :initform
                         common-lisp:nil)
                        (memory :initarg :memory :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %ecs-container-override-memory :initform
                         common-lisp:nil)
                        (environment-files :initarg :environment-files :type
                         (common-lisp:or ecs-environment-file-list
                                         common-lisp:null)
                         :accessor %ecs-container-override-environment-files
                         :initform common-lisp:nil)
                        (environment :initarg :environment :type
                         (common-lisp:or ecs-environment-variable-list
                                         common-lisp:null)
                         :accessor %ecs-container-override-environment
                         :initform common-lisp:nil)
                        (cpu :initarg :cpu :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %ecs-container-override-cpu :initform common-lisp:nil)
                        (command :initarg :command :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %ecs-container-override-command :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ecs-container-override 'make-ecs-container-override))
 (common-lisp:defun make-ecs-container-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-requirements name
                     memory-reservation memory environment-files environment
                     cpu command)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-container-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecs-container-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecs-container-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "Cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-files))
      (common-lisp:list
       (common-lisp:cons "EnvironmentFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "MemoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-requirements))
      (common-lisp:list
       (common-lisp:cons "ResourceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecs-container-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ecs-container-override-list ()
   '(trivial-types:proper-list ecs-container-override))
 (common-lisp:defun |make-ecs-container-override-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ecs-container-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ecs-environment-file common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-environment-file-value :initform
                         (common-lisp:error ":value is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or ecs-environment-file-type
                                         common-lisp:null)
                         :accessor %ecs-environment-file-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'ecs-environment-file 'make-ecs-environment-file))
 (common-lisp:defun make-ecs-environment-file
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-environment-file
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-environment-file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-environment-file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-environment-file))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ecs-environment-file-list ()
   '(trivial-types:proper-list ecs-environment-file))
 (common-lisp:defun |make-ecs-environment-file-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ecs-environment-file))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ecs-environment-file-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ecs-environment-variable common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-environment-variable-value :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-environment-variable-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ecs-environment-variable 'make-ecs-environment-variable))
 (common-lisp:defun make-ecs-environment-variable
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-environment-variable
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecs-environment-variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecs-environment-variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecs-environment-variable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ecs-environment-variable-list ()
   '(trivial-types:proper-list ecs-environment-variable))
 (common-lisp:defun |make-ecs-environment-variable-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ecs-environment-variable))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ecs-ephemeral-storage common-lisp:nil
                       ((size-in-gi-b :initarg :|sizeInGiB| :type
                         (common-lisp:or ephemeral-storage-size
                                         common-lisp:null)
                         :accessor %ecs-ephemeral-storage-size-in-gi-b
                         :initform
                         (common-lisp:error ":sizeingib is required"))))
 (common-lisp:export
  (common-lisp:list 'ecs-ephemeral-storage 'make-ecs-ephemeral-storage))
 (common-lisp:defun make-ecs-ephemeral-storage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size-in-gi-b)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-ephemeral-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecs-ephemeral-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecs-ephemeral-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gi-b))
      (common-lisp:list
       (common-lisp:cons "sizeInGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecs-ephemeral-storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ecs-inference-accelerator-override common-lisp:nil
                       ((device-type :initarg :|deviceType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-inference-accelerator-override-device-type
                         :initform common-lisp:nil)
                        (device-name :initarg :|deviceName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-inference-accelerator-override-device-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ecs-inference-accelerator-override
                    'make-ecs-inference-accelerator-override))
 (common-lisp:defun make-ecs-inference-accelerator-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-type device-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'ecs-inference-accelerator-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecs-inference-accelerator-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecs-inference-accelerator-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecs-inference-accelerator-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ecs-inference-accelerator-override-list ()
   '(trivial-types:proper-list ecs-inference-accelerator-override))
 (common-lisp:defun |make-ecs-inference-accelerator-override-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ecs-inference-accelerator-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ecs-resource-requirement common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-resource-requirement-value :initform
                         (common-lisp:error ":value is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or ecs-resource-requirement-type
                                         common-lisp:null)
                         :accessor %ecs-resource-requirement-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'ecs-resource-requirement 'make-ecs-resource-requirement))
 (common-lisp:defun make-ecs-resource-requirement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-resource-requirement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecs-resource-requirement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecs-resource-requirement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecs-resource-requirement))
   common-lisp:nil))
(common-lisp:deftype ecs-resource-requirement-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ecs-resource-requirements-list ()
   '(trivial-types:proper-list ecs-resource-requirement))
 (common-lisp:defun |make-ecs-resource-requirements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ecs-resource-requirement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ecs-task-override common-lisp:nil
                       ((task-role-arn :initarg :task-role-arn :type
                         (common-lisp:or arn-or-json-path common-lisp:null)
                         :accessor %ecs-task-override-task-role-arn :initform
                         common-lisp:nil)
                        (memory :initarg :memory :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-task-override-memory :initform common-lisp:nil)
                        (inference-accelerator-overrides :initarg
                         :inference-accelerator-overrides :type
                         (common-lisp:or
                          ecs-inference-accelerator-override-list
                          common-lisp:null)
                         :accessor
                         %ecs-task-override-inference-accelerator-overrides
                         :initform common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn :type
                         (common-lisp:or arn-or-json-path common-lisp:null)
                         :accessor %ecs-task-override-execution-role-arn
                         :initform common-lisp:nil)
                        (ephemeral-storage :initarg :ephemeral-storage :type
                         (common-lisp:or ecs-ephemeral-storage
                                         common-lisp:null)
                         :accessor %ecs-task-override-ephemeral-storage
                         :initform common-lisp:nil)
                        (cpu :initarg :cpu :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-task-override-cpu :initform common-lisp:nil)
                        (container-overrides :initarg :container-overrides
                         :type
                         (common-lisp:or ecs-container-override-list
                                         common-lisp:null)
                         :accessor %ecs-task-override-container-overrides
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ecs-task-override 'make-ecs-task-override))
 (common-lisp:defun make-ecs-task-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-role-arn memory
                     inference-accelerator-overrides execution-role-arn
                     ephemeral-storage cpu container-overrides)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-task-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-task-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-task-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-overrides))
      (common-lisp:list
       (common-lisp:cons "ContainerOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "Cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "EphemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerator-overrides))
      (common-lisp:list
       (common-lisp:cons "InferenceAcceleratorOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-role-arn))
      (common-lisp:list
       (common-lisp:cons "TaskRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-task-override))
   common-lisp:nil))
(common-lisp:deftype endpoint-string () 'common-lisp:string)
(common-lisp:deftype ephemeral-storage-size () 'common-lisp:integer)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype event-bridge-detail-type () 'common-lisp:string)
(common-lisp:deftype event-bridge-endpoint-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-bridge-event-resource-list ()
   '(trivial-types:proper-list arn-or-json-path))
 (common-lisp:defun |make-event-bridge-event-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn-or-json-path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-bridge-event-source () 'common-lisp:string)
(common-lisp:deftype event-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((pattern :initarg :pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %filter-pattern :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pattern)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-criteria common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %filter-criteria-filters :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter-criteria 'make-filter-criteria))
 (common-lisp:defun make-filter-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters)
   (common-lisp:apply #'common-lisp:make-instance 'filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype header-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype header-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-header-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype header-value () 'common-lisp:string)
(common-lisp:deftype input-template () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (pipes-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader internal-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-exception 'internal-exception-message
                    'internal-exception-retry-after-seconds)))
(common-lisp:deftype json-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kafka-bootstrap-servers ()
   '(trivial-types:proper-list endpoint-string))
 (common-lisp:defun |make-kafka-bootstrap-servers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kafka-topic-name () 'common-lisp:string)
(common-lisp:deftype kinesis-partition-key () 'common-lisp:string)
(common-lisp:deftype kinesis-stream-start-position () 'common-lisp:string)
(common-lisp:deftype launch-type () 'common-lisp:string)
(common-lisp:deftype limit-max10 () 'common-lisp:integer)
(common-lisp:deftype limit-max100 () 'common-lisp:integer)
(common-lisp:deftype limit-max10000 () 'common-lisp:integer)
(common-lisp:deftype limit-min1 () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-pipes-request common-lisp:nil
                       ((target-prefix :initarg :target-prefix :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-pipes-request-target-prefix :initform
                         common-lisp:nil)
                        (source-prefix :initarg :source-prefix :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-pipes-request-source-prefix :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-pipes-request-next-token :initform
                         common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %list-pipes-request-name-prefix :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-pipes-request-limit :initform
                         common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state common-lisp:null)
                         :accessor %list-pipes-request-desired-state :initform
                         common-lisp:nil)
                        (current-state :initarg :current-state :type
                         (common-lisp:or pipe-state common-lisp:null) :accessor
                         %list-pipes-request-current-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-pipes-request 'make-list-pipes-request))
 (common-lisp:defun make-list-pipes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-prefix source-prefix next-token
                     name-prefix limit desired-state current-state)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-pipes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-pipes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-pipes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipes-response common-lisp:nil
                       ((pipes :initarg :pipes :type
                         (common-lisp:or pipe-list common-lisp:null) :accessor
                         %list-pipes-response-pipes :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-pipes-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-pipes-response 'make-list-pipes-response))
 (common-lisp:defun make-list-pipes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipes next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-pipes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-pipes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipes))
      (common-lisp:list
       (common-lisp:cons "Pipes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-pipes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mqbroker-access-credentials common-lisp:nil
                       ((basic-auth :initarg :basic-auth :type
                         (common-lisp:or secret-manager-arn common-lisp:null)
                         :accessor %mqbroker-access-credentials-basic-auth
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mqbroker-access-credentials
                    'make-mqbroker-access-credentials))
 (common-lisp:defun make-mqbroker-access-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key basic-auth)
   (common-lisp:apply #'common-lisp:make-instance 'mqbroker-access-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mqbroker-access-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mqbroker-access-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'basic-auth))
      (common-lisp:list
       (common-lisp:cons "BasicAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mqbroker-access-credentials))
   common-lisp:nil))
(common-lisp:deftype mqbroker-queue-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mskaccess-credentials common-lisp:nil
                       ((sasl-scram512auth :initarg :sasl-scram512auth :type
                         (common-lisp:or secret-manager-arn common-lisp:null)
                         :accessor %mskaccess-credentials-sasl-scram512auth
                         :initform common-lisp:nil)
                        (client-certificate-tls-auth :initarg
                         :client-certificate-tls-auth :type
                         (common-lisp:or secret-manager-arn common-lisp:null)
                         :accessor
                         %mskaccess-credentials-client-certificate-tls-auth
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mskaccess-credentials 'make-mskaccess-credentials))
 (common-lisp:defun make-mskaccess-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sasl-scram512auth
                     client-certificate-tls-auth)
   (common-lisp:apply #'common-lisp:make-instance 'mskaccess-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mskaccess-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mskaccess-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-certificate-tls-auth))
      (common-lisp:list
       (common-lisp:cons "ClientCertificateTlsAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl-scram512auth))
      (common-lisp:list
       (common-lisp:cons "SaslScram512Auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mskaccess-credentials))
   common-lisp:nil))
(common-lisp:deftype mskstart-position () 'common-lisp:string)
(common-lisp:deftype maximum-batching-window-in-seconds () 'common-lisp:integer)
(common-lisp:deftype maximum-record-age-in-seconds () 'common-lisp:integer)
(common-lisp:deftype maximum-retry-attempts-esm () 'common-lisp:integer)
(common-lisp:deftype message-deduplication-id () 'common-lisp:string)
(common-lisp:deftype message-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-configuration common-lisp:nil
                       ((awsvpc-configuration :initarg :|awsvpcConfiguration|
                         :type
                         (common-lisp:or aws-vpc-configuration
                                         common-lisp:null)
                         :accessor %network-configuration-awsvpc-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defun make-network-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key awsvpc-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'network-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'awsvpc-configuration))
      (common-lisp:list
       (common-lisp:cons "awsvpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (pipes-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype on-partial-batch-item-failure-streams ()
  'common-lisp:string)
(common-lisp:deftype optional-arn () 'common-lisp:string)
(common-lisp:deftype path-parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path-parameter-list ()
   '(trivial-types:proper-list path-parameter))
 (common-lisp:defun |make-path-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pipe common-lisp:nil
                       ((target :initarg :target :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %pipe-target :initform common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or pipe-state-reason common-lisp:null)
                         :accessor %pipe-state-reason :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or arn-or-url common-lisp:null) :accessor
                         %pipe-source :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %pipe-name :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %pipe-last-modified-time :initform common-lisp:nil)
                        (enrichment :initarg :enrichment :type
                         (common-lisp:or optional-arn common-lisp:null)
                         :accessor %pipe-enrichment :initform common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state common-lisp:null)
                         :accessor %pipe-desired-state :initform
                         common-lisp:nil)
                        (current-state :initarg :current-state :type
                         (common-lisp:or pipe-state common-lisp:null) :accessor
                         %pipe-current-state :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %pipe-creation-time :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %pipe-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'pipe 'make-pipe))
 (common-lisp:defun make-pipe
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target state-reason source name
                     last-modified-time enrichment desired-state current-state
                     creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'pipe
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipe))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipe))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-state))
      (common-lisp:list
       (common-lisp:cons "CurrentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrichment))
      (common-lisp:list
       (common-lisp:cons "Enrichment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipe))
   common-lisp:nil))
(common-lisp:deftype pipe-arn () 'common-lisp:string)
(common-lisp:deftype pipe-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipe-enrichment-http-parameters common-lisp:nil
                       ((query-string-parameters :initarg
                         :query-string-parameters :type
                         (common-lisp:or query-string-parameters-map
                                         common-lisp:null)
                         :accessor
                         %pipe-enrichment-http-parameters-query-string-parameters
                         :initform common-lisp:nil)
                        (path-parameter-values :initarg :path-parameter-values
                         :type
                         (common-lisp:or path-parameter-list common-lisp:null)
                         :accessor
                         %pipe-enrichment-http-parameters-path-parameter-values
                         :initform common-lisp:nil)
                        (header-parameters :initarg :header-parameters :type
                         (common-lisp:or header-parameters-map
                                         common-lisp:null)
                         :accessor
                         %pipe-enrichment-http-parameters-header-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-enrichment-http-parameters
                    'make-pipe-enrichment-http-parameters))
 (common-lisp:defun make-pipe-enrichment-http-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-string-parameters
                     path-parameter-values header-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-enrichment-http-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-enrichment-http-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-enrichment-http-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-parameters))
      (common-lisp:list
       (common-lisp:cons "HeaderParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'path-parameter-values))
      (common-lisp:list
       (common-lisp:cons "PathParameterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-string-parameters))
      (common-lisp:list
       (common-lisp:cons "QueryStringParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-enrichment-http-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-enrichment-parameters common-lisp:nil
                       ((input-template :initarg :input-template :type
                         (common-lisp:or input-template common-lisp:null)
                         :accessor %pipe-enrichment-parameters-input-template
                         :initform common-lisp:nil)
                        (http-parameters :initarg :http-parameters :type
                         (common-lisp:or pipe-enrichment-http-parameters
                                         common-lisp:null)
                         :accessor %pipe-enrichment-parameters-http-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-enrichment-parameters
                    'make-pipe-enrichment-parameters))
 (common-lisp:defun make-pipe-enrichment-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-template http-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'pipe-enrichment-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-enrichment-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-enrichment-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-parameters))
      (common-lisp:list
       (common-lisp:cons "HttpParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-template))
      (common-lisp:list
       (common-lisp:cons "InputTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-enrichment-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipe-list () '(trivial-types:proper-list pipe))
 (common-lisp:defun |make-pipe-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipe))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pipe-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipe-source-active-mqbroker-parameters common-lisp:nil
                       ((queue-name :initarg :queue-name :type
                         (common-lisp:or mqbroker-queue-name common-lisp:null)
                         :accessor
                         %pipe-source-active-mqbroker-parameters-queue-name
                         :initform
                         (common-lisp:error ":queue-name is required"))
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %pipe-source-active-mqbroker-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or mqbroker-access-credentials
                                         common-lisp:null)
                         :accessor
                         %pipe-source-active-mqbroker-parameters-credentials
                         :initform
                         (common-lisp:error ":credentials is required"))
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %pipe-source-active-mqbroker-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-source-active-mqbroker-parameters
                    'make-pipe-source-active-mqbroker-parameters))
 (common-lisp:defun make-pipe-source-active-mqbroker-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queue-name
                     maximum-batching-window-in-seconds credentials batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-source-active-mqbroker-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-active-mqbroker-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-active-mqbroker-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-name))
      (common-lisp:list
       (common-lisp:cons "QueueName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-active-mqbroker-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-source-dynamo-dbstream-parameters common-lisp:nil
                       ((starting-position :initarg :starting-position :type
                         (common-lisp:or dynamo-dbstream-start-position
                                         common-lisp:null)
                         :accessor
                         %pipe-source-dynamo-dbstream-parameters-starting-position
                         :initform
                         (common-lisp:error ":starting-position is required"))
                        (parallelization-factor :initarg
                         :parallelization-factor :type
                         (common-lisp:or limit-max10 common-lisp:null)
                         :accessor
                         %pipe-source-dynamo-dbstream-parameters-parallelization-factor
                         :initform common-lisp:nil)
                        (on-partial-batch-item-failure :initarg
                         :on-partial-batch-item-failure :type
                         (common-lisp:or on-partial-batch-item-failure-streams
                                         common-lisp:null)
                         :accessor
                         %pipe-source-dynamo-dbstream-parameters-on-partial-batch-item-failure
                         :initform common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :type
                         (common-lisp:or maximum-retry-attempts-esm
                                         common-lisp:null)
                         :accessor
                         %pipe-source-dynamo-dbstream-parameters-maximum-retry-attempts
                         :initform common-lisp:nil)
                        (maximum-record-age-in-seconds :initarg
                         :maximum-record-age-in-seconds :type
                         (common-lisp:or maximum-record-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         %pipe-source-dynamo-dbstream-parameters-maximum-record-age-in-seconds
                         :initform common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %pipe-source-dynamo-dbstream-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config :type
                         (common-lisp:or dead-letter-config common-lisp:null)
                         :accessor
                         %pipe-source-dynamo-dbstream-parameters-dead-letter-config
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %pipe-source-dynamo-dbstream-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-source-dynamo-dbstream-parameters
                    'make-pipe-source-dynamo-dbstream-parameters))
 (common-lisp:defun make-pipe-source-dynamo-dbstream-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key starting-position parallelization-factor
                     on-partial-batch-item-failure maximum-retry-attempts
                     maximum-record-age-in-seconds
                     maximum-batching-window-in-seconds dead-letter-config
                     batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-source-dynamo-dbstream-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-dynamo-dbstream-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-dynamo-dbstream-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-record-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumRecordAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-partial-batch-item-failure))
      (common-lisp:list
       (common-lisp:cons "OnPartialBatchItemFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelization-factor))
      (common-lisp:list
       (common-lisp:cons "ParallelizationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-dynamo-dbstream-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-source-kinesis-stream-parameters common-lisp:nil
                       ((starting-position-timestamp :initarg
                         :starting-position-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %pipe-source-kinesis-stream-parameters-starting-position-timestamp
                         :initform common-lisp:nil)
                        (starting-position :initarg :starting-position :type
                         (common-lisp:or kinesis-stream-start-position
                                         common-lisp:null)
                         :accessor
                         %pipe-source-kinesis-stream-parameters-starting-position
                         :initform
                         (common-lisp:error ":starting-position is required"))
                        (parallelization-factor :initarg
                         :parallelization-factor :type
                         (common-lisp:or limit-max10 common-lisp:null)
                         :accessor
                         %pipe-source-kinesis-stream-parameters-parallelization-factor
                         :initform common-lisp:nil)
                        (on-partial-batch-item-failure :initarg
                         :on-partial-batch-item-failure :type
                         (common-lisp:or on-partial-batch-item-failure-streams
                                         common-lisp:null)
                         :accessor
                         %pipe-source-kinesis-stream-parameters-on-partial-batch-item-failure
                         :initform common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :type
                         (common-lisp:or maximum-retry-attempts-esm
                                         common-lisp:null)
                         :accessor
                         %pipe-source-kinesis-stream-parameters-maximum-retry-attempts
                         :initform common-lisp:nil)
                        (maximum-record-age-in-seconds :initarg
                         :maximum-record-age-in-seconds :type
                         (common-lisp:or maximum-record-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         %pipe-source-kinesis-stream-parameters-maximum-record-age-in-seconds
                         :initform common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %pipe-source-kinesis-stream-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config :type
                         (common-lisp:or dead-letter-config common-lisp:null)
                         :accessor
                         %pipe-source-kinesis-stream-parameters-dead-letter-config
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %pipe-source-kinesis-stream-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-source-kinesis-stream-parameters
                    'make-pipe-source-kinesis-stream-parameters))
 (common-lisp:defun make-pipe-source-kinesis-stream-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key starting-position-timestamp
                     starting-position parallelization-factor
                     on-partial-batch-item-failure maximum-retry-attempts
                     maximum-record-age-in-seconds
                     maximum-batching-window-in-seconds dead-letter-config
                     batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-source-kinesis-stream-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-kinesis-stream-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-kinesis-stream-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-record-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumRecordAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-partial-batch-item-failure))
      (common-lisp:list
       (common-lisp:cons "OnPartialBatchItemFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelization-factor))
      (common-lisp:list
       (common-lisp:cons "ParallelizationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'starting-position-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartingPositionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-kinesis-stream-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-source-managed-streaming-kafka-parameters
                       common-lisp:nil
                       ((topic-name :initarg :topic-name :type
                         (common-lisp:or kafka-topic-name common-lisp:null)
                         :accessor
                         %pipe-source-managed-streaming-kafka-parameters-topic-name
                         :initform
                         (common-lisp:error ":topic-name is required"))
                        (starting-position :initarg :starting-position :type
                         (common-lisp:or mskstart-position common-lisp:null)
                         :accessor
                         %pipe-source-managed-streaming-kafka-parameters-starting-position
                         :initform common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %pipe-source-managed-streaming-kafka-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or mskaccess-credentials
                                         common-lisp:null)
                         :accessor
                         %pipe-source-managed-streaming-kafka-parameters-credentials
                         :initform common-lisp:nil)
                        (consumer-group-id :initarg :consumer-group-id :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %pipe-source-managed-streaming-kafka-parameters-consumer-group-id
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %pipe-source-managed-streaming-kafka-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-source-managed-streaming-kafka-parameters
                    'make-pipe-source-managed-streaming-kafka-parameters))
 (common-lisp:defun make-pipe-source-managed-streaming-kafka-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-name starting-position
                     maximum-batching-window-in-seconds credentials
                     consumer-group-id batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-source-managed-streaming-kafka-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-managed-streaming-kafka-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-managed-streaming-kafka-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-group-id))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-managed-streaming-kafka-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-source-parameters common-lisp:nil
                       ((sqs-queue-parameters :initarg :sqs-queue-parameters
                         :type
                         (common-lisp:or pipe-source-sqs-queue-parameters
                                         common-lisp:null)
                         :accessor %pipe-source-parameters-sqs-queue-parameters
                         :initform common-lisp:nil)
                        (self-managed-kafka-parameters :initarg
                         :self-managed-kafka-parameters :type
                         (common-lisp:or
                          pipe-source-self-managed-kafka-parameters
                          common-lisp:null)
                         :accessor
                         %pipe-source-parameters-self-managed-kafka-parameters
                         :initform common-lisp:nil)
                        (rabbit-mqbroker-parameters :initarg
                         :rabbit-mqbroker-parameters :type
                         (common-lisp:or pipe-source-rabbit-mqbroker-parameters
                                         common-lisp:null)
                         :accessor
                         %pipe-source-parameters-rabbit-mqbroker-parameters
                         :initform common-lisp:nil)
                        (managed-streaming-kafka-parameters :initarg
                         :managed-streaming-kafka-parameters :type
                         (common-lisp:or
                          pipe-source-managed-streaming-kafka-parameters
                          common-lisp:null)
                         :accessor
                         %pipe-source-parameters-managed-streaming-kafka-parameters
                         :initform common-lisp:nil)
                        (kinesis-stream-parameters :initarg
                         :kinesis-stream-parameters :type
                         (common-lisp:or pipe-source-kinesis-stream-parameters
                                         common-lisp:null)
                         :accessor
                         %pipe-source-parameters-kinesis-stream-parameters
                         :initform common-lisp:nil)
                        (filter-criteria :initarg :filter-criteria :type
                         (common-lisp:or filter-criteria common-lisp:null)
                         :accessor %pipe-source-parameters-filter-criteria
                         :initform common-lisp:nil)
                        (dynamo-dbstream-parameters :initarg
                         :dynamo-dbstream-parameters :type
                         (common-lisp:or pipe-source-dynamo-dbstream-parameters
                                         common-lisp:null)
                         :accessor
                         %pipe-source-parameters-dynamo-dbstream-parameters
                         :initform common-lisp:nil)
                        (active-mqbroker-parameters :initarg
                         :active-mqbroker-parameters :type
                         (common-lisp:or pipe-source-active-mqbroker-parameters
                                         common-lisp:null)
                         :accessor
                         %pipe-source-parameters-active-mqbroker-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-source-parameters 'make-pipe-source-parameters))
 (common-lisp:defun make-pipe-source-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sqs-queue-parameters
                     self-managed-kafka-parameters rabbit-mqbroker-parameters
                     managed-streaming-kafka-parameters
                     kinesis-stream-parameters filter-criteria
                     dynamo-dbstream-parameters active-mqbroker-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'pipe-source-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-mqbroker-parameters))
      (common-lisp:list
       (common-lisp:cons "ActiveMQBrokerParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamo-dbstream-parameters))
      (common-lisp:list
       (common-lisp:cons "DynamoDBStreamParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "FilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-stream-parameters))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-streaming-kafka-parameters))
      (common-lisp:list
       (common-lisp:cons "ManagedStreamingKafkaParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rabbit-mqbroker-parameters))
      (common-lisp:list
       (common-lisp:cons "RabbitMQBrokerParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-kafka-parameters))
      (common-lisp:list
       (common-lisp:cons "SelfManagedKafkaParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqs-queue-parameters))
      (common-lisp:list
       (common-lisp:cons "SqsQueueParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-source-rabbit-mqbroker-parameters common-lisp:nil
                       ((virtual-host :initarg :virtual-host :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %pipe-source-rabbit-mqbroker-parameters-virtual-host
                         :initform common-lisp:nil)
                        (queue-name :initarg :queue-name :type
                         (common-lisp:or mqbroker-queue-name common-lisp:null)
                         :accessor
                         %pipe-source-rabbit-mqbroker-parameters-queue-name
                         :initform
                         (common-lisp:error ":queue-name is required"))
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %pipe-source-rabbit-mqbroker-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or mqbroker-access-credentials
                                         common-lisp:null)
                         :accessor
                         %pipe-source-rabbit-mqbroker-parameters-credentials
                         :initform
                         (common-lisp:error ":credentials is required"))
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %pipe-source-rabbit-mqbroker-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-source-rabbit-mqbroker-parameters
                    'make-pipe-source-rabbit-mqbroker-parameters))
 (common-lisp:defun make-pipe-source-rabbit-mqbroker-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-host queue-name
                     maximum-batching-window-in-seconds credentials batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-source-rabbit-mqbroker-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-rabbit-mqbroker-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-rabbit-mqbroker-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-name))
      (common-lisp:list
       (common-lisp:cons "QueueName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-host))
      (common-lisp:list
       (common-lisp:cons "VirtualHost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-rabbit-mqbroker-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-source-self-managed-kafka-parameters
                       common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or
                          self-managed-kafka-access-configuration-vpc
                          common-lisp:null)
                         :accessor
                         %pipe-source-self-managed-kafka-parameters-vpc
                         :initform common-lisp:nil)
                        (topic-name :initarg :topic-name :type
                         (common-lisp:or kafka-topic-name common-lisp:null)
                         :accessor
                         %pipe-source-self-managed-kafka-parameters-topic-name
                         :initform
                         (common-lisp:error ":topic-name is required"))
                        (starting-position :initarg :starting-position :type
                         (common-lisp:or self-managed-kafka-start-position
                                         common-lisp:null)
                         :accessor
                         %pipe-source-self-managed-kafka-parameters-starting-position
                         :initform common-lisp:nil)
                        (server-root-ca-certificate :initarg
                         :server-root-ca-certificate :type
                         (common-lisp:or secret-manager-arn common-lisp:null)
                         :accessor
                         %pipe-source-self-managed-kafka-parameters-server-root-ca-certificate
                         :initform common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %pipe-source-self-managed-kafka-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or
                          self-managed-kafka-access-configuration-credentials
                          common-lisp:null)
                         :accessor
                         %pipe-source-self-managed-kafka-parameters-credentials
                         :initform common-lisp:nil)
                        (consumer-group-id :initarg :consumer-group-id :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %pipe-source-self-managed-kafka-parameters-consumer-group-id
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %pipe-source-self-managed-kafka-parameters-batch-size
                         :initform common-lisp:nil)
                        (additional-bootstrap-servers :initarg
                         :additional-bootstrap-servers :type
                         (common-lisp:or kafka-bootstrap-servers
                                         common-lisp:null)
                         :accessor
                         %pipe-source-self-managed-kafka-parameters-additional-bootstrap-servers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-source-self-managed-kafka-parameters
                    'make-pipe-source-self-managed-kafka-parameters))
 (common-lisp:defun make-pipe-source-self-managed-kafka-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc topic-name starting-position
                     server-root-ca-certificate
                     maximum-batching-window-in-seconds credentials
                     consumer-group-id batch-size additional-bootstrap-servers)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-source-self-managed-kafka-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-self-managed-kafka-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-self-managed-kafka-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-bootstrap-servers))
      (common-lisp:list
       (common-lisp:cons "AdditionalBootstrapServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-group-id))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-root-ca-certificate))
      (common-lisp:list
       (common-lisp:cons "ServerRootCaCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-self-managed-kafka-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-source-sqs-queue-parameters common-lisp:nil
                       ((maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %pipe-source-sqs-queue-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor %pipe-source-sqs-queue-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-source-sqs-queue-parameters
                    'make-pipe-source-sqs-queue-parameters))
 (common-lisp:defun make-pipe-source-sqs-queue-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-batching-window-in-seconds
                     batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-source-sqs-queue-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-sqs-queue-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-sqs-queue-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-source-sqs-queue-parameters))
   common-lisp:nil))
(common-lisp:deftype pipe-state () 'common-lisp:string)
(common-lisp:deftype pipe-state-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipe-target-batch-job-parameters common-lisp:nil
                       ((retry-strategy :initarg :retry-strategy :type
                         (common-lisp:or batch-retry-strategy common-lisp:null)
                         :accessor
                         %pipe-target-batch-job-parameters-retry-strategy
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or batch-parameters-map common-lisp:null)
                         :accessor %pipe-target-batch-job-parameters-parameters
                         :initform common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pipe-target-batch-job-parameters-job-name :initform
                         (common-lisp:error ":job-name is required"))
                        (job-definition :initarg :job-definition :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pipe-target-batch-job-parameters-job-definition
                         :initform
                         (common-lisp:error ":job-definition is required"))
                        (depends-on :initarg :depends-on :type
                         (common-lisp:or batch-depends-on common-lisp:null)
                         :accessor %pipe-target-batch-job-parameters-depends-on
                         :initform common-lisp:nil)
                        (container-overrides :initarg :container-overrides
                         :type
                         (common-lisp:or batch-container-overrides
                                         common-lisp:null)
                         :accessor
                         %pipe-target-batch-job-parameters-container-overrides
                         :initform common-lisp:nil)
                        (array-properties :initarg :array-properties :type
                         (common-lisp:or batch-array-properties
                                         common-lisp:null)
                         :accessor
                         %pipe-target-batch-job-parameters-array-properties
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-batch-job-parameters
                    'make-pipe-target-batch-job-parameters))
 (common-lisp:defun make-pipe-target-batch-job-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retry-strategy parameters job-name
                     job-definition depends-on container-overrides
                     array-properties)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-batch-job-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-batch-job-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-batch-job-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-properties))
      (common-lisp:list
       (common-lisp:cons "ArrayProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-overrides))
      (common-lisp:list
       (common-lisp:cons "ContainerOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'depends-on))
      (common-lisp:list
       (common-lisp:cons "DependsOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition))
      (common-lisp:list
       (common-lisp:cons "JobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-strategy))
      (common-lisp:list
       (common-lisp:cons "RetryStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-batch-job-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-cloud-watch-logs-parameters common-lisp:nil
                       ((timestamp :initarg :timestamp :type
                         (common-lisp:or json-path common-lisp:null) :accessor
                         %pipe-target-cloud-watch-logs-parameters-timestamp
                         :initform common-lisp:nil)
                        (log-stream-name :initarg :log-stream-name :type
                         (common-lisp:or log-stream-name common-lisp:null)
                         :accessor
                         %pipe-target-cloud-watch-logs-parameters-log-stream-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-cloud-watch-logs-parameters
                    'make-pipe-target-cloud-watch-logs-parameters))
 (common-lisp:defun make-pipe-target-cloud-watch-logs-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp log-stream-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-cloud-watch-logs-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-cloud-watch-logs-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-cloud-watch-logs-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "LogStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-cloud-watch-logs-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-ecs-task-parameters common-lisp:nil
                       ((task-definition-arn :initarg :task-definition-arn
                         :type
                         (common-lisp:or arn-or-json-path common-lisp:null)
                         :accessor
                         %pipe-target-ecs-task-parameters-task-definition-arn
                         :initform
                         (common-lisp:error
                          ":task-definition-arn is required"))
                        (task-count :initarg :task-count :type
                         (common-lisp:or limit-min1 common-lisp:null) :accessor
                         %pipe-target-ecs-task-parameters-task-count :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %pipe-target-ecs-task-parameters-tags :initform
                         common-lisp:nil)
                        (reference-id :initarg :reference-id :type
                         (common-lisp:or reference-id common-lisp:null)
                         :accessor
                         %pipe-target-ecs-task-parameters-reference-id
                         :initform common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor
                         %pipe-target-ecs-task-parameters-propagate-tags
                         :initform common-lisp:nil)
                        (platform-version :initarg :platform-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pipe-target-ecs-task-parameters-platform-version
                         :initform common-lisp:nil)
                        (placement-strategy :initarg :placement-strategy :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor
                         %pipe-target-ecs-task-parameters-placement-strategy
                         :initform common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor
                         %pipe-target-ecs-task-parameters-placement-constraints
                         :initform common-lisp:nil)
                        (overrides :initarg :overrides :type
                         (common-lisp:or ecs-task-override common-lisp:null)
                         :accessor %pipe-target-ecs-task-parameters-overrides
                         :initform common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         %pipe-target-ecs-task-parameters-network-configuration
                         :initform common-lisp:nil)
                        (launch-type :initarg :launch-type :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %pipe-target-ecs-task-parameters-launch-type
                         :initform common-lisp:nil)
                        (group :initarg :group :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pipe-target-ecs-task-parameters-group :initform
                         common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %pipe-target-ecs-task-parameters-enable-execute-command
                         :initform common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :enable-ecsmanaged-tags :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %pipe-target-ecs-task-parameters-enable-ecsmanaged-tags
                         :initform common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :capacity-provider-strategy :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         %pipe-target-ecs-task-parameters-capacity-provider-strategy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-ecs-task-parameters
                    'make-pipe-target-ecs-task-parameters))
 (common-lisp:defun make-pipe-target-ecs-task-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-definition-arn task-count tags
                     reference-id propagate-tags platform-version
                     placement-strategy placement-constraints overrides
                     network-configuration launch-type group
                     enable-execute-command enable-ecsmanaged-tags
                     capacity-provider-strategy)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-ecs-task-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-ecs-task-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-ecs-task-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "CapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "EnableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "EnableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "LaunchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "Overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "PlacementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "PlacementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "PropagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-count))
      (common-lisp:list
       (common-lisp:cons "TaskCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "TaskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-ecs-task-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-event-bridge-event-bus-parameters
                       common-lisp:nil
                       ((time :initarg :time :type
                         (common-lisp:or json-path common-lisp:null) :accessor
                         %pipe-target-event-bridge-event-bus-parameters-time
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or event-bridge-event-source
                                         common-lisp:null)
                         :accessor
                         %pipe-target-event-bridge-event-bus-parameters-source
                         :initform common-lisp:nil)
                        (resources :initarg :resources :type
                         (common-lisp:or event-bridge-event-resource-list
                                         common-lisp:null)
                         :accessor
                         %pipe-target-event-bridge-event-bus-parameters-resources
                         :initform common-lisp:nil)
                        (endpoint-id :initarg :endpoint-id :type
                         (common-lisp:or event-bridge-endpoint-id
                                         common-lisp:null)
                         :accessor
                         %pipe-target-event-bridge-event-bus-parameters-endpoint-id
                         :initform common-lisp:nil)
                        (detail-type :initarg :detail-type :type
                         (common-lisp:or event-bridge-detail-type
                                         common-lisp:null)
                         :accessor
                         %pipe-target-event-bridge-event-bus-parameters-detail-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-event-bridge-event-bus-parameters
                    'make-pipe-target-event-bridge-event-bus-parameters))
 (common-lisp:defun make-pipe-target-event-bridge-event-bus-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time source resources endpoint-id
                     detail-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-event-bridge-event-bus-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-event-bridge-event-bus-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-event-bridge-event-bus-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-type))
      (common-lisp:list
       (common-lisp:cons "DetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-event-bridge-event-bus-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-http-parameters common-lisp:nil
                       ((query-string-parameters :initarg
                         :query-string-parameters :type
                         (common-lisp:or query-string-parameters-map
                                         common-lisp:null)
                         :accessor
                         %pipe-target-http-parameters-query-string-parameters
                         :initform common-lisp:nil)
                        (path-parameter-values :initarg :path-parameter-values
                         :type
                         (common-lisp:or path-parameter-list common-lisp:null)
                         :accessor
                         %pipe-target-http-parameters-path-parameter-values
                         :initform common-lisp:nil)
                        (header-parameters :initarg :header-parameters :type
                         (common-lisp:or header-parameters-map
                                         common-lisp:null)
                         :accessor
                         %pipe-target-http-parameters-header-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-http-parameters
                    'make-pipe-target-http-parameters))
 (common-lisp:defun make-pipe-target-http-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-string-parameters
                     path-parameter-values header-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'pipe-target-http-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-http-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-http-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-parameters))
      (common-lisp:list
       (common-lisp:cons "HeaderParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'path-parameter-values))
      (common-lisp:list
       (common-lisp:cons "PathParameterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-string-parameters))
      (common-lisp:list
       (common-lisp:cons "QueryStringParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-http-parameters))
   common-lisp:nil))
(common-lisp:deftype pipe-target-invocation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipe-target-kinesis-stream-parameters common-lisp:nil
                       ((partition-key :initarg :partition-key :type
                         (common-lisp:or kinesis-partition-key
                                         common-lisp:null)
                         :accessor
                         %pipe-target-kinesis-stream-parameters-partition-key
                         :initform
                         (common-lisp:error ":partition-key is required"))))
 (common-lisp:export
  (common-lisp:list 'pipe-target-kinesis-stream-parameters
                    'make-pipe-target-kinesis-stream-parameters))
 (common-lisp:defun make-pipe-target-kinesis-stream-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partition-key)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-kinesis-stream-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-kinesis-stream-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-kinesis-stream-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key))
      (common-lisp:list
       (common-lisp:cons "PartitionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-kinesis-stream-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-lambda-function-parameters common-lisp:nil
                       ((invocation-type :initarg :invocation-type :type
                         (common-lisp:or pipe-target-invocation-type
                                         common-lisp:null)
                         :accessor
                         %pipe-target-lambda-function-parameters-invocation-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-lambda-function-parameters
                    'make-pipe-target-lambda-function-parameters))
 (common-lisp:defun make-pipe-target-lambda-function-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-lambda-function-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-lambda-function-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-lambda-function-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-type))
      (common-lisp:list
       (common-lisp:cons "InvocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-lambda-function-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-parameters common-lisp:nil
                       ((step-function-state-machine-parameters :initarg
                         :step-function-state-machine-parameters :type
                         (common-lisp:or pipe-target-state-machine-parameters
                                         common-lisp:null)
                         :accessor
                         %pipe-target-parameters-step-function-state-machine-parameters
                         :initform common-lisp:nil)
                        (sqs-queue-parameters :initarg :sqs-queue-parameters
                         :type
                         (common-lisp:or pipe-target-sqs-queue-parameters
                                         common-lisp:null)
                         :accessor %pipe-target-parameters-sqs-queue-parameters
                         :initform common-lisp:nil)
                        (sage-maker-pipeline-parameters :initarg
                         :sage-maker-pipeline-parameters :type
                         (common-lisp:or
                          pipe-target-sage-maker-pipeline-parameters
                          common-lisp:null)
                         :accessor
                         %pipe-target-parameters-sage-maker-pipeline-parameters
                         :initform common-lisp:nil)
                        (redshift-data-parameters :initarg
                         :redshift-data-parameters :type
                         (common-lisp:or pipe-target-redshift-data-parameters
                                         common-lisp:null)
                         :accessor
                         %pipe-target-parameters-redshift-data-parameters
                         :initform common-lisp:nil)
                        (lambda-function-parameters :initarg
                         :lambda-function-parameters :type
                         (common-lisp:or pipe-target-lambda-function-parameters
                                         common-lisp:null)
                         :accessor
                         %pipe-target-parameters-lambda-function-parameters
                         :initform common-lisp:nil)
                        (kinesis-stream-parameters :initarg
                         :kinesis-stream-parameters :type
                         (common-lisp:or pipe-target-kinesis-stream-parameters
                                         common-lisp:null)
                         :accessor
                         %pipe-target-parameters-kinesis-stream-parameters
                         :initform common-lisp:nil)
                        (input-template :initarg :input-template :type
                         (common-lisp:or input-template common-lisp:null)
                         :accessor %pipe-target-parameters-input-template
                         :initform common-lisp:nil)
                        (http-parameters :initarg :http-parameters :type
                         (common-lisp:or pipe-target-http-parameters
                                         common-lisp:null)
                         :accessor %pipe-target-parameters-http-parameters
                         :initform common-lisp:nil)
                        (event-bridge-event-bus-parameters :initarg
                         :event-bridge-event-bus-parameters :type
                         (common-lisp:or
                          pipe-target-event-bridge-event-bus-parameters
                          common-lisp:null)
                         :accessor
                         %pipe-target-parameters-event-bridge-event-bus-parameters
                         :initform common-lisp:nil)
                        (ecs-task-parameters :initarg :ecs-task-parameters
                         :type
                         (common-lisp:or pipe-target-ecs-task-parameters
                                         common-lisp:null)
                         :accessor %pipe-target-parameters-ecs-task-parameters
                         :initform common-lisp:nil)
                        (cloud-watch-logs-parameters :initarg
                         :cloud-watch-logs-parameters :type
                         (common-lisp:or
                          pipe-target-cloud-watch-logs-parameters
                          common-lisp:null)
                         :accessor
                         %pipe-target-parameters-cloud-watch-logs-parameters
                         :initform common-lisp:nil)
                        (batch-job-parameters :initarg :batch-job-parameters
                         :type
                         (common-lisp:or pipe-target-batch-job-parameters
                                         common-lisp:null)
                         :accessor %pipe-target-parameters-batch-job-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-parameters 'make-pipe-target-parameters))
 (common-lisp:defun make-pipe-target-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-function-state-machine-parameters
                     sqs-queue-parameters sage-maker-pipeline-parameters
                     redshift-data-parameters lambda-function-parameters
                     kinesis-stream-parameters input-template http-parameters
                     event-bridge-event-bus-parameters ecs-task-parameters
                     cloud-watch-logs-parameters batch-job-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'pipe-target-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-job-parameters))
      (common-lisp:list
       (common-lisp:cons "BatchJobParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-parameters))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-task-parameters))
      (common-lisp:list
       (common-lisp:cons "EcsTaskParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-bridge-event-bus-parameters))
      (common-lisp:list
       (common-lisp:cons "EventBridgeEventBusParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-parameters))
      (common-lisp:list
       (common-lisp:cons "HttpParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-template))
      (common-lisp:list
       (common-lisp:cons "InputTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-stream-parameters))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-parameters))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-data-parameters))
      (common-lisp:list
       (common-lisp:cons "RedshiftDataParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-pipeline-parameters))
      (common-lisp:list
       (common-lisp:cons "SageMakerPipelineParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqs-queue-parameters))
      (common-lisp:list
       (common-lisp:cons "SqsQueueParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-function-state-machine-parameters))
      (common-lisp:list
       (common-lisp:cons "StepFunctionStateMachineParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-redshift-data-parameters common-lisp:nil
                       ((with-event :initarg :with-event :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %pipe-target-redshift-data-parameters-with-event
                         :initform common-lisp:nil)
                        (statement-name :initarg :statement-name :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor
                         %pipe-target-redshift-data-parameters-statement-name
                         :initform common-lisp:nil)
                        (sqls :initarg :sqls :type
                         (common-lisp:or sqls common-lisp:null) :accessor
                         %pipe-target-redshift-data-parameters-sqls :initform
                         (common-lisp:error ":sqls is required"))
                        (secret-manager-arn :initarg :secret-manager-arn :type
                         (common-lisp:or secret-manager-arn-or-json-path
                                         common-lisp:null)
                         :accessor
                         %pipe-target-redshift-data-parameters-secret-manager-arn
                         :initform common-lisp:nil)
                        (db-user :initarg :db-user :type
                         (common-lisp:or db-user common-lisp:null) :accessor
                         %pipe-target-redshift-data-parameters-db-user
                         :initform common-lisp:nil)
                        (database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %pipe-target-redshift-data-parameters-database
                         :initform
                         (common-lisp:error ":database is required"))))
 (common-lisp:export
  (common-lisp:list 'pipe-target-redshift-data-parameters
                    'make-pipe-target-redshift-data-parameters))
 (common-lisp:defun make-pipe-target-redshift-data-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key with-event statement-name sqls
                     secret-manager-arn db-user database)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-redshift-data-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-redshift-data-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-redshift-data-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-manager-arn))
      (common-lisp:list
       (common-lisp:cons "SecretManagerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqls))
      (common-lisp:list
       (common-lisp:cons "Sqls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-event))
      (common-lisp:list
       (common-lisp:cons "WithEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-redshift-data-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-sage-maker-pipeline-parameters
                       common-lisp:nil
                       ((pipeline-parameter-list :initarg
                         :pipeline-parameter-list :type
                         (common-lisp:or sage-maker-pipeline-parameter-list
                                         common-lisp:null)
                         :accessor
                         %pipe-target-sage-maker-pipeline-parameters-pipeline-parameter-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-sage-maker-pipeline-parameters
                    'make-pipe-target-sage-maker-pipeline-parameters))
 (common-lisp:defun make-pipe-target-sage-maker-pipeline-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-parameter-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-sage-maker-pipeline-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-sage-maker-pipeline-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-sage-maker-pipeline-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-parameter-list))
      (common-lisp:list
       (common-lisp:cons "PipelineParameterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-sage-maker-pipeline-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-sqs-queue-parameters common-lisp:nil
                       ((message-group-id :initarg :message-group-id :type
                         (common-lisp:or message-group-id common-lisp:null)
                         :accessor
                         %pipe-target-sqs-queue-parameters-message-group-id
                         :initform common-lisp:nil)
                        (message-deduplication-id :initarg
                         :message-deduplication-id :type
                         (common-lisp:or message-deduplication-id
                                         common-lisp:null)
                         :accessor
                         %pipe-target-sqs-queue-parameters-message-deduplication-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-sqs-queue-parameters
                    'make-pipe-target-sqs-queue-parameters))
 (common-lisp:defun make-pipe-target-sqs-queue-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-group-id
                     message-deduplication-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-sqs-queue-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-sqs-queue-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-sqs-queue-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-deduplication-id))
      (common-lisp:list
       (common-lisp:cons "MessageDeduplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-group-id))
      (common-lisp:list
       (common-lisp:cons "MessageGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-sqs-queue-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipe-target-state-machine-parameters common-lisp:nil
                       ((invocation-type :initarg :invocation-type :type
                         (common-lisp:or pipe-target-invocation-type
                                         common-lisp:null)
                         :accessor
                         %pipe-target-state-machine-parameters-invocation-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipe-target-state-machine-parameters
                    'make-pipe-target-state-machine-parameters))
 (common-lisp:defun make-pipe-target-state-machine-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipe-target-state-machine-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-state-machine-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-state-machine-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-type))
      (common-lisp:list
       (common-lisp:cons "InvocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipe-target-state-machine-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass placement-constraint common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or placement-constraint-type
                                         common-lisp:null)
                         :accessor %placement-constraint-type :initform
                         common-lisp:nil)
                        (expression :initarg :|expression| :type
                         (common-lisp:or placement-constraint-expression
                                         common-lisp:null)
                         :accessor %placement-constraint-expression :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'placement-constraint 'make-placement-constraint))
 (common-lisp:defun make-placement-constraint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type expression)
   (common-lisp:apply #'common-lisp:make-instance 'placement-constraint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-constraint))
   common-lisp:nil))
(common-lisp:deftype placement-constraint-expression () 'common-lisp:string)
(common-lisp:deftype placement-constraint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype placement-constraints ()
   '(trivial-types:proper-list placement-constraint))
 (common-lisp:defun |make-placement-constraints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype placement-strategies ()
   '(trivial-types:proper-list placement-strategy))
 (common-lisp:defun |make-placement-strategies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass placement-strategy common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or placement-strategy-type
                                         common-lisp:null)
                         :accessor %placement-strategy-type :initform
                         common-lisp:nil)
                        (field :initarg :|field| :type
                         (common-lisp:or placement-strategy-field
                                         common-lisp:null)
                         :accessor %placement-strategy-field :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'placement-strategy 'make-placement-strategy))
 (common-lisp:defun make-placement-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type field)
   (common-lisp:apply #'common-lisp:make-instance 'placement-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-strategy))
   common-lisp:nil))
(common-lisp:deftype placement-strategy-field () 'common-lisp:string)
(common-lisp:deftype placement-strategy-type () 'common-lisp:string)
(common-lisp:deftype propagate-tags () 'common-lisp:string)
(common-lisp:deftype query-string-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-string-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-query-string-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype query-string-value () 'common-lisp:string)
(common-lisp:deftype reference-id () 'common-lisp:string)
(common-lisp:deftype requested-pipe-state () 'common-lisp:string)
(common-lisp:deftype requested-pipe-state-describe-response ()
  'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sage-maker-pipeline-parameter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or sage-maker-pipeline-parameter-value
                                         common-lisp:null)
                         :accessor %sage-maker-pipeline-parameter-value
                         :initform (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or sage-maker-pipeline-parameter-name
                                         common-lisp:null)
                         :accessor %sage-maker-pipeline-parameter-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'sage-maker-pipeline-parameter
                    'make-sage-maker-pipeline-parameter))
 (common-lisp:defun make-sage-maker-pipeline-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'sage-maker-pipeline-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sage-maker-pipeline-parameter-list ()
   '(trivial-types:proper-list sage-maker-pipeline-parameter))
 (common-lisp:defun |make-sage-maker-pipeline-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sage-maker-pipeline-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sage-maker-pipeline-parameter-name () 'common-lisp:string)
(common-lisp:deftype sage-maker-pipeline-parameter-value () 'common-lisp:string)
(common-lisp:deftype secret-manager-arn () 'common-lisp:string)
(common-lisp:deftype secret-manager-arn-or-json-path () 'common-lisp:string)
(common-lisp:deftype security-group () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass self-managed-kafka-access-configuration-credentials
                       common-lisp:nil
                       ((sasl-scram512auth :initarg :sasl-scram512auth :type
                         (common-lisp:or secret-manager-arn common-lisp:null)
                         :accessor
                         %self-managed-kafka-access-configuration-credentials-sasl-scram512auth
                         :initform common-lisp:nil)
                        (sasl-scram256auth :initarg :sasl-scram256auth :type
                         (common-lisp:or secret-manager-arn common-lisp:null)
                         :accessor
                         %self-managed-kafka-access-configuration-credentials-sasl-scram256auth
                         :initform common-lisp:nil)
                        (client-certificate-tls-auth :initarg
                         :client-certificate-tls-auth :type
                         (common-lisp:or secret-manager-arn common-lisp:null)
                         :accessor
                         %self-managed-kafka-access-configuration-credentials-client-certificate-tls-auth
                         :initform common-lisp:nil)
                        (basic-auth :initarg :basic-auth :type
                         (common-lisp:or secret-manager-arn common-lisp:null)
                         :accessor
                         %self-managed-kafka-access-configuration-credentials-basic-auth
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'self-managed-kafka-access-configuration-credentials
                    'make-self-managed-kafka-access-configuration-credentials))
 (common-lisp:defun make-self-managed-kafka-access-configuration-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sasl-scram512auth sasl-scram256auth
                     client-certificate-tls-auth basic-auth)
   (common-lisp:apply #'common-lisp:make-instance
                      'self-managed-kafka-access-configuration-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-kafka-access-configuration-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-kafka-access-configuration-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'basic-auth))
      (common-lisp:list
       (common-lisp:cons "BasicAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-certificate-tls-auth))
      (common-lisp:list
       (common-lisp:cons "ClientCertificateTlsAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl-scram256auth))
      (common-lisp:list
       (common-lisp:cons "SaslScram256Auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl-scram512auth))
      (common-lisp:list
       (common-lisp:cons "SaslScram512Auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-kafka-access-configuration-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass self-managed-kafka-access-configuration-vpc
                       common-lisp:nil
                       ((subnets :initarg :subnets :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %self-managed-kafka-access-configuration-vpc-subnets
                         :initform common-lisp:nil)
                        (security-group :initarg :security-group :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         %self-managed-kafka-access-configuration-vpc-security-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'self-managed-kafka-access-configuration-vpc
                    'make-self-managed-kafka-access-configuration-vpc))
 (common-lisp:defun make-self-managed-kafka-access-configuration-vpc
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnets security-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'self-managed-kafka-access-configuration-vpc
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-kafka-access-configuration-vpc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-kafka-access-configuration-vpc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-kafka-access-configuration-vpc))
   common-lisp:nil))
(common-lisp:deftype self-managed-kafka-start-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (pipes-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :|quotaCode| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :|serviceCode| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype sql () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sqls () '(trivial-types:proper-list sql))
 (common-lisp:defun |make-sqls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-pipe-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %start-pipe-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-pipe-request 'make-start-pipe-request))
 (common-lisp:defun make-start-pipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'start-pipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-pipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-pipe-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %start-pipe-response-name :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-pipe-response-last-modified-time :initform
                         common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state common-lisp:null)
                         :accessor %start-pipe-response-desired-state :initform
                         common-lisp:nil)
                        (current-state :initarg :current-state :type
                         (common-lisp:or pipe-state common-lisp:null) :accessor
                         %start-pipe-response-current-state :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-pipe-response-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %start-pipe-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-pipe-response 'make-start-pipe-response))
 (common-lisp:defun make-start-pipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name last-modified-time desired-state
                     current-state creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-pipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-pipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-pipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-state))
      (common-lisp:list
       (common-lisp:cons "CurrentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-pipe-response))
   common-lisp:nil))
(common-lisp:deftype statement-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-pipe-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %stop-pipe-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-pipe-request 'make-stop-pipe-request))
 (common-lisp:defun make-stop-pipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'stop-pipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-pipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-pipe-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %stop-pipe-response-name :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stop-pipe-response-last-modified-time :initform
                         common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state common-lisp:null)
                         :accessor %stop-pipe-response-desired-state :initform
                         common-lisp:nil)
                        (current-state :initarg :current-state :type
                         (common-lisp:or pipe-state common-lisp:null) :accessor
                         %stop-pipe-response-current-state :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stop-pipe-response-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %stop-pipe-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-pipe-response 'make-stop-pipe-response))
 (common-lisp:defun make-stop-pipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name last-modified-time desired-state
                     current-state creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'stop-pipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-pipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-pipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-state))
      (common-lisp:list
       (common-lisp:cons "CurrentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-pipe-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnets () '(trivial-types:proper-list subnet))
 (common-lisp:defun |make-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (pipes-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :|quotaCode| :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :|serviceCode| :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-request common-lisp:nil
                       ((target-parameters :initarg :target-parameters :type
                         (common-lisp:or pipe-target-parameters
                                         common-lisp:null)
                         :accessor %update-pipe-request-target-parameters
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-pipe-request-target :initform common-lisp:nil)
                        (source-parameters :initarg :source-parameters :type
                         (common-lisp:or update-pipe-source-parameters
                                         common-lisp:null)
                         :accessor %update-pipe-request-source-parameters
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-pipe-request-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %update-pipe-request-name :initform
                         (common-lisp:error ":name is required"))
                        (enrichment-parameters :initarg :enrichment-parameters
                         :type
                         (common-lisp:or pipe-enrichment-parameters
                                         common-lisp:null)
                         :accessor %update-pipe-request-enrichment-parameters
                         :initform common-lisp:nil)
                        (enrichment :initarg :enrichment :type
                         (common-lisp:or optional-arn common-lisp:null)
                         :accessor %update-pipe-request-enrichment :initform
                         common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state common-lisp:null)
                         :accessor %update-pipe-request-desired-state :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or pipe-description common-lisp:null)
                         :accessor %update-pipe-request-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-request 'make-update-pipe-request))
 (common-lisp:defun make-update-pipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-parameters target
                     source-parameters role-arn name enrichment-parameters
                     enrichment desired-state description)
   (common-lisp:apply #'common-lisp:make-instance 'update-pipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-pipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-pipe-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrichment))
      (common-lisp:list
       (common-lisp:cons "Enrichment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enrichment-parameters))
      (common-lisp:list
       (common-lisp:cons "EnrichmentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-parameters))
      (common-lisp:list
       (common-lisp:cons "SourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-parameters))
      (common-lisp:list
       (common-lisp:cons "TargetParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-pipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or pipe-name common-lisp:null) :accessor
                         %update-pipe-response-name :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-pipe-response-last-modified-time :initform
                         common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or requested-pipe-state common-lisp:null)
                         :accessor %update-pipe-response-desired-state
                         :initform common-lisp:nil)
                        (current-state :initarg :current-state :type
                         (common-lisp:or pipe-state common-lisp:null) :accessor
                         %update-pipe-response-current-state :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-pipe-response-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or pipe-arn common-lisp:null) :accessor
                         %update-pipe-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-response 'make-update-pipe-response))
 (common-lisp:defun make-update-pipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name last-modified-time desired-state
                     current-state creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-pipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-pipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-pipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-state))
      (common-lisp:list
       (common-lisp:cons "CurrentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-pipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-source-active-mqbroker-parameters
                       common-lisp:nil
                       ((maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-active-mqbroker-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or mqbroker-access-credentials
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-active-mqbroker-parameters-credentials
                         :initform
                         (common-lisp:error ":credentials is required"))
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %update-pipe-source-active-mqbroker-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-source-active-mqbroker-parameters
                    'make-update-pipe-source-active-mqbroker-parameters))
 (common-lisp:defun make-update-pipe-source-active-mqbroker-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-batching-window-in-seconds
                     credentials batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipe-source-active-mqbroker-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-active-mqbroker-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-active-mqbroker-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-active-mqbroker-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-source-dynamo-dbstream-parameters
                       common-lisp:nil
                       ((parallelization-factor :initarg
                         :parallelization-factor :type
                         (common-lisp:or limit-max10 common-lisp:null)
                         :accessor
                         %update-pipe-source-dynamo-dbstream-parameters-parallelization-factor
                         :initform common-lisp:nil)
                        (on-partial-batch-item-failure :initarg
                         :on-partial-batch-item-failure :type
                         (common-lisp:or on-partial-batch-item-failure-streams
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-dynamo-dbstream-parameters-on-partial-batch-item-failure
                         :initform common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :type
                         (common-lisp:or maximum-retry-attempts-esm
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-dynamo-dbstream-parameters-maximum-retry-attempts
                         :initform common-lisp:nil)
                        (maximum-record-age-in-seconds :initarg
                         :maximum-record-age-in-seconds :type
                         (common-lisp:or maximum-record-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-dynamo-dbstream-parameters-maximum-record-age-in-seconds
                         :initform common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-dynamo-dbstream-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config :type
                         (common-lisp:or dead-letter-config common-lisp:null)
                         :accessor
                         %update-pipe-source-dynamo-dbstream-parameters-dead-letter-config
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %update-pipe-source-dynamo-dbstream-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-source-dynamo-dbstream-parameters
                    'make-update-pipe-source-dynamo-dbstream-parameters))
 (common-lisp:defun make-update-pipe-source-dynamo-dbstream-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parallelization-factor
                     on-partial-batch-item-failure maximum-retry-attempts
                     maximum-record-age-in-seconds
                     maximum-batching-window-in-seconds dead-letter-config
                     batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipe-source-dynamo-dbstream-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-dynamo-dbstream-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-dynamo-dbstream-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-record-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumRecordAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-partial-batch-item-failure))
      (common-lisp:list
       (common-lisp:cons "OnPartialBatchItemFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelization-factor))
      (common-lisp:list
       (common-lisp:cons "ParallelizationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-dynamo-dbstream-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-source-kinesis-stream-parameters
                       common-lisp:nil
                       ((parallelization-factor :initarg
                         :parallelization-factor :type
                         (common-lisp:or limit-max10 common-lisp:null)
                         :accessor
                         %update-pipe-source-kinesis-stream-parameters-parallelization-factor
                         :initform common-lisp:nil)
                        (on-partial-batch-item-failure :initarg
                         :on-partial-batch-item-failure :type
                         (common-lisp:or on-partial-batch-item-failure-streams
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-kinesis-stream-parameters-on-partial-batch-item-failure
                         :initform common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :type
                         (common-lisp:or maximum-retry-attempts-esm
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-kinesis-stream-parameters-maximum-retry-attempts
                         :initform common-lisp:nil)
                        (maximum-record-age-in-seconds :initarg
                         :maximum-record-age-in-seconds :type
                         (common-lisp:or maximum-record-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-kinesis-stream-parameters-maximum-record-age-in-seconds
                         :initform common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-kinesis-stream-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config :type
                         (common-lisp:or dead-letter-config common-lisp:null)
                         :accessor
                         %update-pipe-source-kinesis-stream-parameters-dead-letter-config
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %update-pipe-source-kinesis-stream-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-source-kinesis-stream-parameters
                    'make-update-pipe-source-kinesis-stream-parameters))
 (common-lisp:defun make-update-pipe-source-kinesis-stream-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parallelization-factor
                     on-partial-batch-item-failure maximum-retry-attempts
                     maximum-record-age-in-seconds
                     maximum-batching-window-in-seconds dead-letter-config
                     batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipe-source-kinesis-stream-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-kinesis-stream-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-kinesis-stream-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-record-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumRecordAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-partial-batch-item-failure))
      (common-lisp:list
       (common-lisp:cons "OnPartialBatchItemFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelization-factor))
      (common-lisp:list
       (common-lisp:cons "ParallelizationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-kinesis-stream-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-source-managed-streaming-kafka-parameters
                       common-lisp:nil
                       ((maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-managed-streaming-kafka-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or mskaccess-credentials
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-managed-streaming-kafka-parameters-credentials
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %update-pipe-source-managed-streaming-kafka-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-source-managed-streaming-kafka-parameters
                    'make-update-pipe-source-managed-streaming-kafka-parameters))
 (common-lisp:defun make-update-pipe-source-managed-streaming-kafka-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-batching-window-in-seconds
                     credentials batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipe-source-managed-streaming-kafka-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-managed-streaming-kafka-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-managed-streaming-kafka-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-managed-streaming-kafka-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-source-parameters common-lisp:nil
                       ((sqs-queue-parameters :initarg :sqs-queue-parameters
                         :type
                         (common-lisp:or
                          update-pipe-source-sqs-queue-parameters
                          common-lisp:null)
                         :accessor
                         %update-pipe-source-parameters-sqs-queue-parameters
                         :initform common-lisp:nil)
                        (self-managed-kafka-parameters :initarg
                         :self-managed-kafka-parameters :type
                         (common-lisp:or
                          update-pipe-source-self-managed-kafka-parameters
                          common-lisp:null)
                         :accessor
                         %update-pipe-source-parameters-self-managed-kafka-parameters
                         :initform common-lisp:nil)
                        (rabbit-mqbroker-parameters :initarg
                         :rabbit-mqbroker-parameters :type
                         (common-lisp:or
                          update-pipe-source-rabbit-mqbroker-parameters
                          common-lisp:null)
                         :accessor
                         %update-pipe-source-parameters-rabbit-mqbroker-parameters
                         :initform common-lisp:nil)
                        (managed-streaming-kafka-parameters :initarg
                         :managed-streaming-kafka-parameters :type
                         (common-lisp:or
                          update-pipe-source-managed-streaming-kafka-parameters
                          common-lisp:null)
                         :accessor
                         %update-pipe-source-parameters-managed-streaming-kafka-parameters
                         :initform common-lisp:nil)
                        (kinesis-stream-parameters :initarg
                         :kinesis-stream-parameters :type
                         (common-lisp:or
                          update-pipe-source-kinesis-stream-parameters
                          common-lisp:null)
                         :accessor
                         %update-pipe-source-parameters-kinesis-stream-parameters
                         :initform common-lisp:nil)
                        (filter-criteria :initarg :filter-criteria :type
                         (common-lisp:or filter-criteria common-lisp:null)
                         :accessor
                         %update-pipe-source-parameters-filter-criteria
                         :initform common-lisp:nil)
                        (dynamo-dbstream-parameters :initarg
                         :dynamo-dbstream-parameters :type
                         (common-lisp:or
                          update-pipe-source-dynamo-dbstream-parameters
                          common-lisp:null)
                         :accessor
                         %update-pipe-source-parameters-dynamo-dbstream-parameters
                         :initform common-lisp:nil)
                        (active-mqbroker-parameters :initarg
                         :active-mqbroker-parameters :type
                         (common-lisp:or
                          update-pipe-source-active-mqbroker-parameters
                          common-lisp:null)
                         :accessor
                         %update-pipe-source-parameters-active-mqbroker-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-source-parameters
                    'make-update-pipe-source-parameters))
 (common-lisp:defun make-update-pipe-source-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sqs-queue-parameters
                     self-managed-kafka-parameters rabbit-mqbroker-parameters
                     managed-streaming-kafka-parameters
                     kinesis-stream-parameters filter-criteria
                     dynamo-dbstream-parameters active-mqbroker-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipe-source-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-mqbroker-parameters))
      (common-lisp:list
       (common-lisp:cons "ActiveMQBrokerParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamo-dbstream-parameters))
      (common-lisp:list
       (common-lisp:cons "DynamoDBStreamParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "FilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-stream-parameters))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-streaming-kafka-parameters))
      (common-lisp:list
       (common-lisp:cons "ManagedStreamingKafkaParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rabbit-mqbroker-parameters))
      (common-lisp:list
       (common-lisp:cons "RabbitMQBrokerParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-kafka-parameters))
      (common-lisp:list
       (common-lisp:cons "SelfManagedKafkaParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqs-queue-parameters))
      (common-lisp:list
       (common-lisp:cons "SqsQueueParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-source-rabbit-mqbroker-parameters
                       common-lisp:nil
                       ((maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-rabbit-mqbroker-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or mqbroker-access-credentials
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-rabbit-mqbroker-parameters-credentials
                         :initform
                         (common-lisp:error ":credentials is required"))
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %update-pipe-source-rabbit-mqbroker-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-source-rabbit-mqbroker-parameters
                    'make-update-pipe-source-rabbit-mqbroker-parameters))
 (common-lisp:defun make-update-pipe-source-rabbit-mqbroker-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-batching-window-in-seconds
                     credentials batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipe-source-rabbit-mqbroker-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-rabbit-mqbroker-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-rabbit-mqbroker-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-rabbit-mqbroker-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-source-self-managed-kafka-parameters
                       common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or
                          self-managed-kafka-access-configuration-vpc
                          common-lisp:null)
                         :accessor
                         %update-pipe-source-self-managed-kafka-parameters-vpc
                         :initform common-lisp:nil)
                        (server-root-ca-certificate :initarg
                         :server-root-ca-certificate :type
                         (common-lisp:or secret-manager-arn common-lisp:null)
                         :accessor
                         %update-pipe-source-self-managed-kafka-parameters-server-root-ca-certificate
                         :initform common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-self-managed-kafka-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or
                          self-managed-kafka-access-configuration-credentials
                          common-lisp:null)
                         :accessor
                         %update-pipe-source-self-managed-kafka-parameters-credentials
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %update-pipe-source-self-managed-kafka-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-source-self-managed-kafka-parameters
                    'make-update-pipe-source-self-managed-kafka-parameters))
 (common-lisp:defun make-update-pipe-source-self-managed-kafka-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc server-root-ca-certificate
                     maximum-batching-window-in-seconds credentials batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipe-source-self-managed-kafka-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-self-managed-kafka-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-self-managed-kafka-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-root-ca-certificate))
      (common-lisp:list
       (common-lisp:cons "ServerRootCaCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-self-managed-kafka-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipe-source-sqs-queue-parameters common-lisp:nil
                       ((maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-pipe-source-sqs-queue-parameters-maximum-batching-window-in-seconds
                         :initform common-lisp:nil)
                        (batch-size :initarg :batch-size :type
                         (common-lisp:or limit-max10000 common-lisp:null)
                         :accessor
                         %update-pipe-source-sqs-queue-parameters-batch-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipe-source-sqs-queue-parameters
                    'make-update-pipe-source-sqs-queue-parameters))
 (common-lisp:defun make-update-pipe-source-sqs-queue-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-batching-window-in-seconds
                     batch-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipe-source-sqs-queue-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-sqs-queue-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-sqs-queue-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipe-source-sqs-queue-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (pipes-error)
     ((field-list :initarg :|fieldList| :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))
                        (message :initarg :|message| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %validation-exception-field-message
                         :initform
                         (common-lisp:error ":message is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name message)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-pipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description desired-state enrichment
                     enrichment-parameters name role-arn source
                     source-parameters tags target target-parameters)
   (common-lisp:declare
    (common-lisp:ignorable description desired-state enrichment
     enrichment-parameters name role-arn source source-parameters tags target
     target-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/pipes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreatePipe"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-pipe))
(common-lisp:progn
 (common-lisp:defun delete-pipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/pipes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeletePipe"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-pipe))
(common-lisp:progn
 (common-lisp:defun describe-pipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-pipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/pipes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribePipe"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-pipe))
(common-lisp:progn
 (common-lisp:defun list-pipes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key current-state desired-state limit
                     name-prefix next-token source-prefix target-prefix)
   (common-lisp:declare
    (common-lisp:ignorable current-state desired-state limit name-prefix
     next-token source-prefix target-prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/pipes" "ListPipes"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pipes))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-pipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-pipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/pipes/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "StartPipe"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-pipe))
(common-lisp:progn
 (common-lisp:defun stop-pipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-pipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/pipes/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "StopPipe"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-pipe))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-pipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description desired-state enrichment
                     enrichment-parameters name role-arn source-parameters
                     target target-parameters)
   (common-lisp:declare
    (common-lisp:ignorable description desired-state enrichment
     enrichment-parameters name role-arn source-parameters target
     target-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pipes-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/pipes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdatePipe"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pipe))
