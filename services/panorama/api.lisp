;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/panorama/api
  (:use)
  (:nicknames #:aws/panorama)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/panorama/api)
(common-lisp:progn
 (common-lisp:defclass panorama-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "panorama" :protocol
                        :rest-json))
 (common-lisp:export 'panorama-request))
(common-lisp:progn
 (common-lisp:define-condition panorama-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'panorama-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (panorama-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass alternate-software-metadata common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %alternate-software-metadata-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'alternate-software-metadata
                    'make-alternate-software-metadata))
 (common-lisp:defun make-alternate-software-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version)
   (common-lisp:apply #'common-lisp:make-instance 'alternate-software-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          alternate-software-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          alternate-software-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          alternate-software-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alternate-softwares ()
   '(trivial-types:proper-list alternate-software-metadata))
 (common-lisp:defun |make-alternate-softwares|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            alternate-software-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-instance common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %application-instance-tags :initform common-lisp:nil)
                        (status-description :initarg :status-description :type
                         (common-lisp:or
                          application-instance-status-description
                          common-lisp:null)
                         :accessor %application-instance-status-description
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or application-instance-status
                                         common-lisp:null)
                         :accessor %application-instance-status :initform
                         common-lisp:nil)
                        (runtime-context-states :initarg
                         :runtime-context-states :type
                         (common-lisp:or reported-runtime-context-states
                                         common-lisp:null)
                         :accessor %application-instance-runtime-context-states
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or application-instance-name
                                         common-lisp:null)
                         :accessor %application-instance-name :initform
                         common-lisp:nil)
                        (health-status :initarg :health-status :type
                         (common-lisp:or application-instance-health-status
                                         common-lisp:null)
                         :accessor %application-instance-health-status
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %application-instance-description :initform
                         common-lisp:nil)
                        (default-runtime-context-device-name :initarg
                         :default-runtime-context-device-name :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor
                         %application-instance-default-runtime-context-device-name
                         :initform common-lisp:nil)
                        (default-runtime-context-device :initarg
                         :default-runtime-context-device :type
                         (common-lisp:or default-runtime-context-device
                                         common-lisp:null)
                         :accessor
                         %application-instance-default-runtime-context-device
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %application-instance-created-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or application-instance-arn
                                         common-lisp:null)
                         :accessor %application-instance-arn :initform
                         common-lisp:nil)
                        (application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %application-instance-application-instance-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-instance 'make-application-instance))
 (common-lisp:defun make-application-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status-description status
                     runtime-context-states name health-status description
                     default-runtime-context-device-name
                     default-runtime-context-device created-time arn
                     application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'application-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device-name))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-context-states))
      (common-lisp:list
       (common-lisp:cons "RuntimeContextStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-description))
      (common-lisp:list
       (common-lisp:cons "StatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-instance))
   common-lisp:nil))
(common-lisp:deftype application-instance-arn () 'common-lisp:string)
(common-lisp:deftype application-instance-health-status () 'common-lisp:string)
(common-lisp:deftype application-instance-id () 'common-lisp:string)
(common-lisp:deftype application-instance-name () 'common-lisp:string)
(common-lisp:deftype application-instance-status () 'common-lisp:string)
(common-lisp:deftype application-instance-status-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-instances ()
   '(trivial-types:proper-list application-instance))
 (common-lisp:defun |make-application-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bucket () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype certificates ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (panorama-error)
     ((error-arguments :initarg :error-arguments :initform common-lisp:nil
       :reader conflict-exception-error-arguments)
      (error-id :initarg :error-id :initform common-lisp:nil :reader
       conflict-exception-error-id)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-error-arguments
                    'conflict-exception-error-id 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass conflict-exception-error-argument common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %conflict-exception-error-argument-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %conflict-exception-error-argument-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'conflict-exception-error-argument
                    'make-conflict-exception-error-argument))
 (common-lisp:defun make-conflict-exception-error-argument
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'conflict-exception-error-argument
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conflict-exception-error-argument))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conflict-exception-error-argument))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conflict-exception-error-argument))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conflict-exception-error-argument-list ()
   '(trivial-types:proper-list conflict-exception-error-argument))
 (common-lisp:defun |make-conflict-exception-error-argument-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conflict-exception-error-argument))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-application-instance-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-application-instance-request-tags :initform
                         common-lisp:nil)
                        (runtime-role-arn :initarg :runtime-role-arn :type
                         (common-lisp:or runtime-role-arn common-lisp:null)
                         :accessor
                         %create-application-instance-request-runtime-role-arn
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or application-instance-name
                                         common-lisp:null)
                         :accessor %create-application-instance-request-name
                         :initform common-lisp:nil)
                        (manifest-payload :initarg :manifest-payload :type
                         (common-lisp:or manifest-payload common-lisp:null)
                         :accessor
                         %create-application-instance-request-manifest-payload
                         :initform
                         (common-lisp:error ":manifest-payload is required"))
                        (manifest-overrides-payload :initarg
                         :manifest-overrides-payload :type
                         (common-lisp:or manifest-overrides-payload
                                         common-lisp:null)
                         :accessor
                         %create-application-instance-request-manifest-overrides-payload
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %create-application-instance-request-description
                         :initform common-lisp:nil)
                        (default-runtime-context-device :initarg
                         :default-runtime-context-device :type
                         (common-lisp:or default-runtime-context-device
                                         common-lisp:null)
                         :accessor
                         %create-application-instance-request-default-runtime-context-device
                         :initform
                         (common-lisp:error
                          ":default-runtime-context-device is required"))
                        (application-instance-id-to-replace :initarg
                         :application-instance-id-to-replace :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %create-application-instance-request-application-instance-id-to-replace
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-application-instance-request
                    'make-create-application-instance-request))
 (common-lisp:defun make-create-application-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags runtime-role-arn name
                     manifest-payload manifest-overrides-payload description
                     default-runtime-context-device
                     application-instance-id-to-replace)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-application-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id-to-replace))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceIdToReplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-overrides-payload))
      (common-lisp:list
       (common-lisp:cons "ManifestOverridesPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-payload))
      (common-lisp:list
       (common-lisp:cons "ManifestPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "RuntimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-instance-response common-lisp:nil
                       ((application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %create-application-instance-response-application-instance-id
                         :initform
                         (common-lisp:error
                          ":application-instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-application-instance-response
                    'make-create-application-instance-response))
 (common-lisp:defun make-create-application-instance-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-application-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-for-devices-request common-lisp:nil
                       ((job-type :initarg :job-type :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         %create-job-for-devices-request-job-type :initform
                         (common-lisp:error ":job-type is required"))
                        (device-job-config :initarg :device-job-config :type
                         (common-lisp:or device-job-config common-lisp:null)
                         :accessor
                         %create-job-for-devices-request-device-job-config
                         :initform common-lisp:nil)
                        (device-ids :initarg :device-ids :type
                         (common-lisp:or device-id-list common-lisp:null)
                         :accessor %create-job-for-devices-request-device-ids
                         :initform
                         (common-lisp:error ":device-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'create-job-for-devices-request
                    'make-create-job-for-devices-request))
 (common-lisp:defun make-create-job-for-devices-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-type device-job-config device-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-job-for-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-ids))
      (common-lisp:list
       (common-lisp:cons "DeviceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-job-config))
      (common-lisp:list
       (common-lisp:cons "DeviceJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-for-devices-response common-lisp:nil
                       ((jobs :initarg :jobs :type
                         (common-lisp:or job-list common-lisp:null) :accessor
                         %create-job-for-devices-response-jobs :initform
                         (common-lisp:error ":jobs is required"))))
 (common-lisp:export
  (common-lisp:list 'create-job-for-devices-response
                    'make-create-job-for-devices-response))
 (common-lisp:defun make-create-job-for-devices-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-job-for-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-node-from-template-job-request common-lisp:nil
                       ((template-type :initarg :template-type :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         %create-node-from-template-job-request-template-type
                         :initform
                         (common-lisp:error ":template-type is required"))
                        (template-parameters :initarg :template-parameters
                         :type
                         (common-lisp:or template-parameters-map
                                         common-lisp:null)
                         :accessor
                         %create-node-from-template-job-request-template-parameters
                         :initform
                         (common-lisp:error
                          ":template-parameters is required"))
                        (output-package-version :initarg
                         :output-package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor
                         %create-node-from-template-job-request-output-package-version
                         :initform
                         (common-lisp:error
                          ":output-package-version is required"))
                        (output-package-name :initarg :output-package-name
                         :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor
                         %create-node-from-template-job-request-output-package-name
                         :initform
                         (common-lisp:error
                          ":output-package-name is required"))
                        (node-name :initarg :node-name :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         %create-node-from-template-job-request-node-name
                         :initform
                         (common-lisp:error ":node-name is required"))
                        (node-description :initarg :node-description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %create-node-from-template-job-request-node-description
                         :initform common-lisp:nil)
                        (job-tags :initarg :job-tags :type
                         (common-lisp:or job-tags-list common-lisp:null)
                         :accessor
                         %create-node-from-template-job-request-job-tags
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-node-from-template-job-request
                    'make-create-node-from-template-job-request))
 (common-lisp:defun make-create-node-from-template-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-type template-parameters
                     output-package-version output-package-name node-name
                     node-description job-tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-node-from-template-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tags))
      (common-lisp:list
       (common-lisp:cons "JobTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-description))
      (common-lisp:list
       (common-lisp:cons "NodeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-name))
      (common-lisp:list
       (common-lisp:cons "NodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-package-name))
      (common-lisp:list
       (common-lisp:cons "OutputPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-package-version))
      (common-lisp:list
       (common-lisp:cons "OutputPackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-parameters))
      (common-lisp:list
       (common-lisp:cons "TemplateParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-node-from-template-job-response common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %create-node-from-template-job-response-job-id
                         :initform (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-node-from-template-job-response
                    'make-create-node-from-template-job-response))
 (common-lisp:defun make-create-node-from-template-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-node-from-template-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-import-job-request common-lisp:nil
                       ((output-config :initarg :output-config :type
                         (common-lisp:or package-import-job-output-config
                                         common-lisp:null)
                         :accessor
                         %create-package-import-job-request-output-config
                         :initform
                         (common-lisp:error ":output-config is required"))
                        (job-type :initarg :job-type :type
                         (common-lisp:or package-import-job-type
                                         common-lisp:null)
                         :accessor %create-package-import-job-request-job-type
                         :initform (common-lisp:error ":job-type is required"))
                        (job-tags :initarg :job-tags :type
                         (common-lisp:or job-tags-list common-lisp:null)
                         :accessor %create-package-import-job-request-job-tags
                         :initform common-lisp:nil)
                        (input-config :initarg :input-config :type
                         (common-lisp:or package-import-job-input-config
                                         common-lisp:null)
                         :accessor
                         %create-package-import-job-request-input-config
                         :initform
                         (common-lisp:error ":input-config is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-package-import-job-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))))
 (common-lisp:export
  (common-lisp:list 'create-package-import-job-request
                    'make-create-package-import-job-request))
 (common-lisp:defun make-create-package-import-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-config job-type job-tags
                     input-config client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-package-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tags))
      (common-lisp:list
       (common-lisp:cons "JobTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-import-job-response common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %create-package-import-job-response-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-package-import-job-response
                    'make-create-package-import-job-response))
 (common-lisp:defun make-create-package-import-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-package-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-package-request-tags :initform
                         common-lisp:nil)
                        (package-name :initarg :package-name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor %create-package-request-package-name
                         :initform
                         (common-lisp:error ":package-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-package-request 'make-create-package-request))
 (common-lisp:defun make-create-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags package-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-response common-lisp:nil
                       ((storage-location :initarg :storage-location :type
                         (common-lisp:or storage-location common-lisp:null)
                         :accessor %create-package-response-storage-location
                         :initform
                         (common-lisp:error ":storage-location is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %create-package-response-package-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or node-package-arn common-lisp:null)
                         :accessor %create-package-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-package-response 'make-create-package-response))
 (common-lisp:defun make-create-package-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-location package-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   common-lisp:nil))
(common-lisp:deftype created-time () 'common-lisp:string)
(common-lisp:deftype current-software () 'common-lisp:string)
(common-lisp:deftype default-gateway () 'common-lisp:string)
(common-lisp:deftype default-runtime-context-device () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-device-request common-lisp:nil
                       ((device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %delete-device-request-device-id :initform
                         (common-lisp:error ":device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-device-request 'make-delete-device-request))
 (common-lisp:defun make-delete-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-response common-lisp:nil
                       ((device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %delete-device-response-device-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-device-response 'make-delete-device-response))
 (common-lisp:defun make-delete-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-request common-lisp:nil
                       ((package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %delete-package-request-package-id :initform
                         (common-lisp:error ":package-id is required"))
                        (force-delete :initarg :force-delete :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %delete-package-request-force-delete :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-package-request 'make-delete-package-request))
 (common-lisp:defun make-delete-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-id force-delete)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-package-response 'make-delete-package-response))
 (common-lisp:defun make-delete-package-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-package-version-request common-lisp:nil
                       ((updated-latest-patch-version :initarg
                         :updated-latest-patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor
                         %deregister-package-version-request-updated-latest-patch-version
                         :initform common-lisp:nil)
                        (patch-version :initarg :patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor
                         %deregister-package-version-request-patch-version
                         :initform
                         (common-lisp:error ":patch-version is required"))
                        (package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor
                         %deregister-package-version-request-package-version
                         :initform
                         (common-lisp:error ":package-version is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor
                         %deregister-package-version-request-package-id
                         :initform
                         (common-lisp:error ":package-id is required"))
                        (owner-account :initarg :owner-account :type
                         (common-lisp:or package-owner-account
                                         common-lisp:null)
                         :accessor
                         %deregister-package-version-request-owner-account
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-package-version-request
                    'make-deregister-package-version-request))
 (common-lisp:defun make-deregister-package-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-latest-patch-version
                     patch-version package-version package-id owner-account)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-package-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-package-version-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-package-version-response
                    'make-deregister-package-version-response))
 (common-lisp:defun make-deregister-package-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-package-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-instance-details-request
                       common-lisp:nil
                       ((application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-details-request-application-instance-id
                         :initform
                         (common-lisp:error
                          ":application-instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-application-instance-details-request
                    'make-describe-application-instance-details-request))
 (common-lisp:defun make-describe-application-instance-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-application-instance-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-instance-details-response
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or application-instance-name
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-details-response-name
                         :initform common-lisp:nil)
                        (manifest-payload :initarg :manifest-payload :type
                         (common-lisp:or manifest-payload common-lisp:null)
                         :accessor
                         %describe-application-instance-details-response-manifest-payload
                         :initform common-lisp:nil)
                        (manifest-overrides-payload :initarg
                         :manifest-overrides-payload :type
                         (common-lisp:or manifest-overrides-payload
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-details-response-manifest-overrides-payload
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %describe-application-instance-details-response-description
                         :initform common-lisp:nil)
                        (default-runtime-context-device :initarg
                         :default-runtime-context-device :type
                         (common-lisp:or default-runtime-context-device
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-details-response-default-runtime-context-device
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %describe-application-instance-details-response-created-time
                         :initform common-lisp:nil)
                        (application-instance-id-to-replace :initarg
                         :application-instance-id-to-replace :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-details-response-application-instance-id-to-replace
                         :initform common-lisp:nil)
                        (application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-details-response-application-instance-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-application-instance-details-response
                    'make-describe-application-instance-details-response))
 (common-lisp:defun make-describe-application-instance-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name manifest-payload
                     manifest-overrides-payload description
                     default-runtime-context-device created-time
                     application-instance-id-to-replace
                     application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-application-instance-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id-to-replace))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceIdToReplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-overrides-payload))
      (common-lisp:list
       (common-lisp:cons "ManifestOverridesPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-payload))
      (common-lisp:list
       (common-lisp:cons "ManifestPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-instance-request common-lisp:nil
                       ((application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-request-application-instance-id
                         :initform
                         (common-lisp:error
                          ":application-instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-application-instance-request
                    'make-describe-application-instance-request))
 (common-lisp:defun make-describe-application-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-application-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-instance-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-application-instance-response-tags :initform
                         common-lisp:nil)
                        (status-description :initarg :status-description :type
                         (common-lisp:or
                          application-instance-status-description
                          common-lisp:null)
                         :accessor
                         %describe-application-instance-response-status-description
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or application-instance-status
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-response-status
                         :initform common-lisp:nil)
                        (runtime-role-arn :initarg :runtime-role-arn :type
                         (common-lisp:or runtime-role-arn common-lisp:null)
                         :accessor
                         %describe-application-instance-response-runtime-role-arn
                         :initform common-lisp:nil)
                        (runtime-context-states :initarg
                         :runtime-context-states :type
                         (common-lisp:or reported-runtime-context-states
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-response-runtime-context-states
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or application-instance-name
                                         common-lisp:null)
                         :accessor %describe-application-instance-response-name
                         :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %describe-application-instance-response-last-updated-time
                         :initform common-lisp:nil)
                        (health-status :initarg :health-status :type
                         (common-lisp:or application-instance-health-status
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-response-health-status
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %describe-application-instance-response-description
                         :initform common-lisp:nil)
                        (default-runtime-context-device-name :initarg
                         :default-runtime-context-device-name :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor
                         %describe-application-instance-response-default-runtime-context-device-name
                         :initform common-lisp:nil)
                        (default-runtime-context-device :initarg
                         :default-runtime-context-device :type
                         (common-lisp:or default-runtime-context-device
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-response-default-runtime-context-device
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %describe-application-instance-response-created-time
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or application-instance-arn
                                         common-lisp:null)
                         :accessor %describe-application-instance-response-arn
                         :initform common-lisp:nil)
                        (application-instance-id-to-replace :initarg
                         :application-instance-id-to-replace :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-response-application-instance-id-to-replace
                         :initform common-lisp:nil)
                        (application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %describe-application-instance-response-application-instance-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-application-instance-response
                    'make-describe-application-instance-response))
 (common-lisp:defun make-describe-application-instance-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status-description status
                     runtime-role-arn runtime-context-states name
                     last-updated-time health-status description
                     default-runtime-context-device-name
                     default-runtime-context-device created-time arn
                     application-instance-id-to-replace
                     application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-application-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id-to-replace))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceIdToReplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device-name))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-context-states))
      (common-lisp:list
       (common-lisp:cons "RuntimeContextStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "RuntimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-description))
      (common-lisp:list
       (common-lisp:cons "StatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-device-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-device-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-device-job-request
                    'make-describe-device-job-request))
 (common-lisp:defun make-describe-device-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-device-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-device-job-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or update-progress common-lisp:null)
                         :accessor %describe-device-job-response-status
                         :initform common-lisp:nil)
                        (job-type :initarg :job-type :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         %describe-device-job-response-job-type :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-device-job-response-job-id :initform
                         common-lisp:nil)
                        (image-version :initarg :image-version :type
                         (common-lisp:or image-version common-lisp:null)
                         :accessor %describe-device-job-response-image-version
                         :initform common-lisp:nil)
                        (device-type :initarg :device-type :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor %describe-device-job-response-device-type
                         :initform common-lisp:nil)
                        (device-name :initarg :device-name :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor %describe-device-job-response-device-name
                         :initform common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %describe-device-job-response-device-id :initform
                         common-lisp:nil)
                        (device-arn :initarg :device-arn :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         %describe-device-job-response-device-arn :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or update-created-time common-lisp:null)
                         :accessor %describe-device-job-response-created-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-device-job-response
                    'make-describe-device-job-response))
 (common-lisp:defun make-describe-device-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status job-type job-id image-version
                     device-type device-name device-id device-arn created-time)
   (common-lisp:apply #'common-lisp:make-instance 'describe-device-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "DeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version))
      (common-lisp:list
       (common-lisp:cons "ImageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-device-request common-lisp:nil
                       ((device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %describe-device-request-device-id :initform
                         (common-lisp:error ":device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-device-request 'make-describe-device-request))
 (common-lisp:defun make-describe-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-device-response common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor %describe-device-response-type :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-device-response-tags :initform
                         common-lisp:nil)
                        (serial-number :initarg :serial-number :type
                         (common-lisp:or device-serial-number common-lisp:null)
                         :accessor %describe-device-response-serial-number
                         :initform common-lisp:nil)
                        (provisioning-status :initarg :provisioning-status
                         :type (common-lisp:or device-status common-lisp:null)
                         :accessor
                         %describe-device-response-provisioning-status
                         :initform common-lisp:nil)
                        (networking-configuration :initarg
                         :networking-configuration :type
                         (common-lisp:or network-payload common-lisp:null)
                         :accessor
                         %describe-device-response-networking-configuration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor %describe-device-response-name :initform
                         common-lisp:nil)
                        (lease-expiration-time :initarg :lease-expiration-time
                         :type
                         (common-lisp:or lease-expiration-time
                                         common-lisp:null)
                         :accessor
                         %describe-device-response-lease-expiration-time
                         :initform common-lisp:nil)
                        (latest-software :initarg :latest-software :type
                         (common-lisp:or latest-software common-lisp:null)
                         :accessor %describe-device-response-latest-software
                         :initform common-lisp:nil)
                        (latest-device-job :initarg :latest-device-job :type
                         (common-lisp:or latest-device-job common-lisp:null)
                         :accessor %describe-device-response-latest-device-job
                         :initform common-lisp:nil)
                        (latest-alternate-software :initarg
                         :latest-alternate-software :type
                         (common-lisp:or latest-alternate-software
                                         common-lisp:null)
                         :accessor
                         %describe-device-response-latest-alternate-software
                         :initform common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %describe-device-response-device-id :initform
                         common-lisp:nil)
                        (device-connection-status :initarg
                         :device-connection-status :type
                         (common-lisp:or device-connection-status
                                         common-lisp:null)
                         :accessor
                         %describe-device-response-device-connection-status
                         :initform common-lisp:nil)
                        (device-aggregated-status :initarg
                         :device-aggregated-status :type
                         (common-lisp:or device-aggregated-status
                                         common-lisp:null)
                         :accessor
                         %describe-device-response-device-aggregated-status
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-device-response-description
                         :initform common-lisp:nil)
                        (current-software :initarg :current-software :type
                         (common-lisp:or current-software common-lisp:null)
                         :accessor %describe-device-response-current-software
                         :initform common-lisp:nil)
                        (current-networking-status :initarg
                         :current-networking-status :type
                         (common-lisp:or network-status common-lisp:null)
                         :accessor
                         %describe-device-response-current-networking-status
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %describe-device-response-created-time
                         :initform common-lisp:nil)
                        (brand :initarg :brand :type
                         (common-lisp:or device-brand common-lisp:null)
                         :accessor %describe-device-response-brand :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         %describe-device-response-arn :initform
                         common-lisp:nil)
                        (alternate-softwares :initarg :alternate-softwares
                         :type
                         (common-lisp:or alternate-softwares common-lisp:null)
                         :accessor
                         %describe-device-response-alternate-softwares
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-device-response 'make-describe-device-response))
 (common-lisp:defun make-describe-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type tags serial-number
                     provisioning-status networking-configuration name
                     lease-expiration-time latest-software latest-device-job
                     latest-alternate-software device-id
                     device-connection-status device-aggregated-status
                     description current-software current-networking-status
                     created-time brand arn alternate-softwares)
   (common-lisp:apply #'common-lisp:make-instance 'describe-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternate-softwares))
      (common-lisp:list
       (common-lisp:cons "AlternateSoftwares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'brand))
      (common-lisp:list
       (common-lisp:cons "Brand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-networking-status))
      (common-lisp:list
       (common-lisp:cons "CurrentNetworkingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-software))
      (common-lisp:list
       (common-lisp:cons "CurrentSoftware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-aggregated-status))
      (common-lisp:list
       (common-lisp:cons "DeviceAggregatedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-connection-status))
      (common-lisp:list
       (common-lisp:cons "DeviceConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-alternate-software))
      (common-lisp:list
       (common-lisp:cons "LatestAlternateSoftware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-device-job))
      (common-lisp:list
       (common-lisp:cons "LatestDeviceJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-software))
      (common-lisp:list
       (common-lisp:cons "LatestSoftware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lease-expiration-time))
      (common-lisp:list
       (common-lisp:cons "LeaseExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'networking-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning-status))
      (common-lisp:list
       (common-lisp:cons "ProvisioningStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-node-from-template-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-node-from-template-job-request-job-id
                         :initform (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-node-from-template-job-request
                    'make-describe-node-from-template-job-request))
 (common-lisp:defun make-describe-node-from-template-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-node-from-template-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-node-from-template-job-response common-lisp:nil
                       ((template-type :initarg :template-type :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-template-type
                         :initform
                         (common-lisp:error ":template-type is required"))
                        (template-parameters :initarg :template-parameters
                         :type
                         (common-lisp:or template-parameters-map
                                         common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-template-parameters
                         :initform
                         (common-lisp:error
                          ":template-parameters is required"))
                        (status-message :initarg :status-message :type
                         (common-lisp:or node-from-template-job-status-message
                                         common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-status-message
                         :initform
                         (common-lisp:error ":status-message is required"))
                        (status :initarg :status :type
                         (common-lisp:or node-from-template-job-status
                                         common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (output-package-version :initarg
                         :output-package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-output-package-version
                         :initform
                         (common-lisp:error
                          ":output-package-version is required"))
                        (output-package-name :initarg :output-package-name
                         :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-output-package-name
                         :initform
                         (common-lisp:error
                          ":output-package-name is required"))
                        (node-name :initarg :node-name :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         %describe-node-from-template-job-response-node-name
                         :initform
                         (common-lisp:error ":node-name is required"))
                        (node-description :initarg :node-description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-node-description
                         :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or last-updated-time common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-last-updated-time
                         :initform
                         (common-lisp:error ":last-updated-time is required"))
                        (job-tags :initarg :job-tags :type
                         (common-lisp:or job-tags-list common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-job-tags
                         :initform common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-node-from-template-job-response-job-id
                         :initform (common-lisp:error ":job-id is required"))
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor
                         %describe-node-from-template-job-response-created-time
                         :initform
                         (common-lisp:error ":created-time is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-node-from-template-job-response
                    'make-describe-node-from-template-job-response))
 (common-lisp:defun make-describe-node-from-template-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-type template-parameters
                     status-message status output-package-version
                     output-package-name node-name node-description
                     last-updated-time job-tags job-id created-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-node-from-template-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tags))
      (common-lisp:list
       (common-lisp:cons "JobTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-description))
      (common-lisp:list
       (common-lisp:cons "NodeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-name))
      (common-lisp:list
       (common-lisp:cons "NodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-package-name))
      (common-lisp:list
       (common-lisp:cons "OutputPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-package-version))
      (common-lisp:list
       (common-lisp:cons "OutputPackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-parameters))
      (common-lisp:list
       (common-lisp:cons "TemplateParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-node-request common-lisp:nil
                       ((owner-account :initarg :owner-account :type
                         (common-lisp:or package-owner-account
                                         common-lisp:null)
                         :accessor %describe-node-request-owner-account
                         :initform common-lisp:nil)
                        (node-id :initarg :node-id :type
                         (common-lisp:or node-id common-lisp:null) :accessor
                         %describe-node-request-node-id :initform
                         (common-lisp:error ":node-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-node-request 'make-describe-node-request))
 (common-lisp:defun make-describe-node-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner-account node-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-node-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-node-response common-lisp:nil
                       ((patch-version :initarg :patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor %describe-node-response-patch-version
                         :initform
                         (common-lisp:error ":patch-version is required"))
                        (package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor %describe-node-response-package-version
                         :initform
                         (common-lisp:error ":package-version is required"))
                        (package-name :initarg :package-name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor %describe-node-response-package-name
                         :initform
                         (common-lisp:error ":package-name is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %describe-node-response-package-id :initform
                         (common-lisp:error ":package-id is required"))
                        (package-arn :initarg :package-arn :type
                         (common-lisp:or node-package-arn common-lisp:null)
                         :accessor %describe-node-response-package-arn
                         :initform common-lisp:nil)
                        (owner-account :initarg :owner-account :type
                         (common-lisp:or package-owner-account
                                         common-lisp:null)
                         :accessor %describe-node-response-owner-account
                         :initform
                         (common-lisp:error ":owner-account is required"))
                        (node-interface :initarg :node-interface :type
                         (common-lisp:or node-interface common-lisp:null)
                         :accessor %describe-node-response-node-interface
                         :initform
                         (common-lisp:error ":node-interface is required"))
                        (node-id :initarg :node-id :type
                         (common-lisp:or node-id common-lisp:null) :accessor
                         %describe-node-response-node-id :initform
                         (common-lisp:error ":node-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         %describe-node-response-name :initform
                         (common-lisp:error ":name is required"))
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %describe-node-response-last-updated-time :initform
                         (common-lisp:error ":last-updated-time is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-node-response-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (created-time :initarg :created-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %describe-node-response-created-time :initform
                         (common-lisp:error ":created-time is required"))
                        (category :initarg :category :type
                         (common-lisp:or node-category common-lisp:null)
                         :accessor %describe-node-response-category :initform
                         (common-lisp:error ":category is required"))
                        (asset-name :initarg :asset-name :type
                         (common-lisp:or node-asset-name common-lisp:null)
                         :accessor %describe-node-response-asset-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-node-response 'make-describe-node-response))
 (common-lisp:defun make-describe-node-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-version package-version
                     package-name package-id package-arn owner-account
                     node-interface node-id name last-updated-time description
                     created-time category asset-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-node-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "AssetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-interface))
      (common-lisp:list
       (common-lisp:cons "NodeInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "PackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-import-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-package-import-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-package-import-job-request
                    'make-describe-package-import-job-request))
 (common-lisp:defun make-describe-package-import-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-package-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-import-job-response common-lisp:nil
                       ((status-message :initarg :status-message :type
                         (common-lisp:or package-import-job-status-message
                                         common-lisp:null)
                         :accessor
                         %describe-package-import-job-response-status-message
                         :initform
                         (common-lisp:error ":status-message is required"))
                        (status :initarg :status :type
                         (common-lisp:or package-import-job-status
                                         common-lisp:null)
                         :accessor %describe-package-import-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (output-config :initarg :output-config :type
                         (common-lisp:or package-import-job-output-config
                                         common-lisp:null)
                         :accessor
                         %describe-package-import-job-response-output-config
                         :initform
                         (common-lisp:error ":output-config is required"))
                        (output :initarg :output :type
                         (common-lisp:or package-import-job-output
                                         common-lisp:null)
                         :accessor %describe-package-import-job-response-output
                         :initform (common-lisp:error ":output is required"))
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or last-updated-time common-lisp:null)
                         :accessor
                         %describe-package-import-job-response-last-updated-time
                         :initform
                         (common-lisp:error ":last-updated-time is required"))
                        (job-type :initarg :job-type :type
                         (common-lisp:or package-import-job-type
                                         common-lisp:null)
                         :accessor
                         %describe-package-import-job-response-job-type
                         :initform (common-lisp:error ":job-type is required"))
                        (job-tags :initarg :job-tags :type
                         (common-lisp:or job-tags-list common-lisp:null)
                         :accessor
                         %describe-package-import-job-response-job-tags
                         :initform common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-package-import-job-response-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (input-config :initarg :input-config :type
                         (common-lisp:or package-import-job-input-config
                                         common-lisp:null)
                         :accessor
                         %describe-package-import-job-response-input-config
                         :initform
                         (common-lisp:error ":input-config is required"))
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor
                         %describe-package-import-job-response-created-time
                         :initform
                         (common-lisp:error ":created-time is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %describe-package-import-job-response-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-package-import-job-response
                    'make-describe-package-import-job-response))
 (common-lisp:defun make-describe-package-import-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status output-config
                     output last-updated-time job-type job-tags job-id
                     input-config created-time client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-package-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tags))
      (common-lisp:list
       (common-lisp:cons "JobTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-request common-lisp:nil
                       ((package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %describe-package-request-package-id
                         :initform
                         (common-lisp:error ":package-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-package-request 'make-describe-package-request))
 (common-lisp:defun make-describe-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-response common-lisp:nil
                       ((write-access-principal-arns :initarg
                         :write-access-principal-arns :type
                         (common-lisp:or principal-arns-list common-lisp:null)
                         :accessor
                         %describe-package-response-write-access-principal-arns
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-package-response-tags :initform
                         (common-lisp:error ":tags is required"))
                        (storage-location :initarg :storage-location :type
                         (common-lisp:or storage-location common-lisp:null)
                         :accessor %describe-package-response-storage-location
                         :initform
                         (common-lisp:error ":storage-location is required"))
                        (read-access-principal-arns :initarg
                         :read-access-principal-arns :type
                         (common-lisp:or principal-arns-list common-lisp:null)
                         :accessor
                         %describe-package-response-read-access-principal-arns
                         :initform common-lisp:nil)
                        (package-name :initarg :package-name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor %describe-package-response-package-name
                         :initform
                         (common-lisp:error ":package-name is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %describe-package-response-package-id
                         :initform
                         (common-lisp:error ":package-id is required"))
                        (created-time :initarg :created-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %describe-package-response-created-time :initform
                         (common-lisp:error ":created-time is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or node-package-arn common-lisp:null)
                         :accessor %describe-package-response-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-package-response
                    'make-describe-package-response))
 (common-lisp:defun make-describe-package-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key write-access-principal-arns tags
                     storage-location read-access-principal-arns package-name
                     package-id created-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-access-principal-arns))
      (common-lisp:list
       (common-lisp:cons "ReadAccessPrincipalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-access-principal-arns))
      (common-lisp:list
       (common-lisp:cons "WriteAccessPrincipalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-version-request common-lisp:nil
                       ((patch-version :initarg :patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor
                         %describe-package-version-request-patch-version
                         :initform common-lisp:nil)
                        (package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor
                         %describe-package-version-request-package-version
                         :initform
                         (common-lisp:error ":package-version is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %describe-package-version-request-package-id
                         :initform
                         (common-lisp:error ":package-id is required"))
                        (owner-account :initarg :owner-account :type
                         (common-lisp:or package-owner-account
                                         common-lisp:null)
                         :accessor
                         %describe-package-version-request-owner-account
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-package-version-request
                    'make-describe-package-version-request))
 (common-lisp:defun make-describe-package-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-version package-version package-id
                     owner-account)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-package-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-version-response common-lisp:nil
                       ((status-description :initarg :status-description :type
                         (common-lisp:or package-version-status-description
                                         common-lisp:null)
                         :accessor
                         %describe-package-version-response-status-description
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor %describe-package-version-response-status
                         :initform (common-lisp:error ":status is required"))
                        (registered-time :initarg :registered-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %describe-package-version-response-registered-time
                         :initform common-lisp:nil)
                        (patch-version :initarg :patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor
                         %describe-package-version-response-patch-version
                         :initform
                         (common-lisp:error ":patch-version is required"))
                        (package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor
                         %describe-package-version-response-package-version
                         :initform
                         (common-lisp:error ":package-version is required"))
                        (package-name :initarg :package-name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor
                         %describe-package-version-response-package-name
                         :initform
                         (common-lisp:error ":package-name is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor
                         %describe-package-version-response-package-id
                         :initform
                         (common-lisp:error ":package-id is required"))
                        (package-arn :initarg :package-arn :type
                         (common-lisp:or node-package-arn common-lisp:null)
                         :accessor
                         %describe-package-version-response-package-arn
                         :initform common-lisp:nil)
                        (owner-account :initarg :owner-account :type
                         (common-lisp:or package-owner-account
                                         common-lisp:null)
                         :accessor
                         %describe-package-version-response-owner-account
                         :initform common-lisp:nil)
                        (is-latest-patch :initarg :is-latest-patch :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-package-version-response-is-latest-patch
                         :initform
                         (common-lisp:error ":is-latest-patch is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-package-version-response
                    'make-describe-package-version-response))
 (common-lisp:defun make-describe-package-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-description status registered-time
                     patch-version package-version package-name package-id
                     package-arn owner-account is-latest-patch)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-package-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-latest-patch))
      (common-lisp:list
       (common-lisp:cons "IsLatestPatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "PackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-time))
      (common-lisp:list
       (common-lisp:cons "RegisteredTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-description))
      (common-lisp:list
       (common-lisp:cons "StatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype desired-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor %device-type :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %device-tags :initform common-lisp:nil)
                        (provisioning-status :initarg :provisioning-status
                         :type (common-lisp:or device-status common-lisp:null)
                         :accessor %device-provisioning-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor %device-name :initform common-lisp:nil)
                        (lease-expiration-time :initarg :lease-expiration-time
                         :type
                         (common-lisp:or lease-expiration-time
                                         common-lisp:null)
                         :accessor %device-lease-expiration-time :initform
                         common-lisp:nil)
                        (latest-device-job :initarg :latest-device-job :type
                         (common-lisp:or latest-device-job common-lisp:null)
                         :accessor %device-latest-device-job :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or last-updated-time common-lisp:null)
                         :accessor %device-last-updated-time :initform
                         common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %device-device-id :initform common-lisp:nil)
                        (device-aggregated-status :initarg
                         :device-aggregated-status :type
                         (common-lisp:or device-aggregated-status
                                         common-lisp:null)
                         :accessor %device-device-aggregated-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %device-description :initform
                         common-lisp:nil)
                        (current-software :initarg :current-software :type
                         (common-lisp:or current-software common-lisp:null)
                         :accessor %device-current-software :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %device-created-time :initform
                         common-lisp:nil)
                        (brand :initarg :brand :type
                         (common-lisp:or device-brand common-lisp:null)
                         :accessor %device-brand :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'device 'make-device))
 (common-lisp:defun make-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type tags provisioning-status name
                     lease-expiration-time latest-device-job last-updated-time
                     device-id device-aggregated-status description
                     current-software created-time brand)
   (common-lisp:apply #'common-lisp:make-instance 'device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'brand))
      (common-lisp:list
       (common-lisp:cons "Brand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-software))
      (common-lisp:list
       (common-lisp:cons "CurrentSoftware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-aggregated-status))
      (common-lisp:list
       (common-lisp:cons "DeviceAggregatedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-device-job))
      (common-lisp:list
       (common-lisp:cons "LatestDeviceJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lease-expiration-time))
      (common-lisp:list
       (common-lisp:cons "LeaseExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning-status))
      (common-lisp:list
       (common-lisp:cons "ProvisioningStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device))
   common-lisp:nil))
(common-lisp:deftype device-aggregated-status () 'common-lisp:string)
(common-lisp:deftype device-arn () 'common-lisp:string)
(common-lisp:deftype device-brand () 'common-lisp:string)
(common-lisp:deftype device-connection-status () 'common-lisp:string)
(common-lisp:deftype device-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-id-list () '(trivial-types:proper-list device-id))
 (common-lisp:defun |make-device-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass device-job common-lisp:nil
                       ((job-type :initarg :job-type :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         %device-job-job-type :initform common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %device-job-job-id :initform common-lisp:nil)
                        (device-name :initarg :device-name :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor %device-job-device-name :initform
                         common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %device-job-device-id :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %device-job-created-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'device-job 'make-device-job))
 (common-lisp:defun make-device-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-type job-id device-name device-id
                     created-time)
   (common-lisp:apply #'common-lisp:make-instance 'device-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device-job-config common-lisp:nil
                       ((otajob-config :initarg :otajob-config :type
                         (common-lisp:or otajob-config common-lisp:null)
                         :accessor %device-job-config-otajob-config :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'device-job-config 'make-device-job-config))
 (common-lisp:defun make-device-job-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key otajob-config)
   (common-lisp:apply #'common-lisp:make-instance 'device-job-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-job-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-job-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'otajob-config))
      (common-lisp:list
       (common-lisp:cons "OTAJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-job-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-job-list ()
   '(trivial-types:proper-list device-job))
 (common-lisp:defun |make-device-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype device-list () '(trivial-types:proper-list device))
 (common-lisp:defun |make-device-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-name () 'common-lisp:string)
(common-lisp:deftype device-reported-status () 'common-lisp:string)
(common-lisp:deftype device-serial-number () 'common-lisp:string)
(common-lisp:deftype device-status () 'common-lisp:string)
(common-lisp:deftype device-type () 'common-lisp:string)
(common-lisp:deftype dns () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dns-list () '(trivial-types:proper-list dns))
 (common-lisp:defun |make-dns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dns))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ethernet-payload common-lisp:nil
                       ((static-ip-connection-info :initarg
                         :static-ip-connection-info :type
                         (common-lisp:or static-ip-connection-info
                                         common-lisp:null)
                         :accessor %ethernet-payload-static-ip-connection-info
                         :initform common-lisp:nil)
                        (connection-type :initarg :connection-type :type
                         (common-lisp:or connection-type common-lisp:null)
                         :accessor %ethernet-payload-connection-type :initform
                         (common-lisp:error ":connection-type is required"))))
 (common-lisp:export
  (common-lisp:list 'ethernet-payload 'make-ethernet-payload))
 (common-lisp:defun make-ethernet-payload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key static-ip-connection-info
                     connection-type)
   (common-lisp:apply #'common-lisp:make-instance 'ethernet-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ethernet-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ethernet-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-ip-connection-info))
      (common-lisp:list
       (common-lisp:cons "StaticIpConnectionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ethernet-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ethernet-status common-lisp:nil
                       ((ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %ethernet-status-ip-address :initform common-lisp:nil)
                        (hw-address :initarg :hw-address :type
                         (common-lisp:or hw-address common-lisp:null) :accessor
                         %ethernet-status-hw-address :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or network-connection-status
                                         common-lisp:null)
                         :accessor %ethernet-status-connection-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ethernet-status 'make-ethernet-status))
 (common-lisp:defun make-ethernet-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address hw-address connection-status)
   (common-lisp:apply #'common-lisp:make-instance 'ethernet-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ethernet-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ethernet-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hw-address))
      (common-lisp:list
       (common-lisp:cons "HwAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ethernet-status))
   common-lisp:nil))
(common-lisp:deftype hw-address () 'common-lisp:string)
(common-lisp:deftype image-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-port-list ()
   '(trivial-types:proper-list node-input-port))
 (common-lisp:defun |make-input-port-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-input-port))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (panorama-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype iot-thing-name () 'common-lisp:string)
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-address-or-server-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %job-job-id :initform common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %job-device-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defun make-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id device-id)
   (common-lisp:apply #'common-lisp:make-instance 'job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-list () '(trivial-types:proper-list job))
 (common-lisp:defun |make-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-resource-tags common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %job-resource-tags-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or job-resource-type common-lisp:null)
                         :accessor %job-resource-tags-resource-type :initform
                         (common-lisp:error ":resource-type is required"))))
 (common-lisp:export
  (common-lisp:list 'job-resource-tags 'make-job-resource-tags))
 (common-lisp:defun make-job-resource-tags
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'job-resource-tags
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-resource-tags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-resource-tags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-resource-tags))
   common-lisp:nil))
(common-lisp:deftype job-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-tags-list ()
   '(trivial-types:proper-list job-resource-tags))
 (common-lisp:defun |make-job-tags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-resource-tags))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:deftype last-updated-time () 'common-lisp:string)
(common-lisp:deftype latest-alternate-software () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass latest-device-job common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or update-progress common-lisp:null)
                         :accessor %latest-device-job-status :initform
                         common-lisp:nil)
                        (job-type :initarg :job-type :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         %latest-device-job-job-type :initform common-lisp:nil)
                        (image-version :initarg :image-version :type
                         (common-lisp:or image-version common-lisp:null)
                         :accessor %latest-device-job-image-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'latest-device-job 'make-latest-device-job))
 (common-lisp:defun make-latest-device-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status job-type image-version)
   (common-lisp:apply #'common-lisp:make-instance 'latest-device-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input latest-device-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input latest-device-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version))
      (common-lisp:list
       (common-lisp:cons "ImageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input latest-device-job))
   common-lisp:nil))
(common-lisp:deftype latest-software () 'common-lisp:string)
(common-lisp:deftype lease-expiration-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-application-instance-dependencies-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-instance-dependencies-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-size25 common-lisp:null) :accessor
                         %list-application-instance-dependencies-request-max-results
                         :initform common-lisp:nil)
                        (application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %list-application-instance-dependencies-request-application-instance-id
                         :initform
                         (common-lisp:error
                          ":application-instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-application-instance-dependencies-request
                    'make-list-application-instance-dependencies-request))
 (common-lisp:defun make-list-application-instance-dependencies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-instance-dependencies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-instance-dependencies-response
                       common-lisp:nil
                       ((package-objects :initarg :package-objects :type
                         (common-lisp:or package-objects common-lisp:null)
                         :accessor
                         %list-application-instance-dependencies-response-package-objects
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-instance-dependencies-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-application-instance-dependencies-response
                    'make-list-application-instance-dependencies-response))
 (common-lisp:defun make-list-application-instance-dependencies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-objects next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-instance-dependencies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-objects))
      (common-lisp:list
       (common-lisp:cons "PackageObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-instance-node-instances-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-instance-node-instances-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-size25 common-lisp:null) :accessor
                         %list-application-instance-node-instances-request-max-results
                         :initform common-lisp:nil)
                        (application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %list-application-instance-node-instances-request-application-instance-id
                         :initform
                         (common-lisp:error
                          ":application-instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-application-instance-node-instances-request
                    'make-list-application-instance-node-instances-request))
 (common-lisp:defun make-list-application-instance-node-instances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-instance-node-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-instance-node-instances-response
                       common-lisp:nil
                       ((node-instances :initarg :node-instances :type
                         (common-lisp:or node-instances common-lisp:null)
                         :accessor
                         %list-application-instance-node-instances-response-node-instances
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-instance-node-instances-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-application-instance-node-instances-response
                    'make-list-application-instance-node-instances-response))
 (common-lisp:defun make-list-application-instance-node-instances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-instances next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-instance-node-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-instances))
      (common-lisp:list
       (common-lisp:cons "NodeInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-instances-request common-lisp:nil
                       ((status-filter :initarg :status-filter :type
                         (common-lisp:or status-filter common-lisp:null)
                         :accessor
                         %list-application-instances-request-status-filter
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-instances-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-size25 common-lisp:null) :accessor
                         %list-application-instances-request-max-results
                         :initform common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %list-application-instances-request-device-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-application-instances-request
                    'make-list-application-instances-request))
 (common-lisp:defun make-list-application-instances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-filter next-token max-results
                     device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-instances-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-instances-response-next-token
                         :initform common-lisp:nil)
                        (application-instances :initarg :application-instances
                         :type
                         (common-lisp:or application-instances
                                         common-lisp:null)
                         :accessor
                         %list-application-instances-response-application-instances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-application-instances-response
                    'make-list-application-instances-response))
 (common-lisp:defun make-list-application-instances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token application-instances)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instances))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-devices-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-devices-jobs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-size25 common-lisp:null) :accessor
                         %list-devices-jobs-request-max-results :initform
                         common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %list-devices-jobs-request-device-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-devices-jobs-request
                    'make-list-devices-jobs-request))
 (common-lisp:defun make-list-devices-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results device-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-devices-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-devices-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-devices-jobs-response-next-token :initform
                         common-lisp:nil)
                        (device-jobs :initarg :device-jobs :type
                         (common-lisp:or device-job-list common-lisp:null)
                         :accessor %list-devices-jobs-response-device-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-devices-jobs-response
                    'make-list-devices-jobs-response))
 (common-lisp:defun make-list-devices-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token device-jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-devices-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-jobs))
      (common-lisp:list
       (common-lisp:cons "DeviceJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-devices-request common-lisp:nil
                       ((sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %list-devices-request-sort-order :initform
                         common-lisp:nil)
                        (sort-by :initarg :sort-by :type
                         (common-lisp:or list-devices-sort-by common-lisp:null)
                         :accessor %list-devices-request-sort-by :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-devices-request-next-token :initform
                         common-lisp:nil)
                        (name-filter :initarg :name-filter :type
                         (common-lisp:or name-filter common-lisp:null)
                         :accessor %list-devices-request-name-filter :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-size25 common-lisp:null) :accessor
                         %list-devices-request-max-results :initform
                         common-lisp:nil)
                        (device-aggregated-status-filter :initarg
                         :device-aggregated-status-filter :type
                         (common-lisp:or device-aggregated-status
                                         common-lisp:null)
                         :accessor
                         %list-devices-request-device-aggregated-status-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-devices-request 'make-list-devices-request))
 (common-lisp:defun make-list-devices-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-order sort-by next-token name-filter
                     max-results device-aggregated-status-filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-devices-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-devices-response-next-token :initform
                         common-lisp:nil)
                        (devices :initarg :devices :type
                         (common-lisp:or device-list common-lisp:null)
                         :accessor %list-devices-response-devices :initform
                         (common-lisp:error ":devices is required"))))
 (common-lisp:export
  (common-lisp:list 'list-devices-response 'make-list-devices-response))
 (common-lisp:defun make-list-devices-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token devices)
   (common-lisp:apply #'common-lisp:make-instance 'list-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   common-lisp:nil))
(common-lisp:deftype list-devices-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-node-from-template-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-node-from-template-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-size25 common-lisp:null) :accessor
                         %list-node-from-template-jobs-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-node-from-template-jobs-request
                    'make-list-node-from-template-jobs-request))
 (common-lisp:defun make-list-node-from-template-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-node-from-template-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-node-from-template-jobs-response common-lisp:nil
                       ((node-from-template-jobs :initarg
                         :node-from-template-jobs :type
                         (common-lisp:or node-from-template-job-list
                                         common-lisp:null)
                         :accessor
                         %list-node-from-template-jobs-response-node-from-template-jobs
                         :initform
                         (common-lisp:error
                          ":node-from-template-jobs is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-node-from-template-jobs-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-node-from-template-jobs-response
                    'make-list-node-from-template-jobs-response))
 (common-lisp:defun make-list-node-from-template-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-from-template-jobs next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-node-from-template-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-from-template-jobs))
      (common-lisp:list
       (common-lisp:cons "NodeFromTemplateJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodes-request common-lisp:nil
                       ((patch-version :initarg :patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor %list-nodes-request-patch-version :initform
                         common-lisp:nil)
                        (package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor %list-nodes-request-package-version
                         :initform common-lisp:nil)
                        (package-name :initarg :package-name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor %list-nodes-request-package-name :initform
                         common-lisp:nil)
                        (owner-account :initarg :owner-account :type
                         (common-lisp:or package-owner-account
                                         common-lisp:null)
                         :accessor %list-nodes-request-owner-account :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-nodes-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-size25 common-lisp:null) :accessor
                         %list-nodes-request-max-results :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or node-category common-lisp:null)
                         :accessor %list-nodes-request-category :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-nodes-request 'make-list-nodes-request))
 (common-lisp:defun make-list-nodes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-version package-version
                     package-name owner-account next-token max-results
                     category)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodes-response common-lisp:nil
                       ((nodes :initarg :nodes :type
                         (common-lisp:or nodes-list common-lisp:null) :accessor
                         %list-nodes-response-nodes :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-nodes-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-nodes-response 'make-list-nodes-response))
 (common-lisp:defun make-list-nodes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nodes next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "Nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-package-import-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-package-import-jobs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-size25 common-lisp:null) :accessor
                         %list-package-import-jobs-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-package-import-jobs-request
                    'make-list-package-import-jobs-request))
 (common-lisp:defun make-list-package-import-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-package-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-package-import-jobs-response common-lisp:nil
                       ((package-import-jobs :initarg :package-import-jobs
                         :type
                         (common-lisp:or package-import-job-list
                                         common-lisp:null)
                         :accessor
                         %list-package-import-jobs-response-package-import-jobs
                         :initform
                         (common-lisp:error
                          ":package-import-jobs is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-package-import-jobs-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-package-import-jobs-response
                    'make-list-package-import-jobs-response))
 (common-lisp:defun make-list-package-import-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-import-jobs next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-package-import-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-import-jobs))
      (common-lisp:list
       (common-lisp:cons "PackageImportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-packages-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-packages-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-size25 common-lisp:null) :accessor
                         %list-packages-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-packages-request 'make-list-packages-request))
 (common-lisp:defun make-list-packages-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-packages-response common-lisp:nil
                       ((packages :initarg :packages :type
                         (common-lisp:or package-list common-lisp:null)
                         :accessor %list-packages-response-packages :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-packages-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-packages-response 'make-list-packages-response))
 (common-lisp:defun make-list-packages-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key packages next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-packages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packages))
      (common-lisp:list
       (common-lisp:cons "Packages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass manifest-overrides-payload common-lisp:nil
                       ((payload-data :initarg :payload-data :type
                         (common-lisp:or manifest-overrides-payload-data
                                         common-lisp:null)
                         :accessor %manifest-overrides-payload-payload-data
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'manifest-overrides-payload
                    'make-manifest-overrides-payload))
 (common-lisp:defun make-manifest-overrides-payload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload-data)
   (common-lisp:apply #'common-lisp:make-instance 'manifest-overrides-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          manifest-overrides-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          manifest-overrides-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-data))
      (common-lisp:list
       (common-lisp:cons "PayloadData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          manifest-overrides-payload))
   common-lisp:nil))
(common-lisp:deftype manifest-overrides-payload-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass manifest-payload common-lisp:nil
                       ((payload-data :initarg :payload-data :type
                         (common-lisp:or manifest-payload-data
                                         common-lisp:null)
                         :accessor %manifest-payload-payload-data :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'manifest-payload 'make-manifest-payload))
 (common-lisp:defun make-manifest-payload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload-data)
   (common-lisp:apply #'common-lisp:make-instance 'manifest-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input manifest-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input manifest-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-data))
      (common-lisp:list
       (common-lisp:cons "PayloadData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input manifest-payload))
   common-lisp:nil))
(common-lisp:deftype manifest-payload-data () 'common-lisp:string)
(common-lisp:deftype mark-latest-patch () 'common-lisp:boolean)
(common-lisp:deftype mask () 'common-lisp:string)
(common-lisp:deftype max-connections () 'common-lisp:integer)
(common-lisp:deftype max-size25 () 'common-lisp:integer)
(common-lisp:deftype name-filter () 'common-lisp:string)
(common-lisp:deftype network-connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-payload common-lisp:nil
                       ((ntp :initarg :ntp :type
                         (common-lisp:or ntp-payload common-lisp:null)
                         :accessor %network-payload-ntp :initform
                         common-lisp:nil)
                        (ethernet1 :initarg :ethernet1 :type
                         (common-lisp:or ethernet-payload common-lisp:null)
                         :accessor %network-payload-ethernet1 :initform
                         common-lisp:nil)
                        (ethernet0 :initarg :ethernet0 :type
                         (common-lisp:or ethernet-payload common-lisp:null)
                         :accessor %network-payload-ethernet0 :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'network-payload 'make-network-payload))
 (common-lisp:defun make-network-payload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ntp ethernet1 ethernet0)
   (common-lisp:apply #'common-lisp:make-instance 'network-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethernet0))
      (common-lisp:list
       (common-lisp:cons "Ethernet0"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethernet1))
      (common-lisp:list
       (common-lisp:cons "Ethernet1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ntp))
      (common-lisp:list
       (common-lisp:cons "Ntp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-status common-lisp:nil
                       ((ntp-status :initarg :ntp-status :type
                         (common-lisp:or ntp-status common-lisp:null) :accessor
                         %network-status-ntp-status :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or last-updated-time common-lisp:null)
                         :accessor %network-status-last-updated-time :initform
                         common-lisp:nil)
                        (ethernet1status :initarg :ethernet1status :type
                         (common-lisp:or ethernet-status common-lisp:null)
                         :accessor %network-status-ethernet1status :initform
                         common-lisp:nil)
                        (ethernet0status :initarg :ethernet0status :type
                         (common-lisp:or ethernet-status common-lisp:null)
                         :accessor %network-status-ethernet0status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'network-status 'make-network-status))
 (common-lisp:defun make-network-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ntp-status last-updated-time
                     ethernet1status ethernet0status)
   (common-lisp:apply #'common-lisp:make-instance 'network-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethernet0status))
      (common-lisp:list
       (common-lisp:cons "Ethernet0Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethernet1status))
      (common-lisp:list
       (common-lisp:cons "Ethernet1Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ntp-status))
      (common-lisp:list
       (common-lisp:cons "NtpStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-status))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass node common-lisp:nil
                       ((patch-version :initarg :patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor %node-patch-version :initform
                         (common-lisp:error ":patch-version is required"))
                        (package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor %node-package-version :initform
                         (common-lisp:error ":package-version is required"))
                        (package-name :initarg :package-name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor %node-package-name :initform
                         (common-lisp:error ":package-name is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %node-package-id :initform
                         (common-lisp:error ":package-id is required"))
                        (package-arn :initarg :package-arn :type
                         (common-lisp:or node-package-arn common-lisp:null)
                         :accessor %node-package-arn :initform common-lisp:nil)
                        (owner-account :initarg :owner-account :type
                         (common-lisp:or package-owner-account
                                         common-lisp:null)
                         :accessor %node-owner-account :initform
                         common-lisp:nil)
                        (node-id :initarg :node-id :type
                         (common-lisp:or node-id common-lisp:null) :accessor
                         %node-node-id :initform
                         (common-lisp:error ":node-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         %node-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %node-description :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %node-created-time :initform
                         (common-lisp:error ":created-time is required"))
                        (category :initarg :category :type
                         (common-lisp:or node-category common-lisp:null)
                         :accessor %node-category :initform
                         (common-lisp:error ":category is required"))))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defun make-node
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-version package-version
                     package-name package-id package-arn owner-account node-id
                     name description created-time category)
   (common-lisp:apply #'common-lisp:make-instance 'node
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "PackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:deftype node-asset-name () 'common-lisp:string)
(common-lisp:deftype node-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass node-from-template-job common-lisp:nil
                       ((template-type :initarg :template-type :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor %node-from-template-job-template-type
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or node-from-template-job-status-message
                                         common-lisp:null)
                         :accessor %node-from-template-job-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or node-from-template-job-status
                                         common-lisp:null)
                         :accessor %node-from-template-job-status :initform
                         common-lisp:nil)
                        (node-name :initarg :node-name :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         %node-from-template-job-node-name :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %node-from-template-job-job-id :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %node-from-template-job-created-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'node-from-template-job 'make-node-from-template-job))
 (common-lisp:defun make-node-from-template-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-type status-message status
                     node-name job-id created-time)
   (common-lisp:apply #'common-lisp:make-instance 'node-from-template-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-from-template-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-from-template-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-name))
      (common-lisp:list
       (common-lisp:cons "NodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-from-template-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-from-template-job-list ()
   '(trivial-types:proper-list node-from-template-job))
 (common-lisp:defun |make-node-from-template-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-from-template-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype node-from-template-job-status () 'common-lisp:string)
(common-lisp:deftype node-from-template-job-status-message ()
  'common-lisp:string)
(common-lisp:deftype node-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass node-input-port common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or port-type common-lisp:null) :accessor
                         %node-input-port-type :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or port-name common-lisp:null) :accessor
                         %node-input-port-name :initform common-lisp:nil)
                        (max-connections :initarg :max-connections :type
                         (common-lisp:or max-connections common-lisp:null)
                         :accessor %node-input-port-max-connections :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %node-input-port-description :initform
                         common-lisp:nil)
                        (default-value :initarg :default-value :type
                         (common-lisp:or port-default-value common-lisp:null)
                         :accessor %node-input-port-default-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'node-input-port 'make-node-input-port))
 (common-lisp:defun make-node-input-port
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type name max-connections description
                     default-value)
   (common-lisp:apply #'common-lisp:make-instance 'node-input-port
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-input-port))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-input-port))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "MaxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-input-port))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-instance common-lisp:nil
                       ((package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor %node-instance-package-version :initform
                         common-lisp:nil)
                        (package-patch-version :initarg :package-patch-version
                         :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor %node-instance-package-patch-version
                         :initform common-lisp:nil)
                        (package-name :initarg :package-name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor %node-instance-package-name :initform
                         common-lisp:nil)
                        (node-name :initarg :node-name :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         %node-instance-node-name :initform common-lisp:nil)
                        (node-instance-id :initarg :node-instance-id :type
                         (common-lisp:or node-instance-id common-lisp:null)
                         :accessor %node-instance-node-instance-id :initform
                         (common-lisp:error ":node-instance-id is required"))
                        (node-id :initarg :node-id :type
                         (common-lisp:or node-id common-lisp:null) :accessor
                         %node-instance-node-id :initform common-lisp:nil)
                        (current-status :initarg :current-status :type
                         (common-lisp:or node-instance-status common-lisp:null)
                         :accessor %node-instance-current-status :initform
                         (common-lisp:error ":current-status is required"))))
 (common-lisp:export (common-lisp:list 'node-instance 'make-node-instance))
 (common-lisp:defun make-node-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version package-patch-version
                     package-name node-name node-instance-id node-id
                     current-status)
   (common-lisp:apply #'common-lisp:make-instance 'node-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-status))
      (common-lisp:list
       (common-lisp:cons "CurrentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-instance-id))
      (common-lisp:list
       (common-lisp:cons "NodeInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-name))
      (common-lisp:list
       (common-lisp:cons "NodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-patch-version))
      (common-lisp:list
       (common-lisp:cons "PackagePatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-instance))
   common-lisp:nil))
(common-lisp:deftype node-instance-id () 'common-lisp:string)
(common-lisp:deftype node-instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype node-instances ()
   '(trivial-types:proper-list node-instance))
 (common-lisp:defun |make-node-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass node-interface common-lisp:nil
                       ((outputs :initarg :outputs :type
                         (common-lisp:or output-port-list common-lisp:null)
                         :accessor %node-interface-outputs :initform
                         (common-lisp:error ":outputs is required"))
                        (inputs :initarg :inputs :type
                         (common-lisp:or input-port-list common-lisp:null)
                         :accessor %node-interface-inputs :initform
                         (common-lisp:error ":inputs is required"))))
 (common-lisp:export (common-lisp:list 'node-interface 'make-node-interface))
 (common-lisp:defun make-node-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outputs inputs)
   (common-lisp:apply #'common-lisp:make-instance 'node-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-interface))
   common-lisp:nil))
(common-lisp:deftype node-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass node-output-port common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or port-type common-lisp:null) :accessor
                         %node-output-port-type :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or port-name common-lisp:null) :accessor
                         %node-output-port-name :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %node-output-port-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'node-output-port 'make-node-output-port))
 (common-lisp:defun make-node-output-port
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type name description)
   (common-lisp:apply #'common-lisp:make-instance 'node-output-port
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-output-port))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-output-port))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-output-port))
   common-lisp:nil))
(common-lisp:deftype node-package-arn () 'common-lisp:string)
(common-lisp:deftype node-package-id () 'common-lisp:string)
(common-lisp:deftype node-package-name () 'common-lisp:string)
(common-lisp:deftype node-package-patch-version () 'common-lisp:string)
(common-lisp:deftype node-package-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass node-signal common-lisp:nil
                       ((signal :initarg :signal :type
                         (common-lisp:or node-signal-value common-lisp:null)
                         :accessor %node-signal-signal :initform
                         (common-lisp:error ":signal is required"))
                        (node-instance-id :initarg :node-instance-id :type
                         (common-lisp:or node-instance-id common-lisp:null)
                         :accessor %node-signal-node-instance-id :initform
                         (common-lisp:error ":node-instance-id is required"))))
 (common-lisp:export (common-lisp:list 'node-signal 'make-node-signal))
 (common-lisp:defun make-node-signal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signal node-instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'node-signal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-signal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-signal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-instance-id))
      (common-lisp:list
       (common-lisp:cons "NodeInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal))
      (common-lisp:list
       (common-lisp:cons "Signal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-signal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-signal-list ()
   '(trivial-types:proper-list node-signal))
 (common-lisp:defun |make-node-signal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-signal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype node-signal-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype nodes-list () '(trivial-types:proper-list node))
 (common-lisp:defun |make-nodes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ntp-payload common-lisp:nil
                       ((ntp-servers :initarg :ntp-servers :type
                         (common-lisp:or ntp-server-list common-lisp:null)
                         :accessor %ntp-payload-ntp-servers :initform
                         (common-lisp:error ":ntp-servers is required"))))
 (common-lisp:export (common-lisp:list 'ntp-payload 'make-ntp-payload))
 (common-lisp:defun make-ntp-payload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ntp-servers)
   (common-lisp:apply #'common-lisp:make-instance 'ntp-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ntp-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ntp-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ntp-servers))
      (common-lisp:list
       (common-lisp:cons "NtpServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ntp-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ntp-server-list ()
   '(trivial-types:proper-list ip-address-or-server-name))
 (common-lisp:defun |make-ntp-server-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ip-address-or-server-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ntp-server-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ntp-status common-lisp:nil
                       ((ntp-server-name :initarg :ntp-server-name :type
                         (common-lisp:or ntp-server-name common-lisp:null)
                         :accessor %ntp-status-ntp-server-name :initform
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %ntp-status-ip-address :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or network-connection-status
                                         common-lisp:null)
                         :accessor %ntp-status-connection-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ntp-status 'make-ntp-status))
 (common-lisp:defun make-ntp-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ntp-server-name ip-address
                     connection-status)
   (common-lisp:apply #'common-lisp:make-instance 'ntp-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ntp-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ntp-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ntp-server-name))
      (common-lisp:list
       (common-lisp:cons "NtpServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ntp-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass otajob-config common-lisp:nil
                       ((image-version :initarg :image-version :type
                         (common-lisp:or image-version common-lisp:null)
                         :accessor %otajob-config-image-version :initform
                         (common-lisp:error ":image-version is required"))
                        (allow-major-version-update :initarg
                         :allow-major-version-update :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %otajob-config-allow-major-version-update :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'otajob-config 'make-otajob-config))
 (common-lisp:defun make-otajob-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-version allow-major-version-update)
   (common-lisp:apply #'common-lisp:make-instance 'otajob-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otajob-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otajob-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-update))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version))
      (common-lisp:list
       (common-lisp:cons "ImageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otajob-config))
   common-lisp:nil))
(common-lisp:deftype object () 'common-lisp:string)
(common-lisp:deftype object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass out-put-s3location common-lisp:nil
                       ((object-key :initarg :object-key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %out-put-s3location-object-key :initform
                         (common-lisp:error ":object-key is required"))
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %out-put-s3location-bucket-name :initform
                         (common-lisp:error ":bucket-name is required"))))
 (common-lisp:export
  (common-lisp:list 'out-put-s3location 'make-out-put-s3location))
 (common-lisp:defun make-out-put-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-key bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 'out-put-s3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input out-put-s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input out-put-s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input out-put-s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-port-list ()
   '(trivial-types:proper-list node-output-port))
 (common-lisp:defun |make-output-port-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-output-port))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass package-import-job common-lisp:nil
                       ((status-message :initarg :status-message :type
                         (common-lisp:or package-import-job-status-message
                                         common-lisp:null)
                         :accessor %package-import-job-status-message :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or package-import-job-status
                                         common-lisp:null)
                         :accessor %package-import-job-status :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or last-updated-time common-lisp:null)
                         :accessor %package-import-job-last-updated-time
                         :initform common-lisp:nil)
                        (job-type :initarg :job-type :type
                         (common-lisp:or package-import-job-type
                                         common-lisp:null)
                         :accessor %package-import-job-job-type :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %package-import-job-job-id :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %package-import-job-created-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-import-job 'make-package-import-job))
 (common-lisp:defun make-package-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status last-updated-time
                     job-type job-id created-time)
   (common-lisp:apply #'common-lisp:make-instance 'package-import-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-import-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-import-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-import-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass package-import-job-input-config common-lisp:nil
                       ((package-version-input-config :initarg
                         :package-version-input-config :type
                         (common-lisp:or package-version-input-config
                                         common-lisp:null)
                         :accessor
                         %package-import-job-input-config-package-version-input-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-import-job-input-config
                    'make-package-import-job-input-config))
 (common-lisp:defun make-package-import-job-input-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version-input-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'package-import-job-input-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-input-config))
      (common-lisp:list
       (common-lisp:cons "PackageVersionInputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-input-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-import-job-list ()
   '(trivial-types:proper-list package-import-job))
 (common-lisp:defun |make-package-import-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-import-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass package-import-job-output common-lisp:nil
                       ((patch-version :initarg :patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor %package-import-job-output-patch-version
                         :initform
                         (common-lisp:error ":patch-version is required"))
                        (package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor %package-import-job-output-package-version
                         :initform
                         (common-lisp:error ":package-version is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %package-import-job-output-package-id
                         :initform
                         (common-lisp:error ":package-id is required"))
                        (output-s3location :initarg :output-s3location :type
                         (common-lisp:or out-put-s3location common-lisp:null)
                         :accessor %package-import-job-output-output-s3location
                         :initform
                         (common-lisp:error
                          ":output-s3location is required"))))
 (common-lisp:export
  (common-lisp:list 'package-import-job-output
                    'make-package-import-job-output))
 (common-lisp:defun make-package-import-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-version package-version package-id
                     output-s3location)
   (common-lisp:apply #'common-lisp:make-instance 'package-import-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3location))
      (common-lisp:list
       (common-lisp:cons "OutputS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass package-import-job-output-config common-lisp:nil
                       ((package-version-output-config :initarg
                         :package-version-output-config :type
                         (common-lisp:or package-version-output-config
                                         common-lisp:null)
                         :accessor
                         %package-import-job-output-config-package-version-output-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-import-job-output-config
                    'make-package-import-job-output-config))
 (common-lisp:defun make-package-import-job-output-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version-output-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'package-import-job-output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-output-config))
      (common-lisp:list
       (common-lisp:cons "PackageVersionOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output-config))
   common-lisp:nil))
(common-lisp:deftype package-import-job-status () 'common-lisp:string)
(common-lisp:deftype package-import-job-status-message () 'common-lisp:string)
(common-lisp:deftype package-import-job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype package-list ()
   '(trivial-types:proper-list package-list-item))
 (common-lisp:defun |make-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass package-list-item common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %package-list-item-tags :initform common-lisp:nil)
                        (package-name :initarg :package-name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor %package-list-item-package-name :initform
                         common-lisp:nil)
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %package-list-item-package-id :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %package-list-item-created-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or node-package-arn common-lisp:null)
                         :accessor %package-list-item-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-list-item 'make-package-list-item))
 (common-lisp:defun make-package-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags package-name package-id created-time
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'package-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass package-object common-lisp:nil
                       ((patch-version :initarg :patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor %package-object-patch-version :initform
                         (common-lisp:error ":patch-version is required"))
                        (package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor %package-object-package-version :initform
                         (common-lisp:error ":package-version is required"))
                        (name :initarg :name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor %package-object-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'package-object 'make-package-object))
 (common-lisp:defun make-package-object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-version package-version name)
   (common-lisp:apply #'common-lisp:make-instance 'package-object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-objects ()
   '(trivial-types:proper-list package-object))
 (common-lisp:defun |make-package-objects|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-object))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-owner-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-version-input-config common-lisp:nil
                       ((s3location :initarg :s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %package-version-input-config-s3location :initform
                         (common-lisp:error ":s3location is required"))))
 (common-lisp:export
  (common-lisp:list 'package-version-input-config
                    'make-package-version-input-config))
 (common-lisp:defun make-package-version-input-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3location)
   (common-lisp:apply #'common-lisp:make-instance 'package-version-input-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "S3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-input-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass package-version-output-config common-lisp:nil
                       ((package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor
                         %package-version-output-config-package-version
                         :initform
                         (common-lisp:error ":package-version is required"))
                        (package-name :initarg :package-name :type
                         (common-lisp:or node-package-name common-lisp:null)
                         :accessor %package-version-output-config-package-name
                         :initform
                         (common-lisp:error ":package-name is required"))
                        (mark-latest :initarg :mark-latest :type
                         (common-lisp:or mark-latest-patch common-lisp:null)
                         :accessor %package-version-output-config-mark-latest
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-version-output-config
                    'make-package-version-output-config))
 (common-lisp:defun make-package-version-output-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version package-name mark-latest)
   (common-lisp:apply #'common-lisp:make-instance
                      'package-version-output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mark-latest))
      (common-lisp:list
       (common-lisp:cons "MarkLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-output-config))
   common-lisp:nil))
(common-lisp:deftype package-version-status () 'common-lisp:string)
(common-lisp:deftype package-version-status-description () 'common-lisp:string)
(common-lisp:deftype port-default-value () 'common-lisp:string)
(common-lisp:deftype port-name () 'common-lisp:string)
(common-lisp:deftype port-type () 'common-lisp:string)
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-arns-list ()
   '(trivial-types:proper-list principal-arn))
 (common-lisp:defun |make-principal-arns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provision-device-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %provision-device-request-tags :initform
                         common-lisp:nil)
                        (networking-configuration :initarg
                         :networking-configuration :type
                         (common-lisp:or network-payload common-lisp:null)
                         :accessor
                         %provision-device-request-networking-configuration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor %provision-device-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %provision-device-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provision-device-request 'make-provision-device-request))
 (common-lisp:defun make-provision-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags networking-configuration name
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'provision-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'networking-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provision-device-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or device-status common-lisp:null)
                         :accessor %provision-device-response-status :initform
                         (common-lisp:error ":status is required"))
                        (iot-thing-name :initarg :iot-thing-name :type
                         (common-lisp:or iot-thing-name common-lisp:null)
                         :accessor %provision-device-response-iot-thing-name
                         :initform common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %provision-device-response-device-id :initform
                         common-lisp:nil)
                        (certificates :initarg :certificates :type
                         (common-lisp:or certificates common-lisp:null)
                         :accessor %provision-device-response-certificates
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         %provision-device-response-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'provision-device-response
                    'make-provision-device-response))
 (common-lisp:defun make-provision-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status iot-thing-name device-id
                     certificates arn)
   (common-lisp:apply #'common-lisp:make-instance 'provision-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-thing-name))
      (common-lisp:list
       (common-lisp:cons "IotThingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-response))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-package-version-request common-lisp:nil
                       ((patch-version :initarg :patch-version :type
                         (common-lisp:or node-package-patch-version
                                         common-lisp:null)
                         :accessor
                         %register-package-version-request-patch-version
                         :initform
                         (common-lisp:error ":patch-version is required"))
                        (package-version :initarg :package-version :type
                         (common-lisp:or node-package-version common-lisp:null)
                         :accessor
                         %register-package-version-request-package-version
                         :initform
                         (common-lisp:error ":package-version is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or node-package-id common-lisp:null)
                         :accessor %register-package-version-request-package-id
                         :initform
                         (common-lisp:error ":package-id is required"))
                        (owner-account :initarg :owner-account :type
                         (common-lisp:or package-owner-account
                                         common-lisp:null)
                         :accessor
                         %register-package-version-request-owner-account
                         :initform common-lisp:nil)
                        (mark-latest :initarg :mark-latest :type
                         (common-lisp:or mark-latest-patch common-lisp:null)
                         :accessor
                         %register-package-version-request-mark-latest
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-package-version-request
                    'make-register-package-version-request))
 (common-lisp:defun make-register-package-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-version package-version package-id
                     owner-account mark-latest)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-package-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mark-latest))
      (common-lisp:list
       (common-lisp:cons "MarkLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-package-version-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'register-package-version-response
                    'make-register-package-version-response))
 (common-lisp:defun make-register-package-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-package-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-application-instance-request common-lisp:nil
                       ((application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %remove-application-instance-request-application-instance-id
                         :initform
                         (common-lisp:error
                          ":application-instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-application-instance-request
                    'make-remove-application-instance-request))
 (common-lisp:defun make-remove-application-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-application-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-application-instance-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'remove-application-instance-response
                    'make-remove-application-instance-response))
 (common-lisp:defun make-remove-application-instance-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-application-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reported-runtime-context-state common-lisp:nil
                       ((runtime-context-name :initarg :runtime-context-name
                         :type
                         (common-lisp:or runtime-context-name common-lisp:null)
                         :accessor
                         %reported-runtime-context-state-runtime-context-name
                         :initform
                         (common-lisp:error
                          ":runtime-context-name is required"))
                        (device-reported-time :initarg :device-reported-time
                         :type (common-lisp:or time-stamp common-lisp:null)
                         :accessor
                         %reported-runtime-context-state-device-reported-time
                         :initform
                         (common-lisp:error
                          ":device-reported-time is required"))
                        (device-reported-status :initarg
                         :device-reported-status :type
                         (common-lisp:or device-reported-status
                                         common-lisp:null)
                         :accessor
                         %reported-runtime-context-state-device-reported-status
                         :initform
                         (common-lisp:error
                          ":device-reported-status is required"))
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or desired-state common-lisp:null)
                         :accessor
                         %reported-runtime-context-state-desired-state
                         :initform
                         (common-lisp:error ":desired-state is required"))))
 (common-lisp:export
  (common-lisp:list 'reported-runtime-context-state
                    'make-reported-runtime-context-state))
 (common-lisp:defun make-reported-runtime-context-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key runtime-context-name device-reported-time
                     device-reported-status desired-state)
   (common-lisp:apply #'common-lisp:make-instance
                      'reported-runtime-context-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reported-runtime-context-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reported-runtime-context-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-reported-status))
      (common-lisp:list
       (common-lisp:cons "DeviceReportedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-reported-time))
      (common-lisp:list
       (common-lisp:cons "DeviceReportedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-context-name))
      (common-lisp:list
       (common-lisp:cons "RuntimeContextName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reported-runtime-context-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reported-runtime-context-states ()
   '(trivial-types:proper-list reported-runtime-context-state))
 (common-lisp:defun |make-reported-runtime-context-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reported-runtime-context-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (panorama-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype runtime-context-name () 'common-lisp:string)
(common-lisp:deftype runtime-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((region :initarg :region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %s3location-region :initform common-lisp:nil)
                        (object-key :initarg :object-key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %s3location-object-key :initform
                         (common-lisp:error ":object-key is required"))
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %s3location-bucket-name :initform
                         (common-lisp:error ":bucket-name is required"))))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key region object-key bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (panorama-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:defclass signal-application-instance-node-instances-request
                       common-lisp:nil
                       ((node-signals :initarg :node-signals :type
                         (common-lisp:or node-signal-list common-lisp:null)
                         :accessor
                         %signal-application-instance-node-instances-request-node-signals
                         :initform
                         (common-lisp:error ":node-signals is required"))
                        (application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %signal-application-instance-node-instances-request-application-instance-id
                         :initform
                         (common-lisp:error
                          ":application-instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'signal-application-instance-node-instances-request
                    'make-signal-application-instance-node-instances-request))
 (common-lisp:defun make-signal-application-instance-node-instances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-signals application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'signal-application-instance-node-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-signals))
      (common-lisp:list
       (common-lisp:cons "NodeSignals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass signal-application-instance-node-instances-response
                       common-lisp:nil
                       ((application-instance-id :initarg
                         :application-instance-id :type
                         (common-lisp:or application-instance-id
                                         common-lisp:null)
                         :accessor
                         %signal-application-instance-node-instances-response-application-instance-id
                         :initform
                         (common-lisp:error
                          ":application-instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'signal-application-instance-node-instances-response
                    'make-signal-application-instance-node-instances-response))
 (common-lisp:defun make-signal-application-instance-node-instances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'signal-application-instance-node-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-response))
   common-lisp:nil))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass static-ip-connection-info common-lisp:nil
                       ((mask :initarg :mask :type
                         (common-lisp:or mask common-lisp:null) :accessor
                         %static-ip-connection-info-mask :initform
                         (common-lisp:error ":mask is required"))
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %static-ip-connection-info-ip-address :initform
                         (common-lisp:error ":ip-address is required"))
                        (dns :initarg :dns :type
                         (common-lisp:or dns-list common-lisp:null) :accessor
                         %static-ip-connection-info-dns :initform
                         (common-lisp:error ":dns is required"))
                        (default-gateway :initarg :default-gateway :type
                         (common-lisp:or default-gateway common-lisp:null)
                         :accessor %static-ip-connection-info-default-gateway
                         :initform
                         (common-lisp:error ":default-gateway is required"))))
 (common-lisp:export
  (common-lisp:list 'static-ip-connection-info
                    'make-static-ip-connection-info))
 (common-lisp:defun make-static-ip-connection-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mask ip-address dns default-gateway)
   (common-lisp:apply #'common-lisp:make-instance 'static-ip-connection-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-ip-connection-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-ip-connection-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-gateway))
      (common-lisp:list
       (common-lisp:cons "DefaultGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns))
      (common-lisp:list
       (common-lisp:cons "Dns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mask))
      (common-lisp:list
       (common-lisp:cons "Mask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-ip-connection-info))
   common-lisp:nil))
(common-lisp:deftype status-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass storage-location common-lisp:nil
                       ((repo-prefix-location :initarg :repo-prefix-location
                         :type (common-lisp:or object common-lisp:null)
                         :accessor %storage-location-repo-prefix-location
                         :initform
                         (common-lisp:error
                          ":repo-prefix-location is required"))
                        (manifest-prefix-location :initarg
                         :manifest-prefix-location :type
                         (common-lisp:or object common-lisp:null) :accessor
                         %storage-location-manifest-prefix-location :initform
                         (common-lisp:error
                          ":manifest-prefix-location is required"))
                        (generated-prefix-location :initarg
                         :generated-prefix-location :type
                         (common-lisp:or object common-lisp:null) :accessor
                         %storage-location-generated-prefix-location :initform
                         (common-lisp:error
                          ":generated-prefix-location is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket common-lisp:null) :accessor
                         %storage-location-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (binary-prefix-location :initarg
                         :binary-prefix-location :type
                         (common-lisp:or object common-lisp:null) :accessor
                         %storage-location-binary-prefix-location :initform
                         (common-lisp:error
                          ":binary-prefix-location is required"))))
 (common-lisp:export
  (common-lisp:list 'storage-location 'make-storage-location))
 (common-lisp:defun make-storage-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repo-prefix-location
                     manifest-prefix-location generated-prefix-location bucket
                     binary-prefix-location)
   (common-lisp:apply #'common-lisp:make-instance 'storage-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'binary-prefix-location))
      (common-lisp:list
       (common-lisp:cons "BinaryPrefixLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-prefix-location))
      (common-lisp:list
       (common-lisp:cons "GeneratedPrefixLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-prefix-location))
      (common-lisp:list
       (common-lisp:cons "ManifestPrefixLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repo-prefix-location))
      (common-lisp:list
       (common-lisp:cons "RepoPrefixLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-location))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype template-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype template-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-template-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype template-type () 'common-lisp:string)
(common-lisp:deftype template-value () 'common-lisp:string)
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-created-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-device-metadata-request common-lisp:nil
                       ((device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %update-device-metadata-request-device-id :initform
                         (common-lisp:error ":device-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-device-metadata-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-device-metadata-request
                    'make-update-device-metadata-request))
 (common-lisp:defun make-update-device-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-id description)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-device-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-metadata-response common-lisp:nil
                       ((device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %update-device-metadata-response-device-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-device-metadata-response
                    'make-update-device-metadata-response))
 (common-lisp:defun make-update-device-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-device-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-response))
   common-lisp:nil))
(common-lisp:deftype update-progress () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (panorama-error)
     ((error-arguments :initarg :error-arguments :initform common-lisp:nil
       :reader validation-exception-error-arguments)
      (error-id :initarg :error-id :initform common-lisp:nil :reader
       validation-exception-error-id)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-error-arguments
                    'validation-exception-error-id 'validation-exception-fields
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-error-argument common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-error-argument-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-error-argument-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-error-argument
                    'make-validation-exception-error-argument))
 (common-lisp:defun make-validation-exception-error-argument
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'validation-exception-error-argument
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-error-argument))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-error-argument))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-error-argument))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-error-argument-list ()
   '(trivial-types:proper-list validation-exception-error-argument))
 (common-lisp:defun |make-validation-exception-error-argument-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-error-argument))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))
                        (message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name message)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-application-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id-to-replace
                     default-runtime-context-device description
                     manifest-overrides-payload manifest-payload name
                     runtime-role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable application-instance-id-to-replace
     default-runtime-context-device description manifest-overrides-payload
     manifest-payload name runtime-role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-application-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/application-instances"
                                                        "CreateApplicationInstance"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application-instance))
(common-lisp:progn
 (common-lisp:defun create-job-for-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-ids device-job-config job-type)
   (common-lisp:declare
    (common-lisp:ignorable device-ids device-job-config job-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-for-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/jobs"
                                                        "CreateJobForDevices"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job-for-devices))
(common-lisp:progn
 (common-lisp:defun create-node-from-template-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-tags node-description node-name
                     output-package-name output-package-version
                     template-parameters template-type)
   (common-lisp:declare
    (common-lisp:ignorable job-tags node-description node-name
     output-package-name output-package-version template-parameters
     template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-node-from-template-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/packages/template-job"
                                                        "CreateNodeFromTemplateJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-node-from-template-job))
(common-lisp:progn
 (common-lisp:defun create-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name tags)
   (common-lisp:declare (common-lisp:ignorable package-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/packages"
                                                        "CreatePackage"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-package))
(common-lisp:progn
 (common-lisp:defun create-package-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token input-config job-tags
                     job-type output-config)
   (common-lisp:declare
    (common-lisp:ignorable client-token input-config job-tags job-type
     output-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-package-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/packages/import-jobs"
                                                        "CreatePackageImportJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-package-import-job))
(common-lisp:progn
 (common-lisp:defun delete-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id)
   (common-lisp:declare (common-lisp:ignorable device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "DeleteDevice"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-device))
(common-lisp:progn
 (common-lisp:defun delete-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force-delete package-id)
   (common-lisp:declare (common-lisp:ignorable force-delete package-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "DeletePackage"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-package))
(common-lisp:progn
 (common-lisp:defun deregister-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner-account package-id package-version
                     patch-version updated-latest-patch-version)
   (common-lisp:declare
    (common-lisp:ignorable owner-account package-id package-version
     patch-version updated-latest-patch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-package-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A/patch/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'patch-version))))
                                                        "DeregisterPackageVersion"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-package-version))
(common-lisp:progn
 (common-lisp:defun describe-application-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id)
   (common-lisp:declare (common-lisp:ignorable application-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-application-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "DescribeApplicationInstance"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application-instance))
(common-lisp:progn
 (common-lisp:defun describe-application-instance-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id)
   (common-lisp:declare (common-lisp:ignorable application-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-application-instance-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "DescribeApplicationInstanceDetails"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application-instance-details))
(common-lisp:progn
 (common-lisp:defun describe-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id)
   (common-lisp:declare (common-lisp:ignorable device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "DescribeDevice"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-device))
(common-lisp:progn
 (common-lisp:defun describe-device-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-device-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeDeviceJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-device-job))
(common-lisp:progn
 (common-lisp:defun describe-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key node-id owner-account)
   (common-lisp:declare (common-lisp:ignorable node-id owner-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-node-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/nodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'node-id))))
                                                        "DescribeNode"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-node))
(common-lisp:progn
 (common-lisp:defun describe-node-from-template-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-node-from-template-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/template-job/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeNodeFromTemplateJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-node-from-template-job))
(common-lisp:progn
 (common-lisp:defun describe-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id)
   (common-lisp:declare (common-lisp:ignorable package-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/metadata/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "DescribePackage"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package))
(common-lisp:progn
 (common-lisp:defun describe-package-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-package-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/import-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribePackageImportJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package-import-job))
(common-lisp:progn
 (common-lisp:defun describe-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner-account package-id package-version
                     patch-version)
   (common-lisp:declare
    (common-lisp:ignorable owner-account package-id package-version
     patch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/metadata/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-version))))
                                                        "DescribePackageVersion"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package-version))
(common-lisp:progn
 (common-lisp:defun list-application-instance-dependencies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-instance-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-instance-dependencies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A/package-dependencies"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "ListApplicationInstanceDependencies"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-instance-dependencies))
(common-lisp:progn
 (common-lisp:defun list-application-instance-node-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-instance-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-instance-node-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A/node-instances"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "ListApplicationInstanceNodeInstances"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-instance-node-instances))
(common-lisp:progn
 (common-lisp:defun list-application-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id max-results next-token
                     status-filter)
   (common-lisp:declare
    (common-lisp:ignorable device-id max-results next-token status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/application-instances"
                                                        "ListApplicationInstances"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-instances))
(common-lisp:progn
 (common-lisp:defun list-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-aggregated-status-filter
                     max-results name-filter next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable device-aggregated-status-filter max-results
     name-filter next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/devices"
                                                        "ListDevices"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-devices))
(common-lisp:progn
 (common-lisp:defun list-devices-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable device-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-devices-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/jobs"
                                                        "ListDevicesJobs"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-devices-jobs))
(common-lisp:progn
 (common-lisp:defun list-node-from-template-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-node-from-template-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/packages/template-job"
                                                        "ListNodeFromTemplateJobs"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-node-from-template-jobs))
(common-lisp:progn
 (common-lisp:defun list-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category max-results next-token
                     owner-account package-name package-version patch-version)
   (common-lisp:declare
    (common-lisp:ignorable category max-results next-token owner-account
     package-name package-version patch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-nodes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/nodes" "ListNodes"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-nodes))
(common-lisp:progn
 (common-lisp:defun list-package-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-package-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/packages/import-jobs"
                                                        "ListPackageImportJobs"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-package-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/packages"
                                                        "ListPackages"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-packages))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun provision-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name networking-configuration
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable description name networking-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-provision-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/devices"
                                                        "ProvisionDevice"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'provision-device))
(common-lisp:progn
 (common-lisp:defun register-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mark-latest owner-account package-id
                     package-version patch-version)
   (common-lisp:declare
    (common-lisp:ignorable mark-latest owner-account package-id package-version
     patch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A/patch/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'patch-version))))
                                                        "RegisterPackageVersion"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-package-version))
(common-lisp:progn
 (common-lisp:defun remove-application-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id)
   (common-lisp:declare (common-lisp:ignorable application-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-application-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "RemoveApplicationInstance"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-application-instance))
(common-lisp:progn
 (common-lisp:defun signal-application-instance-node-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id node-signals)
   (common-lisp:declare
    (common-lisp:ignorable application-instance-id node-signals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-signal-application-instance-node-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A/node-signals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "SignalApplicationInstanceNodeInstances"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'signal-application-instance-node-instances))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-device-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description device-id)
   (common-lisp:declare (common-lisp:ignorable description device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-device-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "UpdateDeviceMetadata"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-device-metadata))
