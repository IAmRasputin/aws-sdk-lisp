;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/panorama/api
  (:use)
  (:nicknames #:aws/panorama)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/panorama/api)
(common-lisp:progn
 (common-lisp:defclass panorama-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "panorama" :protocol
                        :rest-json))
 (common-lisp:export 'panorama-request))
(common-lisp:progn
 (common-lisp:define-condition panorama-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'panorama-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (panorama-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (alternate-software-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-alternate-software-metadata-"))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'alternate-software-metadata
                    'make-alternate-software-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          alternate-software-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          alternate-software-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          alternate-software-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alternate-softwares ()
   '(trivial-types:proper-list alternate-software-metadata))
 (common-lisp:defun |make-alternate-softwares|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            alternate-software-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-instance-"))
   (application-instance-id common-lisp:nil :type
    (common-lisp:or application-instance-id common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or application-instance-arn common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (default-runtime-context-device common-lisp:nil :type
    (common-lisp:or default-runtime-context-device common-lisp:null))
   (default-runtime-context-device-name common-lisp:nil :type
    (common-lisp:or device-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (health-status common-lisp:nil :type
    (common-lisp:or application-instance-health-status common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or application-instance-name common-lisp:null))
   (runtime-context-states common-lisp:nil :type
    (common-lisp:or reported-runtime-context-states common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or application-instance-status common-lisp:null))
   (status-description common-lisp:nil :type
    (common-lisp:or application-instance-status-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-instance 'make-application-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device-name))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-context-states))
      (common-lisp:list
       (common-lisp:cons "RuntimeContextStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-description))
      (common-lisp:list
       (common-lisp:cons "StatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-instance))
   common-lisp:nil))
(common-lisp:deftype application-instance-arn () 'common-lisp:string)
(common-lisp:deftype application-instance-health-status () 'common-lisp:string)
(common-lisp:deftype application-instance-id () 'common-lisp:string)
(common-lisp:deftype application-instance-name () 'common-lisp:string)
(common-lisp:deftype application-instance-status () 'common-lisp:string)
(common-lisp:deftype application-instance-status-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-instances ()
   '(trivial-types:proper-list application-instance))
 (common-lisp:defun |make-application-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bucket () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype certificates ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (panorama-error)
     ((error-arguments :initarg :error-arguments :initform common-lisp:nil
       :reader conflict-exception-error-arguments)
      (error-id :initarg :error-id :initform common-lisp:nil :reader
       conflict-exception-error-id)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-error-arguments
                    'conflict-exception-error-id 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (conflict-exception-error-argument (:copier common-lisp:nil)
      (:conc-name "struct-shape-conflict-exception-error-argument-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception-error-argument
                    'make-conflict-exception-error-argument))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conflict-exception-error-argument))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conflict-exception-error-argument))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conflict-exception-error-argument))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conflict-exception-error-argument-list ()
   '(trivial-types:proper-list conflict-exception-error-argument))
 (common-lisp:defun |make-conflict-exception-error-argument-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conflict-exception-error-argument))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-instance-request-"))
   (application-instance-id-to-replace common-lisp:nil :type
    (common-lisp:or application-instance-id common-lisp:null))
   (default-runtime-context-device
    (common-lisp:error ":default-runtime-context-device is required") :type
    (common-lisp:or default-runtime-context-device common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (manifest-overrides-payload common-lisp:nil :type
    (common-lisp:or manifest-overrides-payload common-lisp:null))
   (manifest-payload (common-lisp:error ":manifest-payload is required") :type
    (common-lisp:or manifest-payload common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or application-instance-name common-lisp:null))
   (runtime-role-arn common-lisp:nil :type
    (common-lisp:or runtime-role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-instance-request
                    'make-create-application-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id-to-replace))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceIdToReplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-overrides-payload))
      (common-lisp:list
       (common-lisp:cons "ManifestOverridesPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-payload))
      (common-lisp:list
       (common-lisp:cons "ManifestPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "RuntimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-instance-response-"))
   (application-instance-id
    (common-lisp:error ":application-instance-id is required") :type
    (common-lisp:or application-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-instance-response
                    'make-create-application-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-for-devices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-for-devices-request-"))
   (device-ids (common-lisp:error ":device-ids is required") :type
    (common-lisp:or device-id-list common-lisp:null))
   (device-job-config common-lisp:nil :type
    (common-lisp:or device-job-config common-lisp:null))
   (job-type (common-lisp:error ":job-type is required") :type
    (common-lisp:or job-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-for-devices-request
                    'make-create-job-for-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-ids))
      (common-lisp:list
       (common-lisp:cons "DeviceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-job-config))
      (common-lisp:list
       (common-lisp:cons "DeviceJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-for-devices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-for-devices-response-"))
   (jobs (common-lisp:error ":jobs is required") :type
    (common-lisp:or job-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-for-devices-response
                    'make-create-job-for-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-for-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-node-from-template-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-node-from-template-job-request-"))
   (job-tags common-lisp:nil :type
    (common-lisp:or job-tags-list common-lisp:null))
   (node-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (node-name (common-lisp:error ":node-name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (output-package-name (common-lisp:error ":output-package-name is required")
    :type (common-lisp:or node-package-name common-lisp:null))
   (output-package-version
    (common-lisp:error ":output-package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (template-parameters (common-lisp:error ":template-parameters is required")
    :type (common-lisp:or template-parameters-map common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-node-from-template-job-request
                    'make-create-node-from-template-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tags))
      (common-lisp:list
       (common-lisp:cons "JobTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-description))
      (common-lisp:list
       (common-lisp:cons "NodeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-name))
      (common-lisp:list
       (common-lisp:cons "NodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-package-name))
      (common-lisp:list
       (common-lisp:cons "OutputPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-package-version))
      (common-lisp:list
       (common-lisp:cons "OutputPackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-parameters))
      (common-lisp:list
       (common-lisp:cons "TemplateParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-node-from-template-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-node-from-template-job-response-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-node-from-template-job-response
                    'make-create-node-from-template-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-node-from-template-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-package-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-package-import-job-request-"))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or package-import-job-input-config common-lisp:null))
   (job-tags common-lisp:nil :type
    (common-lisp:or job-tags-list common-lisp:null))
   (job-type (common-lisp:error ":job-type is required") :type
    (common-lisp:or package-import-job-type common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or package-import-job-output-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-package-import-job-request
                    'make-create-package-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tags))
      (common-lisp:list
       (common-lisp:cons "JobTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-package-import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-package-import-job-response-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-package-import-job-response
                    'make-create-package-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-package-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-package-request-"))
   (package-name (common-lisp:error ":package-name is required") :type
    (common-lisp:or node-package-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-package-request 'make-create-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-package-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-package-response-"))
   (arn common-lisp:nil :type
    (common-lisp:or node-package-arn common-lisp:null))
   (package-id common-lisp:nil :type
    (common-lisp:or node-package-id common-lisp:null))
   (storage-location (common-lisp:error ":storage-location is required") :type
    (common-lisp:or storage-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-package-response 'make-create-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   common-lisp:nil))
(common-lisp:deftype created-time () 'common-lisp:string)
(common-lisp:deftype current-software () 'common-lisp:string)
(common-lisp:deftype default-gateway () 'common-lisp:string)
(common-lisp:deftype default-runtime-context-device () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-device-request-"))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or device-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-device-request 'make-delete-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-device-response-"))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-device-response 'make-delete-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-request-"))
   (force-delete common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-package-request 'make-delete-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-package-response 'make-delete-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-package-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-package-version-request-"))
   (owner-account common-lisp:nil :type
    (common-lisp:or package-owner-account common-lisp:null))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null))
   (package-version (common-lisp:error ":package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (patch-version (common-lisp:error ":patch-version is required") :type
    (common-lisp:or node-package-patch-version common-lisp:null))
   (updated-latest-patch-version common-lisp:nil :type
    (common-lisp:or node-package-patch-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-package-version-request
                    'make-deregister-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-package-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-package-version-response-")))
 (common-lisp:export
  (common-lisp:list 'deregister-package-version-response
                    'make-deregister-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-instance-details-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-application-instance-details-request-"))
   (application-instance-id
    (common-lisp:error ":application-instance-id is required") :type
    (common-lisp:or application-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-instance-details-request
                    'make-describe-application-instance-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-instance-details-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-application-instance-details-response-"))
   (application-instance-id common-lisp:nil :type
    (common-lisp:or application-instance-id common-lisp:null))
   (application-instance-id-to-replace common-lisp:nil :type
    (common-lisp:or application-instance-id common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (default-runtime-context-device common-lisp:nil :type
    (common-lisp:or default-runtime-context-device common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (manifest-overrides-payload common-lisp:nil :type
    (common-lisp:or manifest-overrides-payload common-lisp:null))
   (manifest-payload common-lisp:nil :type
    (common-lisp:or manifest-payload common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or application-instance-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-instance-details-response
                    'make-describe-application-instance-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id-to-replace))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceIdToReplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-overrides-payload))
      (common-lisp:list
       (common-lisp:cons "ManifestOverridesPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-payload))
      (common-lisp:list
       (common-lisp:cons "ManifestPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-instance-request-"))
   (application-instance-id
    (common-lisp:error ":application-instance-id is required") :type
    (common-lisp:or application-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-instance-request
                    'make-describe-application-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-instance-response-"))
   (application-instance-id common-lisp:nil :type
    (common-lisp:or application-instance-id common-lisp:null))
   (application-instance-id-to-replace common-lisp:nil :type
    (common-lisp:or application-instance-id common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or application-instance-arn common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (default-runtime-context-device common-lisp:nil :type
    (common-lisp:or default-runtime-context-device common-lisp:null))
   (default-runtime-context-device-name common-lisp:nil :type
    (common-lisp:or device-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (health-status common-lisp:nil :type
    (common-lisp:or application-instance-health-status common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or application-instance-name common-lisp:null))
   (runtime-context-states common-lisp:nil :type
    (common-lisp:or reported-runtime-context-states common-lisp:null))
   (runtime-role-arn common-lisp:nil :type
    (common-lisp:or runtime-role-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or application-instance-status common-lisp:null))
   (status-description common-lisp:nil :type
    (common-lisp:or application-instance-status-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-instance-response
                    'make-describe-application-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id-to-replace))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceIdToReplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-runtime-context-device-name))
      (common-lisp:list
       (common-lisp:cons "DefaultRuntimeContextDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-context-states))
      (common-lisp:list
       (common-lisp:cons "RuntimeContextStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "RuntimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-description))
      (common-lisp:list
       (common-lisp:cons "StatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-job-request
                    'make-describe-device-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-job-response-"))
   (created-time common-lisp:nil :type
    (common-lisp:or update-created-time common-lisp:null))
   (device-arn common-lisp:nil :type
    (common-lisp:or device-arn common-lisp:null))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (device-name common-lisp:nil :type
    (common-lisp:or device-name common-lisp:null))
   (device-type common-lisp:nil :type
    (common-lisp:or device-type common-lisp:null))
   (image-version common-lisp:nil :type
    (common-lisp:or image-version common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or update-progress common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-job-response
                    'make-describe-device-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "DeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version))
      (common-lisp:list
       (common-lisp:cons "ImageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-request-"))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or device-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-request 'make-describe-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-response-"))
   (alternate-softwares common-lisp:nil :type
    (common-lisp:or alternate-softwares common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or device-arn common-lisp:null))
   (brand common-lisp:nil :type (common-lisp:or device-brand common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-time common-lisp:null))
   (current-networking-status common-lisp:nil :type
    (common-lisp:or network-status common-lisp:null))
   (current-software common-lisp:nil :type
    (common-lisp:or current-software common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (device-aggregated-status common-lisp:nil :type
    (common-lisp:or device-aggregated-status common-lisp:null))
   (device-connection-status common-lisp:nil :type
    (common-lisp:or device-connection-status common-lisp:null))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (latest-alternate-software common-lisp:nil :type
    (common-lisp:or latest-alternate-software common-lisp:null))
   (latest-device-job common-lisp:nil :type
    (common-lisp:or latest-device-job common-lisp:null))
   (latest-software common-lisp:nil :type
    (common-lisp:or latest-software common-lisp:null))
   (lease-expiration-time common-lisp:nil :type
    (common-lisp:or lease-expiration-time common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or device-name common-lisp:null))
   (networking-configuration common-lisp:nil :type
    (common-lisp:or network-payload common-lisp:null))
   (provisioning-status common-lisp:nil :type
    (common-lisp:or device-status common-lisp:null))
   (serial-number common-lisp:nil :type
    (common-lisp:or device-serial-number common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or device-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-response 'make-describe-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternate-softwares))
      (common-lisp:list
       (common-lisp:cons "AlternateSoftwares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'brand))
      (common-lisp:list
       (common-lisp:cons "Brand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-networking-status))
      (common-lisp:list
       (common-lisp:cons "CurrentNetworkingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-software))
      (common-lisp:list
       (common-lisp:cons "CurrentSoftware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-aggregated-status))
      (common-lisp:list
       (common-lisp:cons "DeviceAggregatedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-connection-status))
      (common-lisp:list
       (common-lisp:cons "DeviceConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-alternate-software))
      (common-lisp:list
       (common-lisp:cons "LatestAlternateSoftware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-device-job))
      (common-lisp:list
       (common-lisp:cons "LatestDeviceJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-software))
      (common-lisp:list
       (common-lisp:cons "LatestSoftware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lease-expiration-time))
      (common-lisp:list
       (common-lisp:cons "LeaseExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'networking-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning-status))
      (common-lisp:list
       (common-lisp:cons "ProvisioningStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-node-from-template-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-node-from-template-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-node-from-template-job-request
                    'make-describe-node-from-template-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-node-from-template-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-node-from-template-job-response-"))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or created-time common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (job-tags common-lisp:nil :type
    (common-lisp:or job-tags-list common-lisp:null))
   (last-updated-time (common-lisp:error ":last-updated-time is required")
    :type (common-lisp:or last-updated-time common-lisp:null))
   (node-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (node-name (common-lisp:error ":node-name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (output-package-name (common-lisp:error ":output-package-name is required")
    :type (common-lisp:or node-package-name common-lisp:null))
   (output-package-version
    (common-lisp:error ":output-package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or node-from-template-job-status common-lisp:null))
   (status-message (common-lisp:error ":status-message is required") :type
    (common-lisp:or node-from-template-job-status-message common-lisp:null))
   (template-parameters (common-lisp:error ":template-parameters is required")
    :type (common-lisp:or template-parameters-map common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-node-from-template-job-response
                    'make-describe-node-from-template-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tags))
      (common-lisp:list
       (common-lisp:cons "JobTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-description))
      (common-lisp:list
       (common-lisp:cons "NodeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-name))
      (common-lisp:list
       (common-lisp:cons "NodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-package-name))
      (common-lisp:list
       (common-lisp:cons "OutputPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-package-version))
      (common-lisp:list
       (common-lisp:cons "OutputPackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-parameters))
      (common-lisp:list
       (common-lisp:cons "TemplateParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-from-template-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-node-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-node-request-"))
   (node-id (common-lisp:error ":node-id is required") :type
    (common-lisp:or node-id common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or package-owner-account common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-node-request 'make-describe-node-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-node-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-node-response-"))
   (asset-name common-lisp:nil :type
    (common-lisp:or node-asset-name common-lisp:null))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or node-category common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or time-stamp common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null))
   (last-updated-time (common-lisp:error ":last-updated-time is required")
    :type (common-lisp:or time-stamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (node-id (common-lisp:error ":node-id is required") :type
    (common-lisp:or node-id common-lisp:null))
   (node-interface (common-lisp:error ":node-interface is required") :type
    (common-lisp:or node-interface common-lisp:null))
   (owner-account (common-lisp:error ":owner-account is required") :type
    (common-lisp:or package-owner-account common-lisp:null))
   (package-arn common-lisp:nil :type
    (common-lisp:or node-package-arn common-lisp:null))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null))
   (package-name (common-lisp:error ":package-name is required") :type
    (common-lisp:or node-package-name common-lisp:null))
   (package-version (common-lisp:error ":package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (patch-version (common-lisp:error ":patch-version is required") :type
    (common-lisp:or node-package-patch-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-node-response 'make-describe-node-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "AssetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-interface))
      (common-lisp:list
       (common-lisp:cons "NodeInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "PackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-import-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-import-job-request
                    'make-describe-package-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-import-job-response-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or created-time common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or package-import-job-input-config common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (job-tags common-lisp:nil :type
    (common-lisp:or job-tags-list common-lisp:null))
   (job-type (common-lisp:error ":job-type is required") :type
    (common-lisp:or package-import-job-type common-lisp:null))
   (last-updated-time (common-lisp:error ":last-updated-time is required")
    :type (common-lisp:or last-updated-time common-lisp:null))
   (output (common-lisp:error ":output is required") :type
    (common-lisp:or package-import-job-output common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or package-import-job-output-config common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or package-import-job-status common-lisp:null))
   (status-message (common-lisp:error ":status-message is required") :type
    (common-lisp:or package-import-job-status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-import-job-response
                    'make-describe-package-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-tags))
      (common-lisp:list
       (common-lisp:cons "JobTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-request-"))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-request 'make-describe-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-response-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or node-package-arn common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or time-stamp common-lisp:null))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null))
   (package-name (common-lisp:error ":package-name is required") :type
    (common-lisp:or node-package-name common-lisp:null))
   (read-access-principal-arns common-lisp:nil :type
    (common-lisp:or principal-arns-list common-lisp:null))
   (storage-location (common-lisp:error ":storage-location is required") :type
    (common-lisp:or storage-location common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null))
   (write-access-principal-arns common-lisp:nil :type
    (common-lisp:or principal-arns-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-response
                    'make-describe-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-access-principal-arns))
      (common-lisp:list
       (common-lisp:cons "ReadAccessPrincipalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-access-principal-arns))
      (common-lisp:list
       (common-lisp:cons "WriteAccessPrincipalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-version-request-"))
   (owner-account common-lisp:nil :type
    (common-lisp:or package-owner-account common-lisp:null))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null))
   (package-version (common-lisp:error ":package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (patch-version common-lisp:nil :type
    (common-lisp:or node-package-patch-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-version-request
                    'make-describe-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-version-response-"))
   (is-latest-patch (common-lisp:error ":is-latest-patch is required") :type
    (common-lisp:or boolean common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or package-owner-account common-lisp:null))
   (package-arn common-lisp:nil :type
    (common-lisp:or node-package-arn common-lisp:null))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null))
   (package-name (common-lisp:error ":package-name is required") :type
    (common-lisp:or node-package-name common-lisp:null))
   (package-version (common-lisp:error ":package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (patch-version (common-lisp:error ":patch-version is required") :type
    (common-lisp:or node-package-patch-version common-lisp:null))
   (registered-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or package-version-status common-lisp:null))
   (status-description common-lisp:nil :type
    (common-lisp:or package-version-status-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-version-response
                    'make-describe-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-latest-patch))
      (common-lisp:list
       (common-lisp:cons "IsLatestPatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "PackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-time))
      (common-lisp:list
       (common-lisp:cons "RegisteredTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-description))
      (common-lisp:list
       (common-lisp:cons "StatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype desired-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (device (:copier common-lisp:nil) (:conc-name "struct-shape-device-"))
   (brand common-lisp:nil :type (common-lisp:or device-brand common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-time common-lisp:null))
   (current-software common-lisp:nil :type
    (common-lisp:or current-software common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (device-aggregated-status common-lisp:nil :type
    (common-lisp:or device-aggregated-status common-lisp:null))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or last-updated-time common-lisp:null))
   (latest-device-job common-lisp:nil :type
    (common-lisp:or latest-device-job common-lisp:null))
   (lease-expiration-time common-lisp:nil :type
    (common-lisp:or lease-expiration-time common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or device-name common-lisp:null))
   (provisioning-status common-lisp:nil :type
    (common-lisp:or device-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or device-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'device 'make-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'brand))
      (common-lisp:list
       (common-lisp:cons "Brand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-software))
      (common-lisp:list
       (common-lisp:cons "CurrentSoftware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-aggregated-status))
      (common-lisp:list
       (common-lisp:cons "DeviceAggregatedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-device-job))
      (common-lisp:list
       (common-lisp:cons "LatestDeviceJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lease-expiration-time))
      (common-lisp:list
       (common-lisp:cons "LeaseExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning-status))
      (common-lisp:list
       (common-lisp:cons "ProvisioningStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device))
   common-lisp:nil))
(common-lisp:deftype device-aggregated-status () 'common-lisp:string)
(common-lisp:deftype device-arn () 'common-lisp:string)
(common-lisp:deftype device-brand () 'common-lisp:string)
(common-lisp:deftype device-connection-status () 'common-lisp:string)
(common-lisp:deftype device-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-id-list () '(trivial-types:proper-list device-id))
 (common-lisp:defun |make-device-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (device-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-job-"))
   (created-time common-lisp:nil :type
    (common-lisp:or created-time common-lisp:null))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (device-name common-lisp:nil :type
    (common-lisp:or device-name common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'device-job 'make-device-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (device-job-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-job-config-"))
   (otajob-config common-lisp:nil :type
    (common-lisp:or otajob-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'device-job-config 'make-device-job-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-job-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-job-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'otajob-config))
      (common-lisp:list
       (common-lisp:cons "OTAJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-job-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-job-list ()
   '(trivial-types:proper-list device-job))
 (common-lisp:defun |make-device-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype device-list () '(trivial-types:proper-list device))
 (common-lisp:defun |make-device-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-name () 'common-lisp:string)
(common-lisp:deftype device-reported-status () 'common-lisp:string)
(common-lisp:deftype device-serial-number () 'common-lisp:string)
(common-lisp:deftype device-status () 'common-lisp:string)
(common-lisp:deftype device-type () 'common-lisp:string)
(common-lisp:deftype dns () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dns-list () '(trivial-types:proper-list dns))
 (common-lisp:defun |make-dns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dns))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ethernet-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-ethernet-payload-"))
   (connection-type (common-lisp:error ":connection-type is required") :type
    (common-lisp:or connection-type common-lisp:null))
   (static-ip-connection-info common-lisp:nil :type
    (common-lisp:or static-ip-connection-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ethernet-payload 'make-ethernet-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ethernet-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ethernet-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-ip-connection-info))
      (common-lisp:list
       (common-lisp:cons "StaticIpConnectionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ethernet-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ethernet-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-ethernet-status-"))
   (connection-status common-lisp:nil :type
    (common-lisp:or network-connection-status common-lisp:null))
   (hw-address common-lisp:nil :type
    (common-lisp:or hw-address common-lisp:null))
   (ip-address common-lisp:nil :type
    (common-lisp:or ip-address common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ethernet-status 'make-ethernet-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ethernet-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ethernet-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hw-address))
      (common-lisp:list
       (common-lisp:cons "HwAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ethernet-status))
   common-lisp:nil))
(common-lisp:deftype hw-address () 'common-lisp:string)
(common-lisp:deftype image-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-port-list ()
   '(trivial-types:proper-list node-input-port))
 (common-lisp:defun |make-input-port-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-input-port))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (panorama-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype iot-thing-name () 'common-lisp:string)
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-address-or-server-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job (:copier common-lisp:nil) (:conc-name "struct-shape-job-"))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-list () '(trivial-types:proper-list job))
 (common-lisp:defun |make-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-resource-tags (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-resource-tags-"))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or job-resource-type common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-resource-tags 'make-job-resource-tags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-resource-tags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-resource-tags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-resource-tags))
   common-lisp:nil))
(common-lisp:deftype job-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-tags-list ()
   '(trivial-types:proper-list job-resource-tags))
 (common-lisp:defun |make-job-tags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-resource-tags))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:deftype last-updated-time () 'common-lisp:string)
(common-lisp:deftype latest-alternate-software () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (latest-device-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-latest-device-job-"))
   (image-version common-lisp:nil :type
    (common-lisp:or image-version common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or update-progress common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'latest-device-job 'make-latest-device-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input latest-device-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input latest-device-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version))
      (common-lisp:list
       (common-lisp:cons "ImageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input latest-device-job))
   common-lisp:nil))
(common-lisp:deftype latest-software () 'common-lisp:string)
(common-lisp:deftype lease-expiration-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-instance-dependencies-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-application-instance-dependencies-request-"))
   (application-instance-id
    (common-lisp:error ":application-instance-id is required") :type
    (common-lisp:or application-instance-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size25 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-instance-dependencies-request
                    'make-list-application-instance-dependencies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-instance-dependencies-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-application-instance-dependencies-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (package-objects common-lisp:nil :type
    (common-lisp:or package-objects common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-instance-dependencies-response
                    'make-list-application-instance-dependencies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-objects))
      (common-lisp:list
       (common-lisp:cons "PackageObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-dependencies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-instance-node-instances-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-application-instance-node-instances-request-"))
   (application-instance-id
    (common-lisp:error ":application-instance-id is required") :type
    (common-lisp:or application-instance-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size25 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-instance-node-instances-request
                    'make-list-application-instance-node-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-instance-node-instances-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-application-instance-node-instances-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (node-instances common-lisp:nil :type
    (common-lisp:or node-instances common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-instance-node-instances-response
                    'make-list-application-instance-node-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-instances))
      (common-lisp:list
       (common-lisp:cons "NodeInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instance-node-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-instances-request-"))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size25 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (status-filter common-lisp:nil :type
    (common-lisp:or status-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-instances-request
                    'make-list-application-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-instances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-instances-response-"))
   (application-instances common-lisp:nil :type
    (common-lisp:or application-instances common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-instances-response
                    'make-list-application-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instances))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-devices-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-devices-jobs-request-"))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size25 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-devices-jobs-request
                    'make-list-devices-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-devices-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-devices-jobs-response-"))
   (device-jobs common-lisp:nil :type
    (common-lisp:or device-job-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-devices-jobs-response
                    'make-list-devices-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-jobs))
      (common-lisp:list
       (common-lisp:cons "DeviceJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-devices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-devices-request-"))
   (device-aggregated-status-filter common-lisp:nil :type
    (common-lisp:or device-aggregated-status common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size25 common-lisp:null))
   (name-filter common-lisp:nil :type
    (common-lisp:or name-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-devices-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-devices-request 'make-list-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-devices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-devices-response-"))
   (devices (common-lisp:error ":devices is required") :type
    (common-lisp:or device-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-devices-response 'make-list-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   common-lisp:nil))
(common-lisp:deftype list-devices-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-node-from-template-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-node-from-template-jobs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size25 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-node-from-template-jobs-request
                    'make-list-node-from-template-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-node-from-template-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-node-from-template-jobs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (node-from-template-jobs
    (common-lisp:error ":node-from-template-jobs is required") :type
    (common-lisp:or node-from-template-job-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-node-from-template-jobs-response
                    'make-list-node-from-template-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-from-template-jobs))
      (common-lisp:list
       (common-lisp:cons "NodeFromTemplateJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-node-from-template-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-nodes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-nodes-request-"))
   (category common-lisp:nil :type
    (common-lisp:or node-category common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size25 common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or package-owner-account common-lisp:null))
   (package-name common-lisp:nil :type
    (common-lisp:or node-package-name common-lisp:null))
   (package-version common-lisp:nil :type
    (common-lisp:or node-package-version common-lisp:null))
   (patch-version common-lisp:nil :type
    (common-lisp:or node-package-patch-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-nodes-request 'make-list-nodes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-nodes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-nodes-response-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (nodes common-lisp:nil :type (common-lisp:or nodes-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-nodes-response 'make-list-nodes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "Nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-import-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-import-jobs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size25 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-import-jobs-request
                    'make-list-package-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-import-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-import-jobs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (package-import-jobs (common-lisp:error ":package-import-jobs is required")
    :type (common-lisp:or package-import-job-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-import-jobs-response
                    'make-list-package-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-import-jobs))
      (common-lisp:list
       (common-lisp:cons "PackageImportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-packages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-packages-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size25 common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-packages-request 'make-list-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-packages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-packages-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (packages common-lisp:nil :type
    (common-lisp:or package-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-packages-response 'make-list-packages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packages))
      (common-lisp:list
       (common-lisp:cons "Packages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (manifest-overrides-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-manifest-overrides-payload-"))
   (payload-data common-lisp:nil :type
    (common-lisp:or manifest-overrides-payload-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'manifest-overrides-payload
                    'make-manifest-overrides-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          manifest-overrides-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          manifest-overrides-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-data))
      (common-lisp:list
       (common-lisp:cons "PayloadData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          manifest-overrides-payload))
   common-lisp:nil))
(common-lisp:deftype manifest-overrides-payload-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (manifest-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-manifest-payload-"))
   (payload-data common-lisp:nil :type
    (common-lisp:or manifest-payload-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'manifest-payload 'make-manifest-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input manifest-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input manifest-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-data))
      (common-lisp:list
       (common-lisp:cons "PayloadData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input manifest-payload))
   common-lisp:nil))
(common-lisp:deftype manifest-payload-data () 'common-lisp:string)
(common-lisp:deftype mark-latest-patch () 'common-lisp:boolean)
(common-lisp:deftype mask () 'common-lisp:string)
(common-lisp:deftype max-connections () 'common-lisp:integer)
(common-lisp:deftype max-size25 () 'common-lisp:integer)
(common-lisp:deftype name-filter () 'common-lisp:string)
(common-lisp:deftype network-connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-payload-"))
   (ethernet0 common-lisp:nil :type
    (common-lisp:or ethernet-payload common-lisp:null))
   (ethernet1 common-lisp:nil :type
    (common-lisp:or ethernet-payload common-lisp:null))
   (ntp common-lisp:nil :type (common-lisp:or ntp-payload common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network-payload 'make-network-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethernet0))
      (common-lisp:list
       (common-lisp:cons "Ethernet0"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethernet1))
      (common-lisp:list
       (common-lisp:cons "Ethernet1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ntp))
      (common-lisp:list
       (common-lisp:cons "Ntp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-status-"))
   (ethernet0status common-lisp:nil :type
    (common-lisp:or ethernet-status common-lisp:null))
   (ethernet1status common-lisp:nil :type
    (common-lisp:or ethernet-status common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or last-updated-time common-lisp:null))
   (ntp-status common-lisp:nil :type
    (common-lisp:or ntp-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network-status 'make-network-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethernet0status))
      (common-lisp:list
       (common-lisp:cons "Ethernet0Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethernet1status))
      (common-lisp:list
       (common-lisp:cons "Ethernet1Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ntp-status))
      (common-lisp:list
       (common-lisp:cons "NtpStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-status))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (node (:copier common-lisp:nil) (:conc-name "struct-shape-node-"))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or node-category common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or time-stamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (node-id (common-lisp:error ":node-id is required") :type
    (common-lisp:or node-id common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or package-owner-account common-lisp:null))
   (package-arn common-lisp:nil :type
    (common-lisp:or node-package-arn common-lisp:null))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null))
   (package-name (common-lisp:error ":package-name is required") :type
    (common-lisp:or node-package-name common-lisp:null))
   (package-version (common-lisp:error ":package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (patch-version (common-lisp:error ":patch-version is required") :type
    (common-lisp:or node-package-patch-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "PackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:deftype node-asset-name () 'common-lisp:string)
(common-lisp:deftype node-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (node-from-template-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-from-template-job-"))
   (created-time common-lisp:nil :type
    (common-lisp:or created-time common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (node-name common-lisp:nil :type
    (common-lisp:or node-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or node-from-template-job-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or node-from-template-job-status-message common-lisp:null))
   (template-type common-lisp:nil :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-from-template-job 'make-node-from-template-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-from-template-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-from-template-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-name))
      (common-lisp:list
       (common-lisp:cons "NodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-from-template-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-from-template-job-list ()
   '(trivial-types:proper-list node-from-template-job))
 (common-lisp:defun |make-node-from-template-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-from-template-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype node-from-template-job-status () 'common-lisp:string)
(common-lisp:deftype node-from-template-job-status-message ()
  'common-lisp:string)
(common-lisp:deftype node-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (node-input-port (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-input-port-"))
   (default-value common-lisp:nil :type
    (common-lisp:or port-default-value common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (max-connections common-lisp:nil :type
    (common-lisp:or max-connections common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or port-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or port-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node-input-port 'make-node-input-port))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-input-port))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-input-port))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "MaxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-input-port))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (node-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-instance-"))
   (current-status (common-lisp:error ":current-status is required") :type
    (common-lisp:or node-instance-status common-lisp:null))
   (node-id common-lisp:nil :type (common-lisp:or node-id common-lisp:null))
   (node-instance-id (common-lisp:error ":node-instance-id is required") :type
    (common-lisp:or node-instance-id common-lisp:null))
   (node-name common-lisp:nil :type
    (common-lisp:or node-name common-lisp:null))
   (package-name common-lisp:nil :type
    (common-lisp:or node-package-name common-lisp:null))
   (package-patch-version common-lisp:nil :type
    (common-lisp:or node-package-patch-version common-lisp:null))
   (package-version common-lisp:nil :type
    (common-lisp:or node-package-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node-instance 'make-node-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-status))
      (common-lisp:list
       (common-lisp:cons "CurrentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-instance-id))
      (common-lisp:list
       (common-lisp:cons "NodeInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-name))
      (common-lisp:list
       (common-lisp:cons "NodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-patch-version))
      (common-lisp:list
       (common-lisp:cons "PackagePatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-instance))
   common-lisp:nil))
(common-lisp:deftype node-instance-id () 'common-lisp:string)
(common-lisp:deftype node-instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype node-instances ()
   '(trivial-types:proper-list node-instance))
 (common-lisp:defun |make-node-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (node-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-interface-"))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or input-port-list common-lisp:null))
   (outputs (common-lisp:error ":outputs is required") :type
    (common-lisp:or output-port-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node-interface 'make-node-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-interface))
   common-lisp:nil))
(common-lisp:deftype node-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (node-output-port (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-output-port-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or port-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or port-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-output-port 'make-node-output-port))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-output-port))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-output-port))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-output-port))
   common-lisp:nil))
(common-lisp:deftype node-package-arn () 'common-lisp:string)
(common-lisp:deftype node-package-id () 'common-lisp:string)
(common-lisp:deftype node-package-name () 'common-lisp:string)
(common-lisp:deftype node-package-patch-version () 'common-lisp:string)
(common-lisp:deftype node-package-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (node-signal (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-signal-"))
   (node-instance-id (common-lisp:error ":node-instance-id is required") :type
    (common-lisp:or node-instance-id common-lisp:null))
   (signal (common-lisp:error ":signal is required") :type
    (common-lisp:or node-signal-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node-signal 'make-node-signal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-signal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-signal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-instance-id))
      (common-lisp:list
       (common-lisp:cons "NodeInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal))
      (common-lisp:list
       (common-lisp:cons "Signal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-signal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-signal-list ()
   '(trivial-types:proper-list node-signal))
 (common-lisp:defun |make-node-signal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-signal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype node-signal-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype nodes-list () '(trivial-types:proper-list node))
 (common-lisp:defun |make-nodes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ntp-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-ntp-payload-"))
   (ntp-servers (common-lisp:error ":ntp-servers is required") :type
    (common-lisp:or ntp-server-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ntp-payload 'make-ntp-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ntp-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ntp-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ntp-servers))
      (common-lisp:list
       (common-lisp:cons "NtpServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ntp-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ntp-server-list ()
   '(trivial-types:proper-list ip-address-or-server-name))
 (common-lisp:defun |make-ntp-server-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ip-address-or-server-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ntp-server-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ntp-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-ntp-status-"))
   (connection-status common-lisp:nil :type
    (common-lisp:or network-connection-status common-lisp:null))
   (ip-address common-lisp:nil :type
    (common-lisp:or ip-address common-lisp:null))
   (ntp-server-name common-lisp:nil :type
    (common-lisp:or ntp-server-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ntp-status 'make-ntp-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ntp-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ntp-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ntp-server-name))
      (common-lisp:list
       (common-lisp:cons "NtpServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ntp-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (otajob-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-otajob-config-"))
   (allow-major-version-update common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (image-version (common-lisp:error ":image-version is required") :type
    (common-lisp:or image-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'otajob-config 'make-otajob-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otajob-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otajob-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-update))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version))
      (common-lisp:list
       (common-lisp:cons "ImageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otajob-config))
   common-lisp:nil))
(common-lisp:deftype object () 'common-lisp:string)
(common-lisp:deftype object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (out-put-s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-out-put-s3location-"))
   (bucket-name (common-lisp:error ":bucket-name is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (object-key (common-lisp:error ":object-key is required") :type
    (common-lisp:or object-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'out-put-s3location 'make-out-put-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input out-put-s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input out-put-s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input out-put-s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-port-list ()
   '(trivial-types:proper-list node-output-port))
 (common-lisp:defun |make-output-port-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-output-port))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (package-import-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-import-job-"))
   (created-time common-lisp:nil :type
    (common-lisp:or created-time common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (job-type common-lisp:nil :type
    (common-lisp:or package-import-job-type common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or last-updated-time common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or package-import-job-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or package-import-job-status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-import-job 'make-package-import-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-import-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-import-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-import-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (package-import-job-input-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-import-job-input-config-"))
   (package-version-input-config common-lisp:nil :type
    (common-lisp:or package-version-input-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-import-job-input-config
                    'make-package-import-job-input-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-input-config))
      (common-lisp:list
       (common-lisp:cons "PackageVersionInputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-input-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-import-job-list ()
   '(trivial-types:proper-list package-import-job))
 (common-lisp:defun |make-package-import-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-import-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (package-import-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-import-job-output-"))
   (output-s3location (common-lisp:error ":output-s3location is required")
    :type (common-lisp:or out-put-s3location common-lisp:null))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null))
   (package-version (common-lisp:error ":package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (patch-version (common-lisp:error ":patch-version is required") :type
    (common-lisp:or node-package-patch-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-import-job-output
                    'make-package-import-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3location))
      (common-lisp:list
       (common-lisp:cons "OutputS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (package-import-job-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-import-job-output-config-"))
   (package-version-output-config common-lisp:nil :type
    (common-lisp:or package-version-output-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-import-job-output-config
                    'make-package-import-job-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-output-config))
      (common-lisp:list
       (common-lisp:cons "PackageVersionOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-import-job-output-config))
   common-lisp:nil))
(common-lisp:deftype package-import-job-status () 'common-lisp:string)
(common-lisp:deftype package-import-job-status-message () 'common-lisp:string)
(common-lisp:deftype package-import-job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype package-list ()
   '(trivial-types:proper-list package-list-item))
 (common-lisp:defun |make-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (package-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-list-item-"))
   (arn common-lisp:nil :type
    (common-lisp:or node-package-arn common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (package-id common-lisp:nil :type
    (common-lisp:or node-package-id common-lisp:null))
   (package-name common-lisp:nil :type
    (common-lisp:or node-package-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-list-item 'make-package-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (package-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-object-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-package-name common-lisp:null))
   (package-version (common-lisp:error ":package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (patch-version (common-lisp:error ":patch-version is required") :type
    (common-lisp:or node-package-patch-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'package-object 'make-package-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "PatchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-objects ()
   '(trivial-types:proper-list package-object))
 (common-lisp:defun |make-package-objects|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-object))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-owner-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (package-version-input-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-version-input-config-"))
   (s3location (common-lisp:error ":s3location is required") :type
    (common-lisp:or s3location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-version-input-config
                    'make-package-version-input-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "S3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-input-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (package-version-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-version-output-config-"))
   (mark-latest common-lisp:nil :type
    (common-lisp:or mark-latest-patch common-lisp:null))
   (package-name (common-lisp:error ":package-name is required") :type
    (common-lisp:or node-package-name common-lisp:null))
   (package-version (common-lisp:error ":package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-version-output-config
                    'make-package-version-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mark-latest))
      (common-lisp:list
       (common-lisp:cons "MarkLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-output-config))
   common-lisp:nil))
(common-lisp:deftype package-version-status () 'common-lisp:string)
(common-lisp:deftype package-version-status-description () 'common-lisp:string)
(common-lisp:deftype port-default-value () 'common-lisp:string)
(common-lisp:deftype port-name () 'common-lisp:string)
(common-lisp:deftype port-type () 'common-lisp:string)
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-arns-list ()
   '(trivial-types:proper-list principal-arn))
 (common-lisp:defun |make-principal-arns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provision-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-provision-device-request-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or device-name common-lisp:null))
   (networking-configuration common-lisp:nil :type
    (common-lisp:or network-payload common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provision-device-request 'make-provision-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'networking-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provision-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-provision-device-response-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or device-arn common-lisp:null))
   (certificates common-lisp:nil :type
    (common-lisp:or certificates common-lisp:null))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (iot-thing-name common-lisp:nil :type
    (common-lisp:or iot-thing-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or device-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provision-device-response
                    'make-provision-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-thing-name))
      (common-lisp:list
       (common-lisp:cons "IotThingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-device-response))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-package-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-package-version-request-"))
   (mark-latest common-lisp:nil :type
    (common-lisp:or mark-latest-patch common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or package-owner-account common-lisp:null))
   (package-id (common-lisp:error ":package-id is required") :type
    (common-lisp:or node-package-id common-lisp:null))
   (package-version (common-lisp:error ":package-version is required") :type
    (common-lisp:or node-package-version common-lisp:null))
   (patch-version (common-lisp:error ":patch-version is required") :type
    (common-lisp:or node-package-patch-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-package-version-request
                    'make-register-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mark-latest))
      (common-lisp:list
       (common-lisp:cons "MarkLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-package-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-package-version-response-")))
 (common-lisp:export
  (common-lisp:list 'register-package-version-response
                    'make-register-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-application-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-application-instance-request-"))
   (application-instance-id
    (common-lisp:error ":application-instance-id is required") :type
    (common-lisp:or application-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-application-instance-request
                    'make-remove-application-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-application-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-application-instance-response-")))
 (common-lisp:export
  (common-lisp:list 'remove-application-instance-response
                    'make-remove-application-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-application-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reported-runtime-context-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-reported-runtime-context-state-"))
   (desired-state (common-lisp:error ":desired-state is required") :type
    (common-lisp:or desired-state common-lisp:null))
   (device-reported-status
    (common-lisp:error ":device-reported-status is required") :type
    (common-lisp:or device-reported-status common-lisp:null))
   (device-reported-time
    (common-lisp:error ":device-reported-time is required") :type
    (common-lisp:or time-stamp common-lisp:null))
   (runtime-context-name
    (common-lisp:error ":runtime-context-name is required") :type
    (common-lisp:or runtime-context-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reported-runtime-context-state
                    'make-reported-runtime-context-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reported-runtime-context-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reported-runtime-context-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-reported-status))
      (common-lisp:list
       (common-lisp:cons "DeviceReportedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-reported-time))
      (common-lisp:list
       (common-lisp:cons "DeviceReportedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-context-name))
      (common-lisp:list
       (common-lisp:cons "RuntimeContextName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reported-runtime-context-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reported-runtime-context-states ()
   '(trivial-types:proper-list reported-runtime-context-state))
 (common-lisp:defun |make-reported-runtime-context-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reported-runtime-context-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (panorama-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype runtime-context-name () 'common-lisp:string)
(common-lisp:deftype runtime-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket-name (common-lisp:error ":bucket-name is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (object-key (common-lisp:error ":object-key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (panorama-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (signal-application-instance-node-instances-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-signal-application-instance-node-instances-request-"))
   (application-instance-id
    (common-lisp:error ":application-instance-id is required") :type
    (common-lisp:or application-instance-id common-lisp:null))
   (node-signals (common-lisp:error ":node-signals is required") :type
    (common-lisp:or node-signal-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signal-application-instance-node-instances-request
                    'make-signal-application-instance-node-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-signals))
      (common-lisp:list
       (common-lisp:cons "NodeSignals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (signal-application-instance-node-instances-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-signal-application-instance-node-instances-response-"))
   (application-instance-id
    (common-lisp:error ":application-instance-id is required") :type
    (common-lisp:or application-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signal-application-instance-node-instances-response
                    'make-signal-application-instance-node-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-instance-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-application-instance-node-instances-response))
   common-lisp:nil))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (static-ip-connection-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-static-ip-connection-info-"))
   (default-gateway (common-lisp:error ":default-gateway is required") :type
    (common-lisp:or default-gateway common-lisp:null))
   (dns (common-lisp:error ":dns is required") :type
    (common-lisp:or dns-list common-lisp:null))
   (ip-address (common-lisp:error ":ip-address is required") :type
    (common-lisp:or ip-address common-lisp:null))
   (mask (common-lisp:error ":mask is required") :type
    (common-lisp:or mask common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'static-ip-connection-info
                    'make-static-ip-connection-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-ip-connection-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-ip-connection-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-gateway))
      (common-lisp:list
       (common-lisp:cons "DefaultGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns))
      (common-lisp:list
       (common-lisp:cons "Dns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mask))
      (common-lisp:list
       (common-lisp:cons "Mask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-ip-connection-info))
   common-lisp:nil))
(common-lisp:deftype status-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (storage-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-location-"))
   (binary-prefix-location
    (common-lisp:error ":binary-prefix-location is required") :type
    (common-lisp:or object common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket common-lisp:null))
   (generated-prefix-location
    (common-lisp:error ":generated-prefix-location is required") :type
    (common-lisp:or object common-lisp:null))
   (manifest-prefix-location
    (common-lisp:error ":manifest-prefix-location is required") :type
    (common-lisp:or object common-lisp:null))
   (repo-prefix-location
    (common-lisp:error ":repo-prefix-location is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-location 'make-storage-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'binary-prefix-location))
      (common-lisp:list
       (common-lisp:cons "BinaryPrefixLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-prefix-location))
      (common-lisp:list
       (common-lisp:cons "GeneratedPrefixLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-prefix-location))
      (common-lisp:list
       (common-lisp:cons "ManifestPrefixLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repo-prefix-location))
      (common-lisp:list
       (common-lisp:cons "RepoPrefixLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-location))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype template-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype template-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-template-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype template-type () 'common-lisp:string)
(common-lisp:deftype template-value () 'common-lisp:string)
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-created-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-device-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-device-metadata-request-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or device-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-device-metadata-request
                    'make-update-device-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-device-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-device-metadata-response-"))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-device-metadata-response
                    'make-update-device-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-metadata-response))
   common-lisp:nil))
(common-lisp:deftype update-progress () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (panorama-error)
     ((error-arguments :initarg :error-arguments :initform common-lisp:nil
       :reader validation-exception-error-arguments)
      (error-id :initarg :error-id :initform common-lisp:nil :reader
       validation-exception-error-id)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-error-arguments
                    'validation-exception-error-id 'validation-exception-fields
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-error-argument (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-error-argument-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-error-argument
                    'make-validation-exception-error-argument))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-error-argument))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-error-argument))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-error-argument))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-error-argument-list ()
   '(trivial-types:proper-list validation-exception-error-argument))
 (common-lisp:defun |make-validation-exception-error-argument-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-error-argument))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-application-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id-to-replace
                     default-runtime-context-device description
                     manifest-overrides-payload manifest-payload name
                     runtime-role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable application-instance-id-to-replace
     default-runtime-context-device description manifest-overrides-payload
     manifest-payload name runtime-role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-application-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/application-instances"
                                                        "CreateApplicationInstance"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application-instance))
(common-lisp:progn
 (common-lisp:defun create-job-for-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-ids device-job-config job-type)
   (common-lisp:declare
    (common-lisp:ignorable device-ids device-job-config job-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-for-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/jobs"
                                                        "CreateJobForDevices"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job-for-devices))
(common-lisp:progn
 (common-lisp:defun create-node-from-template-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-tags node-description node-name
                     output-package-name output-package-version
                     template-parameters template-type)
   (common-lisp:declare
    (common-lisp:ignorable job-tags node-description node-name
     output-package-name output-package-version template-parameters
     template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-node-from-template-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/packages/template-job"
                                                        "CreateNodeFromTemplateJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-node-from-template-job))
(common-lisp:progn
 (common-lisp:defun create-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name tags)
   (common-lisp:declare (common-lisp:ignorable package-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/packages"
                                                        "CreatePackage"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-package))
(common-lisp:progn
 (common-lisp:defun create-package-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token input-config job-tags
                     job-type output-config)
   (common-lisp:declare
    (common-lisp:ignorable client-token input-config job-tags job-type
     output-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-package-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/packages/import-jobs"
                                                        "CreatePackageImportJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-package-import-job))
(common-lisp:progn
 (common-lisp:defun delete-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id)
   (common-lisp:declare (common-lisp:ignorable device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "DeleteDevice"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-device))
(common-lisp:progn
 (common-lisp:defun delete-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force-delete package-id)
   (common-lisp:declare (common-lisp:ignorable force-delete package-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "DeletePackage"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-package))
(common-lisp:progn
 (common-lisp:defun deregister-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner-account package-id package-version
                     patch-version updated-latest-patch-version)
   (common-lisp:declare
    (common-lisp:ignorable owner-account package-id package-version
     patch-version updated-latest-patch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-package-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A/patch/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'patch-version))))
                                                        "DeregisterPackageVersion"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-package-version))
(common-lisp:progn
 (common-lisp:defun describe-application-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id)
   (common-lisp:declare (common-lisp:ignorable application-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-application-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "DescribeApplicationInstance"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application-instance))
(common-lisp:progn
 (common-lisp:defun describe-application-instance-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id)
   (common-lisp:declare (common-lisp:ignorable application-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-application-instance-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "DescribeApplicationInstanceDetails"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application-instance-details))
(common-lisp:progn
 (common-lisp:defun describe-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id)
   (common-lisp:declare (common-lisp:ignorable device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "DescribeDevice"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-device))
(common-lisp:progn
 (common-lisp:defun describe-device-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-device-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeDeviceJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-device-job))
(common-lisp:progn
 (common-lisp:defun describe-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key node-id owner-account)
   (common-lisp:declare (common-lisp:ignorable node-id owner-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-node-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/nodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'node-id))))
                                                        "DescribeNode"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-node))
(common-lisp:progn
 (common-lisp:defun describe-node-from-template-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-node-from-template-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/template-job/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeNodeFromTemplateJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-node-from-template-job))
(common-lisp:progn
 (common-lisp:defun describe-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id)
   (common-lisp:declare (common-lisp:ignorable package-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/metadata/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "DescribePackage"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package))
(common-lisp:progn
 (common-lisp:defun describe-package-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-package-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/import-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribePackageImportJob"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package-import-job))
(common-lisp:progn
 (common-lisp:defun describe-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner-account package-id package-version
                     patch-version)
   (common-lisp:declare
    (common-lisp:ignorable owner-account package-id package-version
     patch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/metadata/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-version))))
                                                        "DescribePackageVersion"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package-version))
(common-lisp:progn
 (common-lisp:defun list-application-instance-dependencies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-instance-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-instance-dependencies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A/package-dependencies"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "ListApplicationInstanceDependencies"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-instance-dependencies))
(common-lisp:progn
 (common-lisp:defun list-application-instance-node-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-instance-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-instance-node-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A/node-instances"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "ListApplicationInstanceNodeInstances"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-instance-node-instances))
(common-lisp:progn
 (common-lisp:defun list-application-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id max-results next-token
                     status-filter)
   (common-lisp:declare
    (common-lisp:ignorable device-id max-results next-token status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/application-instances"
                                                        "ListApplicationInstances"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-instances))
(common-lisp:progn
 (common-lisp:defun list-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-aggregated-status-filter
                     max-results name-filter next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable device-aggregated-status-filter max-results
     name-filter next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/devices"
                                                        "ListDevices"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-devices))
(common-lisp:progn
 (common-lisp:defun list-devices-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable device-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-devices-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/jobs"
                                                        "ListDevicesJobs"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-devices-jobs))
(common-lisp:progn
 (common-lisp:defun list-node-from-template-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-node-from-template-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/packages/template-job"
                                                        "ListNodeFromTemplateJobs"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-node-from-template-jobs))
(common-lisp:progn
 (common-lisp:defun list-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category max-results next-token
                     owner-account package-name package-version patch-version)
   (common-lisp:declare
    (common-lisp:ignorable category max-results next-token owner-account
     package-name package-version patch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-nodes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/nodes" "ListNodes"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-nodes))
(common-lisp:progn
 (common-lisp:defun list-package-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-package-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/packages/import-jobs"
                                                        "ListPackageImportJobs"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-package-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/packages"
                                                        "ListPackages"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-packages))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun provision-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name networking-configuration
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable description name networking-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-provision-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/devices"
                                                        "ProvisionDevice"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'provision-device))
(common-lisp:progn
 (common-lisp:defun register-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mark-latest owner-account package-id
                     package-version patch-version)
   (common-lisp:declare
    (common-lisp:ignorable mark-latest owner-account package-id package-version
     patch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A/patch/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'patch-version))))
                                                        "RegisterPackageVersion"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-package-version))
(common-lisp:progn
 (common-lisp:defun remove-application-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id)
   (common-lisp:declare (common-lisp:ignorable application-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-application-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "RemoveApplicationInstance"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-application-instance))
(common-lisp:progn
 (common-lisp:defun signal-application-instance-node-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-instance-id node-signals)
   (common-lisp:declare
    (common-lisp:ignorable application-instance-id node-signals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-signal-application-instance-node-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/application-instances/~A/node-signals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-instance-id))))
                                                        "SignalApplicationInstanceNodeInstances"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'signal-application-instance-node-instances))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-device-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description device-id)
   (common-lisp:declare (common-lisp:ignorable description device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-device-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'panorama-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "UpdateDeviceMetadata"
                                                        "2019-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-device-metadata))
