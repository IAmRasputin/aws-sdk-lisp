;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/dax/api
  (:use)
  (:nicknames #:aws/dax)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/dax/api)
(common-lisp:progn
 (common-lisp:define-condition dax-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'dax-error))
(common-lisp:progn
 (common-lisp:defclass dax-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "dax" :api-version
                        "2017-04-19" :host-prefix "dax" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AmazonDAXV3" :json-version "1.1"))
 (common-lisp:export 'dax-request))
(common-lisp:defvar *error-map*
  '(("ClusterAlreadyExistsFault" . cluster-already-exists-fault)
    ("ClusterNotFoundFault" . cluster-not-found-fault)
    ("ClusterQuotaForCustomerExceededFault"
     . cluster-quota-for-customer-exceeded-fault)
    ("InsufficientClusterCapacityFault" . insufficient-cluster-capacity-fault)
    ("InvalidARNFault" . invalid-arnfault)
    ("InvalidClusterStateFault" . invalid-cluster-state-fault)
    ("InvalidParameterCombinationException"
     . invalid-parameter-combination-exception)
    ("InvalidParameterGroupStateFault" . invalid-parameter-group-state-fault)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("NodeNotFoundFault" . node-not-found-fault)
    ("NodeQuotaForClusterExceededFault"
     . node-quota-for-cluster-exceeded-fault)
    ("NodeQuotaForCustomerExceededFault"
     . node-quota-for-customer-exceeded-fault)
    ("ParameterGroupAlreadyExistsFault" . parameter-group-already-exists-fault)
    ("ParameterGroupNotFoundFault" . parameter-group-not-found-fault)
    ("ParameterGroupQuotaExceededFault" . parameter-group-quota-exceeded-fault)
    ("ServiceLinkedRoleNotFoundFault" . service-linked-role-not-found-fault)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("SubnetGroupAlreadyExistsFault" . subnet-group-already-exists-fault)
    ("SubnetGroupInUseFault" . subnet-group-in-use-fault)
    ("SubnetGroupNotFoundFault" . subnet-group-not-found-fault)
    ("SubnetGroupQuotaExceededFault" . subnet-group-quota-exceeded-fault)
    ("SubnetInUse" . subnet-in-use)
    ("SubnetQuotaExceededFault" . subnet-quota-exceeded-fault)
    ("TagNotFoundFault" . tag-not-found-fault)
    ("TagQuotaPerResourceExceeded" . tag-quota-per-resource-exceeded)))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-availability-zone-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-query-error-message () 'common-lisp:string)
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cluster (:copier common-lisp:nil) (:conc-name "struct-shape-cluster-"))
   (cluster-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (total-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (active-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-discovery-endpoint common-lisp:nil :type
    (common-lisp:or endpoint common-lisp:null))
   (node-ids-to-remove common-lisp:nil :type
    (common-lisp:or node-identifier-list common-lisp:null))
   (nodes common-lisp:nil :type (common-lisp:or node-list common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (notification-configuration common-lisp:nil :type
    (common-lisp:or notification-configuration common-lisp:null))
   (subnet-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-membership-list common-lisp:null))
   (iam-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-group common-lisp:nil :type
    (common-lisp:or parameter-group-status common-lisp:null))
   (ssedescription common-lisp:nil :type
    (common-lisp:or ssedescription common-lisp:null))
   (cluster-endpoint-encryption-type common-lisp:nil :type
    (common-lisp:or cluster-endpoint-encryption-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-nodes))
      (common-lisp:list
       (common-lisp:cons "TotalNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-nodes))
      (common-lisp:list
       (common-lisp:cons "ActiveNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-discovery-endpoint))
      (common-lisp:list
       (common-lisp:cons "ClusterDiscoveryEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "NodeIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "Nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group))
      (common-lisp:list
       (common-lisp:cons "SubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssedescription))
      (common-lisp:list
       (common-lisp:cons "SSEDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-endpoint-encryption-type))
      (common-lisp:list
       (common-lisp:cons "ClusterEndpointEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-already-exists-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-already-exists-fault)))
(common-lisp:deftype cluster-endpoint-encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-list () '(trivial-types:proper-list cluster))
 (common-lisp:defun make-cluster-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cluster-name-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-cluster-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-quota-for-customer-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-request-"))
   (cluster-name (common-lisp:error ":cluster-name is required") :type
    (common-lisp:or string common-lisp:null))
   (node-type (common-lisp:error ":node-type is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (replication-factor (common-lisp:error ":replication-factor is required")
    :type (common-lisp:or integer common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zone-list common-lisp:null))
   (subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-identifier-list common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (notification-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iam-role-arn (common-lisp:error ":iam-role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (ssespecification common-lisp:nil :type
    (common-lisp:or ssespecification common-lisp:null))
   (cluster-endpoint-encryption-type common-lisp:nil :type
    (common-lisp:or cluster-endpoint-encryption-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-factor))
      (common-lisp:list
       (common-lisp:cons "ReplicationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssespecification))
      (common-lisp:list
       (common-lisp:cons "SSESpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-endpoint-encryption-type))
      (common-lisp:list
       (common-lisp:cons "ClusterEndpointEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-parameter-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-parameter-group-request-"))
   (parameter-group-name
    (common-lisp:error ":parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-parameter-group-request
                    'make-create-parameter-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-parameter-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-parameter-group-response-"))
   (parameter-group common-lisp:nil :type
    (common-lisp:or parameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-parameter-group-response
                    'make-create-parameter-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subnet-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subnet-group-request-"))
   (subnet-group-name (common-lisp:error ":subnet-group-name is required")
    :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subnet-group-request
                    'make-create-subnet-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subnet-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subnet-group-response-"))
   (subnet-group common-lisp:nil :type
    (common-lisp:or subnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subnet-group-response
                    'make-create-subnet-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group))
      (common-lisp:list
       (common-lisp:cons "SubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decrease-replication-factor-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-decrease-replication-factor-request-"))
   (cluster-name (common-lisp:error ":cluster-name is required") :type
    (common-lisp:or string common-lisp:null))
   (new-replication-factor
    (common-lisp:error ":new-replication-factor is required") :type
    (common-lisp:or integer common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zone-list common-lisp:null))
   (node-ids-to-remove common-lisp:nil :type
    (common-lisp:or node-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrease-replication-factor-request
                    'make-decrease-replication-factor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-replication-factor))
      (common-lisp:list
       (common-lisp:cons "NewReplicationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "NodeIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decrease-replication-factor-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-decrease-replication-factor-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrease-replication-factor-response
                    'make-decrease-replication-factor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-request-"))
   (cluster-name (common-lisp:error ":cluster-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-parameter-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-parameter-group-request-"))
   (parameter-group-name
    (common-lisp:error ":parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-parameter-group-request
                    'make-delete-parameter-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-parameter-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-parameter-group-response-"))
   (deletion-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-parameter-group-response
                    'make-delete-parameter-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-message))
      (common-lisp:list
       (common-lisp:cons "DeletionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subnet-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subnet-group-request-"))
   (subnet-group-name (common-lisp:error ":subnet-group-name is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subnet-group-request
                    'make-delete-subnet-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subnet-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subnet-group-response-"))
   (deletion-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subnet-group-response
                    'make-delete-subnet-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-message))
      (common-lisp:list
       (common-lisp:cons "DeletionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-clusters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-clusters-request-"))
   (cluster-names common-lisp:nil :type
    (common-lisp:or cluster-name-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-request
                    'make-describe-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-names))
      (common-lisp:list
       (common-lisp:cons "ClusterNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-clusters-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-clusters-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (clusters common-lisp:nil :type
    (common-lisp:or cluster-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-response
                    'make-describe-clusters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "Clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-default-parameters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-default-parameters-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-default-parameters-request
                    'make-describe-default-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-default-parameters-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-default-parameters-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-default-parameters-response
                    'make-describe-default-parameters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-events-request-"))
   (source-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-events-request 'make-describe-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-events-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type (common-lisp:or event-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-events-response 'make-describe-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-parameter-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-parameter-groups-request-"))
   (parameter-group-names common-lisp:nil :type
    (common-lisp:or parameter-group-name-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-parameter-groups-request
                    'make-describe-parameter-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-names))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-parameter-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-parameter-groups-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameter-groups common-lisp:nil :type
    (common-lisp:or parameter-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-parameter-groups-response
                    'make-describe-parameter-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-groups))
      (common-lisp:list
       (common-lisp:cons "ParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-parameters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-parameters-request-"))
   (parameter-group-name
    (common-lisp:error ":parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-parameters-request
                    'make-describe-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-parameters-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-parameters-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-parameters-response
                    'make-describe-parameters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subnet-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-subnet-groups-request-"))
   (subnet-group-names common-lisp:nil :type
    (common-lisp:or subnet-group-name-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subnet-groups-request
                    'make-describe-subnet-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-names))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subnet-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-subnet-groups-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-groups common-lisp:nil :type
    (common-lisp:or subnet-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subnet-groups-response
                    'make-describe-subnet-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-groups))
      (common-lisp:list
       (common-lisp:cons "SubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint (:copier common-lisp:nil) (:conc-name "struct-shape-endpoint-"))
   (address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "URL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (source-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (date common-lisp:nil :type (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun make-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (increase-replication-factor-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-increase-replication-factor-request-"))
   (cluster-name (common-lisp:error ":cluster-name is required") :type
    (common-lisp:or string common-lisp:null))
   (new-replication-factor
    (common-lisp:error ":new-replication-factor is required") :type
    (common-lisp:or integer common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zone-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'increase-replication-factor-request
                    'make-increase-replication-factor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-replication-factor))
      (common-lisp:list
       (common-lisp:cons "NewReplicationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (increase-replication-factor-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-increase-replication-factor-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'increase-replication-factor-response
                    'make-increase-replication-factor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition insufficient-cluster-capacity-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-cluster-capacity-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-arnfault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-arnfault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-state-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-combination-exception
     (dax-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-combination-exception
                    'invalid-parameter-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-group-state-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (dax-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:deftype is-modifiable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-request-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (node (:copier common-lisp:nil) (:conc-name "struct-shape-node-"))
   (node-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or endpoint common-lisp:null))
   (node-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameter-group-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-create-time))
      (common-lisp:list
       (common-lisp:cons "NodeCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-status))
      (common-lisp:list
       (common-lisp:cons "NodeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-node-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-list () '(trivial-types:proper-list node))
 (common-lisp:defun make-node-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition node-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'node-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-cluster-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'node-quota-for-cluster-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-customer-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'node-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (node-type-specific-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-type-specific-value-"))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-type-specific-value 'make-node-type-specific-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-type-specific-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-type-specific-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-type-specific-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-type-specific-value-list ()
   '(trivial-types:proper-list node-type-specific-value))
 (common-lisp:defun make-node-type-specific-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-type-specific-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (notification-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-configuration-"))
   (topic-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (topic-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-status))
      (common-lisp:list
       (common-lisp:cons "TopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-type common-lisp:nil :type
    (common-lisp:or parameter-type common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type-specific-values common-lisp:nil :type
    (common-lisp:or node-type-specific-value-list common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allowed-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-modifiable common-lisp:nil :type
    (common-lisp:or is-modifiable common-lisp:null))
   (change-type common-lisp:nil :type
    (common-lisp:or change-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-type))
      (common-lisp:list
       (common-lisp:cons "ParameterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-type-specific-values))
      (common-lisp:list
       (common-lisp:cons "NodeTypeSpecificValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-group-"))
   (parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter-group 'make-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition parameter-group-already-exists-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype parameter-group-list ()
   '(trivial-types:proper-list parameter-group))
 (common-lisp:defun make-parameter-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parameter-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-parameter-group-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition parameter-group-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition parameter-group-quota-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-group-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-group-status-"))
   (parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-ids-to-reboot common-lisp:nil :type
    (common-lisp:or node-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-group-status 'make-parameter-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids-to-reboot))
      (common-lisp:list
       (common-lisp:cons "NodeIdsToReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-list () '(trivial-types:proper-list parameter))
 (common-lisp:defun make-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-name-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-name-value-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-name-value 'make-parameter-name-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-name-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-name-value-list ()
   '(trivial-types:proper-list parameter-name-value))
 (common-lisp:defun make-parameter-name-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-name-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parameter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-node-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-node-request-"))
   (cluster-name (common-lisp:error ":cluster-name is required") :type
    (common-lisp:or string common-lisp:null))
   (node-id (common-lisp:error ":node-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-node-request 'make-reboot-node-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot-node-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot-node-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot-node-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-node-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-node-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-node-response 'make-reboot-node-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot-node-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot-node-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot-node-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ssedescription (:copier common-lisp:nil)
      (:conc-name "struct-shape-ssedescription-"))
   (status common-lisp:nil :type (common-lisp:or ssestatus common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ssedescription 'make-ssedescription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssedescription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssedescription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssedescription))
   common-lisp:nil))
(common-lisp:deftype sseenabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (ssespecification (:copier common-lisp:nil)
      (:conc-name "struct-shape-ssespecification-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or sseenabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ssespecification 'make-ssespecification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssespecification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssespecification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssespecification))
   common-lisp:nil))
(common-lisp:deftype ssestatus () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-security-group-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (security-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-group-membership-"))
   (security-group-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-group-membership
                    'make-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-membership-list ()
   '(trivial-types:proper-list security-group-membership))
 (common-lisp:defun make-security-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-linked-role-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-linked-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-quota-exceeded-exception)))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subnet (:copier common-lisp:nil) (:conc-name "struct-shape-subnet-"))
   (subnet-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subnet-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-subnet-group-"))
   (subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or subnet-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subnet-group 'make-subnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-already-exists-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-in-use-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-in-use-fault)))
(common-lisp:progn
 (common-lisp:deftype subnet-group-list ()
   '(trivial-types:proper-list subnet-group))
 (common-lisp:defun make-subnet-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-subnet-group-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-quota-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-subnet-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-in-use
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun make-subnet-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-quota-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-quota-exceeded-fault)))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition tag-quota-per-resource-exceeded
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-quota-per-resource-exceeded)))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-request-"))
   (cluster-name (common-lisp:error ":cluster-name is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (notification-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (notification-topic-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-request 'make-update-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-status))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-response 'make-update-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-parameter-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-parameter-group-request-"))
   (parameter-group-name
    (common-lisp:error ":parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (parameter-name-values
    (common-lisp:error ":parameter-name-values is required") :type
    (common-lisp:or parameter-name-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-parameter-group-request
                    'make-update-parameter-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-name-values))
      (common-lisp:list
       (common-lisp:cons "ParameterNameValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-parameter-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-parameter-group-response-"))
   (parameter-group common-lisp:nil :type
    (common-lisp:or parameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-parameter-group-response
                    'make-update-parameter-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subnet-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subnet-group-request-"))
   (subnet-group-name (common-lisp:error ":subnet-group-name is required")
    :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subnet-group-request
                    'make-update-subnet-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subnet-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subnet-group-response-"))
   (subnet-group common-lisp:nil :type
    (common-lisp:or subnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subnet-group-response
                    'make-update-subnet-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group))
      (common-lisp:list
       (common-lisp:cons "SubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name node-type description
                     replication-factor availability-zones subnet-group-name
                     security-group-ids preferred-maintenance-window
                     notification-topic-arn iam-role-arn parameter-group-name
                     tags ssespecification cluster-endpoint-encryption-type)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name node-type description
     replication-factor availability-zones subnet-group-name security-group-ids
     preferred-maintenance-window notification-topic-arn iam-role-arn
     parameter-group-name tags ssespecification
     cluster-endpoint-encryption-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCluster"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name description)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateParameterGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable subnet-group-name description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subnet-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSubnetGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subnet-group))
(common-lisp:progn
 (common-lisp:defun decrease-replication-factor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name new-replication-factor
                     availability-zones node-ids-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name new-replication-factor
     availability-zones node-ids-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-decrease-replication-factor-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DecreaseReplicationFactor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'decrease-replication-factor))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCluster"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteParameterGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name)
   (common-lisp:declare (common-lisp:ignorable subnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subnet-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSubnetGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subnet-group))
(common-lisp:progn
 (common-lisp:defun describe-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-names max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-names max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusters"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-clusters))
(common-lisp:progn
 (common-lisp:defun describe-default-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-default-parameters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDefaultParameters"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-default-parameters))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-name source-type start-time
                     end-time duration max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable source-name source-type start-time end-time duration
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEvents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-names max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-names max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-parameter-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeParameterGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name source max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name source max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-parameters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeParameters"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-parameters))
(common-lisp:progn
 (common-lisp:defun describe-subnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-names max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable subnet-group-names max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-subnet-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSubnetGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-subnet-groups))
(common-lisp:progn
 (common-lisp:defun increase-replication-factor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name new-replication-factor
                     availability-zones)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name new-replication-factor
     availability-zones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-increase-replication-factor-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "IncreaseReplicationFactor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'increase-replication-factor))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name next-token)
   (common-lisp:declare (common-lisp:ignorable resource-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun reboot-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name node-id)
   (common-lisp:declare (common-lisp:ignorable cluster-name node-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-node-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootNode"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reboot-node))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name description
                     preferred-maintenance-window notification-topic-arn
                     notification-topic-status parameter-group-name
                     security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name description
     preferred-maintenance-window notification-topic-arn
     notification-topic-status parameter-group-name security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCluster"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster))
(common-lisp:progn
 (common-lisp:defun update-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name
                     parameter-name-values)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name parameter-name-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateParameterGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-parameter-group))
(common-lisp:progn
 (common-lisp:defun update-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable subnet-group-name description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-subnet-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSubnetGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subnet-group))
