;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/dax/api
  (:use)
  (:nicknames #:aws/dax)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/dax/api)
(common-lisp:progn
 (common-lisp:defclass dax-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "dax" :protocol :json))
 (common-lisp:export 'dax-request))
(common-lisp:progn
 (common-lisp:define-condition dax-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'dax-error))
(common-lisp:defvar *error-map*
  '(("ClusterAlreadyExistsFault" . cluster-already-exists-fault)
    ("ClusterNotFoundFault" . cluster-not-found-fault)
    ("ClusterQuotaForCustomerExceededFault"
     . cluster-quota-for-customer-exceeded-fault)
    ("InsufficientClusterCapacityFault" . insufficient-cluster-capacity-fault)
    ("InvalidARNFault" . invalid-arnfault)
    ("InvalidClusterStateFault" . invalid-cluster-state-fault)
    ("InvalidParameterCombinationException"
     . invalid-parameter-combination-exception)
    ("InvalidParameterGroupStateFault" . invalid-parameter-group-state-fault)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("NodeNotFoundFault" . node-not-found-fault)
    ("NodeQuotaForClusterExceededFault"
     . node-quota-for-cluster-exceeded-fault)
    ("NodeQuotaForCustomerExceededFault"
     . node-quota-for-customer-exceeded-fault)
    ("ParameterGroupAlreadyExistsFault" . parameter-group-already-exists-fault)
    ("ParameterGroupNotFoundFault" . parameter-group-not-found-fault)
    ("ParameterGroupQuotaExceededFault" . parameter-group-quota-exceeded-fault)
    ("ServiceLinkedRoleNotFoundFault" . service-linked-role-not-found-fault)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("SubnetGroupAlreadyExistsFault" . subnet-group-already-exists-fault)
    ("SubnetGroupInUseFault" . subnet-group-in-use-fault)
    ("SubnetGroupNotFoundFault" . subnet-group-not-found-fault)
    ("SubnetGroupQuotaExceededFault" . subnet-group-quota-exceeded-fault)
    ("SubnetInUse" . subnet-in-use)
    ("SubnetQuotaExceededFault" . subnet-quota-exceeded-fault)
    ("TagNotFoundFault" . tag-not-found-fault)
    ("TagQuotaPerResourceExceeded" . tag-quota-per-resource-exceeded)))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-availability-zone-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-query-error-message () 'common-lisp:string)
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((cluster-endpoint-encryption-type :initarg
                         :cluster-endpoint-encryption-type :type
                         (common-lisp:or cluster-endpoint-encryption-type
                                         common-lisp:null)
                         :accessor %cluster-cluster-endpoint-encryption-type
                         :initform common-lisp:nil)
                        (ssedescription :initarg :ssedescription :type
                         (common-lisp:or ssedescription common-lisp:null)
                         :accessor %cluster-ssedescription :initform
                         common-lisp:nil)
                        (parameter-group :initarg :parameter-group :type
                         (common-lisp:or parameter-group-status
                                         common-lisp:null)
                         :accessor %cluster-parameter-group :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-iam-role-arn :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-group-membership-list
                                         common-lisp:null)
                         :accessor %cluster-security-groups :initform
                         common-lisp:nil)
                        (subnet-group :initarg :subnet-group :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-subnet-group :initform common-lisp:nil)
                        (notification-configuration :initarg
                         :notification-configuration :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor %cluster-notification-configuration
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-preferred-maintenance-window :initform
                         common-lisp:nil)
                        (nodes :initarg :nodes :type
                         (common-lisp:or node-list common-lisp:null) :accessor
                         %cluster-nodes :initform common-lisp:nil)
                        (node-ids-to-remove :initarg :node-ids-to-remove :type
                         (common-lisp:or node-identifier-list common-lisp:null)
                         :accessor %cluster-node-ids-to-remove :initform
                         common-lisp:nil)
                        (cluster-discovery-endpoint :initarg
                         :cluster-discovery-endpoint :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         %cluster-cluster-discovery-endpoint :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-status :initform common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-node-type :initform common-lisp:nil)
                        (active-nodes :initarg :active-nodes :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %cluster-active-nodes :initform
                         common-lisp:nil)
                        (total-nodes :initarg :total-nodes :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %cluster-total-nodes :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-cluster-arn :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-description :initform common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-cluster-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defun make-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-endpoint-encryption-type
                     ssedescription parameter-group iam-role-arn
                     security-groups subnet-group notification-configuration
                     preferred-maintenance-window nodes node-ids-to-remove
                     cluster-discovery-endpoint status node-type active-nodes
                     total-nodes cluster-arn description cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-nodes))
      (common-lisp:list
       (common-lisp:cons "TotalNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-nodes))
      (common-lisp:list
       (common-lisp:cons "ActiveNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-discovery-endpoint))
      (common-lisp:list
       (common-lisp:cons "ClusterDiscoveryEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "NodeIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "Nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group))
      (common-lisp:list
       (common-lisp:cons "SubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssedescription))
      (common-lisp:list
       (common-lisp:cons "SSEDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-endpoint-encryption-type))
      (common-lisp:list
       (common-lisp:cons "ClusterEndpointEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-already-exists-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-already-exists-fault)))
(common-lisp:deftype cluster-endpoint-encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-list () '(trivial-types:proper-list cluster))
 (common-lisp:defun |make-cluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cluster-name-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-cluster-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-quota-for-customer-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((cluster-endpoint-encryption-type :initarg
                         :cluster-endpoint-encryption-type :type
                         (common-lisp:or cluster-endpoint-encryption-type
                                         common-lisp:null)
                         :accessor
                         %create-cluster-request-cluster-endpoint-encryption-type
                         :initform common-lisp:nil)
                        (ssespecification :initarg :ssespecification :type
                         (common-lisp:or ssespecification common-lisp:null)
                         :accessor %create-cluster-request-ssespecification
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-cluster-request-tags :initform
                         common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %create-cluster-request-parameter-group-name
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-iam-role-arn :initform
                         (common-lisp:error ":iam-role-arn is required"))
                        (notification-topic-arn :initarg
                         :notification-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-notification-topic-arn
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-identifier-list
                                         common-lisp:null)
                         :accessor %create-cluster-request-security-group-ids
                         :initform common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-subnet-group-name :initform
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor %create-cluster-request-availability-zones
                         :initform common-lisp:nil)
                        (replication-factor :initarg :replication-factor :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %create-cluster-request-replication-factor :initform
                         (common-lisp:error ":replication-factor is required"))
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-description :initform
                         common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-node-type :initform
                         (common-lisp:error ":node-type is required"))
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-cluster-name :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defun make-create-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-endpoint-encryption-type
                     ssespecification tags parameter-group-name iam-role-arn
                     notification-topic-arn preferred-maintenance-window
                     security-group-ids subnet-group-name availability-zones
                     replication-factor description node-type cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-factor))
      (common-lisp:list
       (common-lisp:cons "ReplicationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssespecification))
      (common-lisp:list
       (common-lisp:cons "SSESpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-endpoint-encryption-type))
      (common-lisp:list
       (common-lisp:cons "ClusterEndpointEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %create-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defun make-create-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-parameter-group-request common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-parameter-group-request-description :initform
                         common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-parameter-group-request-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-parameter-group-request
                    'make-create-parameter-group-request))
 (common-lisp:defun make-create-parameter-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-parameter-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-parameter-group-response common-lisp:nil
                       ((parameter-group :initarg :parameter-group :type
                         (common-lisp:or parameter-group common-lisp:null)
                         :accessor
                         %create-parameter-group-response-parameter-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-parameter-group-response
                    'make-create-parameter-group-response))
 (common-lisp:defun make-create-parameter-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-parameter-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subnet-group-request common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor %create-subnet-group-request-subnet-ids
                         :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-subnet-group-request-description :initform
                         common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-subnet-group-request-subnet-group-name
                         :initform
                         (common-lisp:error
                          ":subnet-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-subnet-group-request
                    'make-create-subnet-group-request))
 (common-lisp:defun make-create-subnet-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids description subnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-subnet-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subnet-group-response common-lisp:nil
                       ((subnet-group :initarg :subnet-group :type
                         (common-lisp:or subnet-group common-lisp:null)
                         :accessor %create-subnet-group-response-subnet-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-subnet-group-response
                    'make-create-subnet-group-response))
 (common-lisp:defun make-create-subnet-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-group)
   (common-lisp:apply #'common-lisp:make-instance 'create-subnet-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group))
      (common-lisp:list
       (common-lisp:cons "SubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decrease-replication-factor-request common-lisp:nil
                       ((node-ids-to-remove :initarg :node-ids-to-remove :type
                         (common-lisp:or node-identifier-list common-lisp:null)
                         :accessor
                         %decrease-replication-factor-request-node-ids-to-remove
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor
                         %decrease-replication-factor-request-availability-zones
                         :initform common-lisp:nil)
                        (new-replication-factor :initarg
                         :new-replication-factor :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %decrease-replication-factor-request-new-replication-factor
                         :initform
                         (common-lisp:error
                          ":new-replication-factor is required"))
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %decrease-replication-factor-request-cluster-name
                         :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'decrease-replication-factor-request
                    'make-decrease-replication-factor-request))
 (common-lisp:defun make-decrease-replication-factor-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-ids-to-remove availability-zones
                     new-replication-factor cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'decrease-replication-factor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-replication-factor))
      (common-lisp:list
       (common-lisp:cons "NewReplicationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "NodeIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decrease-replication-factor-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %decrease-replication-factor-response-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'decrease-replication-factor-response
                    'make-decrease-replication-factor-response))
 (common-lisp:defun make-decrease-replication-factor-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'decrease-replication-factor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-replication-factor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-cluster-request-cluster-name :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defun make-delete-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %delete-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defun make-delete-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parameter-group-request common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-parameter-group-request-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-parameter-group-request
                    'make-delete-parameter-group-request))
 (common-lisp:defun make-delete-parameter-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-parameter-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parameter-group-response common-lisp:nil
                       ((deletion-message :initarg :deletion-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-parameter-group-response-deletion-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-parameter-group-response
                    'make-delete-parameter-group-response))
 (common-lisp:defun make-delete-parameter-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-message)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-parameter-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-message))
      (common-lisp:list
       (common-lisp:cons "DeletionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subnet-group-request common-lisp:nil
                       ((subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-subnet-group-request-subnet-group-name
                         :initform
                         (common-lisp:error
                          ":subnet-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-subnet-group-request
                    'make-delete-subnet-group-request))
 (common-lisp:defun make-delete-subnet-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-subnet-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subnet-group-response common-lisp:nil
                       ((deletion-message :initarg :deletion-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-subnet-group-response-deletion-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-subnet-group-response
                    'make-delete-subnet-group-response))
 (common-lisp:defun make-delete-subnet-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-message)
   (common-lisp:apply #'common-lisp:make-instance 'delete-subnet-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-message))
      (common-lisp:list
       (common-lisp:cons "DeletionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-clusters-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-clusters-request-max-results
                         :initform common-lisp:nil)
                        (cluster-names :initarg :cluster-names :type
                         (common-lisp:or cluster-name-list common-lisp:null)
                         :accessor %describe-clusters-request-cluster-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-request
                    'make-describe-clusters-request))
 (common-lisp:defun make-describe-clusters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-names)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-names))
      (common-lisp:list
       (common-lisp:cons "ClusterNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-response common-lisp:nil
                       ((clusters :initarg :clusters :type
                         (common-lisp:or cluster-list common-lisp:null)
                         :accessor %describe-clusters-response-clusters
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-clusters-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-response
                    'make-describe-clusters-response))
 (common-lisp:defun make-describe-clusters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key clusters next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "Clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-default-parameters-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-default-parameters-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-default-parameters-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-default-parameters-request
                    'make-describe-default-parameters-request))
 (common-lisp:defun make-describe-default-parameters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-default-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-default-parameters-response common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameter-list common-lisp:null)
                         :accessor
                         %describe-default-parameters-response-parameters
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-default-parameters-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-default-parameters-response
                    'make-describe-default-parameters-response))
 (common-lisp:defun make-describe-default-parameters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-default-parameters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-parameters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-events-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-events-request-max-results
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-events-request-duration :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %describe-events-request-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %describe-events-request-start-time :initform
                         common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %describe-events-request-source-type
                         :initform common-lisp:nil)
                        (source-name :initarg :source-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-events-request-source-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-events-request 'make-describe-events-request))
 (common-lisp:defun make-describe-events-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results duration end-time
                     start-time source-type source-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-response common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %describe-events-response-events :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-events-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-events-response 'make-describe-events-response))
 (common-lisp:defun make-describe-events-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameter-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-parameter-groups-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-parameter-groups-request-max-results
                         :initform common-lisp:nil)
                        (parameter-group-names :initarg :parameter-group-names
                         :type
                         (common-lisp:or parameter-group-name-list
                                         common-lisp:null)
                         :accessor
                         %describe-parameter-groups-request-parameter-group-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-parameter-groups-request
                    'make-describe-parameter-groups-request))
 (common-lisp:defun make-describe-parameter-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     parameter-group-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-parameter-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-names))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameter-groups-response common-lisp:nil
                       ((parameter-groups :initarg :parameter-groups :type
                         (common-lisp:or parameter-group-list common-lisp:null)
                         :accessor
                         %describe-parameter-groups-response-parameter-groups
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-parameter-groups-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-parameter-groups-response
                    'make-describe-parameter-groups-response))
 (common-lisp:defun make-describe-parameter-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-groups next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-parameter-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-groups))
      (common-lisp:list
       (common-lisp:cons "ParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameter-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameters-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-parameters-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-parameters-request-max-results
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-parameters-request-source :initform
                         common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-parameters-request-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-parameters-request
                    'make-describe-parameters-request))
 (common-lisp:defun make-describe-parameters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results source
                     parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameters-response common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameter-list common-lisp:null)
                         :accessor %describe-parameters-response-parameters
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-parameters-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-parameters-response
                    'make-describe-parameters-response))
 (common-lisp:defun make-describe-parameters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-parameters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-subnet-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-subnet-groups-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-subnet-groups-request-max-results
                         :initform common-lisp:nil)
                        (subnet-group-names :initarg :subnet-group-names :type
                         (common-lisp:or subnet-group-name-list
                                         common-lisp:null)
                         :accessor
                         %describe-subnet-groups-request-subnet-group-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-subnet-groups-request
                    'make-describe-subnet-groups-request))
 (common-lisp:defun make-describe-subnet-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     subnet-group-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-subnet-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-names))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-subnet-groups-response common-lisp:nil
                       ((subnet-groups :initarg :subnet-groups :type
                         (common-lisp:or subnet-group-list common-lisp:null)
                         :accessor
                         %describe-subnet-groups-response-subnet-groups
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-subnet-groups-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-subnet-groups-response
                    'make-describe-subnet-groups-response))
 (common-lisp:defun make-describe-subnet-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-groups next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-subnet-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-groups))
      (common-lisp:list
       (common-lisp:cons "SubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnet-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %endpoint-url :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %endpoint-port :initform common-lisp:nil)
                        (address :initarg :address :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %endpoint-address :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defun make-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url port address)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "URL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((date :initarg :date :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %event-date :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-message :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %event-source-type :initform
                         common-lisp:nil)
                        (source-name :initarg :source-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-source-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defun make-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date message source-type source-name)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass increase-replication-factor-request common-lisp:nil
                       ((availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor
                         %increase-replication-factor-request-availability-zones
                         :initform common-lisp:nil)
                        (new-replication-factor :initarg
                         :new-replication-factor :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %increase-replication-factor-request-new-replication-factor
                         :initform
                         (common-lisp:error
                          ":new-replication-factor is required"))
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %increase-replication-factor-request-cluster-name
                         :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'increase-replication-factor-request
                    'make-increase-replication-factor-request))
 (common-lisp:defun make-increase-replication-factor-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zones new-replication-factor
                     cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'increase-replication-factor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-replication-factor))
      (common-lisp:list
       (common-lisp:cons "NewReplicationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass increase-replication-factor-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %increase-replication-factor-response-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'increase-replication-factor-response
                    'make-increase-replication-factor-response))
 (common-lisp:defun make-increase-replication-factor-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'increase-replication-factor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-replication-factor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition insufficient-cluster-capacity-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-cluster-capacity-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-arnfault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-arnfault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-state-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-combination-exception
     (dax-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-combination-exception
                    'invalid-parameter-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-group-state-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (dax-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:deftype is-modifiable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-tags-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-request-next-token :initform
                         common-lisp:nil)
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-request-resource-name :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defun make-list-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-response-next-token :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-response-tags :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defun make-list-tags-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node common-lisp:nil
                       ((parameter-group-status :initarg
                         :parameter-group-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %node-parameter-group-status :initform
                         common-lisp:nil)
                        (node-status :initarg :node-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %node-node-status :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %node-availability-zone :initform common-lisp:nil)
                        (node-create-time :initarg :node-create-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %node-node-create-time :initform common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         %node-endpoint :initform common-lisp:nil)
                        (node-id :initarg :node-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %node-node-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defun make-node
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group-status node-status
                     availability-zone node-create-time endpoint node-id)
   (common-lisp:apply #'common-lisp:make-instance 'node
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-create-time))
      (common-lisp:list
       (common-lisp:cons "NodeCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-status))
      (common-lisp:list
       (common-lisp:cons "NodeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-node-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-list () '(trivial-types:proper-list node))
 (common-lisp:defun |make-node-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition node-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'node-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-cluster-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'node-quota-for-cluster-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition node-quota-for-customer-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'node-quota-for-customer-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass node-type-specific-value common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %node-type-specific-value-value :initform
                         common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %node-type-specific-value-node-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'node-type-specific-value 'make-node-type-specific-value))
 (common-lisp:defun make-node-type-specific-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value node-type)
   (common-lisp:apply #'common-lisp:make-instance 'node-type-specific-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-type-specific-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-type-specific-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-type-specific-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-type-specific-value-list ()
   '(trivial-types:proper-list node-type-specific-value))
 (common-lisp:defun |make-node-type-specific-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-type-specific-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass notification-configuration common-lisp:nil
                       ((topic-status :initarg :topic-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %notification-configuration-topic-status :initform
                         common-lisp:nil)
                        (topic-arn :initarg :topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %notification-configuration-topic-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defun make-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-status topic-arn)
   (common-lisp:apply #'common-lisp:make-instance 'notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-status))
      (common-lisp:list
       (common-lisp:cons "TopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((change-type :initarg :change-type :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor %parameter-change-type :initform
                         common-lisp:nil)
                        (is-modifiable :initarg :is-modifiable :type
                         (common-lisp:or is-modifiable common-lisp:null)
                         :accessor %parameter-is-modifiable :initform
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-allowed-values :initform common-lisp:nil)
                        (data-type :initarg :data-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-data-type :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-source :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-description :initform common-lisp:nil)
                        (node-type-specific-values :initarg
                         :node-type-specific-values :type
                         (common-lisp:or node-type-specific-value-list
                                         common-lisp:null)
                         :accessor %parameter-node-type-specific-values
                         :initform common-lisp:nil)
                        (parameter-value :initarg :parameter-value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-parameter-value :initform common-lisp:nil)
                        (parameter-type :initarg :parameter-type :type
                         (common-lisp:or parameter-type common-lisp:null)
                         :accessor %parameter-parameter-type :initform
                         common-lisp:nil)
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-parameter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defun make-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-type is-modifiable allowed-values
                     data-type source description node-type-specific-values
                     parameter-value parameter-type parameter-name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-type))
      (common-lisp:list
       (common-lisp:cons "ParameterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-type-specific-values))
      (common-lisp:list
       (common-lisp:cons "NodeTypeSpecificValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-group common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-group-description :initform
                         common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %parameter-group-parameter-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parameter-group 'make-parameter-group))
 (common-lisp:defun make-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition parameter-group-already-exists-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype parameter-group-list ()
   '(trivial-types:proper-list parameter-group))
 (common-lisp:defun |make-parameter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parameter-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-parameter-group-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition parameter-group-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition parameter-group-quota-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass parameter-group-status common-lisp:nil
                       ((node-ids-to-reboot :initarg :node-ids-to-reboot :type
                         (common-lisp:or node-identifier-list common-lisp:null)
                         :accessor %parameter-group-status-node-ids-to-reboot
                         :initform common-lisp:nil)
                        (parameter-apply-status :initarg
                         :parameter-apply-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-group-status-parameter-apply-status
                         :initform common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %parameter-group-status-parameter-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-group-status 'make-parameter-group-status))
 (common-lisp:defun make-parameter-group-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-ids-to-reboot parameter-apply-status
                     parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-group-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids-to-reboot))
      (common-lisp:list
       (common-lisp:cons "NodeIdsToReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-list () '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter-name-value common-lisp:nil
                       ((parameter-value :initarg :parameter-value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-name-value-parameter-value :initform
                         common-lisp:nil)
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-name-value-parameter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-name-value 'make-parameter-name-value))
 (common-lisp:defun make-parameter-name-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-value parameter-name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-name-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-name-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-name-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-name-value-list ()
   '(trivial-types:proper-list parameter-name-value))
 (common-lisp:defun |make-parameter-name-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-name-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parameter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reboot-node-request common-lisp:nil
                       ((node-id :initarg :node-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reboot-node-request-node-id :initform
                         (common-lisp:error ":node-id is required"))
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reboot-node-request-cluster-name :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'reboot-node-request 'make-reboot-node-request))
 (common-lisp:defun make-reboot-node-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-id cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-node-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot-node-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot-node-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot-node-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-node-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %reboot-node-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reboot-node-response 'make-reboot-node-response))
 (common-lisp:defun make-reboot-node-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-node-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot-node-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot-node-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot-node-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ssedescription common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or ssestatus common-lisp:null) :accessor
                         %ssedescription-status :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ssedescription 'make-ssedescription))
 (common-lisp:defun make-ssedescription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'ssedescription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssedescription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssedescription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssedescription))
   common-lisp:nil))
(common-lisp:deftype sseenabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass ssespecification common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or sseenabled common-lisp:null) :accessor
                         %ssespecification-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'ssespecification 'make-ssespecification))
 (common-lisp:defun make-ssespecification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'ssespecification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssespecification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssespecification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssespecification))
   common-lisp:nil))
(common-lisp:deftype ssestatus () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-security-group-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass security-group-membership common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %security-group-membership-status :initform
                         common-lisp:nil)
                        (security-group-identifier :initarg
                         :security-group-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %security-group-membership-security-group-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'security-group-membership
                    'make-security-group-membership))
 (common-lisp:defun make-security-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status security-group-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'security-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-membership-list ()
   '(trivial-types:proper-list security-group-membership))
 (common-lisp:defun |make-security-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-linked-role-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-linked-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-quota-exceeded-exception)))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subnet common-lisp:nil
                       ((subnet-availability-zone :initarg
                         :subnet-availability-zone :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-subnet-availability-zone :initform
                         common-lisp:nil)
                        (subnet-identifier :initarg :subnet-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-subnet-identifier :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defun make-subnet
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-availability-zone
                     subnet-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'subnet
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subnet-group common-lisp:nil
                       ((subnets :initarg :subnets :type
                         (common-lisp:or subnet-list common-lisp:null)
                         :accessor %subnet-group-subnets :initform
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-group-vpc-id :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-group-description :initform common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-group-subnet-group-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'subnet-group 'make-subnet-group))
 (common-lisp:defun make-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnets vpc-id description
                     subnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'subnet-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-already-exists-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-in-use-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-in-use-fault)))
(common-lisp:progn
 (common-lisp:deftype subnet-group-list ()
   '(trivial-types:proper-list subnet-group))
 (common-lisp:defun |make-subnet-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-group-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subnet-group-quota-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-in-use
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-quota-exceeded-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-quota-exceeded-fault)))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-not-found-fault
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition tag-quota-per-resource-exceeded
     (dax-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-quota-per-resource-exceeded)))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-resource-request-resource-name :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or key-list common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %untag-resource-request-resource-name :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %untag-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-request common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-identifier-list
                                         common-lisp:null)
                         :accessor %update-cluster-request-security-group-ids
                         :initform common-lisp:nil)
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %update-cluster-request-parameter-group-name
                         :initform common-lisp:nil)
                        (notification-topic-status :initarg
                         :notification-topic-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-notification-topic-status
                         :initform common-lisp:nil)
                        (notification-topic-arn :initarg
                         :notification-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-notification-topic-arn
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-description :initform
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-cluster-name :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cluster-request 'make-update-cluster-request))
 (common-lisp:defun make-update-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids parameter-group-name
                     notification-topic-status notification-topic-arn
                     preferred-maintenance-window description cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-status))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %update-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-response 'make-update-cluster-response))
 (common-lisp:defun make-update-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-parameter-group-request common-lisp:nil
                       ((parameter-name-values :initarg :parameter-name-values
                         :type
                         (common-lisp:or parameter-name-value-list
                                         common-lisp:null)
                         :accessor
                         %update-parameter-group-request-parameter-name-values
                         :initform
                         (common-lisp:error
                          ":parameter-name-values is required"))
                        (parameter-group-name :initarg :parameter-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %update-parameter-group-request-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-parameter-group-request
                    'make-update-parameter-group-request))
 (common-lisp:defun make-update-parameter-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-name-values
                     parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-parameter-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-name-values))
      (common-lisp:list
       (common-lisp:cons "ParameterNameValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-parameter-group-response common-lisp:nil
                       ((parameter-group :initarg :parameter-group :type
                         (common-lisp:or parameter-group common-lisp:null)
                         :accessor
                         %update-parameter-group-response-parameter-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-parameter-group-response
                    'make-update-parameter-group-response))
 (common-lisp:defun make-update-parameter-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-parameter-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-group))
      (common-lisp:list
       (common-lisp:cons "ParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parameter-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subnet-group-request common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor %update-subnet-group-request-subnet-ids
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-subnet-group-request-description :initform
                         common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-subnet-group-request-subnet-group-name
                         :initform
                         (common-lisp:error
                          ":subnet-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-subnet-group-request
                    'make-update-subnet-group-request))
 (common-lisp:defun make-update-subnet-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids description subnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-subnet-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subnet-group-response common-lisp:nil
                       ((subnet-group :initarg :subnet-group :type
                         (common-lisp:or subnet-group common-lisp:null)
                         :accessor %update-subnet-group-response-subnet-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-subnet-group-response
                    'make-update-subnet-group-response))
 (common-lisp:defun make-update-subnet-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-group)
   (common-lisp:apply #'common-lisp:make-instance 'update-subnet-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group))
      (common-lisp:list
       (common-lisp:cons "SubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name node-type description
                     replication-factor availability-zones subnet-group-name
                     security-group-ids preferred-maintenance-window
                     notification-topic-arn iam-role-arn parameter-group-name
                     tags ssespecification cluster-endpoint-encryption-type)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name node-type description
     replication-factor availability-zones subnet-group-name security-group-ids
     preferred-maintenance-window notification-topic-arn iam-role-arn
     parameter-group-name tags ssespecification
     cluster-endpoint-encryption-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateCluster"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name description)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateParameterGroup"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable subnet-group-name description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subnet-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateSubnetGroup"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subnet-group))
(common-lisp:progn
 (common-lisp:defun decrease-replication-factor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name new-replication-factor
                     availability-zones node-ids-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name new-replication-factor
     availability-zones node-ids-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-decrease-replication-factor-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DecreaseReplicationFactor"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'decrease-replication-factor))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteCluster"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteParameterGroup"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name)
   (common-lisp:declare (common-lisp:ignorable subnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subnet-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteSubnetGroup"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subnet-group))
(common-lisp:progn
 (common-lisp:defun describe-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-names max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-names max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeClusters"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-clusters))
(common-lisp:progn
 (common-lisp:defun describe-default-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-default-parameters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDefaultParameters"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-default-parameters))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-name source-type start-time
                     end-time duration max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable source-name source-type start-time end-time duration
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEvents"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-names max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-names max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-parameter-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeParameterGroups"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name source max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name source max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-parameters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeParameters"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-parameters))
(common-lisp:progn
 (common-lisp:defun describe-subnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-names max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable subnet-group-names max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-subnet-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSubnetGroups"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-subnet-groups))
(common-lisp:progn
 (common-lisp:defun increase-replication-factor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name new-replication-factor
                     availability-zones)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name new-replication-factor
     availability-zones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-increase-replication-factor-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "IncreaseReplicationFactor"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'increase-replication-factor))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name next-token)
   (common-lisp:declare (common-lisp:ignorable resource-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTags"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun reboot-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name node-id)
   (common-lisp:declare (common-lisp:ignorable cluster-name node-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-node-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RebootNode"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reboot-node))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name description
                     preferred-maintenance-window notification-topic-arn
                     notification-topic-status parameter-group-name
                     security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name description
     preferred-maintenance-window notification-topic-arn
     notification-topic-status parameter-group-name security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateCluster"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster))
(common-lisp:progn
 (common-lisp:defun update-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name
                     parameter-name-values)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name parameter-name-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-parameter-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateParameterGroup"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-parameter-group))
(common-lisp:progn
 (common-lisp:defun update-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-group-name description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable subnet-group-name description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-subnet-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dax-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateSubnetGroup"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subnet-group))
